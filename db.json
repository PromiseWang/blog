{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/images/day01/image-20230920140818304.png","path":"images/day01/image-20230920140818304.png","modified":0,"renderable":0},{"_id":"source/images/day01/image-20230920152650727.png","path":"images/day01/image-20230920152650727.png","modified":0,"renderable":0},{"_id":"source/images/day01/image-20230920152855240.png","path":"images/day01/image-20230920152855240.png","modified":0,"renderable":0},{"_id":"source/images/day01/image-20230920153829216.png","path":"images/day01/image-20230920153829216.png","modified":0,"renderable":0},{"_id":"source/images/day02/image-20230921130326208.png","path":"images/day02/image-20230921130326208.png","modified":0,"renderable":0},{"_id":"source/images/day04/142_1.jpeg","path":"images/day04/142_1.jpeg","modified":0,"renderable":0},{"_id":"source/images/day04/160_1.png","path":"images/day04/160_1.png","modified":0,"renderable":0},{"_id":"source/images/day04/160_2.png","path":"images/day04/160_2.png","modified":0,"renderable":0},{"_id":"source/images/day04/160_3.png","path":"images/day04/160_3.png","modified":0,"renderable":0},{"_id":"source/images/day04/IMG_1373.PNG","path":"images/day04/IMG_1373.PNG","modified":0,"renderable":0},{"_id":"source/images/day04/IMG_1372.PNG","path":"images/day04/IMG_1372.PNG","modified":0,"renderable":0},{"_id":"source/images/day04/IMG_2D422EDB0DFC-1.jpeg","path":"images/day04/IMG_2D422EDB0DFC-1.jpeg","modified":0,"renderable":0},{"_id":"source/images/day04/QQ20230923-221152.png","path":"images/day04/QQ20230923-221152.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMPnext1.png","path":"images/day09/KMPnext1.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMPnext2.png","path":"images/day09/KMPnext2.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMPnext4.png","path":"images/day09/KMPnext4.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMPnext3.png","path":"images/day09/KMPnext3.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMPnext5.png","path":"images/day09/KMPnext5.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMPnext6.png","path":"images/day09/KMPnext6.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMPnext7.png","path":"images/day09/KMPnext7.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配10.png","path":"images/day09/KMP匹配10.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配1.png","path":"images/day09/KMP匹配1.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配11.png","path":"images/day09/KMP匹配11.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配12.png","path":"images/day09/KMP匹配12.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配2.png","path":"images/day09/KMP匹配2.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配3.png","path":"images/day09/KMP匹配3.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配4.png","path":"images/day09/KMP匹配4.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配5.png","path":"images/day09/KMP匹配5.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配7.png","path":"images/day09/KMP匹配7.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配9.png","path":"images/day09/KMP匹配9.png","modified":0,"renderable":0},{"_id":"source/images/day09/KMP匹配8.png","path":"images/day09/KMP匹配8.png","modified":0,"renderable":0},{"_id":"source/images/day09/next数组构建.mp4","path":"images/day09/next数组构建.mp4","modified":0,"renderable":0},{"_id":"source/images/day09/匹配.mp4","path":"images/day09/匹配.mp4","modified":0,"renderable":0},{"_id":"source/images/day07/使用全局变量leetcode.png","path":"images/day07/使用全局变量leetcode.png","modified":0,"renderable":0},{"_id":"source/images/day08/反转2(1).png","path":"images/day08/反转2(1).png","modified":0,"renderable":0},{"_id":"source/images/day08/反转字符串.png","path":"images/day08/反转字符串.png","modified":0,"renderable":0},{"_id":"source/images/day08/字符串移位.png","path":"images/day08/字符串移位.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/128卡住.png","path":"images/【debug】Java中的map比较/128卡住.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/26随机字母报错.png","path":"images/【debug】Java中的map比较/26随机字母报错.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/26字母.png","path":"images/【debug】Java中的map比较/26字母.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/3000多长度.png","path":"images/【debug】Java中的map比较/3000多长度.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/6次扩增.png","path":"images/【debug】Java中的map比较/6次扩增.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/hashST.png","path":"images/【debug】Java中的map比较/hashST.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/java_map_debug.jpg","path":"images/【debug】Java中的map比较/java_map_debug.jpg","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/map源码.png","path":"images/【debug】Java中的map比较/map源码.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/初步解决.png","path":"images/【debug】Java中的map比较/初步解决.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/展示代码.png","path":"images/【debug】Java中的map比较/展示代码.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/断点调试.png","path":"images/【debug】Java中的map比较/断点调试.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/最后一个127.png","path":"images/【debug】Java中的map比较/最后一个127.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/短测试用例.png","path":"images/【debug】Java中的map比较/短测试用例.png","modified":0,"renderable":0},{"_id":"source/images/【debug】Java中的map比较/第一个127.png","path":"images/【debug】Java中的map比较/第一个127.png","modified":0,"renderable":0},{"_id":"source/images/【study】Leetcode中Go语言第三方包/Leetcode中的Go.png","path":"images/【study】Leetcode中Go语言第三方包/Leetcode中的Go.png","modified":0,"renderable":0},{"_id":"source/images/【study】Leetcode中Go语言第三方包/Leetcode支持Go的第三方库.png","path":"images/【study】Leetcode中Go语言第三方包/Leetcode支持Go的第三方库.png","modified":0,"renderable":0},{"_id":"source/images/day18/力扣106.mp4","path":"images/day18/力扣106.mp4","modified":0,"renderable":0},{"_id":"source/images/day20/二叉树公共祖先.mp4","path":"images/day20/二叉树公共祖先.mp4","modified":0,"renderable":0},{"_id":"source/images/day21/二叉排序树删除元素.mp4","path":"images/day21/二叉排序树删除元素.mp4","modified":0,"renderable":0},{"_id":"source/images/day25/说明.png","path":"images/day25/说明.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/Fildder1.png","path":"images/【debug】记一次失败的爬虫经历/Fildder1.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/POST.png","path":"images/【debug】记一次失败的爬虫经历/POST.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/Wrong.png","path":"images/【debug】记一次失败的爬虫经历/Wrong.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/下载页面.png","path":"images/【debug】记一次失败的爬虫经历/下载页面.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/分析HTML.png","path":"images/【debug】记一次失败的爬虫经历/分析HTML.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/哪个表达基因.png","path":"images/【debug】记一次失败的爬虫经历/哪个表达基因.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/正常操作抓包.png","path":"images/【debug】记一次失败的爬虫经历/正常操作抓包.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/网页截图.png","path":"images/【debug】记一次失败的爬虫经历/网页截图.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/网页截图2.png","path":"images/【debug】记一次失败的爬虫经历/网页截图2.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/获取factors.png","path":"images/【debug】记一次失败的爬虫经历/获取factors.png","modified":0,"renderable":0},{"_id":"source/images/【debug】记一次失败的爬虫经历/获取id.png","path":"images/【debug】记一次失败的爬虫经历/获取id.png","modified":0,"renderable":0},{"_id":"source/images/Gee1/curl.png","path":"images/Gee1/curl.png","modified":0,"renderable":0},{"_id":"source/images/Gee1/helloHandler.png","path":"images/Gee1/helloHandler.png","modified":0,"renderable":0},{"_id":"source/images/Gee1/url_path.png","path":"images/Gee1/url_path.png","modified":0,"renderable":0},{"_id":"source/images/Gee1/curl2.png","path":"images/Gee1/curl2.png","modified":0,"renderable":0},{"_id":"source/images/【study】Python高并发编程/获取一支股票的信息.png","path":"images/【study】Python高并发编程/获取一支股票的信息.png","modified":0,"renderable":0},{"_id":"source/images/【study】Python高并发编程/获取股票代码.png","path":"images/【study】Python高并发编程/获取股票代码.png","modified":0,"renderable":0},{"_id":"source/images/【study】Python高并发编程/屎山代码.png","path":"images/【study】Python高并发编程/屎山代码.png","modified":0,"renderable":0},{"_id":"source/images/springDay01/logger自定义输出@2x.png","path":"images/springDay01/logger自定义输出@2x.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/IoC.png","path":"images/springDay02/IoC.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/set注入结果.png","path":"images/springDay02/set注入结果.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/有参注入结果.png","path":"images/springDay02/有参注入结果.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/特殊类型注入结果.png","path":"images/springDay02/特殊类型注入结果.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/auto注入1.png","path":"images/springDay02/auto注入1.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/bean生命周期输出1.png","path":"images/springDay02/bean生命周期输出1.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/bean生命周期输出2.png","path":"images/springDay02/bean生命周期输出2.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/bean生命周期输出3.png","path":"images/springDay02/bean生命周期输出3.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/factoryBean输出结果.png","path":"images/springDay02/factoryBean输出结果.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/list类型属性.png","path":"images/springDay02/list类型属性.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/map类型属性.png","path":"images/springDay02/map类型属性.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/p命名空间.png","path":"images/springDay02/p命名空间.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/ref结果1.png","path":"images/springDay02/ref结果1.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/ref结果2.png","path":"images/springDay02/ref结果2.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/单实例输出结果.png","path":"images/springDay02/单实例输出结果.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/多实例输出结果.png","path":"images/springDay02/多实例输出结果.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/数组类型属性.png","path":"images/springDay02/数组类型属性.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/外部引入结果.png","path":"images/springDay02/外部引入结果.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/环境准备.png","path":"images/springDay02/环境准备.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/简单测试输出.png","path":"images/springDay02/简单测试输出.png","modified":0,"renderable":0},{"_id":"source/images/springDay02/自动注入结果.png","path":"images/springDay02/自动注入结果.png","modified":0,"renderable":0},{"_id":"source/images/springPart03/Component注解输出1.png","path":"images/springPart03/Component注解输出1.png","modified":0,"renderable":0},{"_id":"source/images/springPart03/autowired结果输出.png","path":"images/springPart03/autowired结果输出.png","modified":0,"renderable":0},{"_id":"source/images/springPart03/qualifier结果输出.png","path":"images/springPart03/qualifier结果输出.png","modified":0,"renderable":0},{"_id":"source/images/springPart04/获取构造方法.png","path":"images/springPart04/获取构造方法.png","modified":0,"renderable":0},{"_id":"source/images/springPart04/流程.png","path":"images/springPart04/流程.png","modified":0,"renderable":0},{"_id":"source/images/springPart05/xml各种通知测试.png","path":"images/springPart05/xml各种通知测试.png","modified":0,"renderable":0},{"_id":"source/images/springPart05/代理模式.jpeg","path":"images/springPart05/代理模式.jpeg","modified":0,"renderable":0},{"_id":"source/images/springPart05/代理模式.png","path":"images/springPart05/代理模式.png","modified":0,"renderable":0},{"_id":"source/images/springPart05/切入点表达式.png","path":"images/springPart05/切入点表达式.png","modified":0,"renderable":0},{"_id":"source/images/springPart05/切面.png","path":"images/springPart05/切面.png","modified":0,"renderable":0},{"_id":"source/images/springPart05/前置通知.png","path":"images/springPart05/前置通知.png","modified":0,"renderable":0},{"_id":"source/images/springPart05/动态代理输出结果.png","path":"images/springPart05/动态代理输出结果.png","modified":0,"renderable":0},{"_id":"source/images/springPart05/各种通知测试.png","path":"images/springPart05/各种通知测试.png","modified":0,"renderable":0},{"_id":"source/images/springPart05/横切关注点.png","path":"images/springPart05/横切关注点.png","modified":0,"renderable":0},{"_id":"source/images/springPart05/通知（增强）.png","path":"images/springPart05/通知（增强）.png","modified":0,"renderable":0},{"_id":"source/images/springPart06/MySQL新增几条数据.png","path":"images/springPart06/MySQL新增几条数据.png","modified":0,"renderable":0},{"_id":"source/images/springPart06/修改MySQL结果.png","path":"images/springPart06/修改MySQL结果.png","modified":0,"renderable":0},{"_id":"source/images/springPart06/删除数据MySQL结果.png","path":"images/springPart06/删除数据MySQL结果.png","modified":0,"renderable":0},{"_id":"source/images/springPart06/图书表结果1.png","path":"images/springPart06/图书表结果1.png","modified":0,"renderable":0},{"_id":"source/images/springPart06/图书表结果2.png","path":"images/springPart06/图书表结果2.png","modified":0,"renderable":0},{"_id":"source/images/springPart06/新增数据MySQL结果.png","path":"images/springPart06/新增数据MySQL结果.png","modified":0,"renderable":0},{"_id":"source/images/springPart06/新增数据spring结果.png","path":"images/springPart06/新增数据spring结果.png","modified":0,"renderable":0},{"_id":"source/images/springPart06/用户表结果1.png","path":"images/springPart06/用户表结果1.png","modified":0,"renderable":0},{"_id":"source/images/springPart06/返回List类型.png","path":"images/springPart06/返回List类型.png","modified":0,"renderable":0},{"_id":"source/images/springPart06/返回对象类型.png","path":"images/springPart06/返回对象类型.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/SSM技术栈.png","path":"images/springMVCPart01/SSM技术栈.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/SpringMVC请求流程.png","path":"images/springMVCPart01/SpringMVC请求流程.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/helloSpringMVC.png","path":"images/springMVCPart01/helloSpringMVC.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/list不加注解报错.png","path":"images/springMVCPart01/list不加注解报错.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/idea添加工件.png","path":"images/springMVCPart01/idea添加工件.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/list添加注解但是问号.png","path":"images/springMVCPart01/list添加注解但是问号.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/415报错.png","path":"images/springMVCPart01/415报错.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/mvc接收参数结果1.png","path":"images/springMVCPart01/mvc接收参数结果1.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/tomcat.png","path":"images/springMVCPart01/tomcat.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/tomcat2.png","path":"images/springMVCPart01/tomcat2.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/实体对象.png","path":"images/springMVCPart01/实体对象.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/更改为web项目.png","path":"images/springMVCPart01/更改为web项目.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/注解指定结果.png","path":"images/springMVCPart01/注解指定结果.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/添加注解控制台.png","path":"images/springMVCPart01/添加注解控制台.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/路径参数.png","path":"images/springMVCPart01/路径参数.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart01/部署.png","path":"images/springMVCPart01/部署.png","modified":0,"renderable":0},{"_id":"source/images/发票识别/1.png","path":"images/发票识别/1.png","modified":0,"renderable":0},{"_id":"source/images/发票识别/2.png","path":"images/发票识别/2.png","modified":0,"renderable":0},{"_id":"source/images/springMVCPart03/开发流程.png","path":"images/springMVCPart03/开发流程.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/【debug】Java中的map比较.md","hash":"b5e0fe8b0f2c67dbc03c40e4788cf40bb7c17036","modified":1696419852879},{"_id":"source/.DS_Store","hash":"1406bfdabee4186d38bfa8e355450ee5200b5be4","modified":1710925959554},{"_id":"source/_posts/.DS_Store","hash":"6f2411436eae175fbe0b3ec15b3e786c85d1fd28","modified":1710920502420},{"_id":"source/_posts/代码随想录算法训练营第一天-704-二分查找、27-移除元素。.md","hash":"23069878aedb4d5c4a75cb581877e123d1c5c0dc","modified":1695269866913},{"_id":"source/_posts/代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。.md","hash":"107f677152d7272d12ba9306625278d2cd1d60c2","modified":1695475875582},{"_id":"source/_posts/代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串.md","hash":"2cebf02e4eb35723795b59cd4751b2889f1bface","modified":1696078941380},{"_id":"source/_posts/代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。.md","hash":"5e6268c1cf99c396590da27107a073a6e7684c8d","modified":1695274072718},{"_id":"source/_posts/代码随想录算法训练营第七天 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。.md","hash":"cdefd3f5891fca95814036fe6263a88490853e97","modified":1696074061176},{"_id":"source/_posts/搭建博客.md","hash":"8c4e1e9bfdcc15d9882e016ace90f1d9c9fd0794","modified":1695197231011},{"_id":"source/_posts/第八天.md","hash":"71a37fdbc5ca6ff5e7c49411bab94a6c9aad8f1c","modified":1696074201123},{"_id":"source/_posts/代码随想录算法训练营第五天 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。.md","hash":"9969c22501407cab197da7682922aed8fbd205f6","modified":1695650879806},{"_id":"source/_posts/代码随想录算法训练营第四天 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。.md","hash":"a7e5090f52690c26aef0aa0b8c84e0267034eac7","modified":1695482493498},{"_id":"source/images/.DS_Store","hash":"9cfb51c287fe9ff39ca27a2e5d7bc9d42ed1f5e4","modified":1707563123859},{"_id":"source/images/160_2.png","hash":"3d3830ce2c2e0944091fe48b20c24654eb0143d9","modified":1695479155340},{"_id":"source/images/160_1.png","hash":"e9db3e4c052ea224f9a661b699f5bb80de937e3b","modified":1695479126871},{"_id":"source/images/160_3.png","hash":"ef60d0dfdd231db0b81d36ee2e3359340ff7a596","modified":1695479177166},{"_id":"source/images/QQ20230923-221152.png","hash":"110563a2562c75533359dc832bcf71ab1cb7d156","modified":1695478324074},{"_id":"source/images/image-20230920153829216.png","hash":"86f2ec92f9ec6370210701ebd7faa8d1a3db7e4d","modified":1695195509217},{"_id":"source/images/image-20230920152855240.png","hash":"ca5682d47af90699a8c373f0f39c81615458f540","modified":1695194935241},{"_id":"source/images/image-20230920152650727.png","hash":"e826a246f6a13fe01f2bfd7c51d4408b327dcda2","modified":1695194810729},{"_id":"source/images/image-20230920140818304.png","hash":"bdfe8feaf3bda356eff067e271baa909f1d2e03c","modified":1695190098306},{"_id":"source/images/反转2(1).png","hash":"5cf84b548e9b4fc37f13e6ebb68cb972e235b61e","modified":1695882972308},{"_id":"source/images/image-20230921130326208.png","hash":"865d4ca858ce0621a307e8d1dc7f5c25155abee9","modified":1695272606210},{"_id":"source/images/字符串移位.png","hash":"97ac8ffdbe481160cd230c45786c0cd7b4da1c15","modified":1695884398794},{"_id":"source/images/反转字符串.png","hash":"dd585da8af1ae7952560ae93abb2f153892d4bfa","modified":1695882502812},{"_id":"source/images/map源码.png","hash":"75e0f8380b27985024419f58e48b09bc1c246bc6","modified":1695654607151},{"_id":"source/images/KMP/.DS_Store","hash":"5c0a439a3a3d180dc6afde5c18833c65ef36d548","modified":1696075520671},{"_id":"source/images/128卡住.png","hash":"9a61aa70b017f4b7d2d05e42b6cd4da2ab3538f1","modified":1695654120359},{"_id":"source/images/6次扩增.png","hash":"d12c74116de8b3f08908decb8855ea21b0ab9723","modified":1695653740769},{"_id":"source/images/26字母.png","hash":"29271a6f5b3e8ce3c1c52c36e2bca476ab262257","modified":1695653163095},{"_id":"source/images/IMG_1373.PNG","hash":"f19763b2036f15bef073a6779603e43690a006d8","modified":1695477277819},{"_id":"source/images/26随机字母报错.png","hash":"376d09c5dcfd15932ce7a5174c3a16e39e8490fc","modified":1695654391249},{"_id":"source/images/IMG_1372.PNG","hash":"7375e14c158d95e0ec6919f6762fa1c04795dc83","modified":1695477306818},{"_id":"source/images/hashST.png","hash":"92bd46ab15de3ac4a65280be6f4d352bb07a68d4","modified":1695651994489},{"_id":"source/images/初步解决.png","hash":"0ec7279cade8f6a28dea8f547defa86b75b46886","modified":1695652590873},{"_id":"source/images/3000多长度.png","hash":"d5a112b8b3478da1ce432aa6d34943ddfa406400","modified":1695653498712},{"_id":"source/images/展示代码.png","hash":"5a52e895d150af19646cb53503bf0bd1216bf8e6","modified":1695654027396},{"_id":"source/images/最后一个127.png","hash":"1f4a817e01a2978270c6ec4785d685e9f4bd13ae","modified":1695654758436},{"_id":"source/images/使用全局变量leetcode.png","hash":"cece39035fc2f5a143ed2679743df9ed000442b6","modified":1695751048583},{"_id":"source/images/KMP/KMPnext1.png","hash":"df1f9b323464e3a639b1073c0825abadbfcd1ae2","modified":1696075325374},{"_id":"source/images/第一个127.png","hash":"fbf9261d722577f156e02cfd1a124259312840c8","modified":1695654746801},{"_id":"source/images/断点调试.png","hash":"fa347933231e862d859626149f887240b2ebe3ec","modified":1695652276547},{"_id":"source/images/KMP/KMPnext4.png","hash":"6890835e6816803519e160ef000060ee7279bd07","modified":1696076553502},{"_id":"source/images/短测试用例.png","hash":"ae307f3a366450efab4e79c9bcca368729169a1c","modified":1695652929890},{"_id":"source/images/KMP/KMPnext2.png","hash":"59487c8f5a8446f4f1bff2c5bc82f6568fa98c89","modified":1696076916822},{"_id":"source/images/KMP/KMPnext5.png","hash":"465847e8e29a4193709c3fd0de6ef7e0de21d906","modified":1696076514316},{"_id":"source/images/KMP/KMPnext6.png","hash":"6b8f9eb866a9539c52c603c2d38a03c53b8c1b78","modified":1696076459147},{"_id":"source/images/KMP/KMP匹配1.png","hash":"9fc08f5dd0fa81de949461215739845e63b1558f","modified":1696068637418},{"_id":"source/images/KMP/KMP匹配11.png","hash":"04c55c8d7f6d4616a2e243c1546ee71d595f88c6","modified":1696069087698},{"_id":"source/images/KMP/KMP匹配10.png","hash":"435fe4c12333dadf7b8fb0ca31ce267682e0d9ec","modified":1696069060772},{"_id":"source/images/KMP/KMP匹配3.png","hash":"4fbc04fc457cdf91703236f5e757650b916e9711","modified":1696068698487},{"_id":"source/images/KMP/KMP匹配12.png","hash":"4d0ea5345a73ed4b9d90701c068c6316714f6a49","modified":1696069205175},{"_id":"source/images/KMP/KMPnext3.png","hash":"9d39b34a42b26f76d3f80eb74487b0f18606df56","modified":1696075820877},{"_id":"source/images/KMP/KMP匹配2.png","hash":"b1cbeafff7d2c41b478a11055c16599f6335d096","modified":1696068669468},{"_id":"source/images/KMP/KMPnext7.png","hash":"72fbb5086a5bcac111f7a305cd1d46c325eedd62","modified":1696076381354},{"_id":"source/images/KMP/KMP匹配4.png","hash":"b51cd76c1a0ed03a98bf49a9c130fd3c1afccbce","modified":1696068739655},{"_id":"source/images/KMP/KMP匹配5.png","hash":"7b5584c8717897ffe8ac094fc729d33de9f42cae","modified":1696068758470},{"_id":"source/images/KMP/KMP匹配7.png","hash":"b6c47ade642d2e6ae1bc90ac7ae71ecc684cdeb8","modified":1696068954161},{"_id":"source/images/KMP/KMP匹配8.png","hash":"6e7c377b27ef6dcff049860ede38ac664942b1d4","modified":1696069002333},{"_id":"source/images/KMP/KMP匹配9.png","hash":"cad99f271af8817ee1bf3de1c0e245ce243c2b44","modified":1696069029980},{"_id":"source/images/IMG_2D422EDB0DFC-1.jpeg","hash":"bfeb9a29caec870c972de6b0b94c578ac28cb2c5","modified":1695477944000},{"_id":"source/images/142_1.jpeg","hash":"3a06e3ec4e13da1586faa781edc623e7a7269372","modified":1695480741000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1695132290000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1695132290000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1695132290000},{"_id":"themes/fluid/.DS_Store","hash":"20927a5b314f8087b31dee66a2c8855201ea8148","modified":1695656565243},{"_id":"themes/fluid/package.json","hash":"41983970c0977b3c626c3f1e3c714cf78ac6a04e","modified":1695132290000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1695132290000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1695132290000},{"_id":"themes/fluid/README.md","hash":"088496f29af0e946055ebd781fa312685335139c","modified":1695132290000},{"_id":"themes/fluid/README_en.md","hash":"49541d4ec48c4b517c5b3fe17a2e92d87090d007","modified":1695132290000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1695132290000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1695132290000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1695132290000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1695132290000},{"_id":"themes/fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1695132290000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1695132290000},{"_id":"themes/fluid/_config.yml","hash":"17101716317566968f77a20c93a0f224dff1b147","modified":1695136568000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1695132290000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1695132290000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1695132290000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1695132290000},{"_id":"themes/fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1695132290000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1695132290000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1695132290000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1695132290000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1695132290000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1695132290000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1695132290000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1695132290000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1695132290000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1695132290000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1695132290000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1695132290000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1695132290000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1695132290000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1695132290000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1695132290000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1695132290000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1695132290000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"d56878d8fa700763cff0706acdb7c749c523bc58","modified":1697687713255},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1695132290000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1695132290000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1695132290000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1695132290000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1695132290000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1695132290000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1695132290000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1695132290000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1695132290000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1695132290000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1695132290000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1695132290000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1695132290000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1695132290000},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1695132290000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1695132290000},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1695132290000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1695132290000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1695132290000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1695132290000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1695132290000},{"_id":"source/images/java_map_debug.jpg","hash":"02ea44bee15523d5dbebc1de2ec107a7ed6fce1c","modified":1695645182516},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1695132290000},{"_id":"source/images/KMP/next数组构建.mp4","hash":"18d68ce187ed2ddb3176303d44c66c05e35e4082","modified":1696077080077},{"_id":"source/images/KMP/匹配.mp4","hash":"0ef7ddbd6e5310d1be1764496f354ef77b2aed3c","modified":1696070210540},{"_id":"public/local-search.xml","hash":"db96f39d32754665d285f4176b0b75b2f7ad4acc","modified":1712153480811},{"_id":"public/archives/index.html","hash":"458d05a149c3be98985208684e1b72788803e79c","modified":1712153480811},{"_id":"public/archives/2023/index.html","hash":"90d58a69da71b4b5a030f81a779c4f5b3af1dfe6","modified":1712153480811},{"_id":"public/archives/2023/09/index.html","hash":"09c40ed64b6c2d5454126063d8197cce812afc37","modified":1712153480811},{"_id":"public/categories/Debug/index.html","hash":"1e41a8b7d4f9817facdaa3c0eb0a45ae16b187f3","modified":1712153480811},{"_id":"public/categories/刷题/index.html","hash":"ca290d8459850cb67e0614bebb57c3ac7bbc35fd","modified":1712153480811},{"_id":"public/categories/搭建环境/index.html","hash":"db85e5f9d87c35566b5ad5bdf6562f735051d6bf","modified":1712153480811},{"_id":"public/tags/Debug/index.html","hash":"71bcde5d240165b9b1cae2d4175aa18688fad099","modified":1712153480811},{"_id":"public/tags/LeetCode/index.html","hash":"f5fb0cc5cd67b9c26473323cf82fd9910ee0f8cd","modified":1712153480811},{"_id":"public/tags/Java/index.html","hash":"eba10c1a7339c4ef031e05a8da9b1780f425493e","modified":1712153480811},{"_id":"public/tags/算法/index.html","hash":"b0c156c00d059c98d8f984ea0df6cecf3b409fb2","modified":1712153480811},{"_id":"public/tags/代码随想录/index.html","hash":"11c168aa506ad337b89c7a008a5c0bff8508f92c","modified":1712153480811},{"_id":"public/tags/教程/index.html","hash":"89ade8f9c65ab47442c9186d15a4faa1b33cad47","modified":1712153480811},{"_id":"public/404.html","hash":"79051ac5b6078ef49079b629020b6a464b60fac5","modified":1712153480811},{"_id":"public/tags/index.html","hash":"1102b8965088773431922629f6def589d9773115","modified":1712153480811},{"_id":"public/post/369230e4.html","hash":"9081a9a48e0d07ec72a0f2b3e5902f8a3ab1b620","modified":1712153480811},{"_id":"public/post/bc862a56.html","hash":"fe95c92b0e469dfbb195a27c83cfafd7284a02fd","modified":1712153480811},{"_id":"public/post/6416b651.html","hash":"604a530972b41c0092d3438274d756873d4b2379","modified":1712153480811},{"_id":"public/post/ad5be9d7.html","hash":"d3ff3f30b19e1cb76a4db426ba037d30fe398f91","modified":1712153480811},{"_id":"public/post/20198d61.html","hash":"20ee25d13e41586b5b5759e314d4e38bc8bf6a78","modified":1712153480811},{"_id":"public/post/b4e3c0b1.html","hash":"0455b416732d2af7b1fd3555b1dc693a32de418b","modified":1712153480811},{"_id":"public/post/bd069431.html","hash":"d1364e7c36cf38affae619a154026b213b2419de","modified":1712153480811},{"_id":"public/post/b79a1ea.html","hash":"99c9d257193981c9d6c9013a2f7abee8b5a4cc8c","modified":1712153480811},{"_id":"public/post/7b6fd36a.html","hash":"a1345ea1ad2d751fb265d4ba15b511d216248b4c","modified":1712153480811},{"_id":"public/post/5c83b0d3.html","hash":"f17f989869e5d5c91bc6f02953f6e755381501f5","modified":1712153480811},{"_id":"public/index.html","hash":"1137177316f7185a8ca05ea914f66c6f0cd8b98c","modified":1712153480811},{"_id":"public/categories/index.html","hash":"0dce7ab594763e53bd92ac965677c1071ccb5bdd","modified":1712153480811},{"_id":"public/links/index.html","hash":"01ad9361572a08b39f49b64ac8cd9d977d6a44ac","modified":1712153480811},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1696077706934},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1696077706934},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1696077706934},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1696077706934},{"_id":"public/images/160_1.png","hash":"e9db3e4c052ea224f9a661b699f5bb80de937e3b","modified":1696077706934},{"_id":"public/images/160_2.png","hash":"3d3830ce2c2e0944091fe48b20c24654eb0143d9","modified":1696077706934},{"_id":"public/images/160_3.png","hash":"ef60d0dfdd231db0b81d36ee2e3359340ff7a596","modified":1696077706934},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1696077706934},{"_id":"public/images/QQ20230923-221152.png","hash":"110563a2562c75533359dc832bcf71ab1cb7d156","modified":1696077706934},{"_id":"public/images/image-20230920140818304.png","hash":"bdfe8feaf3bda356eff067e271baa909f1d2e03c","modified":1696077706934},{"_id":"public/images/image-20230920152650727.png","hash":"e826a246f6a13fe01f2bfd7c51d4408b327dcda2","modified":1696077706934},{"_id":"public/images/image-20230920152855240.png","hash":"ca5682d47af90699a8c373f0f39c81615458f540","modified":1696077706934},{"_id":"public/images/image-20230920153829216.png","hash":"86f2ec92f9ec6370210701ebd7faa8d1a3db7e4d","modified":1696077706934},{"_id":"public/images/image-20230921130326208.png","hash":"865d4ca858ce0621a307e8d1dc7f5c25155abee9","modified":1696077706934},{"_id":"public/images/map源码.png","hash":"75e0f8380b27985024419f58e48b09bc1c246bc6","modified":1696077706934},{"_id":"public/images/反转字符串.png","hash":"dd585da8af1ae7952560ae93abb2f153892d4bfa","modified":1696077706934},{"_id":"public/images/字符串移位.png","hash":"97ac8ffdbe481160cd230c45786c0cd7b4da1c15","modified":1696077706934},{"_id":"public/images/反转2(1).png","hash":"5cf84b548e9b4fc37f13e6ebb68cb972e235b61e","modified":1696077706934},{"_id":"public/images/128卡住.png","hash":"9a61aa70b017f4b7d2d05e42b6cd4da2ab3538f1","modified":1696077706934},{"_id":"public/images/26字母.png","hash":"29271a6f5b3e8ce3c1c52c36e2bca476ab262257","modified":1696077706934},{"_id":"public/images/26随机字母报错.png","hash":"376d09c5dcfd15932ce7a5174c3a16e39e8490fc","modified":1696077706934},{"_id":"public/images/3000多长度.png","hash":"d5a112b8b3478da1ce432aa6d34943ddfa406400","modified":1696077706934},{"_id":"public/images/6次扩增.png","hash":"d12c74116de8b3f08908decb8855ea21b0ab9723","modified":1696077706934},{"_id":"public/images/IMG_1372.PNG","hash":"7375e14c158d95e0ec6919f6762fa1c04795dc83","modified":1696077706934},{"_id":"public/images/IMG_1373.PNG","hash":"f19763b2036f15bef073a6779603e43690a006d8","modified":1696077706934},{"_id":"public/images/hashST.png","hash":"92bd46ab15de3ac4a65280be6f4d352bb07a68d4","modified":1696077706934},{"_id":"public/images/使用全局变量leetcode.png","hash":"cece39035fc2f5a143ed2679743df9ed000442b6","modified":1696077706934},{"_id":"public/images/初步解决.png","hash":"0ec7279cade8f6a28dea8f547defa86b75b46886","modified":1696077706934},{"_id":"public/images/断点调试.png","hash":"fa347933231e862d859626149f887240b2ebe3ec","modified":1696077706934},{"_id":"public/images/最后一个127.png","hash":"1f4a817e01a2978270c6ec4785d685e9f4bd13ae","modified":1696077706934},{"_id":"public/images/第一个127.png","hash":"fbf9261d722577f156e02cfd1a124259312840c8","modified":1696077706934},{"_id":"public/images/展示代码.png","hash":"5a52e895d150af19646cb53503bf0bd1216bf8e6","modified":1696077706934},{"_id":"public/images/KMP/KMPnext1.png","hash":"df1f9b323464e3a639b1073c0825abadbfcd1ae2","modified":1696077706934},{"_id":"public/images/KMP/KMPnext2.png","hash":"59487c8f5a8446f4f1bff2c5bc82f6568fa98c89","modified":1696077706934},{"_id":"public/images/KMP/KMPnext3.png","hash":"9d39b34a42b26f76d3f80eb74487b0f18606df56","modified":1696077706934},{"_id":"public/images/KMP/KMPnext4.png","hash":"6890835e6816803519e160ef000060ee7279bd07","modified":1696077706934},{"_id":"public/images/KMP/KMPnext5.png","hash":"465847e8e29a4193709c3fd0de6ef7e0de21d906","modified":1696077706934},{"_id":"public/images/短测试用例.png","hash":"ae307f3a366450efab4e79c9bcca368729169a1c","modified":1696077706934},{"_id":"public/images/KMP/KMPnext6.png","hash":"6b8f9eb866a9539c52c603c2d38a03c53b8c1b78","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配1.png","hash":"9fc08f5dd0fa81de949461215739845e63b1558f","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配11.png","hash":"04c55c8d7f6d4616a2e243c1546ee71d595f88c6","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配10.png","hash":"435fe4c12333dadf7b8fb0ca31ce267682e0d9ec","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配12.png","hash":"4d0ea5345a73ed4b9d90701c068c6316714f6a49","modified":1696077706934},{"_id":"public/images/KMP/KMPnext7.png","hash":"72fbb5086a5bcac111f7a305cd1d46c325eedd62","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配2.png","hash":"b1cbeafff7d2c41b478a11055c16599f6335d096","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配3.png","hash":"4fbc04fc457cdf91703236f5e757650b916e9711","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配4.png","hash":"b51cd76c1a0ed03a98bf49a9c130fd3c1afccbce","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配7.png","hash":"b6c47ade642d2e6ae1bc90ac7ae71ecc684cdeb8","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配8.png","hash":"6e7c377b27ef6dcff049860ede38ac664942b1d4","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配9.png","hash":"cad99f271af8817ee1bf3de1c0e245ce243c2b44","modified":1696077706934},{"_id":"public/images/KMP/KMP匹配5.png","hash":"7b5584c8717897ffe8ac094fc729d33de9f42cae","modified":1696077706934},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1696077706934},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1696077706934},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1696077706934},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1696077706934},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1696077706934},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1696077706934},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1696077706934},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1696077706934},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1696077706934},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1696077706934},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1696077706934},{"_id":"public/css/main.css","hash":"526a4522eb54bb51772f51fb98295dc4fe03429f","modified":1696077706934},{"_id":"public/images/IMG_2D422EDB0DFC-1.jpeg","hash":"bfeb9a29caec870c972de6b0b94c578ac28cb2c5","modified":1696077706934},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1696077706934},{"_id":"public/images/142_1.jpeg","hash":"3a06e3ec4e13da1586faa781edc623e7a7269372","modified":1696077706934},{"_id":"public/images/java_map_debug.jpg","hash":"02ea44bee15523d5dbebc1de2ec107a7ed6fce1c","modified":1696077706934},{"_id":"public/images/KMP/next数组构建.mp4","hash":"18d68ce187ed2ddb3176303d44c66c05e35e4082","modified":1696077706934},{"_id":"public/images/KMP/匹配.mp4","hash":"0ef7ddbd6e5310d1be1764496f354ef77b2aed3c","modified":1696077706934},{"_id":"source/_posts/day01.md","hash":"b1d19cd6123dea95226463daaf43940ff3f9ae62","modified":1698175855964},{"_id":"source/_posts/day02.md","hash":"bf2a1a69089c5592198c61806f8e0154f5c1fd6f","modified":1698175877511},{"_id":"source/_posts/day04.md","hash":"5a3b661f72f92f2c11ac4e60bd41c5b55316410b","modified":1698175922656},{"_id":"source/_posts/day06.md","hash":"d61ff468a596c537479ef1c2c47f690a3535ceb5","modified":1698175941281},{"_id":"source/_posts/day03.md","hash":"52a92f18f90940b7a0baa615e1d57cd47320e8b4","modified":1698175896360},{"_id":"source/_posts/day08.md","hash":"523940ca1c2a42a3cb71a2457d507fae7e4362d4","modified":1698176029667},{"_id":"source/_posts/day07.md","hash":"fea598ae13d3a378795de32e119cd0f05450013c","modified":1698175955683},{"_id":"source/_posts/day09.md","hash":"eeaffdc9f5cd9420acadee1843473b5dadc73f0f","modified":1698176043270},{"_id":"source/_posts/day10.md","hash":"e078da99d1afc984e299d96e5e47b9bdaa8f0dd0","modified":1698176068354},{"_id":"source/images/day01/image-20230920140818304.png","hash":"bdfe8feaf3bda356eff067e271baa909f1d2e03c","modified":1695398735172},{"_id":"source/images/day01/image-20230920152650727.png","hash":"e826a246f6a13fe01f2bfd7c51d4408b327dcda2","modified":1695398735172},{"_id":"source/images/day01/image-20230920152855240.png","hash":"ca5682d47af90699a8c373f0f39c81615458f540","modified":1695398735173},{"_id":"source/images/day01/image-20230920153829216.png","hash":"86f2ec92f9ec6370210701ebd7faa8d1a3db7e4d","modified":1695398735173},{"_id":"source/images/day02/image-20230921130326208.png","hash":"865d4ca858ce0621a307e8d1dc7f5c25155abee9","modified":1695398735174},{"_id":"source/images/day04/160_1.png","hash":"e9db3e4c052ea224f9a661b699f5bb80de937e3b","modified":1696140957211},{"_id":"source/images/day04/160_2.png","hash":"3d3830ce2c2e0944091fe48b20c24654eb0143d9","modified":1696140957212},{"_id":"source/images/day04/160_3.png","hash":"ef60d0dfdd231db0b81d36ee2e3359340ff7a596","modified":1696140957212},{"_id":"source/images/day04/QQ20230923-221152.png","hash":"110563a2562c75533359dc832bcf71ab1cb7d156","modified":1696140957249},{"_id":"source/images/day08/反转2(1).png","hash":"5cf84b548e9b4fc37f13e6ebb68cb972e235b61e","modified":1696140957258},{"_id":"source/images/day08/反转字符串.png","hash":"dd585da8af1ae7952560ae93abb2f153892d4bfa","modified":1696140957258},{"_id":"source/images/day08/字符串移位.png","hash":"97ac8ffdbe481160cd230c45786c0cd7b4da1c15","modified":1696140957259},{"_id":"source/images/【debug】Java中的map比较/map源码.png","hash":"75e0f8380b27985024419f58e48b09bc1c246bc6","modified":1696140957256},{"_id":"source/images/day04/IMG_1373.PNG","hash":"f19763b2036f15bef073a6779603e43690a006d8","modified":1696140957217},{"_id":"source/images/day04/IMG_1372.PNG","hash":"7375e14c158d95e0ec6919f6762fa1c04795dc83","modified":1696140957216},{"_id":"source/images/day09/KMPnext1.png","hash":"df1f9b323464e3a639b1073c0825abadbfcd1ae2","modified":1696140957220},{"_id":"source/images/day09/KMPnext2.png","hash":"59487c8f5a8446f4f1bff2c5bc82f6568fa98c89","modified":1696140957221},{"_id":"source/images/day09/KMPnext4.png","hash":"6890835e6816803519e160ef000060ee7279bd07","modified":1696140957223},{"_id":"source/images/day09/KMPnext3.png","hash":"9d39b34a42b26f76d3f80eb74487b0f18606df56","modified":1696140957222},{"_id":"source/images/day09/KMPnext6.png","hash":"6b8f9eb866a9539c52c603c2d38a03c53b8c1b78","modified":1696140957224},{"_id":"source/images/day09/KMPnext5.png","hash":"465847e8e29a4193709c3fd0de6ef7e0de21d906","modified":1696140957224},{"_id":"source/images/day09/KMPnext7.png","hash":"72fbb5086a5bcac111f7a305cd1d46c325eedd62","modified":1696140957226},{"_id":"source/images/day09/KMP匹配10.png","hash":"435fe4c12333dadf7b8fb0ca31ce267682e0d9ec","modified":1696140957227},{"_id":"source/images/day09/KMP匹配1.png","hash":"9fc08f5dd0fa81de949461215739845e63b1558f","modified":1696140957227},{"_id":"source/images/day09/KMP匹配11.png","hash":"04c55c8d7f6d4616a2e243c1546ee71d595f88c6","modified":1696140957228},{"_id":"source/images/day09/KMP匹配12.png","hash":"4d0ea5345a73ed4b9d90701c068c6316714f6a49","modified":1696140957229},{"_id":"source/images/day09/KMP匹配2.png","hash":"b1cbeafff7d2c41b478a11055c16599f6335d096","modified":1696140957230},{"_id":"source/images/day09/KMP匹配3.png","hash":"4fbc04fc457cdf91703236f5e757650b916e9711","modified":1696140957231},{"_id":"source/images/day09/KMP匹配4.png","hash":"b51cd76c1a0ed03a98bf49a9c130fd3c1afccbce","modified":1696140957231},{"_id":"source/images/day09/KMP匹配5.png","hash":"7b5584c8717897ffe8ac094fc729d33de9f42cae","modified":1696140957232},{"_id":"source/images/day09/KMP匹配7.png","hash":"b6c47ade642d2e6ae1bc90ac7ae71ecc684cdeb8","modified":1696140957233},{"_id":"source/images/day09/KMP匹配9.png","hash":"cad99f271af8817ee1bf3de1c0e245ce243c2b44","modified":1696140957235},{"_id":"source/images/day09/KMP匹配8.png","hash":"6e7c377b27ef6dcff049860ede38ac664942b1d4","modified":1696140957234},{"_id":"source/images/day07/使用全局变量leetcode.png","hash":"cece39035fc2f5a143ed2679743df9ed000442b6","modified":1696140957257},{"_id":"source/images/【debug】Java中的map比较/128卡住.png","hash":"9a61aa70b017f4b7d2d05e42b6cd4da2ab3538f1","modified":1696140957206},{"_id":"source/images/【debug】Java中的map比较/26随机字母报错.png","hash":"376d09c5dcfd15932ce7a5174c3a16e39e8490fc","modified":1696140957213},{"_id":"source/images/【debug】Java中的map比较/26字母.png","hash":"29271a6f5b3e8ce3c1c52c36e2bca476ab262257","modified":1696140957213},{"_id":"source/images/【debug】Java中的map比较/3000多长度.png","hash":"d5a112b8b3478da1ce432aa6d34943ddfa406400","modified":1696140957214},{"_id":"source/images/【debug】Java中的map比较/hashST.png","hash":"92bd46ab15de3ac4a65280be6f4d352bb07a68d4","modified":1696140957250},{"_id":"source/images/【debug】Java中的map比较/6次扩增.png","hash":"d12c74116de8b3f08908decb8855ea21b0ab9723","modified":1696140957215},{"_id":"source/images/【debug】Java中的map比较/初步解决.png","hash":"0ec7279cade8f6a28dea8f547defa86b75b46886","modified":1696140957258},{"_id":"source/images/【debug】Java中的map比较/展示代码.png","hash":"5a52e895d150af19646cb53503bf0bd1216bf8e6","modified":1696140957260},{"_id":"source/images/【debug】Java中的map比较/断点调试.png","hash":"fa347933231e862d859626149f887240b2ebe3ec","modified":1696140957261},{"_id":"source/images/【debug】Java中的map比较/最后一个127.png","hash":"1f4a817e01a2978270c6ec4785d685e9f4bd13ae","modified":1696140957262},{"_id":"source/images/【debug】Java中的map比较/短测试用例.png","hash":"ae307f3a366450efab4e79c9bcca368729169a1c","modified":1696140957262},{"_id":"source/images/【debug】Java中的map比较/第一个127.png","hash":"fbf9261d722577f156e02cfd1a124259312840c8","modified":1696140957263},{"_id":"source/images/day04/IMG_2D422EDB0DFC-1.jpeg","hash":"bfeb9a29caec870c972de6b0b94c578ac28cb2c5","modified":1696140957219},{"_id":"source/images/day04/142_1.jpeg","hash":"3a06e3ec4e13da1586faa781edc623e7a7269372","modified":1696140957211},{"_id":"source/images/【debug】Java中的map比较/java_map_debug.jpg","hash":"02ea44bee15523d5dbebc1de2ec107a7ed6fce1c","modified":1696140957256},{"_id":"source/images/day09/next数组构建.mp4","hash":"18d68ce187ed2ddb3176303d44c66c05e35e4082","modified":1696140957240},{"_id":"source/images/day09/匹配.mp4","hash":"0ef7ddbd6e5310d1be1764496f354ef77b2aed3c","modified":1696140957249},{"_id":"public/archives/page/2/index.html","hash":"1c916f8fb0231e560115cf2006510e5644036697","modified":1712153480811},{"_id":"public/archives/2023/page/2/index.html","hash":"ba59918b0d42bc6eb205a81576734991ed3e26e0","modified":1712153480811},{"_id":"public/archives/2023/10/index.html","hash":"7664bde053b710627f32c599c0f36b6369684204","modified":1712153480811},{"_id":"public/page/2/index.html","hash":"6bbd47685707377939d96e2f0cf06c3ceaeabe7d","modified":1712153480811},{"_id":"public/post/a8d0ca77.html","hash":"8bce8849b075b6c23d1788fe3fb479e69e476b25","modified":1712153480811},{"_id":"public/images/day01/image-20230920140818304.png","hash":"bdfe8feaf3bda356eff067e271baa909f1d2e03c","modified":1696180712773},{"_id":"public/images/day01/image-20230920152855240.png","hash":"ca5682d47af90699a8c373f0f39c81615458f540","modified":1696180712773},{"_id":"public/images/day01/image-20230920152650727.png","hash":"e826a246f6a13fe01f2bfd7c51d4408b327dcda2","modified":1696180712773},{"_id":"public/images/day01/image-20230920153829216.png","hash":"86f2ec92f9ec6370210701ebd7faa8d1a3db7e4d","modified":1696180712773},{"_id":"public/images/day04/160_2.png","hash":"3d3830ce2c2e0944091fe48b20c24654eb0143d9","modified":1696180712773},{"_id":"public/images/day04/160_1.png","hash":"e9db3e4c052ea224f9a661b699f5bb80de937e3b","modified":1696180712773},{"_id":"public/images/day02/image-20230921130326208.png","hash":"865d4ca858ce0621a307e8d1dc7f5c25155abee9","modified":1696180712773},{"_id":"public/images/day04/160_3.png","hash":"ef60d0dfdd231db0b81d36ee2e3359340ff7a596","modified":1696180712773},{"_id":"public/images/day04/QQ20230923-221152.png","hash":"110563a2562c75533359dc832bcf71ab1cb7d156","modified":1696180712773},{"_id":"public/images/day08/反转字符串.png","hash":"dd585da8af1ae7952560ae93abb2f153892d4bfa","modified":1696180712773},{"_id":"public/images/day08/反转2(1).png","hash":"5cf84b548e9b4fc37f13e6ebb68cb972e235b61e","modified":1696180712773},{"_id":"public/images/day08/字符串移位.png","hash":"97ac8ffdbe481160cd230c45786c0cd7b4da1c15","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/map源码.png","hash":"75e0f8380b27985024419f58e48b09bc1c246bc6","modified":1696180712773},{"_id":"public/images/day04/IMG_1372.PNG","hash":"7375e14c158d95e0ec6919f6762fa1c04795dc83","modified":1696180712773},{"_id":"public/images/day09/KMPnext1.png","hash":"df1f9b323464e3a639b1073c0825abadbfcd1ae2","modified":1696180712773},{"_id":"public/images/day09/KMPnext4.png","hash":"6890835e6816803519e160ef000060ee7279bd07","modified":1696180712773},{"_id":"public/images/day09/KMPnext2.png","hash":"59487c8f5a8446f4f1bff2c5bc82f6568fa98c89","modified":1696180712773},{"_id":"public/images/day04/IMG_1373.PNG","hash":"f19763b2036f15bef073a6779603e43690a006d8","modified":1696180712773},{"_id":"public/images/day09/KMPnext3.png","hash":"9d39b34a42b26f76d3f80eb74487b0f18606df56","modified":1696180712773},{"_id":"public/images/day09/KMPnext5.png","hash":"465847e8e29a4193709c3fd0de6ef7e0de21d906","modified":1696180712773},{"_id":"public/images/day09/KMPnext6.png","hash":"6b8f9eb866a9539c52c603c2d38a03c53b8c1b78","modified":1696180712773},{"_id":"public/images/day09/KMP匹配11.png","hash":"04c55c8d7f6d4616a2e243c1546ee71d595f88c6","modified":1696180712773},{"_id":"public/images/day09/KMP匹配1.png","hash":"9fc08f5dd0fa81de949461215739845e63b1558f","modified":1696180712773},{"_id":"public/images/day09/KMP匹配10.png","hash":"435fe4c12333dadf7b8fb0ca31ce267682e0d9ec","modified":1696180712773},{"_id":"public/images/day09/KMP匹配12.png","hash":"4d0ea5345a73ed4b9d90701c068c6316714f6a49","modified":1696180712773},{"_id":"public/images/day09/KMPnext7.png","hash":"72fbb5086a5bcac111f7a305cd1d46c325eedd62","modified":1696180712773},{"_id":"public/images/day09/KMP匹配4.png","hash":"b51cd76c1a0ed03a98bf49a9c130fd3c1afccbce","modified":1696180712773},{"_id":"public/images/day09/KMP匹配2.png","hash":"b1cbeafff7d2c41b478a11055c16599f6335d096","modified":1696180712773},{"_id":"public/images/day09/KMP匹配3.png","hash":"4fbc04fc457cdf91703236f5e757650b916e9711","modified":1696180712773},{"_id":"public/images/day09/KMP匹配5.png","hash":"7b5584c8717897ffe8ac094fc729d33de9f42cae","modified":1696180712773},{"_id":"public/images/day09/KMP匹配7.png","hash":"b6c47ade642d2e6ae1bc90ac7ae71ecc684cdeb8","modified":1696180712773},{"_id":"public/images/day09/KMP匹配8.png","hash":"6e7c377b27ef6dcff049860ede38ac664942b1d4","modified":1696180712773},{"_id":"public/images/day09/KMP匹配9.png","hash":"cad99f271af8817ee1bf3de1c0e245ce243c2b44","modified":1696180712773},{"_id":"public/images/day07/使用全局变量leetcode.png","hash":"cece39035fc2f5a143ed2679743df9ed000442b6","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/128卡住.png","hash":"9a61aa70b017f4b7d2d05e42b6cd4da2ab3538f1","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/26随机字母报错.png","hash":"376d09c5dcfd15932ce7a5174c3a16e39e8490fc","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/26字母.png","hash":"29271a6f5b3e8ce3c1c52c36e2bca476ab262257","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/hashST.png","hash":"92bd46ab15de3ac4a65280be6f4d352bb07a68d4","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/3000多长度.png","hash":"d5a112b8b3478da1ce432aa6d34943ddfa406400","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/6次扩增.png","hash":"d12c74116de8b3f08908decb8855ea21b0ab9723","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/初步解决.png","hash":"0ec7279cade8f6a28dea8f547defa86b75b46886","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/断点调试.png","hash":"fa347933231e862d859626149f887240b2ebe3ec","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/展示代码.png","hash":"5a52e895d150af19646cb53503bf0bd1216bf8e6","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/最后一个127.png","hash":"1f4a817e01a2978270c6ec4785d685e9f4bd13ae","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/第一个127.png","hash":"fbf9261d722577f156e02cfd1a124259312840c8","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/短测试用例.png","hash":"ae307f3a366450efab4e79c9bcca368729169a1c","modified":1696180712773},{"_id":"public/images/day04/IMG_2D422EDB0DFC-1.jpeg","hash":"bfeb9a29caec870c972de6b0b94c578ac28cb2c5","modified":1696180712773},{"_id":"public/images/day04/142_1.jpeg","hash":"3a06e3ec4e13da1586faa781edc623e7a7269372","modified":1696180712773},{"_id":"public/images/【debug】Java中的map比较/java_map_debug.jpg","hash":"02ea44bee15523d5dbebc1de2ec107a7ed6fce1c","modified":1696180712773},{"_id":"public/images/day09/next数组构建.mp4","hash":"18d68ce187ed2ddb3176303d44c66c05e35e4082","modified":1696180712773},{"_id":"public/images/day09/匹配.mp4","hash":"0ef7ddbd6e5310d1be1764496f354ef77b2aed3c","modified":1696180712773},{"_id":"source/_posts/day11.md","hash":"a117de54a354d251a63ccd6b0414062a5956c590","modified":1698176080776},{"_id":"public/tags/LeetCode/page/2/index.html","hash":"aa1ebe3514e0e4d6ecc81a25daa7259df44ced60","modified":1712153480811},{"_id":"public/post/bdbe1e6e.html","hash":"0a4e8470a08f1c33179b25e41fbb63b5b7f4cb18","modified":1712153480811},{"_id":"source/_posts/【study】Leetcode中Go语言第三方包.md","hash":"943bae0c6dbc465e3c404987392853a9c43cba0e","modified":1696336550313},{"_id":"source/images/【study】Leetcode中Go语言第三方包/Leetcode中的Go.png","hash":"f7b377f923eec20ff8398061a6c83ca3c90fc66e","modified":1696335778050},{"_id":"source/images/【study】Leetcode中Go语言第三方包/Leetcode支持Go的第三方库.png","hash":"b80cd26fa2d187d573349ee1fa6599add2ae77a1","modified":1696335887692},{"_id":"public/categories/Study/index.html","hash":"2c08f1dad5355912178689bb1645d76c5fbcbcf0","modified":1712153480811},{"_id":"public/tags/Study/index.html","hash":"4b8d3175052ba22856cae5caf106495b55210619","modified":1712153480811},{"_id":"public/tags/Go/index.html","hash":"be790cd014c7c562db759025edcc95cb45adb895","modified":1712153480811},{"_id":"public/post/2360e101.html","hash":"9825084bc360d1f82c54924f1264f5b51da4227a","modified":1712153480811},{"_id":"public/images/【study】Leetcode中Go语言第三方包/Leetcode中的Go.png","hash":"f7b377f923eec20ff8398061a6c83ca3c90fc66e","modified":1696336549884},{"_id":"public/images/【study】Leetcode中Go语言第三方包/Leetcode支持Go的第三方库.png","hash":"b80cd26fa2d187d573349ee1fa6599add2ae77a1","modified":1696336549884},{"_id":"source/_posts/day12.md","hash":"63802518571414e8ef79d46f099354f6f5362cba","modified":1698176090089},{"_id":"public/categories/刷题/page/2/index.html","hash":"966889570d83fab7c777e773119e084eddae95d8","modified":1712153480811},{"_id":"public/tags/算法/page/2/index.html","hash":"f86b208df8f2ea9c0a00102fd332a083a456dc54","modified":1712153480811},{"_id":"public/tags/代码随想录/page/2/index.html","hash":"be4bbc30d267bd80b45c6d9645be456070a92665","modified":1712153480811},{"_id":"public/post/9ab3b9d2.html","hash":"eb797d9f6402cec2a1f2ec12d0959fc9fa340945","modified":1712153480811},{"_id":"source/_posts/day13.md","hash":"64495a6f55cd2db5f54724dba8472c43b99a5993","modified":1698176098404},{"_id":"public/post/5d0ef500.html","hash":"e282acfda0b95323cfd1a8c1245f3e408db14642","modified":1712153480811},{"_id":"source/_posts/day14.md","hash":"d5e0d4e3f119d6349743da1bbfac55df1c38d5ac","modified":1698176103644},{"_id":"source/_posts/day15.md","hash":"0d3b3c0f1eb6cc32afe03318dc86e5fed6b2d11d","modified":1698176110134},{"_id":"public/post/e1408dd4.html","hash":"4e790dc5fdec559e8f3d318d43f2d27bcd90ee1e","modified":1712153480811},{"_id":"public/post/e2c426b8.html","hash":"d0c9f896e5ea30bda1dc0fd25af35e29b8b6e446","modified":1712153480811},{"_id":"source/_posts/day17.md","hash":"6a89c367a8d0428b2d353af88819ccb2052cb557","modified":1698176113701},{"_id":"public/post/467977b0.html","hash":"23bef3c0b0ca3bec78f302cd9dc34b541376eb46","modified":1712153480811},{"_id":"source/_posts/day18.md","hash":"a96e7753f67bd174f35c66a5f97b4e56c9c7a5f9","modified":1698176118347},{"_id":"source/images/day18/.DS_Store","hash":"3035b21efabbc5eb7c539244c50c4b32c5102216","modified":1697036112435},{"_id":"source/images/day18/中序后序建立树.mov","hash":"550ebe936321746f80603b44fff12ff917c7baa6","modified":1697034486221},{"_id":"public/post/de527742.html","hash":"c0e1cea30be21fbb100ffb1b8e6e80b07f43bc6f","modified":1712153480811},{"_id":"public/images/day18/中序后序建立树.mov","hash":"550ebe936321746f80603b44fff12ff917c7baa6","modified":1697034883857},{"_id":"source/images/day18/力扣106.mp4","hash":"7d574ddab9e644920ca886d9f0cada53285c1330","modified":1697035177340},{"_id":"public/images/day18/力扣106.mp4","hash":"7d574ddab9e644920ca886d9f0cada53285c1330","modified":1697035242031},{"_id":"source/_posts/day19.md","hash":"c37212854dae80f873be1a239daf2db59ca0d9d0","modified":1698176124017},{"_id":"public/post/38d5093a.html","hash":"bc7cdc7cbf0a5f42103aea6cdf2426ffba6e2323","modified":1712153480811},{"_id":"source/_posts/day20.md","hash":"22e8f0a40f7af78bdfa57b0879a915fd6bfc5090","modified":1698176129131},{"_id":"source/images/day20/二叉树公共祖先.mp4","hash":"ac16633f5b3a8bdd60c2911fdea18880db208134","modified":1697290048490},{"_id":"public/archives/page/3/index.html","hash":"1adf9cb58b3585fe9a2c5312b6b360d3795dc75a","modified":1712153480811},{"_id":"public/archives/2023/page/3/index.html","hash":"53da1e4c5ed10cd9497b1d1d84951531e3243664","modified":1712153480811},{"_id":"public/archives/2023/10/page/2/index.html","hash":"c3d1a0782f1d402cc699a59b555558798ababce0","modified":1712153480811},{"_id":"public/page/3/index.html","hash":"6ee2ca7d2ba4cfb0e9a63a7568eb26a1019bf30a","modified":1712153480811},{"_id":"public/post/80a9e5fb.html","hash":"fd780713c909f3b0169731f3e748cc2497002dc3","modified":1712153480811},{"_id":"public/images/day20/二叉树公共祖先.mp4","hash":"ac16633f5b3a8bdd60c2911fdea18880db208134","modified":1697290399998},{"_id":"source/_posts/day21.md","hash":"d67b356cd89dcf9affdebb8141148061a5768eaa","modified":1698176134380},{"_id":"source/images/day21/二叉排序树删除元素.mp4","hash":"5fff7ce57c394ba4dc5485384531a7b5b0814692","modified":1697296518000},{"_id":"public/tags/LeetCode/page/3/index.html","hash":"f56d0a8c102d3b8355191397736443e0c152031e","modified":1712153480811},{"_id":"public/post/1b36a0ee.html","hash":"ebd088a30b3ac46e6c4ba38d963bde86d61f1019","modified":1712153480811},{"_id":"public/images/day21/二叉排序树删除元素.mp4","hash":"5fff7ce57c394ba4dc5485384531a7b5b0814692","modified":1697296734225},{"_id":"source/_posts/day22.md","hash":"3c6e34f7c426afae2f618089e3fbc9bc426fdac6","modified":1698176138852},{"_id":"public/post/b6e45431.html","hash":"d3c253d0d12490956deace50b1b3f628a11b70ca","modified":1712153480811},{"_id":"source/_posts/day24.md","hash":"d75b4d5baad00027ca3c4863c843b3ad4b97c013","modified":1698176147559},{"_id":"public/categories/刷题/page/3/index.html","hash":"4044bd94694041f0aff3d995f7d2a447bc394b5e","modified":1712153480811},{"_id":"public/tags/算法/page/3/index.html","hash":"8db699e55d870225af5ce8bc2d0d45d84b808bde","modified":1712153480811},{"_id":"public/tags/代码随想录/page/3/index.html","hash":"9c5ce840b6bc0f09e42616439bf77ca3e53931f1","modified":1712153480811},{"_id":"public/post/9a97e05d.html","hash":"043aa0348588a4876fcfbd5ac22b0ba66099936b","modified":1712153480811},{"_id":"source/_posts/day25.md","hash":"b837baff23d76ae48b5b9e5d2046aa16e78a2f6a","modified":1698176151331},{"_id":"source/images/day25/说明.png","hash":"d71d1d99213d57473f9bbe7ad7f2178bc7aa0bfd","modified":1697520889630},{"_id":"public/post/5d63641c.html","hash":"4a204ea8f77b8420fea44751a9bc2e2b45ca9275","modified":1712153480811},{"_id":"public/images/day25/说明.png","hash":"d71d1d99213d57473f9bbe7ad7f2178bc7aa0bfd","modified":1697521151142},{"_id":"source/_posts/day26.md","hash":"cfe1483c7d45ff63eaa49b8961b643a1b4d2c580","modified":1698176154423},{"_id":"public/post/36f15375.html","hash":"0069a3caec30553b37eb06115a4f55b8790ec54d","modified":1712153480811},{"_id":"source/_posts/day27.md","hash":"c4a516a61dd6c3ea7460492fef19acd596c8a70b","modified":1698176159671},{"_id":"public/post/ff1e328.html","hash":"be76d886ccb6da3b8e70143d838af4b07339bada","modified":1712153480811},{"_id":"source/_posts/day28.md","hash":"186637967bafc0bc2c700b13c548d4d372261985","modified":1698176162732},{"_id":"public/post/70a8aaa7.html","hash":"4cc1735fba3327c226a21a7a167153f92f9f6db1","modified":1712153480811},{"_id":"source/_posts/【Dubug】记一次失败的爬虫经历.md","hash":"954fa792295bf67769a7b0c8ed8252fa9039c853","modified":1698169401142},{"_id":"source/_posts/day29.md","hash":"d2b237a9a1e1f1c2d30f2551d4d7d44869a854af","modified":1698169344401},{"_id":"source/_posts/【study】Python高并发编程.md","hash":"1a0a88c8a8095ec6bd62ea86070ed1e351f91bf7","modified":1705309714274},{"_id":"source/images/【debug】记一次失败的爬虫经历/.DS_Store","hash":"b6a630ed1f6542ce7e8c801bc275e5194c93e46b","modified":1698174738708},{"_id":"source/images/【debug】记一次失败的爬虫经历/Fildder1.png","hash":"a755fcdce14c8e680661e6aa20a74f73200a623a","modified":1698166525938},{"_id":"source/images/【debug】记一次失败的爬虫经历/下载页面.png","hash":"a7ec40f7ee35a2f0845020f6e87f016dee20d46d","modified":1698166380992},{"_id":"source/images/【debug】记一次失败的爬虫经历/哪个表达基因.png","hash":"6390b69eda39b2e1d652966c0c71844d0ff2e4a8","modified":1698168013195},{"_id":"source/images/【debug】记一次失败的爬虫经历/获取factors.png","hash":"436e503520e8c0773aa8a63fab1eb6c0d2ac8557","modified":1698167330093},{"_id":"source/images/【debug】记一次失败的爬虫经历/Wrong.png","hash":"86438371a223ad66f3b79c339c5027a257853c30","modified":1698168738747},{"_id":"source/images/【debug】记一次失败的爬虫经历/分析HTML.png","hash":"362a59df42933b1068d8b0a1cfa1b4f0acb9ca3a","modified":1698168368955},{"_id":"source/images/【debug】记一次失败的爬虫经历/网页截图2.png","hash":"ee5e0da7a79fe5de4e3ec0d8e25d56b6c84cbb20","modified":1698166302866},{"_id":"source/images/【debug】记一次失败的爬虫经历/获取id.png","hash":"6b84f5b78764ec6440cf0698ad9cbde6328e09c8","modified":1698167634663},{"_id":"source/images/【debug】记一次失败的爬虫经历/POST.png","hash":"98578472002bfdf71ebc09bbe772fc3183a4b56d","modified":1698168539948},{"_id":"source/images/【debug】记一次失败的爬虫经历/正常操作抓包.png","hash":"6f4ee023b37437813c3b0d9175eada1365bf7ae4","modified":1698166635870},{"_id":"source/images/【debug】记一次失败的爬虫经历/网页截图.png","hash":"de6d7e9bee75747ed8cec7434a901458ad258754","modified":1698166110963},{"_id":"public/archives/page/4/index.html","hash":"97947044591d1efb4e8ca88c1a01f6cb88fa144f","modified":1712153480811},{"_id":"public/archives/2023/page/4/index.html","hash":"e2c6c4748a91ea836806c721e92fe761a228bf83","modified":1712153480811},{"_id":"public/tags/Python/index.html","hash":"acd2c55274ec7f8095d3be26e59902ef9c0e3f1b","modified":1698169343903},{"_id":"public/tags/高并发编程/index.html","hash":"f2d365a341f19797a40120af0b9ce8e98b53e09b","modified":1698169343903},{"_id":"public/tags/进程/index.html","hash":"132eab4d68f656f427294bfe1e0f9dcfaf7a91c5","modified":1698169343903},{"_id":"public/tags/线程/index.html","hash":"2c9c7e172f311d12ccba1dccccff9c3dd316e7ad","modified":1698169343903},{"_id":"public/tags/协程/index.html","hash":"b8ec793325a89a8af086dd71d4e715d9a0913552","modified":1698169343903},{"_id":"public/tags/连接池/index.html","hash":"a0ea80f13d67577c0eb050bc354acd34f0ef6d15","modified":1698169343903},{"_id":"public/tags/线程池/index.html","hash":"3682561fc46f3e6b1fc4fd038214e7c430b383f0","modified":1698169343903},{"_id":"public/page/4/index.html","hash":"505a5d1d9b0111c113afedbcc0801b404f5bb0f4","modified":1712153480811},{"_id":"public/post/94786f20.html","hash":"1ebbaa7d5fc83991aab96b6352dc764bdcafa1cd","modified":1712153480811},{"_id":"public/post/c05f3950.html","hash":"44beeb89662d6dff40271b2366c7f63aa2bef248","modified":1698169343903},{"_id":"public/post/6e482275.html","hash":"efdf17b387f89d7f4ff66564249bf47b6ace72a9","modified":1705318604255},{"_id":"public/archives/2023/10/page/3/index.html","hash":"9fd7ef1331590a2a8ef5912d8eae5a698bb40eb8","modified":1712153480811},{"_id":"public/images/【debug】记一次失败的爬虫经历/Fildder1.png","hash":"a755fcdce14c8e680661e6aa20a74f73200a623a","modified":1698169343903},{"_id":"public/images/【debug】记一次失败的爬虫经历/哪个表达基因.png","hash":"6390b69eda39b2e1d652966c0c71844d0ff2e4a8","modified":1698169343903},{"_id":"public/images/【debug】记一次失败的爬虫经历/获取factors.png","hash":"436e503520e8c0773aa8a63fab1eb6c0d2ac8557","modified":1698169343903},{"_id":"public/images/【debug】记一次失败的爬虫经历/下载页面.png","hash":"a7ec40f7ee35a2f0845020f6e87f016dee20d46d","modified":1698169343903},{"_id":"public/images/【debug】记一次失败的爬虫经历/Wrong.png","hash":"86438371a223ad66f3b79c339c5027a257853c30","modified":1698169343903},{"_id":"public/images/【debug】记一次失败的爬虫经历/分析HTML.png","hash":"362a59df42933b1068d8b0a1cfa1b4f0acb9ca3a","modified":1698169343903},{"_id":"public/images/【debug】记一次失败的爬虫经历/网页截图2.png","hash":"ee5e0da7a79fe5de4e3ec0d8e25d56b6c84cbb20","modified":1698169343903},{"_id":"public/images/【debug】记一次失败的爬虫经历/获取id.png","hash":"6b84f5b78764ec6440cf0698ad9cbde6328e09c8","modified":1698169343903},{"_id":"public/images/【debug】记一次失败的爬虫经历/POST.png","hash":"98578472002bfdf71ebc09bbe772fc3183a4b56d","modified":1698169343903},{"_id":"public/images/【debug】记一次失败的爬虫经历/正常操作抓包.png","hash":"6f4ee023b37437813c3b0d9175eada1365bf7ae4","modified":1698169343903},{"_id":"public/images/【debug】记一次失败的爬虫经历/网页截图.png","hash":"de6d7e9bee75747ed8cec7434a901458ad258754","modified":1698169343903},{"_id":"source/_posts/day31.md","hash":"cbedef2f194b06a9fb35df006ce819c8395c5194","modified":1698176828269},{"_id":"public/tags/数组/index.html","hash":"eb0a753c800b791c1060257c3bdab9eeba72f357","modified":1712153480811},{"_id":"public/tags/链表/index.html","hash":"a79350728367d45949aa3164845b9eb724b1e0ee","modified":1712153480811},{"_id":"public/tags/哈希表/index.html","hash":"21f2e114c4d90dfe71194fed2533a469100fc358","modified":1712153480811},{"_id":"public/tags/字符串/index.html","hash":"0bfe2f1fceb74540397d20545c6241fc3c4e75c9","modified":1712153480811},{"_id":"public/tags/栈与队列/index.html","hash":"a71e5a3a14b57c79904663cbb1f9cdd138f3cd2e","modified":1712153480811},{"_id":"public/tags/二叉树/index.html","hash":"d45eb92a205a18448db55806b1954cef5dc1bd18","modified":1712153480811},{"_id":"public/tags/回溯算法/index.html","hash":"c954f02412f93277da4792f9b564cb9feedae3b7","modified":1712153480811},{"_id":"public/tags/贪心算法/index.html","hash":"aebab5bfe2c0b4405633cd8394476bb38ebc3438","modified":1712153480811},{"_id":"public/post/5aa98f1b.html","hash":"1da3169e093ca607ac4611bc1882f16a5197eb82","modified":1712153480811},{"_id":"source/_posts/day32.md","hash":"e91f66a46332e5526fe5e62ef8755e79de9cc087","modified":1698181194262},{"_id":"source/_posts/README.md","hash":"426c499f67c41ff665c179dd38f9b8f0f76251a5","modified":1698179450168},{"_id":"public/post/0.html","hash":"935345ac670205f46316485acc8a740f61e738ed","modified":1698181193968},{"_id":"public/post/4486d5e0.html","hash":"f9baccdfad36b594f6bdae2693b702c0e757db1c","modified":1712153480811},{"_id":"source/_posts/day33.md","hash":"dcd2fcc2fd0fc1f4cfaf5f7040f2f1d5858157d3","modified":1698226700343},{"_id":"public/post/af9e53d4.html","hash":"d39494d887f61aaa19de2d4941e1f04bbfcc0e7d","modified":1712153480811},{"_id":"source/_posts/【Study】Go语言动手写Web框架-Gee第一天.md","hash":"ab356abf5b46785eb1a5e62ce7f0bad066a28724","modified":1705318588301},{"_id":"source/images/Gee1/curl.png","hash":"934b7d4ac89e63043b46675d07af9c18be63bdb6","modified":1705245527889},{"_id":"source/images/Gee1/url_path.png","hash":"0489a245c7afa471bc525493693ec1e72583c1cd","modified":1705245337502},{"_id":"source/images/Gee1/helloHandler.png","hash":"becee27386bea6a3e7ca2aa75d26d2ff0ae0c32d","modified":1705245383114},{"_id":"public/post/9ac00b9a.html","hash":"b531e7cef4170dc2e1845b0ae59e10b39280460c","modified":1712153480811},{"_id":"public/archives/2024/index.html","hash":"c92581bd335f1e74df06b8de6446e539ab85752b","modified":1712153480811},{"_id":"public/archives/2024/01/index.html","hash":"cd188d07fdc8bfe0c4f1584e1d05463d8fa07aac","modified":1712153480811},{"_id":"public/images/Gee1/curl.png","hash":"934b7d4ac89e63043b46675d07af9c18be63bdb6","modified":1705249348654},{"_id":"public/images/Gee1/url_path.png","hash":"0489a245c7afa471bc525493693ec1e72583c1cd","modified":1705249348654},{"_id":"public/images/Gee1/helloHandler.png","hash":"becee27386bea6a3e7ca2aa75d26d2ff0ae0c32d","modified":1705249348654},{"_id":"source/images/Gee1/curl2.png","hash":"1697fdd91d74c403d4cb0684e75367644a5edab0","modified":1705318517067},{"_id":"source/images/【study】Python高并发编程/获取一支股票的信息.png","hash":"63d9d87165a7b1d80298553c0fb80cc6b3a454e9","modified":1698240627404},{"_id":"source/images/【study】Python高并发编程/屎山代码.png","hash":"e854f4b82931c1fa6d633a670a8615a51234afa6","modified":1698244755664},{"_id":"source/images/【study】Python高并发编程/获取股票代码.png","hash":"03b0ae36040a7e96842fcd9eec65d8bfc3daf60d","modified":1698240183110},{"_id":"public/images/【study】Python高并发编程/获取一支股票的信息.png","hash":"63d9d87165a7b1d80298553c0fb80cc6b3a454e9","modified":1705318604255},{"_id":"public/images/Gee1/curl2.png","hash":"1697fdd91d74c403d4cb0684e75367644a5edab0","modified":1705318604255},{"_id":"public/images/【study】Python高并发编程/屎山代码.png","hash":"e854f4b82931c1fa6d633a670a8615a51234afa6","modified":1705318604255},{"_id":"public/images/【study】Python高并发编程/获取股票代码.png","hash":"03b0ae36040a7e96842fcd9eec65d8bfc3daf60d","modified":1705318604255},{"_id":"source/_posts/【study】Spring学习day02.md","hash":"6a62c2f6d2da3df3574820e15aec628c36c35ddc","modified":1707296362211},{"_id":"source/images/springDay02/特殊类型注入结果.png","hash":"c0018f5400a994d9b4a60d3e3677350dd3a6ebe3","modified":1706872529464},{"_id":"source/images/springDay02/set注入结果.png","hash":"ff5caf5ae5d4d817fa40b62c287a860e3361c3ad","modified":1706866529380},{"_id":"source/_posts/【study】spring学习day01.md","hash":"f197e84768dc736add71181ea6cf14fca503b4ae","modified":1706883834194},{"_id":"source/images/springDay02/有参注入结果.png","hash":"524bebe7bf528c27ce67b3fd50c4b67591915005","modified":1706867101154},{"_id":"source/images/springDay01/logger自定义输出@2x.png","hash":"d757fdc34ef8c92ed4b991c3633414ca5ed15c85","modified":1706576686618},{"_id":"source/images/springDay02/IoC.png","hash":"19a9857603cd1808d0cdbc8bfac0c0cc580b21b5","modified":1706788855651},{"_id":"public/archives/2024/02/index.html","hash":"d0c4b40d289bf6cdd543288a738fa8128e42e4ff","modified":1712153480811},{"_id":"public/tags/Spring框架/index.html","hash":"54dd762c8253c2af968c664e09dd85588ab8cc3e","modified":1712153480811},{"_id":"public/post/b57237dc.html","hash":"a3c6b0532a522b13c6f5957ceee1c20da3d9ca61","modified":1712153480811},{"_id":"public/post/2c7b6666.html","hash":"c95dd4ef9f5daf53511e5d80df4adfd081de2324","modified":1712153480811},{"_id":"public/images/springDay02/set注入结果.png","hash":"ff5caf5ae5d4d817fa40b62c287a860e3361c3ad","modified":1706883844869},{"_id":"public/images/springDay02/特殊类型注入结果.png","hash":"c0018f5400a994d9b4a60d3e3677350dd3a6ebe3","modified":1706883844869},{"_id":"public/images/springDay02/有参注入结果.png","hash":"524bebe7bf528c27ce67b3fd50c4b67591915005","modified":1706883844869},{"_id":"public/images/springDay01/logger自定义输出@2x.png","hash":"d757fdc34ef8c92ed4b991c3633414ca5ed15c85","modified":1706883844869},{"_id":"public/images/springDay02/IoC.png","hash":"19a9857603cd1808d0cdbc8bfac0c0cc580b21b5","modified":1706883844869},{"_id":"source/images/springDay02/简单测试输出.png","hash":"1a4595c9db07dcc97005ec2e02ead336373171b0","modified":1707295402468},{"_id":"source/images/springDay02/环境准备.png","hash":"92a41cce5dfd2f47b5164bf2cf1a7b8df4db9e92","modified":1707295168671},{"_id":"source/images/springDay02/auto注入1.png","hash":"6a73c0ba55452cb2891e3729913656abfa4b9d79","modified":1707295868652},{"_id":"source/images/springDay02/list类型属性.png","hash":"3628bb9c0229cf9b39e327d70a4e553d1ab8da75","modified":1707235405221},{"_id":"source/images/springDay02/factoryBean输出结果.png","hash":"7d62578bc71ff637a70592cb99bea709eb2221c3","modified":1707294487506},{"_id":"source/images/springDay02/多实例输出结果.png","hash":"51cbf6a6bfc014fcd5f9cd06d0dc35c4c5f06f9a","modified":1707280854429},{"_id":"source/images/springDay02/数组类型属性.png","hash":"211dc958e15ff2cdc4dc0eab69624e52e4ad54ea","modified":1707233735865},{"_id":"source/images/springDay02/ref结果2.png","hash":"6cbf2443cf4e1e4fcd4da5569e7def68e2ae3f4a","modified":1707237888900},{"_id":"source/images/springDay02/单实例输出结果.png","hash":"47c4eea42795628c967079390f306350ebb0144c","modified":1707280694703},{"_id":"source/images/springDay02/p命名空间.png","hash":"0d0793e09dce9080adc38222faf066c6cf4dad74","modified":1707238518758},{"_id":"source/images/springDay02/ref结果1.png","hash":"8b25499b03d347ec1a206b424484e5bc184e163c","modified":1707237880082},{"_id":"source/images/springDay02/自动注入结果.png","hash":"9799572cbd8e539af7653004f7ea998eeed2e451","modified":1707296037219},{"_id":"source/images/springDay02/bean生命周期输出1.png","hash":"bce218df86c50ed8bc639a69b1e56f9c262a3f1c","modified":1707281801862},{"_id":"source/images/springDay02/map类型属性.png","hash":"8e451c1dd46575295c60b42fcf4a4b4046fb7421","modified":1707236789012},{"_id":"source/images/springDay02/外部引入结果.png","hash":"f684dde9f7bfe858ec3f7bb22acec5cbbb76c9a0","modified":1707279951238},{"_id":"source/images/springDay02/bean生命周期输出2.png","hash":"d2a73886412aab8638c1807dd05587c18b5ae30a","modified":1707282335825},{"_id":"source/images/springDay02/bean生命周期输出3.png","hash":"4df222d950a20861e215d0114bb4a2e378218369","modified":1707293783608},{"_id":"public/images/springDay02/简单测试输出.png","hash":"1a4595c9db07dcc97005ec2e02ead336373171b0","modified":1707296391344},{"_id":"public/images/springDay02/环境准备.png","hash":"92a41cce5dfd2f47b5164bf2cf1a7b8df4db9e92","modified":1707296391344},{"_id":"public/images/springDay02/factoryBean输出结果.png","hash":"7d62578bc71ff637a70592cb99bea709eb2221c3","modified":1707296391344},{"_id":"public/images/springDay02/list类型属性.png","hash":"3628bb9c0229cf9b39e327d70a4e553d1ab8da75","modified":1707296391344},{"_id":"public/images/springDay02/auto注入1.png","hash":"6a73c0ba55452cb2891e3729913656abfa4b9d79","modified":1707296391344},{"_id":"public/images/springDay02/数组类型属性.png","hash":"211dc958e15ff2cdc4dc0eab69624e52e4ad54ea","modified":1707296391344},{"_id":"public/images/springDay02/多实例输出结果.png","hash":"51cbf6a6bfc014fcd5f9cd06d0dc35c4c5f06f9a","modified":1707296391344},{"_id":"public/images/springDay02/p命名空间.png","hash":"0d0793e09dce9080adc38222faf066c6cf4dad74","modified":1707296391344},{"_id":"public/images/springDay02/单实例输出结果.png","hash":"47c4eea42795628c967079390f306350ebb0144c","modified":1707296391344},{"_id":"public/images/springDay02/ref结果1.png","hash":"8b25499b03d347ec1a206b424484e5bc184e163c","modified":1707296391344},{"_id":"public/images/springDay02/ref结果2.png","hash":"6cbf2443cf4e1e4fcd4da5569e7def68e2ae3f4a","modified":1707296391344},{"_id":"public/images/springDay02/自动注入结果.png","hash":"9799572cbd8e539af7653004f7ea998eeed2e451","modified":1707296391344},{"_id":"public/images/springDay02/bean生命周期输出1.png","hash":"bce218df86c50ed8bc639a69b1e56f9c262a3f1c","modified":1707296391344},{"_id":"public/images/springDay02/外部引入结果.png","hash":"f684dde9f7bfe858ec3f7bb22acec5cbbb76c9a0","modified":1707296391344},{"_id":"public/images/springDay02/map类型属性.png","hash":"8e451c1dd46575295c60b42fcf4a4b4046fb7421","modified":1707296391344},{"_id":"public/images/springDay02/bean生命周期输出2.png","hash":"d2a73886412aab8638c1807dd05587c18b5ae30a","modified":1707296391344},{"_id":"public/images/springDay02/bean生命周期输出3.png","hash":"4df222d950a20861e215d0114bb4a2e378218369","modified":1707296391344},{"_id":"source/_posts/【study】Spring学习day03.md","hash":"b928f9de04eeea26901788042b847ea4bc8d3b71","modified":1707321212442},{"_id":"source/_posts/【study】Spring学习part02.md","hash":"7c42667da024aa8838380ba2b9db86c9a67bbb60","modified":1707307594834},{"_id":"source/_posts/【study】Spring学习part01.md","hash":"c46612aacb37cc6f8e0eaf68112c5d945ddef521","modified":1707307584377},{"_id":"source/images/springPart03/qualifier结果输出.png","hash":"192782d10fd65e7a1074c4f497311b86ff1bf4db","modified":1707319218054},{"_id":"source/images/springPart03/Component注解输出1.png","hash":"2d9e476a6bc8fab3860e91a6f688ebac379e9f30","modified":1707309129714},{"_id":"source/images/springPart03/autowired结果输出.png","hash":"27c0a032ff65d7a03c4d2421435f2b803fd002ef","modified":1707317660840},{"_id":"public/post/e8e1e241.html","hash":"41a6d77e22d9720b3f3b92274239e018a748138e","modified":1712153480811},{"_id":"public/images/springPart03/qualifier结果输出.png","hash":"192782d10fd65e7a1074c4f497311b86ff1bf4db","modified":1707321211813},{"_id":"public/images/springPart03/autowired结果输出.png","hash":"27c0a032ff65d7a03c4d2421435f2b803fd002ef","modified":1707321211813},{"_id":"public/images/springPart03/Component注解输出1.png","hash":"2d9e476a6bc8fab3860e91a6f688ebac379e9f30","modified":1707321211813},{"_id":"source/_posts/【study】Spring学习part04【放弃】.md","hash":"1a4f4b6682e9f0de88b7f82136361b54c09ea930","modified":1707668612277},{"_id":"source/_posts/【study】Spring学习part05.md","hash":"8d298e90fecfe697a4c3cf2aceffbfb5e0024bb4","modified":1707668612279},{"_id":"source/images/springPart04/获取构造方法.png","hash":"2df6a659a520e2f4eb81f5e1999e3962d00e13ee","modified":1707322481223},{"_id":"source/images/springPart05/代理模式.png","hash":"84355eaca2ece078175cf15c249cacc933b932fa","modified":1707563102663},{"_id":"source/images/springPart05/动态代理输出结果.png","hash":"5fbd4f5ecc9f66c824dbe8e8bab7a740ca6f1592","modified":1707572087239},{"_id":"source/images/springPart05/切面.png","hash":"30d837632cdd7da0b00c1a1a43e6341e42750d26","modified":1707574180667},{"_id":"source/images/springPart05/前置通知.png","hash":"012fdd35743c46b99237e15b357a0ea2be782752","modified":1707662262719},{"_id":"source/images/springPart05/横切关注点.png","hash":"22c35ba30b234935e83bfce1a56c8edca2b74f99","modified":1707573015119},{"_id":"source/images/springPart05/通知（增强）.png","hash":"799e7128f803d92b6f99de598b405d683ab9fd37","modified":1707573985523},{"_id":"source/images/springPart04/流程.png","hash":"8d23a9072fe280ad8352fae1012358dfe7034d9c","modified":1707388479197},{"_id":"source/images/springPart05/代理模式.jpeg","hash":"95d840334d659d32e015502361ca5e36664ce619","modified":1707563187120},{"_id":"source/images/springPart05/切入点表达式.png","hash":"0042d26ad14603e15f636edcb320533e55dad16b","modified":1707650019422},{"_id":"source/images/springPart05/xml各种通知测试.png","hash":"1972d36a94fa50e9ea4cbdcfc956fbceb3b4abd1","modified":1707668088925},{"_id":"source/images/springPart05/各种通知测试.png","hash":"b831b4be511f56fa80906783c303c222ceca28af","modified":1707664548083},{"_id":"public/post/1824774.html","hash":"637f77cc1ee391d78763d64f986869d48803dd1e","modified":1712153480811},{"_id":"public/post/768577e2.html","hash":"8677e24a82852569f2531dc94a1fafee5c3f35dc","modified":1712153480811},{"_id":"public/images/springPart05/代理模式.png","hash":"84355eaca2ece078175cf15c249cacc933b932fa","modified":1707668611635},{"_id":"public/images/springPart05/前置通知.png","hash":"012fdd35743c46b99237e15b357a0ea2be782752","modified":1707668611635},{"_id":"public/images/springPart05/切面.png","hash":"30d837632cdd7da0b00c1a1a43e6341e42750d26","modified":1707668611635},{"_id":"public/images/springPart04/获取构造方法.png","hash":"2df6a659a520e2f4eb81f5e1999e3962d00e13ee","modified":1707668611635},{"_id":"public/images/springPart05/动态代理输出结果.png","hash":"5fbd4f5ecc9f66c824dbe8e8bab7a740ca6f1592","modified":1707668611635},{"_id":"public/images/springPart05/通知（增强）.png","hash":"799e7128f803d92b6f99de598b405d683ab9fd37","modified":1707668611635},{"_id":"public/images/springPart05/横切关注点.png","hash":"22c35ba30b234935e83bfce1a56c8edca2b74f99","modified":1707668611635},{"_id":"public/images/springPart04/流程.png","hash":"8d23a9072fe280ad8352fae1012358dfe7034d9c","modified":1707668611635},{"_id":"public/images/springPart05/切入点表达式.png","hash":"0042d26ad14603e15f636edcb320533e55dad16b","modified":1707668611635},{"_id":"public/images/springPart05/代理模式.jpeg","hash":"95d840334d659d32e015502361ca5e36664ce619","modified":1707668611635},{"_id":"public/images/springPart05/xml各种通知测试.png","hash":"1972d36a94fa50e9ea4cbdcfc956fbceb3b4abd1","modified":1707668611635},{"_id":"public/images/springPart05/各种通知测试.png","hash":"b831b4be511f56fa80906783c303c222ceca28af","modified":1707668611635},{"_id":"source/_posts/【study】Spring学习part06.md","hash":"2f9e00574004a6be683f47c15e6f3f4f493bbbf1","modified":1709283706976},{"_id":"source/images/springPart06/图书表结果1.png","hash":"fdbecef068ac0caaf3dfa5b06c02d309536d6f6c","modified":1709191130256},{"_id":"source/images/springPart06/MySQL新增几条数据.png","hash":"a4a25b3d2eac49b6cae02dccd89f51d8c8bf21cc","modified":1708364950427},{"_id":"source/images/springPart06/删除数据MySQL结果.png","hash":"f0357d4e9041403e8f52bc046a4181d3755f89b1","modified":1708365729211},{"_id":"source/images/springPart06/修改MySQL结果.png","hash":"95a020a5e6673a7fcbf59e6847239eea37cd6d35","modified":1708365594884},{"_id":"source/images/springPart06/图书表结果2.png","hash":"46ca80bbcf9bb1b8ae1ae565201542885318ae2d","modified":1709191606744},{"_id":"source/images/springPart06/返回List类型.png","hash":"bb40824b8e07a760f032707dfc253c42e8da85ee","modified":1709001640255},{"_id":"source/images/springPart06/用户表结果1.png","hash":"653a6f59d4a33caddf979c6544d1c6076558f8f9","modified":1709191144551},{"_id":"source/images/springPart06/返回对象类型.png","hash":"0aac7c1ad61a12f9dede06f5b6a00ba4870a6b52","modified":1709001135051},{"_id":"source/images/springPart06/新增数据spring结果.png","hash":"a58ffc715bb45b410f230af7aadf6478a725a78f","modified":1708364553886},{"_id":"source/_posts/【study】Spring学习part03.md","hash":"b928f9de04eeea26901788042b847ea4bc8d3b71","modified":1709195268849},{"_id":"source/images/springPart06/新增数据MySQL结果.png","hash":"06fe03de5c1e1f314b661638fbfda8e39f0904ec","modified":1708364537308},{"_id":"public/post/988b16ce.html","hash":"4f1d90c67fda1ba8fbbfe3a3f32f8be0126434cd","modified":1712153480811},{"_id":"public/images/springPart06/图书表结果1.png","hash":"fdbecef068ac0caaf3dfa5b06c02d309536d6f6c","modified":1709272654323},{"_id":"public/images/springPart06/图书表结果2.png","hash":"46ca80bbcf9bb1b8ae1ae565201542885318ae2d","modified":1709272654323},{"_id":"public/images/springPart06/删除数据MySQL结果.png","hash":"f0357d4e9041403e8f52bc046a4181d3755f89b1","modified":1709272654323},{"_id":"public/images/springPart06/修改MySQL结果.png","hash":"95a020a5e6673a7fcbf59e6847239eea37cd6d35","modified":1709272654323},{"_id":"public/images/springPart06/用户表结果1.png","hash":"653a6f59d4a33caddf979c6544d1c6076558f8f9","modified":1709272654323},{"_id":"public/images/springPart06/返回对象类型.png","hash":"0aac7c1ad61a12f9dede06f5b6a00ba4870a6b52","modified":1709272654323},{"_id":"public/images/springPart06/MySQL新增几条数据.png","hash":"a4a25b3d2eac49b6cae02dccd89f51d8c8bf21cc","modified":1709272654323},{"_id":"public/images/springPart06/返回List类型.png","hash":"bb40824b8e07a760f032707dfc253c42e8da85ee","modified":1709272654323},{"_id":"public/images/springPart06/新增数据spring结果.png","hash":"a58ffc715bb45b410f230af7aadf6478a725a78f","modified":1709272654323},{"_id":"public/images/springPart06/新增数据MySQL结果.png","hash":"06fe03de5c1e1f314b661638fbfda8e39f0904ec","modified":1709272654323},{"_id":"source/_posts/【study】SpringMVC学习Part01.md","hash":"3246fd008c1dc009f8fc4684f10c0a99db3e7053","modified":1709624105188},{"_id":"source/images/springMVCPart01/SSM技术栈.png","hash":"7988b11644cfb989e3698cdec8216e150d404c65","modified":1709278718672},{"_id":"source/images/springMVCPart01/helloSpringMVC.png","hash":"42bc9ddcc911606bb557c28f53f2e30ee409f9a2","modified":1709300246961},{"_id":"source/images/springMVCPart01/mvc接收参数结果1.png","hash":"750e6a9cb8ef69a5274a91aa6f39478c96170d96","modified":1709457453030},{"_id":"source/images/springMVCPart01/注解指定结果.png","hash":"83e3d16af23c4dd2f6e62340fd56386f3abe91e2","modified":1709458537024},{"_id":"source/images/springMVCPart01/部署.png","hash":"f409dd3591bddf5a512304ff6414b67f661e2dac","modified":1709300155733},{"_id":"source/images/springMVCPart01/idea添加工件.png","hash":"13c7a4aa0bc4abd5b23c46f78f84ba4a6bd50802","modified":1709300063935},{"_id":"source/images/springMVCPart01/415报错.png","hash":"d20bbf99a25762904745248429e2e91d2bc4b951","modified":1709473284231},{"_id":"source/images/springMVCPart01/list添加注解但是问号.png","hash":"5a31d833609370a9a4b9c2109929eb09feeae485","modified":1709459921499},{"_id":"source/images/springMVCPart01/tomcat.png","hash":"700d41565cf0554d9eebfc2bfc3d3edcfca45a2a","modified":1709298706750},{"_id":"source/images/springMVCPart01/实体对象.png","hash":"13a8b0b759fc94f4b637a03e3596328d77966749","modified":1709467595092},{"_id":"source/images/springMVCPart01/路径参数.png","hash":"92e1c4d91722b609de307d9a5d827330a405f497","modified":1709470097313},{"_id":"source/images/springMVCPart01/更改为web项目.png","hash":"5ed060624fb6b4579ea95974f9284cce54b4f6a3","modified":1709300036665},{"_id":"source/images/springMVCPart01/添加注解控制台.png","hash":"5a608046ecd07cd39b0187110150d58aae89e756","modified":1709459953110},{"_id":"source/images/springMVCPart01/SpringMVC请求流程.png","hash":"8cf2e6c0dadccbeedd4e8e1c8696f081268c903f","modified":1709284630058},{"_id":"source/images/springMVCPart01/tomcat2.png","hash":"f937af0779b189fa56628d62b54ce06f2b84f01e","modified":1709457660962},{"_id":"source/images/springMVCPart01/list不加注解报错.png","hash":"b190ef4943acb16468a09cb775aeb867535a2387","modified":1709459751452},{"_id":"public/archives/2024/03/index.html","hash":"b945845b5d69e4cfed96742768819045d603b8e1","modified":1712153480811},{"_id":"public/tags/Spring-MVC框架/index.html","hash":"9a08d0c73a1a6a79792c86df814f7de5fc7558a0","modified":1712153480811},{"_id":"public/post/38cadbef.html","hash":"36acfdba7b94c7515e36c61c7e30d6147ff756d7","modified":1712153480811},{"_id":"public/images/springMVCPart01/SSM技术栈.png","hash":"7988b11644cfb989e3698cdec8216e150d404c65","modified":1709624104559},{"_id":"public/images/springMVCPart01/helloSpringMVC.png","hash":"42bc9ddcc911606bb557c28f53f2e30ee409f9a2","modified":1709624104559},{"_id":"public/images/springMVCPart01/mvc接收参数结果1.png","hash":"750e6a9cb8ef69a5274a91aa6f39478c96170d96","modified":1709624104559},{"_id":"public/images/springMVCPart01/部署.png","hash":"f409dd3591bddf5a512304ff6414b67f661e2dac","modified":1709624104559},{"_id":"public/images/springMVCPart01/注解指定结果.png","hash":"83e3d16af23c4dd2f6e62340fd56386f3abe91e2","modified":1709624104559},{"_id":"public/images/springMVCPart01/idea添加工件.png","hash":"13c7a4aa0bc4abd5b23c46f78f84ba4a6bd50802","modified":1709624104559},{"_id":"public/images/springMVCPart01/tomcat.png","hash":"700d41565cf0554d9eebfc2bfc3d3edcfca45a2a","modified":1709624104559},{"_id":"public/images/springMVCPart01/list添加注解但是问号.png","hash":"5a31d833609370a9a4b9c2109929eb09feeae485","modified":1709624104559},{"_id":"public/images/springMVCPart01/415报错.png","hash":"d20bbf99a25762904745248429e2e91d2bc4b951","modified":1709624104559},{"_id":"public/images/springMVCPart01/实体对象.png","hash":"13a8b0b759fc94f4b637a03e3596328d77966749","modified":1709624104559},{"_id":"public/images/springMVCPart01/添加注解控制台.png","hash":"5a608046ecd07cd39b0187110150d58aae89e756","modified":1709624104559},{"_id":"public/images/springMVCPart01/路径参数.png","hash":"92e1c4d91722b609de307d9a5d827330a405f497","modified":1709624104559},{"_id":"public/images/springMVCPart01/更改为web项目.png","hash":"5ed060624fb6b4579ea95974f9284cce54b4f6a3","modified":1709624104559},{"_id":"public/images/springMVCPart01/SpringMVC请求流程.png","hash":"8cf2e6c0dadccbeedd4e8e1c8696f081268c903f","modified":1709624104559},{"_id":"public/images/springMVCPart01/tomcat2.png","hash":"f937af0779b189fa56628d62b54ce06f2b84f01e","modified":1709624104559},{"_id":"public/images/springMVCPart01/list不加注解报错.png","hash":"b190ef4943acb16468a09cb775aeb867535a2387","modified":1709624104559},{"_id":"source/_posts/发票识别demo.md","hash":"b97a524082d094e46d03e9ed4b1a9f6de1057c6d","modified":1710896937984},{"_id":"source/images/发票识别/2.png","hash":"e66e8a4cc008c8c32b1311a946b6bc00b0949324","modified":1710493057336},{"_id":"source/images/发票识别/1.png","hash":"a219743a86bd0eb17adb5e79040c784a04fb6582","modified":1710491948374},{"_id":"source/_posts/【study】SpringMVC学习Part03.md","hash":"ccd905f69a98726e651e297c91df7a36570af86e","modified":1710896937985},{"_id":"source/images/springMVCPart03/开发流程.png","hash":"f896df4ed94a17553ff8d95f6286dc09b988964d","modified":1709625691722},{"_id":"public/archives/page/5/index.html","hash":"4aaa11e1fdb2e599ce453b203ad3ea7c5a8d3010","modified":1712153480811},{"_id":"public/page/5/index.html","hash":"7472c5c2620ee4d6e69dc081f1a5226a1c01d856","modified":1712153480811},{"_id":"public/tags/Spring-Boot/index.html","hash":"f140145aed10ed265e4cb80f3bb7d22de09f90a3","modified":1712153480811},{"_id":"public/post/3068ab21.html","hash":"2fb1bb928c01e89d2ce9d409b7438ee30cf4fa02","modified":1712153480811},{"_id":"public/post/d6c4bac3.html","hash":"1e9db65854d496ea08c97063fb0c6ea97c1fb661","modified":1712153480811},{"_id":"public/images/发票识别/2.png","hash":"e66e8a4cc008c8c32b1311a946b6bc00b0949324","modified":1710896937631},{"_id":"public/images/发票识别/1.png","hash":"a219743a86bd0eb17adb5e79040c784a04fb6582","modified":1710896937631},{"_id":"public/images/springMVCPart03/开发流程.png","hash":"f896df4ed94a17553ff8d95f6286dc09b988964d","modified":1710896937631},{"_id":"source/_posts/【study】发票识别demo.md","hash":"b97a524082d094e46d03e9ed4b1a9f6de1057c6d","modified":1710896937984},{"_id":"source/_posts/【LeetCode】09动态规划Part02.md","hash":"e2de50b50d475998afb569cfa2c45f64fef526d8","modified":1711626044627},{"_id":"source/_posts/【LeetCode】09动态规划Part01.md","hash":"76635f5b371338a064c208d0a3797d408f737808","modified":1711276572445},{"_id":"public/tags/LeetCode/page/4/index.html","hash":"f9f0328449c2984c1f74390a3c391f5550209dab","modified":1712153480811},{"_id":"public/tags/动态规划/index.html","hash":"1993943a943862bd18d7a97ae4c26062e320ad43","modified":1712153480811},{"_id":"public/archives/2024/page/2/index.html","hash":"2ded70d8ebd58c77d8426b8e0c1bd5ce3e87abaf","modified":1712153480811},{"_id":"public/tags/刷题/index.html","hash":"9ab909d44607cba9f21ab32ec77f6605b4ded863","modified":1711005975336},{"_id":"public/post/e9769661.html","hash":"f9c42d1f6fa43e6d7086e28bf859789d4008f44b","modified":1712153480811},{"_id":"public/post/707fc7db.html","hash":"1854ddc2abbc1331089b1d15f1afe1c04a08faf2","modified":1712153480811},{"_id":"source/_posts/【LeetCode】09动态规划Part03.md","hash":"2866d962abf0c8373cdcd560b94316a91429b0d8","modified":1712150820899},{"_id":"public/tags/算法/page/4/index.html","hash":"7f5313906286738b7e67bce2646c633562b42bbd","modified":1712153480811},{"_id":"public/post/9e71a6f7.html","hash":"41355519af6fab1baf31b8442ab4a4ef001174c3","modified":1712153480811}],"Category":[{"name":"Debug","_id":"cln60vijy0002wvz81lsohve1"},{"name":"刷题","_id":"cln60vik10007wvz86q5h7fvk"},{"name":"搭建环境","_id":"cln60vik5000swvz8flt6ccdq"},{"name":"Study","_id":"clnaazf5i0001r4whe4qy94nz"}],"Data":[],"Page":[],"Post":[{"title":"【debug】Java中的map比较","abbrlink":"ad5be9d7","date":"2023-09-25T14:10:40.000Z","_content":"\n# 【debug】Java中的map比较\n\n题目链接：[242. 有效的字母异位词](https://leetcode.cn/problems/valid-anagram/)\n\n事情起因：（由于自己对Java了解不深、有表达错误的请指出，感谢！）\n\n<img src=\"../images/【debug】Java中的map比较/java_map_debug.jpg\" alt=\"报错截图\" style=\"zoom:100%;\" />\n\n\n\n群友发了一张代码截图，觉得自己写的代码并没有错，但是不能通过测试用例。\n\n他的算法我简单说一下，有点麻烦，但算法不是这篇博客的重点。\n\n1.   两个Map：`hashS`、`hashT`分别用于存放字符串`s`和`t`中字母出现的频率(19行之前)；\n2.   遍历长的字符串对应的Map，假设是`hashS`，判断`hashS`与`hashT`相同的字母频率是否一样，如果不一样则`return false`\n\n当时我是在外面，看到了这段代码，理解了他的想法之后好像真的没什么问题。\n\n\n\n### 复现Bug与初步解决\n\n回来之后代码放到idea里面跑了一下，发现这个测试用例长度为50000位，而且每个字母出现的频率是一样的\n\n<img src=\"../images/【debug】Java中的map比较/hashST.png\" alt=\"两个Map的内容\" style=\"zoom:67%;\" />\n\n\n\n打上断点继续向下走，看看是哪一步出现了问题。\n\n<img src=\"../images/【debug】Java中的map比较/断点调试.png\" alt=\"断点调试\" style=\"zoom:67%;\" />\n\n\n\n没想到第一次循环就出错了，`hashT.get(c)`与`hashS.get(c)`的值都是1913，但是地址不一样，一个是`{Integer@531}`，一个是`{Integer@587}`。看来这里的`!=`判断的是地址而不是值，使用`equal()`方法即可，如下：\n\n<img src=\"../images/【debug】Java中的map比较/初步解决.png\" alt=\"初步解决\" style=\"zoom:67%;\" />\n\n\n\n### 深层探索\n\n事情并没有真正的解决，既然群友能通过一些测试用例，说明了一些情况使用`!=`是可以用的，那几个测试用例都是用了很短的字符串，我也看下是什么情况，`s=\"anagram\"`，`t=\"nagaram\"`，这是个正确的用例，debug的结果是这样\n\n<img src=\"../images/【debug】Java中的map比较/短测试用例.png\" alt=\"短测试用例\" style=\"zoom:80%;\" />\n\n\n\n这可就是玄学了呀，短的数据不会出现问题，而长的会出现。\n\n#### 猜想一：与Map的大小有关\n\n因为长的测试用例有26个键值对（每个字母均出现），而短的只出现了5个字母。我设置测试用例`s = t = \"abcdefghijklmnopqrstuvwxyz\"`（以下简称字母表），让每个字母都出现一次。\n\n<img src=\"../images/【debug】Java中的map比较/26字母.png\" alt=\"26字母\" style=\"zoom:80%;\" />\n\n\n\n还是正常的，<font color=\"#ff0000\">猜想错误</font>\n\n#### 猜想二：与测试用例的长度有关\n\n接着我就多复制些字母表，出错误的是在50000的长度，我把字母表长度先放到3000多，\n\n``` java\n// 扩增字符串代码代码\nString s = \"abcdefghijklmnopqrstuvwxyz\";\nString t = \"abcdefghijklmnopqrstuvwxyz\";\nfor (int i = 0; i < 7; i++) {\n    s += s;\n    t += t;\n}\n```\n\n\n\n<img src=\"../images/【debug】Java中的map比较/3000多长度.png\" alt=\"长度为3328\" style=\"zoom:80%;\" />\n\n\n\n还是有错误，继续缩短长度，将扩增代码循环6次，减少一次再看看\n\n<img src=\"../images/【debug】Java中的map比较/6次扩增.png\" alt=\"6次扩增\" style=\"zoom:80%;\" />\n\n\n\n这次竟然又不出错了，玄学！妥妥的玄学！\n\n我换了种思路，这次不用字母表了，只是用一个变量看看会不会触发这个BUG，如果依然触发，每次长度增加1，那么很快就会得到到底在多长的时候会出现。25行打上断点，被执行前一定会卡住。\n\n<img src=\"../images/【debug】Java中的map比较/展示代码.png\" alt=\"展示代码\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/【debug】Java中的map比较/128卡住.png\" alt=\"字母a出现了128次时候开始报错\" style=\"zoom:80%;\" />\n\n\n\n最后做一次验证，是不是Map中，只要有val超过128就会发生地址改变的情况。这次的测试用例使用随机字母\n\n``` java\nString s = \"\";\nString t = \"\";\nRandom random = new Random();\nwhile (true) {\n    int temp = random.nextInt(26) + 97;\n    s += (char)temp;\n    t += (char)temp;\n    System.out.println(isAnagram(s, t));\n}\n```\n\n<img src=\"../images/【debug】Java中的map比较/26随机字母报错.png\" alt=\"字母a出现了128次的时候开始报错\" style=\"zoom:80%\"/>\n\n\n\n\n很好！当字母w出现了超过128次时候地址发生了变化。128这个数字相信大家一定很敏感，那么这个范围很可能是[-128, 127]。那么则需要看看底层源码是怎么说的，去看看`Map.java`，搜索`127`，并没有发现相关说明。\n\n<img src=\"../images/【debug】Java中的map比较/map源码.png\" alt=\"map源码\" style=\"zoom:80%;\" />\n\n\n\n`{Integer@***}`这里面经常变得数字就是星号部分，那么去`Ieteger.java`里面看看有什么发现。\n\n<img src=\"../images/【debug】Java中的map比较/第一个127.png\" alt=\"搜索结果1\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/【debug】Java中的map比较/最后一个127.png\" alt=\"搜索结果2\" style=\"zoom:80%;\" />\n\n\n\n### 结论\n\n结合这两段我悟了，果然有这么个范围，在初始化值的时候，[-128, 127]这个范围的数是在缓存里面，所以当`Map`中的`value`小于128时候读取的是缓存中的数，所以他们地址是一样的，也就是`hashS.get(c)==hashT.get(c)`的原因。当超过这个范围，则会在新的地方存放一个值，尽管`hashS.get(c)`和`hashT.get(c)`均为128，但是使用`==`或`!=`判断的时候，判断的是**地址**，得到`hashS.get(c)!=hashT.get(c)`。\n\n#### 所以一定要写equal()方法进行判断\n\n#### 所以一定要写equal()方法进行判断\n\n#### 所以一定要写equal()方法进行判断\n\n`hashS.get(c).equal(hashT.get(c))`，这样判断的才是值而不是地址\n\n\n\n","source":"_posts/【debug】Java中的map比较.md","raw":"---\ntitle: 【debug】Java中的map比较\ntags:\n  - Debug\n  - LeetCode\n  - Java\ncategories: Debug\nabbrlink: ad5be9d7\ndate: 2023-09-25 22:10:40\n---\n\n# 【debug】Java中的map比较\n\n题目链接：[242. 有效的字母异位词](https://leetcode.cn/problems/valid-anagram/)\n\n事情起因：（由于自己对Java了解不深、有表达错误的请指出，感谢！）\n\n<img src=\"../images/【debug】Java中的map比较/java_map_debug.jpg\" alt=\"报错截图\" style=\"zoom:100%;\" />\n\n\n\n群友发了一张代码截图，觉得自己写的代码并没有错，但是不能通过测试用例。\n\n他的算法我简单说一下，有点麻烦，但算法不是这篇博客的重点。\n\n1.   两个Map：`hashS`、`hashT`分别用于存放字符串`s`和`t`中字母出现的频率(19行之前)；\n2.   遍历长的字符串对应的Map，假设是`hashS`，判断`hashS`与`hashT`相同的字母频率是否一样，如果不一样则`return false`\n\n当时我是在外面，看到了这段代码，理解了他的想法之后好像真的没什么问题。\n\n\n\n### 复现Bug与初步解决\n\n回来之后代码放到idea里面跑了一下，发现这个测试用例长度为50000位，而且每个字母出现的频率是一样的\n\n<img src=\"../images/【debug】Java中的map比较/hashST.png\" alt=\"两个Map的内容\" style=\"zoom:67%;\" />\n\n\n\n打上断点继续向下走，看看是哪一步出现了问题。\n\n<img src=\"../images/【debug】Java中的map比较/断点调试.png\" alt=\"断点调试\" style=\"zoom:67%;\" />\n\n\n\n没想到第一次循环就出错了，`hashT.get(c)`与`hashS.get(c)`的值都是1913，但是地址不一样，一个是`{Integer@531}`，一个是`{Integer@587}`。看来这里的`!=`判断的是地址而不是值，使用`equal()`方法即可，如下：\n\n<img src=\"../images/【debug】Java中的map比较/初步解决.png\" alt=\"初步解决\" style=\"zoom:67%;\" />\n\n\n\n### 深层探索\n\n事情并没有真正的解决，既然群友能通过一些测试用例，说明了一些情况使用`!=`是可以用的，那几个测试用例都是用了很短的字符串，我也看下是什么情况，`s=\"anagram\"`，`t=\"nagaram\"`，这是个正确的用例，debug的结果是这样\n\n<img src=\"../images/【debug】Java中的map比较/短测试用例.png\" alt=\"短测试用例\" style=\"zoom:80%;\" />\n\n\n\n这可就是玄学了呀，短的数据不会出现问题，而长的会出现。\n\n#### 猜想一：与Map的大小有关\n\n因为长的测试用例有26个键值对（每个字母均出现），而短的只出现了5个字母。我设置测试用例`s = t = \"abcdefghijklmnopqrstuvwxyz\"`（以下简称字母表），让每个字母都出现一次。\n\n<img src=\"../images/【debug】Java中的map比较/26字母.png\" alt=\"26字母\" style=\"zoom:80%;\" />\n\n\n\n还是正常的，<font color=\"#ff0000\">猜想错误</font>\n\n#### 猜想二：与测试用例的长度有关\n\n接着我就多复制些字母表，出错误的是在50000的长度，我把字母表长度先放到3000多，\n\n``` java\n// 扩增字符串代码代码\nString s = \"abcdefghijklmnopqrstuvwxyz\";\nString t = \"abcdefghijklmnopqrstuvwxyz\";\nfor (int i = 0; i < 7; i++) {\n    s += s;\n    t += t;\n}\n```\n\n\n\n<img src=\"../images/【debug】Java中的map比较/3000多长度.png\" alt=\"长度为3328\" style=\"zoom:80%;\" />\n\n\n\n还是有错误，继续缩短长度，将扩增代码循环6次，减少一次再看看\n\n<img src=\"../images/【debug】Java中的map比较/6次扩增.png\" alt=\"6次扩增\" style=\"zoom:80%;\" />\n\n\n\n这次竟然又不出错了，玄学！妥妥的玄学！\n\n我换了种思路，这次不用字母表了，只是用一个变量看看会不会触发这个BUG，如果依然触发，每次长度增加1，那么很快就会得到到底在多长的时候会出现。25行打上断点，被执行前一定会卡住。\n\n<img src=\"../images/【debug】Java中的map比较/展示代码.png\" alt=\"展示代码\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/【debug】Java中的map比较/128卡住.png\" alt=\"字母a出现了128次时候开始报错\" style=\"zoom:80%;\" />\n\n\n\n最后做一次验证，是不是Map中，只要有val超过128就会发生地址改变的情况。这次的测试用例使用随机字母\n\n``` java\nString s = \"\";\nString t = \"\";\nRandom random = new Random();\nwhile (true) {\n    int temp = random.nextInt(26) + 97;\n    s += (char)temp;\n    t += (char)temp;\n    System.out.println(isAnagram(s, t));\n}\n```\n\n<img src=\"../images/【debug】Java中的map比较/26随机字母报错.png\" alt=\"字母a出现了128次的时候开始报错\" style=\"zoom:80%\"/>\n\n\n\n\n很好！当字母w出现了超过128次时候地址发生了变化。128这个数字相信大家一定很敏感，那么这个范围很可能是[-128, 127]。那么则需要看看底层源码是怎么说的，去看看`Map.java`，搜索`127`，并没有发现相关说明。\n\n<img src=\"../images/【debug】Java中的map比较/map源码.png\" alt=\"map源码\" style=\"zoom:80%;\" />\n\n\n\n`{Integer@***}`这里面经常变得数字就是星号部分，那么去`Ieteger.java`里面看看有什么发现。\n\n<img src=\"../images/【debug】Java中的map比较/第一个127.png\" alt=\"搜索结果1\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/【debug】Java中的map比较/最后一个127.png\" alt=\"搜索结果2\" style=\"zoom:80%;\" />\n\n\n\n### 结论\n\n结合这两段我悟了，果然有这么个范围，在初始化值的时候，[-128, 127]这个范围的数是在缓存里面，所以当`Map`中的`value`小于128时候读取的是缓存中的数，所以他们地址是一样的，也就是`hashS.get(c)==hashT.get(c)`的原因。当超过这个范围，则会在新的地方存放一个值，尽管`hashS.get(c)`和`hashT.get(c)`均为128，但是使用`==`或`!=`判断的时候，判断的是**地址**，得到`hashS.get(c)!=hashT.get(c)`。\n\n#### 所以一定要写equal()方法进行判断\n\n#### 所以一定要写equal()方法进行判断\n\n#### 所以一定要写equal()方法进行判断\n\n`hashS.get(c).equal(hashT.get(c))`，这样判断的才是值而不是地址\n\n\n\n","slug":"【debug】Java中的map比较","published":1,"updated":"2023-10-04T11:44:12.879Z","_id":"cln60vijt0000wvz8e7d7cupe","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【debug】Java中的map比较\"><a href=\"#【debug】Java中的map比较\" class=\"headerlink\" title=\"【debug】Java中的map比较\"></a>【debug】Java中的map比较</h1><p>题目链接：<a href=\"https://leetcode.cn/problems/valid-anagram/\">242. 有效的字母异位词</a></p>\n<p>事情起因：（由于自己对Java了解不深、有表达错误的请指出，感谢！）</p>\n<img src=\"../images/【debug】Java中的map比较/java_map_debug.jpg\" alt=\"报错截图\" style=\"zoom:100%;\" />\n\n\n\n<p>群友发了一张代码截图，觉得自己写的代码并没有错，但是不能通过测试用例。</p>\n<p>他的算法我简单说一下，有点麻烦，但算法不是这篇博客的重点。</p>\n<ol>\n<li>两个Map：<code>hashS</code>、<code>hashT</code>分别用于存放字符串<code>s</code>和<code>t</code>中字母出现的频率(19行之前)；</li>\n<li>遍历长的字符串对应的Map，假设是<code>hashS</code>，判断<code>hashS</code>与<code>hashT</code>相同的字母频率是否一样，如果不一样则<code>return false</code></li>\n</ol>\n<p>当时我是在外面，看到了这段代码，理解了他的想法之后好像真的没什么问题。</p>\n<h3 id=\"复现Bug与初步解决\"><a href=\"#复现Bug与初步解决\" class=\"headerlink\" title=\"复现Bug与初步解决\"></a>复现Bug与初步解决</h3><p>回来之后代码放到idea里面跑了一下，发现这个测试用例长度为50000位，而且每个字母出现的频率是一样的</p>\n<img src=\"../images/【debug】Java中的map比较/hashST.png\" alt=\"两个Map的内容\" style=\"zoom:67%;\" />\n\n\n\n<p>打上断点继续向下走，看看是哪一步出现了问题。</p>\n<img src=\"../images/【debug】Java中的map比较/断点调试.png\" alt=\"断点调试\" style=\"zoom:67%;\" />\n\n\n\n<p>没想到第一次循环就出错了，<code>hashT.get(c)</code>与<code>hashS.get(c)</code>的值都是1913，但是地址不一样，一个是<code>&#123;Integer@531&#125;</code>，一个是<code>&#123;Integer@587&#125;</code>。看来这里的<code>!=</code>判断的是地址而不是值，使用<code>equal()</code>方法即可，如下：</p>\n<img src=\"../images/【debug】Java中的map比较/初步解决.png\" alt=\"初步解决\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"深层探索\"><a href=\"#深层探索\" class=\"headerlink\" title=\"深层探索\"></a>深层探索</h3><p>事情并没有真正的解决，既然群友能通过一些测试用例，说明了一些情况使用<code>!=</code>是可以用的，那几个测试用例都是用了很短的字符串，我也看下是什么情况，<code>s=&quot;anagram&quot;</code>，<code>t=&quot;nagaram&quot;</code>，这是个正确的用例，debug的结果是这样</p>\n<img src=\"../images/【debug】Java中的map比较/短测试用例.png\" alt=\"短测试用例\" style=\"zoom:80%;\" />\n\n\n\n<p>这可就是玄学了呀，短的数据不会出现问题，而长的会出现。</p>\n<h4 id=\"猜想一：与Map的大小有关\"><a href=\"#猜想一：与Map的大小有关\" class=\"headerlink\" title=\"猜想一：与Map的大小有关\"></a>猜想一：与Map的大小有关</h4><p>因为长的测试用例有26个键值对（每个字母均出现），而短的只出现了5个字母。我设置测试用例<code>s = t = &quot;abcdefghijklmnopqrstuvwxyz&quot;</code>（以下简称字母表），让每个字母都出现一次。</p>\n<img src=\"../images/【debug】Java中的map比较/26字母.png\" alt=\"26字母\" style=\"zoom:80%;\" />\n\n\n\n<p>还是正常的，<font color=\"#ff0000\">猜想错误</font></p>\n<h4 id=\"猜想二：与测试用例的长度有关\"><a href=\"#猜想二：与测试用例的长度有关\" class=\"headerlink\" title=\"猜想二：与测试用例的长度有关\"></a>猜想二：与测试用例的长度有关</h4><p>接着我就多复制些字母表，出错误的是在50000的长度，我把字母表长度先放到3000多，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 扩增字符串代码代码</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">7</span>; i++) &#123;<br>    s += s;<br>    t += t;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<img src=\"../images/【debug】Java中的map比较/3000多长度.png\" alt=\"长度为3328\" style=\"zoom:80%;\" />\n\n\n\n<p>还是有错误，继续缩短长度，将扩增代码循环6次，减少一次再看看</p>\n<img src=\"../images/【debug】Java中的map比较/6次扩增.png\" alt=\"6次扩增\" style=\"zoom:80%;\" />\n\n\n\n<p>这次竟然又不出错了，玄学！妥妥的玄学！</p>\n<p>我换了种思路，这次不用字母表了，只是用一个变量看看会不会触发这个BUG，如果依然触发，每次长度增加1，那么很快就会得到到底在多长的时候会出现。25行打上断点，被执行前一定会卡住。</p>\n<img src=\"../images/【debug】Java中的map比较/展示代码.png\" alt=\"展示代码\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/【debug】Java中的map比较/128卡住.png\" alt=\"字母a出现了128次时候开始报错\" style=\"zoom:80%;\" />\n\n\n\n<p>最后做一次验证，是不是Map中，只要有val超过128就会发生地址改变的情况。这次的测试用例使用随机字母</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> random.nextInt(<span class=\"hljs-number\">26</span>) + <span class=\"hljs-number\">97</span>;<br>    s += (<span class=\"hljs-type\">char</span>)temp;<br>    t += (<span class=\"hljs-type\">char</span>)temp;<br>    System.out.println(isAnagram(s, t));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"../images/【debug】Java中的map比较/26随机字母报错.png\" alt=\"字母a出现了128次的时候开始报错\" style=\"zoom:80%\"/>\n\n\n\n\n<p>很好！当字母w出现了超过128次时候地址发生了变化。128这个数字相信大家一定很敏感，那么这个范围很可能是[-128, 127]。那么则需要看看底层源码是怎么说的，去看看<code>Map.java</code>，搜索<code>127</code>，并没有发现相关说明。</p>\n<img src=\"../images/【debug】Java中的map比较/map源码.png\" alt=\"map源码\" style=\"zoom:80%;\" />\n\n\n\n<p><code>&#123;Integer@***&#125;</code>这里面经常变得数字就是星号部分，那么去<code>Ieteger.java</code>里面看看有什么发现。</p>\n<img src=\"../images/【debug】Java中的map比较/第一个127.png\" alt=\"搜索结果1\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/【debug】Java中的map比较/最后一个127.png\" alt=\"搜索结果2\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>结合这两段我悟了，果然有这么个范围，在初始化值的时候，[-128, 127]这个范围的数是在缓存里面，所以当<code>Map</code>中的<code>value</code>小于128时候读取的是缓存中的数，所以他们地址是一样的，也就是<code>hashS.get(c)==hashT.get(c)</code>的原因。当超过这个范围，则会在新的地方存放一个值，尽管<code>hashS.get(c)</code>和<code>hashT.get(c)</code>均为128，但是使用<code>==</code>或<code>!=</code>判断的时候，判断的是<strong>地址</strong>，得到<code>hashS.get(c)!=hashT.get(c)</code>。</p>\n<h4 id=\"所以一定要写equal-方法进行判断\"><a href=\"#所以一定要写equal-方法进行判断\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><h4 id=\"所以一定要写equal-方法进行判断-1\"><a href=\"#所以一定要写equal-方法进行判断-1\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><h4 id=\"所以一定要写equal-方法进行判断-2\"><a href=\"#所以一定要写equal-方法进行判断-2\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><p><code>hashS.get(c).equal(hashT.get(c))</code>，这样判断的才是值而不是地址</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【debug】Java中的map比较\"><a href=\"#【debug】Java中的map比较\" class=\"headerlink\" title=\"【debug】Java中的map比较\"></a>【debug】Java中的map比较</h1><p>题目链接：<a href=\"https://leetcode.cn/problems/valid-anagram/\">242. 有效的字母异位词</a></p>\n<p>事情起因：（由于自己对Java了解不深、有表达错误的请指出，感谢！）</p>\n<img src=\"../images/【debug】Java中的map比较/java_map_debug.jpg\" alt=\"报错截图\" style=\"zoom:100%;\" />\n\n\n\n<p>群友发了一张代码截图，觉得自己写的代码并没有错，但是不能通过测试用例。</p>\n<p>他的算法我简单说一下，有点麻烦，但算法不是这篇博客的重点。</p>\n<ol>\n<li>两个Map：<code>hashS</code>、<code>hashT</code>分别用于存放字符串<code>s</code>和<code>t</code>中字母出现的频率(19行之前)；</li>\n<li>遍历长的字符串对应的Map，假设是<code>hashS</code>，判断<code>hashS</code>与<code>hashT</code>相同的字母频率是否一样，如果不一样则<code>return false</code></li>\n</ol>\n<p>当时我是在外面，看到了这段代码，理解了他的想法之后好像真的没什么问题。</p>\n<h3 id=\"复现Bug与初步解决\"><a href=\"#复现Bug与初步解决\" class=\"headerlink\" title=\"复现Bug与初步解决\"></a>复现Bug与初步解决</h3><p>回来之后代码放到idea里面跑了一下，发现这个测试用例长度为50000位，而且每个字母出现的频率是一样的</p>\n<img src=\"../images/【debug】Java中的map比较/hashST.png\" alt=\"两个Map的内容\" style=\"zoom:67%;\" />\n\n\n\n<p>打上断点继续向下走，看看是哪一步出现了问题。</p>\n<img src=\"../images/【debug】Java中的map比较/断点调试.png\" alt=\"断点调试\" style=\"zoom:67%;\" />\n\n\n\n<p>没想到第一次循环就出错了，<code>hashT.get(c)</code>与<code>hashS.get(c)</code>的值都是1913，但是地址不一样，一个是<code>&#123;Integer@531&#125;</code>，一个是<code>&#123;Integer@587&#125;</code>。看来这里的<code>!=</code>判断的是地址而不是值，使用<code>equal()</code>方法即可，如下：</p>\n<img src=\"../images/【debug】Java中的map比较/初步解决.png\" alt=\"初步解决\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"深层探索\"><a href=\"#深层探索\" class=\"headerlink\" title=\"深层探索\"></a>深层探索</h3><p>事情并没有真正的解决，既然群友能通过一些测试用例，说明了一些情况使用<code>!=</code>是可以用的，那几个测试用例都是用了很短的字符串，我也看下是什么情况，<code>s=&quot;anagram&quot;</code>，<code>t=&quot;nagaram&quot;</code>，这是个正确的用例，debug的结果是这样</p>\n<img src=\"../images/【debug】Java中的map比较/短测试用例.png\" alt=\"短测试用例\" style=\"zoom:80%;\" />\n\n\n\n<p>这可就是玄学了呀，短的数据不会出现问题，而长的会出现。</p>\n<h4 id=\"猜想一：与Map的大小有关\"><a href=\"#猜想一：与Map的大小有关\" class=\"headerlink\" title=\"猜想一：与Map的大小有关\"></a>猜想一：与Map的大小有关</h4><p>因为长的测试用例有26个键值对（每个字母均出现），而短的只出现了5个字母。我设置测试用例<code>s = t = &quot;abcdefghijklmnopqrstuvwxyz&quot;</code>（以下简称字母表），让每个字母都出现一次。</p>\n<img src=\"../images/【debug】Java中的map比较/26字母.png\" alt=\"26字母\" style=\"zoom:80%;\" />\n\n\n\n<p>还是正常的，<font color=\"#ff0000\">猜想错误</font></p>\n<h4 id=\"猜想二：与测试用例的长度有关\"><a href=\"#猜想二：与测试用例的长度有关\" class=\"headerlink\" title=\"猜想二：与测试用例的长度有关\"></a>猜想二：与测试用例的长度有关</h4><p>接着我就多复制些字母表，出错误的是在50000的长度，我把字母表长度先放到3000多，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 扩增字符串代码代码</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">7</span>; i++) &#123;<br>    s += s;<br>    t += t;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<img src=\"../images/【debug】Java中的map比较/3000多长度.png\" alt=\"长度为3328\" style=\"zoom:80%;\" />\n\n\n\n<p>还是有错误，继续缩短长度，将扩增代码循环6次，减少一次再看看</p>\n<img src=\"../images/【debug】Java中的map比较/6次扩增.png\" alt=\"6次扩增\" style=\"zoom:80%;\" />\n\n\n\n<p>这次竟然又不出错了，玄学！妥妥的玄学！</p>\n<p>我换了种思路，这次不用字母表了，只是用一个变量看看会不会触发这个BUG，如果依然触发，每次长度增加1，那么很快就会得到到底在多长的时候会出现。25行打上断点，被执行前一定会卡住。</p>\n<img src=\"../images/【debug】Java中的map比较/展示代码.png\" alt=\"展示代码\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/【debug】Java中的map比较/128卡住.png\" alt=\"字母a出现了128次时候开始报错\" style=\"zoom:80%;\" />\n\n\n\n<p>最后做一次验证，是不是Map中，只要有val超过128就会发生地址改变的情况。这次的测试用例使用随机字母</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> random.nextInt(<span class=\"hljs-number\">26</span>) + <span class=\"hljs-number\">97</span>;<br>    s += (<span class=\"hljs-type\">char</span>)temp;<br>    t += (<span class=\"hljs-type\">char</span>)temp;<br>    System.out.println(isAnagram(s, t));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"../images/【debug】Java中的map比较/26随机字母报错.png\" alt=\"字母a出现了128次的时候开始报错\" style=\"zoom:80%\"/>\n\n\n\n\n<p>很好！当字母w出现了超过128次时候地址发生了变化。128这个数字相信大家一定很敏感，那么这个范围很可能是[-128, 127]。那么则需要看看底层源码是怎么说的，去看看<code>Map.java</code>，搜索<code>127</code>，并没有发现相关说明。</p>\n<img src=\"../images/【debug】Java中的map比较/map源码.png\" alt=\"map源码\" style=\"zoom:80%;\" />\n\n\n\n<p><code>&#123;Integer@***&#125;</code>这里面经常变得数字就是星号部分，那么去<code>Ieteger.java</code>里面看看有什么发现。</p>\n<img src=\"../images/【debug】Java中的map比较/第一个127.png\" alt=\"搜索结果1\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/【debug】Java中的map比较/最后一个127.png\" alt=\"搜索结果2\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>结合这两段我悟了，果然有这么个范围，在初始化值的时候，[-128, 127]这个范围的数是在缓存里面，所以当<code>Map</code>中的<code>value</code>小于128时候读取的是缓存中的数，所以他们地址是一样的，也就是<code>hashS.get(c)==hashT.get(c)</code>的原因。当超过这个范围，则会在新的地方存放一个值，尽管<code>hashS.get(c)</code>和<code>hashT.get(c)</code>均为128，但是使用<code>==</code>或<code>!=</code>判断的时候，判断的是<strong>地址</strong>，得到<code>hashS.get(c)!=hashT.get(c)</code>。</p>\n<h4 id=\"所以一定要写equal-方法进行判断\"><a href=\"#所以一定要写equal-方法进行判断\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><h4 id=\"所以一定要写equal-方法进行判断-1\"><a href=\"#所以一定要写equal-方法进行判断-1\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><h4 id=\"所以一定要写equal-方法进行判断-2\"><a href=\"#所以一定要写equal-方法进行判断-2\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><p><code>hashS.get(c).equal(hashT.get(c))</code>，这样判断的才是值而不是地址</p>\n"},{"title":"搭建博客","abbrlink":"5c83b0d3","date":"2023-09-19T15:33:25.000Z","_content":"\n# 搭建Hexo博客\n\n根据程序羊的视频搭建而成，整理下步骤和与当时不同之处\n\nhttps://www.bilibili.com/video/BV1Yb411a7ty/\n\n## 1. 安装node.js与npm\n\n略。\n\n有“魔法”的不需要下载`cnpm`包，此后以`npm`为例\n\n## 2. 安装Hexo\n\n`npm install -g hexo-cli`\n\n`hexo -v `查看是否安装成功\n\n## 3. 选址\n\n在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 `blog` ，并且看做根目录），在该路径下开始操作。\n\n- 执行 `hexo init` 初始化，`Linux\\MacOS` 需要 `sudo`权限\n\n- 生成一些文件与文件夹，一些配置在文件 `blog/_config.yml` 中    \n\n## 4. 部署至GitHub的准备工作\n\n1. 在该路径下执行命令: `npm install --save-deployer-git` 安装相关工具\n2. 在GitHub新建仓库，仓库名必须为: `GitHub的用户名.github.io`\n3. 更改`_config.yml`文件中的内容(在最后)：\n\n    ```yaml\n    deploy:\n      type: git\n      repo: git仓库地址\n      branch: master\n    ```\n4. GitHub更新了认证方式，具体操作可以参考这一篇[博客](https://blog.csdn.net/weixin_63031041/article/details/128731242)\n\n## 5. 相关命令\n\n1. 运行(本地预览): `hexo s`\n2. 写新的博客: `hexo n \"文件名\"`\n3. 写好之后生成静态网站: `hexo g`\n4. 清空第三步生成的文件: `hexo clean`\n5. 推送至GitHub(会有一定的延迟): `hexo d`\n\n    使用“魔法”后，GitHub需要设置代理\n\n    `git config --global http.proxy http://127.0.0.1:port`\n\n    `git config --global https.proxy https://127.0.0.1:port`\n\n    \n\n## 6. 更换主题\n\n可以直接在搜索引擎搜索相关关键字，例如`hexo 主题`，以我现在使用的`Fluid`为例\n\nGitHub地址: https://github.com/fluid-dev/hexo-theme-fluid/tree/master\n\n1. 在博客目录下克隆, 至`blog/themes`文件夹下: `git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid`\n2. 更改`blog/_config.yml` 第100行，将`theme: `后改为`fluid`\n3. 更多具体配置参考官方文档: https://hexo.fluid-dev.com/docs/guide/\n4. 大段文字需要换行需要使用`HTML`语法\n\n## 7. 其他\n\n这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。\n\n参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。\n\n很喜欢郭帆导演的一句话，让我放在了首页开屏\n\n==如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！==\n\n","source":"_posts/搭建博客.md","raw":"---\ntitle: 搭建博客\ntags:\n  - 教程\ncategories: 搭建环境\nabbrlink: 5c83b0d3\ndate: 2023-09-19 23:33:25\n---\n\n# 搭建Hexo博客\n\n根据程序羊的视频搭建而成，整理下步骤和与当时不同之处\n\nhttps://www.bilibili.com/video/BV1Yb411a7ty/\n\n## 1. 安装node.js与npm\n\n略。\n\n有“魔法”的不需要下载`cnpm`包，此后以`npm`为例\n\n## 2. 安装Hexo\n\n`npm install -g hexo-cli`\n\n`hexo -v `查看是否安装成功\n\n## 3. 选址\n\n在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 `blog` ，并且看做根目录），在该路径下开始操作。\n\n- 执行 `hexo init` 初始化，`Linux\\MacOS` 需要 `sudo`权限\n\n- 生成一些文件与文件夹，一些配置在文件 `blog/_config.yml` 中    \n\n## 4. 部署至GitHub的准备工作\n\n1. 在该路径下执行命令: `npm install --save-deployer-git` 安装相关工具\n2. 在GitHub新建仓库，仓库名必须为: `GitHub的用户名.github.io`\n3. 更改`_config.yml`文件中的内容(在最后)：\n\n    ```yaml\n    deploy:\n      type: git\n      repo: git仓库地址\n      branch: master\n    ```\n4. GitHub更新了认证方式，具体操作可以参考这一篇[博客](https://blog.csdn.net/weixin_63031041/article/details/128731242)\n\n## 5. 相关命令\n\n1. 运行(本地预览): `hexo s`\n2. 写新的博客: `hexo n \"文件名\"`\n3. 写好之后生成静态网站: `hexo g`\n4. 清空第三步生成的文件: `hexo clean`\n5. 推送至GitHub(会有一定的延迟): `hexo d`\n\n    使用“魔法”后，GitHub需要设置代理\n\n    `git config --global http.proxy http://127.0.0.1:port`\n\n    `git config --global https.proxy https://127.0.0.1:port`\n\n    \n\n## 6. 更换主题\n\n可以直接在搜索引擎搜索相关关键字，例如`hexo 主题`，以我现在使用的`Fluid`为例\n\nGitHub地址: https://github.com/fluid-dev/hexo-theme-fluid/tree/master\n\n1. 在博客目录下克隆, 至`blog/themes`文件夹下: `git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid`\n2. 更改`blog/_config.yml` 第100行，将`theme: `后改为`fluid`\n3. 更多具体配置参考官方文档: https://hexo.fluid-dev.com/docs/guide/\n4. 大段文字需要换行需要使用`HTML`语法\n\n## 7. 其他\n\n这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。\n\n参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。\n\n很喜欢郭帆导演的一句话，让我放在了首页开屏\n\n==如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！==\n\n","slug":"搭建博客","published":1,"updated":"2023-09-20T08:07:11.011Z","_id":"cln60vik4000fwvz84nke6dw8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"搭建Hexo博客\"><a href=\"#搭建Hexo博客\" class=\"headerlink\" title=\"搭建Hexo博客\"></a>搭建Hexo博客</h1><p>根据程序羊的视频搭建而成，整理下步骤和与当时不同之处</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Yb411a7ty/\">https://www.bilibili.com/video/BV1Yb411a7ty/</a></p>\n<h2 id=\"1-安装node-js与npm\"><a href=\"#1-安装node-js与npm\" class=\"headerlink\" title=\"1. 安装node.js与npm\"></a>1. 安装node.js与npm</h2><p>略。</p>\n<p>有“魔法”的不需要下载<code>cnpm</code>包，此后以<code>npm</code>为例</p>\n<h2 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2. 安装Hexo\"></a>2. 安装Hexo</h2><p><code>npm install -g hexo-cli</code></p>\n<p><code>hexo -v </code>查看是否安装成功</p>\n<h2 id=\"3-选址\"><a href=\"#3-选址\" class=\"headerlink\" title=\"3. 选址\"></a>3. 选址</h2><p>在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 <code>blog</code> ，并且看做根目录），在该路径下开始操作。</p>\n<ul>\n<li><p>执行 <code>hexo init</code> 初始化，<code>Linux\\MacOS</code> 需要 <code>sudo</code>权限</p>\n</li>\n<li><p>生成一些文件与文件夹，一些配置在文件 <code>blog/_config.yml</code> 中</p>\n</li>\n</ul>\n<h2 id=\"4-部署至GitHub的准备工作\"><a href=\"#4-部署至GitHub的准备工作\" class=\"headerlink\" title=\"4. 部署至GitHub的准备工作\"></a>4. 部署至GitHub的准备工作</h2><ol>\n<li><p>在该路径下执行命令: <code>npm install --save-deployer-git</code> 安装相关工具</p>\n</li>\n<li><p>在GitHub新建仓库，仓库名必须为: <code>GitHub的用户名.github.io</code></p>\n</li>\n<li><p>更改<code>_config.yml</code>文件中的内容(在最后)：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">git仓库地址</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span><br></code></pre></td></tr></table></figure></li>\n<li><p>GitHub更新了认证方式，具体操作可以参考这一篇<a href=\"https://blog.csdn.net/weixin_63031041/article/details/128731242\">博客</a></p>\n</li>\n</ol>\n<h2 id=\"5-相关命令\"><a href=\"#5-相关命令\" class=\"headerlink\" title=\"5. 相关命令\"></a>5. 相关命令</h2><ol>\n<li><p>运行(本地预览): <code>hexo s</code></p>\n</li>\n<li><p>写新的博客: <code>hexo n &quot;文件名&quot;</code></p>\n</li>\n<li><p>写好之后生成静态网站: <code>hexo g</code></p>\n</li>\n<li><p>清空第三步生成的文件: <code>hexo clean</code></p>\n</li>\n<li><p>推送至GitHub(会有一定的延迟): <code>hexo d</code></p>\n<p> 使用“魔法”后，GitHub需要设置代理</p>\n<p> <code>git config --global http.proxy http://127.0.0.1:port</code></p>\n<p> <code>git config --global https.proxy https://127.0.0.1:port</code></p>\n</li>\n</ol>\n<h2 id=\"6-更换主题\"><a href=\"#6-更换主题\" class=\"headerlink\" title=\"6. 更换主题\"></a>6. 更换主题</h2><p>可以直接在搜索引擎搜索相关关键字，例如<code>hexo 主题</code>，以我现在使用的<code>Fluid</code>为例</p>\n<p>GitHub地址: <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/tree/master\">https://github.com/fluid-dev/hexo-theme-fluid/tree/master</a></p>\n<ol>\n<li>在博客目录下克隆, 至<code>blog/themes</code>文件夹下: <code>git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid</code></li>\n<li>更改<code>blog/_config.yml</code> 第100行，将<code>theme: </code>后改为<code>fluid</code></li>\n<li>更多具体配置参考官方文档: <a href=\"https://hexo.fluid-dev.com/docs/guide/\">https://hexo.fluid-dev.com/docs/guide/</a></li>\n<li>大段文字需要换行需要使用<code>HTML</code>语法</li>\n</ol>\n<h2 id=\"7-其他\"><a href=\"#7-其他\" class=\"headerlink\" title=\"7. 其他\"></a>7. 其他</h2><p>这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。</p>\n<p>参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。</p>\n<p>很喜欢郭帆导演的一句话，让我放在了首页开屏</p>\n<p>&#x3D;&#x3D;如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！&#x3D;&#x3D;</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建Hexo博客\"><a href=\"#搭建Hexo博客\" class=\"headerlink\" title=\"搭建Hexo博客\"></a>搭建Hexo博客</h1><p>根据程序羊的视频搭建而成，整理下步骤和与当时不同之处</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Yb411a7ty/\">https://www.bilibili.com/video/BV1Yb411a7ty/</a></p>\n<h2 id=\"1-安装node-js与npm\"><a href=\"#1-安装node-js与npm\" class=\"headerlink\" title=\"1. 安装node.js与npm\"></a>1. 安装node.js与npm</h2><p>略。</p>\n<p>有“魔法”的不需要下载<code>cnpm</code>包，此后以<code>npm</code>为例</p>\n<h2 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2. 安装Hexo\"></a>2. 安装Hexo</h2><p><code>npm install -g hexo-cli</code></p>\n<p><code>hexo -v </code>查看是否安装成功</p>\n<h2 id=\"3-选址\"><a href=\"#3-选址\" class=\"headerlink\" title=\"3. 选址\"></a>3. 选址</h2><p>在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 <code>blog</code> ，并且看做根目录），在该路径下开始操作。</p>\n<ul>\n<li><p>执行 <code>hexo init</code> 初始化，<code>Linux\\MacOS</code> 需要 <code>sudo</code>权限</p>\n</li>\n<li><p>生成一些文件与文件夹，一些配置在文件 <code>blog/_config.yml</code> 中</p>\n</li>\n</ul>\n<h2 id=\"4-部署至GitHub的准备工作\"><a href=\"#4-部署至GitHub的准备工作\" class=\"headerlink\" title=\"4. 部署至GitHub的准备工作\"></a>4. 部署至GitHub的准备工作</h2><ol>\n<li><p>在该路径下执行命令: <code>npm install --save-deployer-git</code> 安装相关工具</p>\n</li>\n<li><p>在GitHub新建仓库，仓库名必须为: <code>GitHub的用户名.github.io</code></p>\n</li>\n<li><p>更改<code>_config.yml</code>文件中的内容(在最后)：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">git仓库地址</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span><br></code></pre></td></tr></table></figure></li>\n<li><p>GitHub更新了认证方式，具体操作可以参考这一篇<a href=\"https://blog.csdn.net/weixin_63031041/article/details/128731242\">博客</a></p>\n</li>\n</ol>\n<h2 id=\"5-相关命令\"><a href=\"#5-相关命令\" class=\"headerlink\" title=\"5. 相关命令\"></a>5. 相关命令</h2><ol>\n<li><p>运行(本地预览): <code>hexo s</code></p>\n</li>\n<li><p>写新的博客: <code>hexo n &quot;文件名&quot;</code></p>\n</li>\n<li><p>写好之后生成静态网站: <code>hexo g</code></p>\n</li>\n<li><p>清空第三步生成的文件: <code>hexo clean</code></p>\n</li>\n<li><p>推送至GitHub(会有一定的延迟): <code>hexo d</code></p>\n<p> 使用“魔法”后，GitHub需要设置代理</p>\n<p> <code>git config --global http.proxy http://127.0.0.1:port</code></p>\n<p> <code>git config --global https.proxy https://127.0.0.1:port</code></p>\n</li>\n</ol>\n<h2 id=\"6-更换主题\"><a href=\"#6-更换主题\" class=\"headerlink\" title=\"6. 更换主题\"></a>6. 更换主题</h2><p>可以直接在搜索引擎搜索相关关键字，例如<code>hexo 主题</code>，以我现在使用的<code>Fluid</code>为例</p>\n<p>GitHub地址: <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/tree/master\">https://github.com/fluid-dev/hexo-theme-fluid/tree/master</a></p>\n<ol>\n<li>在博客目录下克隆, 至<code>blog/themes</code>文件夹下: <code>git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid</code></li>\n<li>更改<code>blog/_config.yml</code> 第100行，将<code>theme: </code>后改为<code>fluid</code></li>\n<li>更多具体配置参考官方文档: <a href=\"https://hexo.fluid-dev.com/docs/guide/\">https://hexo.fluid-dev.com/docs/guide/</a></li>\n<li>大段文字需要换行需要使用<code>HTML</code>语法</li>\n</ol>\n<h2 id=\"7-其他\"><a href=\"#7-其他\" class=\"headerlink\" title=\"7. 其他\"></a>7. 其他</h2><p>这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。</p>\n<p>参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。</p>\n<p>很喜欢郭帆导演的一句话，让我放在了首页开屏</p>\n<p>&#x3D;&#x3D;如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！&#x3D;&#x3D;</p>\n"},{"title":"代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。","abbrlink":"7b6fd36a","date":"2023-09-20T07:41:36.000Z","_content":"\n# 代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\n\n\n\n## 704. 二分查找\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/binary-search/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0704.二分查找.html)\n>\n>   视频讲解：[手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找](https://www.bilibili.com/video/BV1fA4y1o715)\n>\n>   状态：AC\n\n### 思路\n\n看了卡哥的文档，才注意到二分查找也有两种写法。”要**熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法**“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。\n\n### 代码\n\n``` go\nfunc search(nums []int, target int) int {\n\t// 左闭右闭写法\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid - 1\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n\n```\n\n\n\n``` go\nfunc search1(nums []int, target int) int {\n\t// 左闭右开写法\n\tleft := 0\n\tright := len(nums)\n\tvar mid int\n\tfor left < right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n## 27. 移除元素\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/remove-element/ )\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0027.移除元素.html)\n>\n>   视频讲解：[数组中移除元素并不容易！ | LeetCode：27. 移除元素](https://www.bilibili.com/video/BV12A4y1Z7LP )\n>\n>   状态：AC\n\n### 思路\n\n第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 `O(1)` 额外空间并 **原地修改输入数组**“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为`O(n^2)`。再向下看到了示例：\n\n**示例 1：**\n\n\n> 输入：nums = [3,2,2,3], val = 3\n> 输出：2, nums = [2,2]\n> 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n\n\n**示例 2：**\n\n\n> 输入：nums = [0,1,2,2,3,0,4,2], val = 2\n> 输出：5, nums = [0,1,4,0,3]\n> 解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n\n看到这里大概理解了，想到的解法是双指针，方法也有两种。\n\n#### 方法一：\n\n1.   左右指针均从头开始，右指针每次向前一步\n2.   若右指针的值为`val`，那么跳过；否则将右指针的值给左指针，左指针++\n3.   返回左指针所在的索引\n\n#### 方法二：\n\n1.   左指针从前开始，右指针从后开始，左指针找`val`，右指针找非`val`\n2.   右指针的值给左指针\n3.   返回左指针所在的索引\n\n### 代码\n\n``` go\n// 方法一\nfunc removeElement(nums []int, val int) int {\n\tn := len(nums)\n\tleft := 0\n\tfor right := 0; right < n; right++ {\n\t\tif nums[right] != val {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn left\n}\n```\n\n``` go\n// 方法二\nfunc removeElement(nums []int, val int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tfor left <= right {\n\t\t\tif nums[left] == val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tleft++\n\t\t\t}\n\t\t}\n\t\tfor left <= right {\n\t\t\tif nums[right] != val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tright--\n\t\t\t}\n\t\t}\n\t\tif left < right {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t\tright--\n\t\t}\n\t}\n\treturn left\n}\n```\n\n方法二还是的边界条件有点绕的，自己把自己绕进去了\n\n![绕晕了的边界](../images/day01/image-20230920140818304.png)\n\n\n\n## 附加题 35. 搜索插入位置\n\n>   题目链接：[35. 搜索插入位置](https://leetcode.cn/problems/search-insert-position/)\n>\n>   状态：AC\n\n### 思路\n\n查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。\n\n### 代码\n\n``` go\nfunc searchInsert(nums []int, target int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] == target {\n\t\t\treturn mid\n\t\t} else if nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid - 1\n\t\t}\n\t}\n\treturn left\n}\n```\n\n## 附加题34.在排序数组中查找元素的第一个和最后一个位置\n\n>   题目链接：[34.在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/)\n>\n>   状态：AC\n\n### 思路\n\n通过两次二分查找找到`target`在数组中的起始和结束位置，实现了函数`binary`可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：\n\n-   起始：需要判断`num[mid-1]<target`，或者`mid==0`（第0个元素就是起始位置），为了保证不越界，需要先判断`mid==0`的情况\n-   结束：需要判断`mid == len(nums)-1`（最后一个元素是结束位置），或者`nums[mid+1] > target`\n\n如果没有找到该元素，则返回`-1`。由于起始和介绍条件判断有些不同，`binary`函数中使用了`flag`来区分是进行起始元素查找还是结束元素查找的条件。若是`true`则为查找起始元素\n\n### 代码\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n\tresult := []int{}\n    var temp int\n    temp = binary(nums, target, true)\n    if temp == -1 {  // 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行\n        return []int{-1, -1}\n    } else {\n\t\tresult = append(result, temp)\n        result = append(result, binary(nums, target, false))\n        return result\n    }\n}\nfunc binary(nums []int, target int, flag bool) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tmid := left + (right-left)/2\n\t\tif flag {\n\t\t\tif nums[mid] == target && (mid == 0 || nums[mid-1] < target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] < target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t} else {\n\t\t\tif nums[mid] == target && (mid == len(nums)-1 || nums[mid+1] > target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] <= target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n![AC！](../images/day01/image-20230920152650727.png)\n\n### 官方解法\n\n#### Go语言版本\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n    leftmost := sort.SearchInts(nums, target)\n    if leftmost == len(nums) || nums[leftmost] != target {\n        return []int{-1, -1}\n    }\n    rightmost := sort.SearchInts(nums, target + 1) - 1\n    return []int{leftmost, rightmost}\n}\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n`sort.SearchInts()`函数没有接触过，看看源码\n\n<img src=\"../images/day01/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n>   SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。\n>   切片必须按升序排序。\n\n#### C++版本\n\n``` c++\nclass Solution { \npublic:\n    int binarySearch(vector<int>& nums, int target, bool lower) {\n        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n\n    vector<int> searchRange(vector<int>& nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.size() && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return vector<int>{leftIdx, rightIdx};\n        } \n        return vector<int>{-1, -1};\n    }\n};\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的`true`和`false`对条件控制的很巧妙。\n\n## 小结\n\n-   在二分查找时又学到了一种思路，”左闭右开“\n\n-   群里面有位同学说到了这个事情，之前从未注意过：\n\n    <img src=\"../images/day01/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n    看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。\n\n今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！\n\n","source":"_posts/day01.md","raw":"---\ntitle: 代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 数组\ncategories: 刷题\nabbrlink: 7b6fd36a\ndate: 2023-09-20 15:41:36\n---\n\n# 代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\n\n\n\n## 704. 二分查找\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/binary-search/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0704.二分查找.html)\n>\n>   视频讲解：[手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找](https://www.bilibili.com/video/BV1fA4y1o715)\n>\n>   状态：AC\n\n### 思路\n\n看了卡哥的文档，才注意到二分查找也有两种写法。”要**熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法**“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。\n\n### 代码\n\n``` go\nfunc search(nums []int, target int) int {\n\t// 左闭右闭写法\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid - 1\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n\n```\n\n\n\n``` go\nfunc search1(nums []int, target int) int {\n\t// 左闭右开写法\n\tleft := 0\n\tright := len(nums)\n\tvar mid int\n\tfor left < right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n## 27. 移除元素\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/remove-element/ )\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0027.移除元素.html)\n>\n>   视频讲解：[数组中移除元素并不容易！ | LeetCode：27. 移除元素](https://www.bilibili.com/video/BV12A4y1Z7LP )\n>\n>   状态：AC\n\n### 思路\n\n第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 `O(1)` 额外空间并 **原地修改输入数组**“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为`O(n^2)`。再向下看到了示例：\n\n**示例 1：**\n\n\n> 输入：nums = [3,2,2,3], val = 3\n> 输出：2, nums = [2,2]\n> 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n\n\n**示例 2：**\n\n\n> 输入：nums = [0,1,2,2,3,0,4,2], val = 2\n> 输出：5, nums = [0,1,4,0,3]\n> 解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n\n看到这里大概理解了，想到的解法是双指针，方法也有两种。\n\n#### 方法一：\n\n1.   左右指针均从头开始，右指针每次向前一步\n2.   若右指针的值为`val`，那么跳过；否则将右指针的值给左指针，左指针++\n3.   返回左指针所在的索引\n\n#### 方法二：\n\n1.   左指针从前开始，右指针从后开始，左指针找`val`，右指针找非`val`\n2.   右指针的值给左指针\n3.   返回左指针所在的索引\n\n### 代码\n\n``` go\n// 方法一\nfunc removeElement(nums []int, val int) int {\n\tn := len(nums)\n\tleft := 0\n\tfor right := 0; right < n; right++ {\n\t\tif nums[right] != val {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn left\n}\n```\n\n``` go\n// 方法二\nfunc removeElement(nums []int, val int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tfor left <= right {\n\t\t\tif nums[left] == val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tleft++\n\t\t\t}\n\t\t}\n\t\tfor left <= right {\n\t\t\tif nums[right] != val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tright--\n\t\t\t}\n\t\t}\n\t\tif left < right {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t\tright--\n\t\t}\n\t}\n\treturn left\n}\n```\n\n方法二还是的边界条件有点绕的，自己把自己绕进去了\n\n![绕晕了的边界](../images/day01/image-20230920140818304.png)\n\n\n\n## 附加题 35. 搜索插入位置\n\n>   题目链接：[35. 搜索插入位置](https://leetcode.cn/problems/search-insert-position/)\n>\n>   状态：AC\n\n### 思路\n\n查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。\n\n### 代码\n\n``` go\nfunc searchInsert(nums []int, target int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] == target {\n\t\t\treturn mid\n\t\t} else if nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid - 1\n\t\t}\n\t}\n\treturn left\n}\n```\n\n## 附加题34.在排序数组中查找元素的第一个和最后一个位置\n\n>   题目链接：[34.在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/)\n>\n>   状态：AC\n\n### 思路\n\n通过两次二分查找找到`target`在数组中的起始和结束位置，实现了函数`binary`可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：\n\n-   起始：需要判断`num[mid-1]<target`，或者`mid==0`（第0个元素就是起始位置），为了保证不越界，需要先判断`mid==0`的情况\n-   结束：需要判断`mid == len(nums)-1`（最后一个元素是结束位置），或者`nums[mid+1] > target`\n\n如果没有找到该元素，则返回`-1`。由于起始和介绍条件判断有些不同，`binary`函数中使用了`flag`来区分是进行起始元素查找还是结束元素查找的条件。若是`true`则为查找起始元素\n\n### 代码\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n\tresult := []int{}\n    var temp int\n    temp = binary(nums, target, true)\n    if temp == -1 {  // 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行\n        return []int{-1, -1}\n    } else {\n\t\tresult = append(result, temp)\n        result = append(result, binary(nums, target, false))\n        return result\n    }\n}\nfunc binary(nums []int, target int, flag bool) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tmid := left + (right-left)/2\n\t\tif flag {\n\t\t\tif nums[mid] == target && (mid == 0 || nums[mid-1] < target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] < target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t} else {\n\t\t\tif nums[mid] == target && (mid == len(nums)-1 || nums[mid+1] > target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] <= target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n![AC！](../images/day01/image-20230920152650727.png)\n\n### 官方解法\n\n#### Go语言版本\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n    leftmost := sort.SearchInts(nums, target)\n    if leftmost == len(nums) || nums[leftmost] != target {\n        return []int{-1, -1}\n    }\n    rightmost := sort.SearchInts(nums, target + 1) - 1\n    return []int{leftmost, rightmost}\n}\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n`sort.SearchInts()`函数没有接触过，看看源码\n\n<img src=\"../images/day01/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n>   SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。\n>   切片必须按升序排序。\n\n#### C++版本\n\n``` c++\nclass Solution { \npublic:\n    int binarySearch(vector<int>& nums, int target, bool lower) {\n        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n\n    vector<int> searchRange(vector<int>& nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.size() && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return vector<int>{leftIdx, rightIdx};\n        } \n        return vector<int>{-1, -1};\n    }\n};\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的`true`和`false`对条件控制的很巧妙。\n\n## 小结\n\n-   在二分查找时又学到了一种思路，”左闭右开“\n\n-   群里面有位同学说到了这个事情，之前从未注意过：\n\n    <img src=\"../images/day01/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n    看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。\n\n今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！\n\n","slug":"day01","published":1,"updated":"2023-10-24T19:30:55.964Z","_id":"cln7q7aln0000vswhdo94d4i6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第一天-704-二分查找、27-移除元素。\"><a href=\"#代码随想录算法训练营第一天-704-二分查找、27-移除元素。\" class=\"headerlink\" title=\"代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\"></a>代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。</h1><h2 id=\"704-二分查找\"><a href=\"#704-二分查找\" class=\"headerlink\" title=\"704. 二分查找\"></a>704. 二分查找</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/binary-search/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1fA4y1o715\">手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>看了卡哥的文档，才注意到二分查找也有两种写法。”要<strong>熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法</strong>“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右闭写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search1</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右开写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"27-移除元素\"><a href=\"#27-移除元素\" class=\"headerlink\" title=\"27. 移除元素\"></a>27. 移除元素</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/remove-element/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV12A4y1Z7LP\">数组中移除元素并不容易！ | LeetCode：27. 移除元素</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地修改输入数组</strong>“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为<code>O(n^2)</code>。再向下看到了示例：</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>\n</blockquote>\n<p>看到这里大概理解了，想到的解法是双指针，方法也有两种。</p>\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><ol>\n<li>左右指针均从头开始，右指针每次向前一步</li>\n<li>若右指针的值为<code>val</code>，那么跳过；否则将右指针的值给左指针，左指针++</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><ol>\n<li>左指针从前开始，右指针从后开始，左指针找<code>val</code>，右指针找非<code>val</code></li>\n<li>右指针的值给左指针</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法一</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tleft := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> right := <span class=\"hljs-number\">0</span>; right &lt; n; right++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法二</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[left] == val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tleft++<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright--<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> left &lt; right &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t\tright--<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>方法二还是的边界条件有点绕的，自己把自己绕进去了</p>\n<p><img src=\"/../images/day01/image-20230920140818304.png\" alt=\"绕晕了的边界\"></p>\n<h2 id=\"附加题-35-搜索插入位置\"><a href=\"#附加题-35-搜索插入位置\" class=\"headerlink\" title=\"附加题 35. 搜索插入位置\"></a>附加题 35. 搜索插入位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/search-insert-position/\">35. 搜索插入位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"附加题34-在排序数组中查找元素的第一个和最后一个位置\"><a href=\"#附加题34-在排序数组中查找元素的第一个和最后一个位置\" class=\"headerlink\" title=\"附加题34.在排序数组中查找元素的第一个和最后一个位置\"></a>附加题34.在排序数组中查找元素的第一个和最后一个位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/\">34.在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>通过两次二分查找找到<code>target</code>在数组中的起始和结束位置，实现了函数<code>binary</code>可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：</p>\n<ul>\n<li>起始：需要判断<code>num[mid-1]&lt;target</code>，或者<code>mid==0</code>（第0个元素就是起始位置），为了保证不越界，需要先判断<code>mid==0</code>的情况</li>\n<li>结束：需要判断<code>mid == len(nums)-1</code>（最后一个元素是结束位置），或者<code>nums[mid+1] &gt; target</code></li>\n</ul>\n<p>如果没有找到该元素，则返回<code>-1</code>。由于起始和介绍条件判断有些不同，<code>binary</code>函数中使用了<code>flag</code>来区分是进行起始元素查找还是结束元素查找的条件。若是<code>true</code>则为查找起始元素</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">var</span> temp <span class=\"hljs-type\">int</span><br>    temp = binary(nums, target, <span class=\"hljs-literal\">true</span>)<br>    <span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-number\">-1</span> &#123;  <span class=\"hljs-comment\">// 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行</span><br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>        result = <span class=\"hljs-built_in\">append</span>(result, binary(nums, target, <span class=\"hljs-literal\">false</span>))<br>        <span class=\"hljs-keyword\">return</span> result<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">binary</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>, flag <span class=\"hljs-type\">bool</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid := left + (right-left)/<span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> flag &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-number\">0</span> || nums[mid<span class=\"hljs-number\">-1</span>] &lt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-1</span> || nums[mid+<span class=\"hljs-number\">1</span>] &gt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt;= target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/day01/image-20230920152650727.png\" alt=\"AC！\"></p>\n<h3 id=\"官方解法\"><a href=\"#官方解法\" class=\"headerlink\" title=\"官方解法\"></a>官方解法</h3><h4 id=\"Go语言版本\"><a href=\"#Go语言版本\" class=\"headerlink\" title=\"Go语言版本\"></a>Go语言版本</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    leftmost := sort.SearchInts(nums, target)<br>    <span class=\"hljs-keyword\">if</span> leftmost == <span class=\"hljs-built_in\">len</span>(nums) || nums[leftmost] != target &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125;<br>    rightmost := sort.SearchInts(nums, target + <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;leftmost, rightmost&#125;<br>&#125;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p><code>sort.SearchInts()</code>函数没有接触过，看看源码</p>\n<img src=\"../images/day01/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>  SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。<br>  切片必须按升序排序。</p>\n</blockquote>\n<h4 id=\"C-版本\"><a href=\"#C-版本\" class=\"headerlink\" title=\"C++版本\"></a>C++版本</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123; <br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target, <span class=\"hljs-type\">bool</span> lower)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>, right = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>, ans = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>            <span class=\"hljs-type\">int</span> mid = (left + right) / <span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-keyword\">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) &#123;<br>                right = mid - <span class=\"hljs-number\">1</span>;<br>                ans = mid;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                left = mid + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br><br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> leftIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-type\">int</span> rightIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">false</span>) - <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (leftIdx &lt;= rightIdx &amp;&amp; rightIdx &lt; nums.<span class=\"hljs-built_in\">size</span>() &amp;&amp; nums[leftIdx] == target &amp;&amp; nums[rightIdx] == target) &#123;<br>            <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;leftIdx, rightIdx&#125;;<br>        &#125; <br>        <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;;<br>    &#125;<br>&#125;;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p>官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的<code>true</code>和<code>false</code>对条件控制的很巧妙。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>在二分查找时又学到了一种思路，”左闭右开“</p>\n</li>\n<li><p>群里面有位同学说到了这个事情，之前从未注意过：</p>\n<img src=\"../images/day01/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n<p>看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。</p>\n</li>\n</ul>\n<p>今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第一天-704-二分查找、27-移除元素。\"><a href=\"#代码随想录算法训练营第一天-704-二分查找、27-移除元素。\" class=\"headerlink\" title=\"代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\"></a>代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。</h1><h2 id=\"704-二分查找\"><a href=\"#704-二分查找\" class=\"headerlink\" title=\"704. 二分查找\"></a>704. 二分查找</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/binary-search/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1fA4y1o715\">手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>看了卡哥的文档，才注意到二分查找也有两种写法。”要<strong>熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法</strong>“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右闭写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search1</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右开写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"27-移除元素\"><a href=\"#27-移除元素\" class=\"headerlink\" title=\"27. 移除元素\"></a>27. 移除元素</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/remove-element/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV12A4y1Z7LP\">数组中移除元素并不容易！ | LeetCode：27. 移除元素</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地修改输入数组</strong>“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为<code>O(n^2)</code>。再向下看到了示例：</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>\n</blockquote>\n<p>看到这里大概理解了，想到的解法是双指针，方法也有两种。</p>\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><ol>\n<li>左右指针均从头开始，右指针每次向前一步</li>\n<li>若右指针的值为<code>val</code>，那么跳过；否则将右指针的值给左指针，左指针++</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><ol>\n<li>左指针从前开始，右指针从后开始，左指针找<code>val</code>，右指针找非<code>val</code></li>\n<li>右指针的值给左指针</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法一</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tleft := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> right := <span class=\"hljs-number\">0</span>; right &lt; n; right++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法二</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[left] == val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tleft++<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright--<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> left &lt; right &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t\tright--<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>方法二还是的边界条件有点绕的，自己把自己绕进去了</p>\n<p><img src=\"/../images/day01/image-20230920140818304.png\" alt=\"绕晕了的边界\"></p>\n<h2 id=\"附加题-35-搜索插入位置\"><a href=\"#附加题-35-搜索插入位置\" class=\"headerlink\" title=\"附加题 35. 搜索插入位置\"></a>附加题 35. 搜索插入位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/search-insert-position/\">35. 搜索插入位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"附加题34-在排序数组中查找元素的第一个和最后一个位置\"><a href=\"#附加题34-在排序数组中查找元素的第一个和最后一个位置\" class=\"headerlink\" title=\"附加题34.在排序数组中查找元素的第一个和最后一个位置\"></a>附加题34.在排序数组中查找元素的第一个和最后一个位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/\">34.在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>通过两次二分查找找到<code>target</code>在数组中的起始和结束位置，实现了函数<code>binary</code>可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：</p>\n<ul>\n<li>起始：需要判断<code>num[mid-1]&lt;target</code>，或者<code>mid==0</code>（第0个元素就是起始位置），为了保证不越界，需要先判断<code>mid==0</code>的情况</li>\n<li>结束：需要判断<code>mid == len(nums)-1</code>（最后一个元素是结束位置），或者<code>nums[mid+1] &gt; target</code></li>\n</ul>\n<p>如果没有找到该元素，则返回<code>-1</code>。由于起始和介绍条件判断有些不同，<code>binary</code>函数中使用了<code>flag</code>来区分是进行起始元素查找还是结束元素查找的条件。若是<code>true</code>则为查找起始元素</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">var</span> temp <span class=\"hljs-type\">int</span><br>    temp = binary(nums, target, <span class=\"hljs-literal\">true</span>)<br>    <span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-number\">-1</span> &#123;  <span class=\"hljs-comment\">// 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行</span><br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>        result = <span class=\"hljs-built_in\">append</span>(result, binary(nums, target, <span class=\"hljs-literal\">false</span>))<br>        <span class=\"hljs-keyword\">return</span> result<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">binary</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>, flag <span class=\"hljs-type\">bool</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid := left + (right-left)/<span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> flag &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-number\">0</span> || nums[mid<span class=\"hljs-number\">-1</span>] &lt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-1</span> || nums[mid+<span class=\"hljs-number\">1</span>] &gt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt;= target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/day01/image-20230920152650727.png\" alt=\"AC！\"></p>\n<h3 id=\"官方解法\"><a href=\"#官方解法\" class=\"headerlink\" title=\"官方解法\"></a>官方解法</h3><h4 id=\"Go语言版本\"><a href=\"#Go语言版本\" class=\"headerlink\" title=\"Go语言版本\"></a>Go语言版本</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    leftmost := sort.SearchInts(nums, target)<br>    <span class=\"hljs-keyword\">if</span> leftmost == <span class=\"hljs-built_in\">len</span>(nums) || nums[leftmost] != target &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125;<br>    rightmost := sort.SearchInts(nums, target + <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;leftmost, rightmost&#125;<br>&#125;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p><code>sort.SearchInts()</code>函数没有接触过，看看源码</p>\n<img src=\"../images/day01/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>  SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。<br>  切片必须按升序排序。</p>\n</blockquote>\n<h4 id=\"C-版本\"><a href=\"#C-版本\" class=\"headerlink\" title=\"C++版本\"></a>C++版本</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123; <br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target, <span class=\"hljs-type\">bool</span> lower)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>, right = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>, ans = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>            <span class=\"hljs-type\">int</span> mid = (left + right) / <span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-keyword\">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) &#123;<br>                right = mid - <span class=\"hljs-number\">1</span>;<br>                ans = mid;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                left = mid + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br><br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> leftIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-type\">int</span> rightIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">false</span>) - <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (leftIdx &lt;= rightIdx &amp;&amp; rightIdx &lt; nums.<span class=\"hljs-built_in\">size</span>() &amp;&amp; nums[leftIdx] == target &amp;&amp; nums[rightIdx] == target) &#123;<br>            <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;leftIdx, rightIdx&#125;;<br>        &#125; <br>        <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;;<br>    &#125;<br>&#125;;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p>官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的<code>true</code>和<code>false</code>对条件控制的很巧妙。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>在二分查找时又学到了一种思路，”左闭右开“</p>\n</li>\n<li><p>群里面有位同学说到了这个事情，之前从未注意过：</p>\n<img src=\"../images/day01/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n<p>看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。</p>\n</li>\n</ul>\n<p>今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！</p>\n"},{"title":"代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。","abbrlink":"b79a1ea","date":"2023-09-21T04:15:07.000Z","_content":"\n# 代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\n\n## 977. 有序数组的平方\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/squares-of-a-sorted-array/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0977.有序数组的平方.html)\n>\n>   视频讲解：[双指针法经典题目 | LeetCode：977.有序数组的平方](https://www.bilibili.com/video/BV1QB4y1D7ep )\n>\n>   状态：AC\n\n### 思路\n\n首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为`O(nlog n)`。但是并不满足题目中要求的`O(n)`，因为有一个条件我们还没有用上：**非递减顺序数组**。看了题解之后才清楚更好的方法：**双指针算法**。\n\n由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。\n\n### 代码\n\n``` go\nfunc sortedSquares(nums []int) []int {\n\tn := len(nums)\n\tresult := make([]int, n)\n\tleft := 0\n\tright := len(nums) - 1\n\tfor i := right; i >= 0; i-- {  // i为result的索引\n\t\tif nums[left]*nums[left] < nums[right]*nums[right] {  // right侧更大\n\t\t\tresult[i] = nums[right] * nums[right]\n\t\t\tright--\n\t\t} else {  // left侧更大\n\t\t\tresult[i] = nums[left] * nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 209.长度最小的子数组\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html)\n>\n>   视频讲解：[拿下滑动窗口！ | LeetCode 209 长度最小的子数组](https://www.bilibili.com/video/BV1tZ4y1q7XE)\n>\n>   状态：AC\n\n### 思路\n\n此题需要找最短连续的一子数组，能想到的是 **滑动窗口** 算法。\n\n1.   设最短子数组长度`minLength`为无穷大，题目规定长度最大为100000，`minLength=100001`即可。\n2.   右侧不断向前，直至这一子数组的和大于 `target`\n3.   子序列和大于target之后，左侧也不断向前，直至子数组和小于 `target`，记录下此刻的序列长度，并与 `minLength` 进行比较。\n4.   循环条件：当右侧到头，并且此时的子数组的和小于`target`\n5.   退出循环后，如果`minLength`依旧等于100001，说明不存在满足要求的子数组，则返回`0`\n\n### 代码\n\n``` go\nfunc minSubArrayLen(target int, nums []int) int {\n\tleft := 0\n\tright := 0\n\tsum := 0\n\tminLength := 100001\n\tlength := len(nums)\n\tfor left <= right && right <= length {\n\t\tif sum < target {\n\t\t\tif right < length {\n\t\t\t\tsum += nums[right]\n\t\t\t\tright++\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tif minLength > right-left {\n\t\t\t\tminLength = right - left\n\t\t\t}\n\t\t\tsum -= nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\tif minLength == 100001 {\n\t\treturn 0\n\t}\n\treturn minLength\n}\n```\n\n## 59.螺旋矩阵II\n\n> 题目链接：[leetcode链接](https://leetcode.cn/problems/spiral-matrix-ii/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0059.螺旋矩阵II.html)\n>\n> 视频讲解：[一入循环深似海 | LeetCode：59.螺旋矩阵II](https://www.bilibili.com/video/BV1SL4y1N7mV/)\n>\n> 状态：AC\n\n### 思路\n\n![image-20230921130326208](../images/day02/image-20230921130326208.png)\n\n1.   循环次数是`n/2`\n\n2.   每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为`results`\n\n3.   各个颜色的范围，注意是从大到小还是从小到大：\n\n     <font color=\"#4664b9\">蓝色的范围：results\\[top\\][left ~ right - 1]</font>\n     <font color=\"#4f7633\">绿色的范围：results\\[top ~ bottom - 1\\][right]</font>\n\n     <font color=\"#b0871e\">黄色的范围：results\\[bottom\\][right ~ left + 1]</font>\n\n     <font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1]\\[left\\]</font>\n\n4.   每一轮过后，`top++`、`bottom--`、`left++`、`right--`\n\n5.   额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。\n\n### 代码\n\n``` go\nfunc generateMatrix(n int) [][]int {\n\ttop := 0\n\tbottom := n - 1\n\tleft := 0\n\tright := n - 1\n\tresult := make([][]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tresult[i] = make([]int, n)\n\t}\n\tnum := 1\n\tfor i := 0; i < n/2; i++ {\n\t\tfor j := left; j < right; j++ {\n\t\t\tresult[top][j] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := top; j < bottom; j++ {\n\t\t\tresult[j][right] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := right; j > left; j-- {\n\t\t\tresult[bottom][j] = num\n\t\t\tnum++\n\t\t}\n\t\tfor j := bottom; j > top; j-- {\n\t\t\tresult[j][left] = num\n\t\t\tnum++\n\t\t}\n\t\ttop++\n\t\tleft++\n\t\tright--\n\t\tbottom--\n\t}\n\tif n%2 == 1 {\n\t\tresult[n/2][n/2] = num\n\t}\n\treturn result\n}\n```\n\n## 小结\n\n-   帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。\n\n-   Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧\n\n    ``` go\n    result := make([][]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = make([]int, n)\n    }\n    ```\n\n    \n\n-   今天还有点别的事情，先写这么多，扩展题先不写了\n-   打卡第二天！\n","source":"_posts/day02.md","raw":"---\ntitle: 代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 数组\ncategories: 刷题\nabbrlink: b79a1ea\ndate: 2023-09-21 12:15:07\n---\n\n# 代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\n\n## 977. 有序数组的平方\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/squares-of-a-sorted-array/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0977.有序数组的平方.html)\n>\n>   视频讲解：[双指针法经典题目 | LeetCode：977.有序数组的平方](https://www.bilibili.com/video/BV1QB4y1D7ep )\n>\n>   状态：AC\n\n### 思路\n\n首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为`O(nlog n)`。但是并不满足题目中要求的`O(n)`，因为有一个条件我们还没有用上：**非递减顺序数组**。看了题解之后才清楚更好的方法：**双指针算法**。\n\n由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。\n\n### 代码\n\n``` go\nfunc sortedSquares(nums []int) []int {\n\tn := len(nums)\n\tresult := make([]int, n)\n\tleft := 0\n\tright := len(nums) - 1\n\tfor i := right; i >= 0; i-- {  // i为result的索引\n\t\tif nums[left]*nums[left] < nums[right]*nums[right] {  // right侧更大\n\t\t\tresult[i] = nums[right] * nums[right]\n\t\t\tright--\n\t\t} else {  // left侧更大\n\t\t\tresult[i] = nums[left] * nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 209.长度最小的子数组\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html)\n>\n>   视频讲解：[拿下滑动窗口！ | LeetCode 209 长度最小的子数组](https://www.bilibili.com/video/BV1tZ4y1q7XE)\n>\n>   状态：AC\n\n### 思路\n\n此题需要找最短连续的一子数组，能想到的是 **滑动窗口** 算法。\n\n1.   设最短子数组长度`minLength`为无穷大，题目规定长度最大为100000，`minLength=100001`即可。\n2.   右侧不断向前，直至这一子数组的和大于 `target`\n3.   子序列和大于target之后，左侧也不断向前，直至子数组和小于 `target`，记录下此刻的序列长度，并与 `minLength` 进行比较。\n4.   循环条件：当右侧到头，并且此时的子数组的和小于`target`\n5.   退出循环后，如果`minLength`依旧等于100001，说明不存在满足要求的子数组，则返回`0`\n\n### 代码\n\n``` go\nfunc minSubArrayLen(target int, nums []int) int {\n\tleft := 0\n\tright := 0\n\tsum := 0\n\tminLength := 100001\n\tlength := len(nums)\n\tfor left <= right && right <= length {\n\t\tif sum < target {\n\t\t\tif right < length {\n\t\t\t\tsum += nums[right]\n\t\t\t\tright++\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tif minLength > right-left {\n\t\t\t\tminLength = right - left\n\t\t\t}\n\t\t\tsum -= nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\tif minLength == 100001 {\n\t\treturn 0\n\t}\n\treturn minLength\n}\n```\n\n## 59.螺旋矩阵II\n\n> 题目链接：[leetcode链接](https://leetcode.cn/problems/spiral-matrix-ii/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0059.螺旋矩阵II.html)\n>\n> 视频讲解：[一入循环深似海 | LeetCode：59.螺旋矩阵II](https://www.bilibili.com/video/BV1SL4y1N7mV/)\n>\n> 状态：AC\n\n### 思路\n\n![image-20230921130326208](../images/day02/image-20230921130326208.png)\n\n1.   循环次数是`n/2`\n\n2.   每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为`results`\n\n3.   各个颜色的范围，注意是从大到小还是从小到大：\n\n     <font color=\"#4664b9\">蓝色的范围：results\\[top\\][left ~ right - 1]</font>\n     <font color=\"#4f7633\">绿色的范围：results\\[top ~ bottom - 1\\][right]</font>\n\n     <font color=\"#b0871e\">黄色的范围：results\\[bottom\\][right ~ left + 1]</font>\n\n     <font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1]\\[left\\]</font>\n\n4.   每一轮过后，`top++`、`bottom--`、`left++`、`right--`\n\n5.   额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。\n\n### 代码\n\n``` go\nfunc generateMatrix(n int) [][]int {\n\ttop := 0\n\tbottom := n - 1\n\tleft := 0\n\tright := n - 1\n\tresult := make([][]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tresult[i] = make([]int, n)\n\t}\n\tnum := 1\n\tfor i := 0; i < n/2; i++ {\n\t\tfor j := left; j < right; j++ {\n\t\t\tresult[top][j] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := top; j < bottom; j++ {\n\t\t\tresult[j][right] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := right; j > left; j-- {\n\t\t\tresult[bottom][j] = num\n\t\t\tnum++\n\t\t}\n\t\tfor j := bottom; j > top; j-- {\n\t\t\tresult[j][left] = num\n\t\t\tnum++\n\t\t}\n\t\ttop++\n\t\tleft++\n\t\tright--\n\t\tbottom--\n\t}\n\tif n%2 == 1 {\n\t\tresult[n/2][n/2] = num\n\t}\n\treturn result\n}\n```\n\n## 小结\n\n-   帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。\n\n-   Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧\n\n    ``` go\n    result := make([][]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = make([]int, n)\n    }\n    ```\n\n    \n\n-   今天还有点别的事情，先写这么多，扩展题先不写了\n-   打卡第二天！\n","slug":"day02","published":1,"updated":"2023-10-24T19:31:17.511Z","_id":"cln7q7als0001vswhejetbqe1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\"><a href=\"#代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\" class=\"headerlink\" title=\"代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\"></a>代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。</h1><h2 id=\"977-有序数组的平方\"><a href=\"#977-有序数组的平方\" class=\"headerlink\" title=\"977. 有序数组的平方\"></a>977. 有序数组的平方</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1QB4y1D7ep\">双指针法经典题目 | LeetCode：977.有序数组的平方</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为<code>O(nlog n)</code>。但是并不满足题目中要求的<code>O(n)</code>，因为有一个条件我们还没有用上：<strong>非递减顺序数组</strong>。看了题解之后才清楚更好的方法：<strong>双指针算法</strong>。</p>\n<p>由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sortedSquares</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tresult := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := right; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;  <span class=\"hljs-comment\">// i为result的索引</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[left]*nums[left] &lt; nums[right]*nums[right] &#123;  <span class=\"hljs-comment\">// right侧更大</span><br>\t\t\tresult[i] = nums[right] * nums[right]<br>\t\t\tright--<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// left侧更大</span><br>\t\t\tresult[i] = nums[left] * nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"209-长度最小的子数组\"><a href=\"#209-长度最小的子数组\" class=\"headerlink\" title=\"209.长度最小的子数组\"></a>209.长度最小的子数组</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1tZ4y1q7XE\">拿下滑动窗口！ | LeetCode 209 长度最小的子数组</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>此题需要找最短连续的一子数组，能想到的是 <strong>滑动窗口</strong> 算法。</p>\n<ol>\n<li>设最短子数组长度<code>minLength</code>为无穷大，题目规定长度最大为100000，<code>minLength=100001</code>即可。</li>\n<li>右侧不断向前，直至这一子数组的和大于 <code>target</code></li>\n<li>子序列和大于target之后，左侧也不断向前，直至子数组和小于 <code>target</code>，记录下此刻的序列长度，并与 <code>minLength</code> 进行比较。</li>\n<li>循环条件：当右侧到头，并且此时的子数组的和小于<code>target</code></li>\n<li>退出循环后，如果<code>minLength</code>依旧等于100001，说明不存在满足要求的子数组，则返回<code>0</code></li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(target <span class=\"hljs-type\">int</span>, nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-number\">0</span><br>\tsum := <span class=\"hljs-number\">0</span><br>\tminLength := <span class=\"hljs-number\">100001</span><br>\tlength := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &amp;&amp; right &lt;= length &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> sum &lt; target &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> right &lt; length &#123;<br>\t\t\t\tsum += nums[right]<br>\t\t\t\tright++<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> minLength &gt; right-left &#123;<br>\t\t\t\tminLength = right - left<br>\t\t\t&#125;<br>\t\t\tsum -= nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> minLength == <span class=\"hljs-number\">100001</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minLength<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"59-螺旋矩阵II\"><a href=\"#59-螺旋矩阵II\" class=\"headerlink\" title=\"59.螺旋矩阵II\"></a>59.螺旋矩阵II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/spiral-matrix-ii/\">leetcode链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1SL4y1N7mV/\">一入循环深似海 | LeetCode：59.螺旋矩阵II</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../images/day02/image-20230921130326208.png\" alt=\"image-20230921130326208\"></p>\n<ol>\n<li><p>循环次数是<code>n/2</code></p>\n</li>\n<li><p>每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为<code>results</code></p>\n</li>\n<li><p>各个颜色的范围，注意是从大到小还是从小到大：</p>\n<p><font color=\"#4664b9\">蓝色的范围：results[top][left ~ right - 1]</font><br><font color=\"#4f7633\">绿色的范围：results[top ~ bottom - 1][right]</font></p>\n<p><font color=\"#b0871e\">黄色的范围：results[bottom][right ~ left + 1]</font></p>\n<p><font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1][left]</font></p>\n</li>\n<li><p>每一轮过后，<code>top++</code>、<code>bottom--</code>、<code>left++</code>、<code>right--</code></p>\n</li>\n<li><p>额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。</p>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generateMatrix</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\ttop := <span class=\"hljs-number\">0</span><br>\tbottom := n - <span class=\"hljs-number\">1</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := n - <span class=\"hljs-number\">1</span><br>\tresult := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>\t\tresult[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\t&#125;<br>\tnum := <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := left; j &lt; right; j++ &#123;<br>\t\t\tresult[top][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := top; j &lt; bottom; j++ &#123;<br>\t\t\tresult[j][right] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := right; j &gt; left; j-- &#123;<br>\t\t\tresult[bottom][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> j := bottom; j &gt; top; j-- &#123;<br>\t\t\tresult[j][left] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\ttop++<br>\t\tleft++<br>\t\tright--<br>\t\tbottom--<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> n%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> &#123;<br>\t\tresult[n/<span class=\"hljs-number\">2</span>][n/<span class=\"hljs-number\">2</span>] = num<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。</p>\n</li>\n<li><p>Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">result := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br><span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>    result[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>今天还有点别的事情，先写这么多，扩展题先不写了</p>\n</li>\n<li><p>打卡第二天！</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\"><a href=\"#代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\" class=\"headerlink\" title=\"代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\"></a>代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。</h1><h2 id=\"977-有序数组的平方\"><a href=\"#977-有序数组的平方\" class=\"headerlink\" title=\"977. 有序数组的平方\"></a>977. 有序数组的平方</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1QB4y1D7ep\">双指针法经典题目 | LeetCode：977.有序数组的平方</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为<code>O(nlog n)</code>。但是并不满足题目中要求的<code>O(n)</code>，因为有一个条件我们还没有用上：<strong>非递减顺序数组</strong>。看了题解之后才清楚更好的方法：<strong>双指针算法</strong>。</p>\n<p>由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sortedSquares</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tresult := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := right; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;  <span class=\"hljs-comment\">// i为result的索引</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[left]*nums[left] &lt; nums[right]*nums[right] &#123;  <span class=\"hljs-comment\">// right侧更大</span><br>\t\t\tresult[i] = nums[right] * nums[right]<br>\t\t\tright--<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// left侧更大</span><br>\t\t\tresult[i] = nums[left] * nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"209-长度最小的子数组\"><a href=\"#209-长度最小的子数组\" class=\"headerlink\" title=\"209.长度最小的子数组\"></a>209.长度最小的子数组</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1tZ4y1q7XE\">拿下滑动窗口！ | LeetCode 209 长度最小的子数组</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>此题需要找最短连续的一子数组，能想到的是 <strong>滑动窗口</strong> 算法。</p>\n<ol>\n<li>设最短子数组长度<code>minLength</code>为无穷大，题目规定长度最大为100000，<code>minLength=100001</code>即可。</li>\n<li>右侧不断向前，直至这一子数组的和大于 <code>target</code></li>\n<li>子序列和大于target之后，左侧也不断向前，直至子数组和小于 <code>target</code>，记录下此刻的序列长度，并与 <code>minLength</code> 进行比较。</li>\n<li>循环条件：当右侧到头，并且此时的子数组的和小于<code>target</code></li>\n<li>退出循环后，如果<code>minLength</code>依旧等于100001，说明不存在满足要求的子数组，则返回<code>0</code></li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(target <span class=\"hljs-type\">int</span>, nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-number\">0</span><br>\tsum := <span class=\"hljs-number\">0</span><br>\tminLength := <span class=\"hljs-number\">100001</span><br>\tlength := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &amp;&amp; right &lt;= length &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> sum &lt; target &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> right &lt; length &#123;<br>\t\t\t\tsum += nums[right]<br>\t\t\t\tright++<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> minLength &gt; right-left &#123;<br>\t\t\t\tminLength = right - left<br>\t\t\t&#125;<br>\t\t\tsum -= nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> minLength == <span class=\"hljs-number\">100001</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minLength<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"59-螺旋矩阵II\"><a href=\"#59-螺旋矩阵II\" class=\"headerlink\" title=\"59.螺旋矩阵II\"></a>59.螺旋矩阵II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/spiral-matrix-ii/\">leetcode链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1SL4y1N7mV/\">一入循环深似海 | LeetCode：59.螺旋矩阵II</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../images/day02/image-20230921130326208.png\" alt=\"image-20230921130326208\"></p>\n<ol>\n<li><p>循环次数是<code>n/2</code></p>\n</li>\n<li><p>每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为<code>results</code></p>\n</li>\n<li><p>各个颜色的范围，注意是从大到小还是从小到大：</p>\n<p><font color=\"#4664b9\">蓝色的范围：results[top][left ~ right - 1]</font><br><font color=\"#4f7633\">绿色的范围：results[top ~ bottom - 1][right]</font></p>\n<p><font color=\"#b0871e\">黄色的范围：results[bottom][right ~ left + 1]</font></p>\n<p><font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1][left]</font></p>\n</li>\n<li><p>每一轮过后，<code>top++</code>、<code>bottom--</code>、<code>left++</code>、<code>right--</code></p>\n</li>\n<li><p>额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。</p>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generateMatrix</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\ttop := <span class=\"hljs-number\">0</span><br>\tbottom := n - <span class=\"hljs-number\">1</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := n - <span class=\"hljs-number\">1</span><br>\tresult := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>\t\tresult[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\t&#125;<br>\tnum := <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := left; j &lt; right; j++ &#123;<br>\t\t\tresult[top][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := top; j &lt; bottom; j++ &#123;<br>\t\t\tresult[j][right] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := right; j &gt; left; j-- &#123;<br>\t\t\tresult[bottom][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> j := bottom; j &gt; top; j-- &#123;<br>\t\t\tresult[j][left] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\ttop++<br>\t\tleft++<br>\t\tright--<br>\t\tbottom--<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> n%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> &#123;<br>\t\tresult[n/<span class=\"hljs-number\">2</span>][n/<span class=\"hljs-number\">2</span>] = num<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。</p>\n</li>\n<li><p>Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">result := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br><span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>    result[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>今天还有点别的事情，先写这么多，扩展题先不写了</p>\n</li>\n<li><p>打卡第二天！</p>\n</li>\n</ul>\n"},{"title":"代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。","abbrlink":"b4e3c0b1","date":"2023-09-23T13:32:23.000Z","_content":"\n# 代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。\n\n## 24.两两交换链表中的节点\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/swap-nodes-in-pairs/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0024.两两交换链表中的节点.html)\n>\n>   视频讲解：[帮你把链表细节学清楚！ | LeetCode：24. 两两交换链表中的节点](https://www.bilibili.com/video/BV1YT411g7br)\n>\n>   状态：AC\n\n### 思路\n\n1.   定义新的头结点，定义指针`p = newHead`，定义两个新的结点`tempNode1.Val = 2`，`tempNode2.Val = 1`（这里的值`1`和`2`是为了简化描述）\n\n<img src=\"../images/day04/IMG_1372.PNG\" alt=\"链表相关指针（变量说明）\" style=\"zoom:80%;\" />\n\n2.   使用新的结点重新进行连接，并且`p`前进到下一个位置（注意连接顺序，防止断链）\n     -   `tempNode2.Next = p.Next.Next.Next`\n     -   `tempNode1.Next = tempNode2`\n     -   `p.Next = tempNode1`\n     -   `p = p.Next.Next`\n\n<img src=\"../images/day04/IMG_1373.PNG\" alt=\"IMG_1373\" style=\"zoom:80%;\" />\n\n### 代码\n\n``` go\nfunc swapPairs(head *ListNode) *ListNode {\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tp := newHead\n\tfor p.Next != nil && p.Next.Next != nil {\n\t\ttempNode1 := &ListNode{\n\t\t\tVal:  p.Next.Next.Val,\n\t\t\tNext: nil,\n\t\t}\n\t\ttempNode2 := &ListNode{\n\t\t\tVal:  p.Next.Val,\n\t\t\tNext: p.Next.Next.Next,\n\t\t}\n\t\ttempNode1.Next = tempNode2\n\t\tp.Next = tempNode1\n\t\tp = p.Next.Next\n\t}\n\treturn newHead.Next\n}\n```\n\n\n\n## 19.删除链表的倒数第N个节点\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/remove-nth-node-from-end-of-list/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF)\n>\n>   视频讲解：[链表遍历学清楚！ | LeetCode：19.删除链表倒数第N个节点](https://www.bilibili.com/video/BV1vW4y1U7Gf)\n>\n>   状态：AC\n\n### 思路\n\n定义两个指针`p`和`q`，指针`p`先出发，指针`q`保持与`p`距离为`n`之后再出发，这样`q.Next`则是待删除的元素。\n\n>   会不会出现`n`大于链表长度的情况（例如链表长度为5，删除倒数第8个元素）：不会，leetcode题解中给出。\n>\n>   <img src=\"../images/day04/QQ20230923-221152.png\" alt=\"题目说明\" style=\"zoom:80%;\" />\n\n<img src=\"../images/day04/IMG_2D422EDB0DFC-1.jpeg\" alt=\"图解\" style=\"zoom:80%;\" />\n\n### 代码\n\n``` go\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n\tif head == nil {\n\t\treturn head\n\t}\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tp := newHead\n\tfor i := 0; i <= n; i++ {\n\t\tp = p.Next\n\t}\n\tq := newHead\n\tfor p != nil {\n\t\tp = p.Next\n\t\tq = q.Next\n\t}\n\tif q.Next.Next != nil {\n\t\tq.Next = q.Next.Next\n\t} else {\n\t\tq.Next = nil\n\t}\n\n\treturn newHead.Next\n}\n```\n\n## 面试题02.07.链表相交\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html)\n>\n>   状态：AC\n\n### 思路\n\n假设是两个一维数组（只是为了方便逻辑上描述），查看是否相交，那么需要“尾部对齐”。假设长的链表开始的索引为0，我们需要从短的数组的开始。大意如下图\n\n<img src=\"../images/day04/160_1.png\" alt=\"判断第一组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/day04/160_2.png\" alt=\"判断第二组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/day04/160_3.png\" alt=\"判断第三组结点\" style=\"zoom:80%;\" />\n\n走到末尾都没发现有相同地址的节点则不存在相交的情况。\n\n-   尾部对齐操作：遍历两个链表（一组指针`p = newHeadA.Next`和`q = newHeadB.Next`），求各自的长度。\n-   重新定义一组指针（`p1 = newHeadA.Next`和`q1 = newHeadB.Next`），让其中更长的链表的指针移动到和短的同步位置<font color=\"#bdbdbd\">（这里可能是Go语言的特性？C语言不需要此操作，不重新定义指针p和q回不到起始位置）</font>\n-   同时向前移动，判断是否地址相同\n\n### 代码\n\n``` go\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode {\n    // 定义两个新的头，指向传参的头\n    newHeadA := &ListNode {\n        Val: 0,\n        Next: headA,\n    }\n    newHeadB := &ListNode {\n        Val: 0,\n        Next: headB,\n    }\n    // 求两个链表各自的长度\n    p := newHeadA.Next\n    lenA := 0\n    q := newHeadB.Next\n    lenB := 0\n    for p != nil {\n        p = p.Next\n        lenA++\n    }\n    for q != nil {\n        q = q.Next\n        lenB++\n    }\n    \n    // 定义两个新的指针，进行“对齐”操作\n    p1 := newHeadA.Next\n    q1 := newHeadB.Next\n    if lenA < lenB {\n        for i := 0; i < lenB - lenA; i++ {\n            q1 = q1.Next\n        }\n    } else {\n        for i := 0; i < lenA - lenB; i++ {\n            p1 = p1.Next\n        }\n    }\n    // 对齐后向前查找，找到了返回结点，否则为nil\n    for p1 != nil && q1 != nil {\n        if p1 == q1 {\n            return p1\n        } else {\n            p1 = p1.Next\n            q1 = q1.Next\n        }\n    }\n    return nil\n}\n```\n\n## 142. 环形链表II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/linked-list-cycle-ii/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html)\n>\n>   视频讲解：[把环形链表讲清楚！| LeetCode:142.环形链表II](https://www.bilibili.com/video/BV1if4y1d7ob)\n>\n>   状态：想不出思路后看了卡哥的讲解恍然大悟，AC！\n\n### 思路\n\n<s><font color=\"#FF0000\">最开始没有审题，当成了这道题是在问是否存在环，后来发现这只是第一问</font></s>\n\n这道题需要返回的是：如果链表有环，那么返回最后一个结点链接到了哪个结点上。\n\n1.   首先要找到，链表是否有环，这里使用的是快慢指针的算法，快指针速度为2，慢指针速度为1。若快指针走到了终点说明没有环；如果两个指针相遇说明有环。\n\n     >   因为相对速度差1，所以二者必相遇\n\n2.   找到入口：（卡哥视频讲的很好，如果有疑问一定**看完视频**再提问）\n\n<img src=\"../images/day04/142_1.jpeg\" alt=\"142_1\" style=\"zoom:80%;\" />\n\n为什么一圈必定会追上：假设他们同时进入入口（整个链表就是个环），慢指针走一圈后，快指针走两圈。如果快指针先进入，那么追上慢指针必定走不到一圈。\n\n最后推出来x=z，意味着此时的快指针降速（速度变为1），同时新定义的指针从头开始运动，两者必定在入口处相遇\n\n### 代码\n\n``` go\nfunc detectCycle(head *ListNode) *ListNode {\n    fast := head\n    slow := head\n    p := head\n    // 这层for寻找环\n    for fast != nil {\n        slow = slow.Next\n        fast = fast.Next\n        if fast != nil {\n            fast = fast.Next\n            if slow == fast {  // 两指针相遇说明有环\n            for p != fast {  // 这层for执行的是公式中x=z的一步\n                p = p.Next\n                fast = fast.Next\n            }\n            return p\n            }\n        } else {\n            break\n        }        \n    }\n    return nil\n}\n```\n\n## 小结\n\n-   今天重新写了下链表的实现（主要是vscode没有装调试leetcode插件），部分题都是自己在GoLand中自己写函数构造的链表，最后单独写了个文件保存这部分代码（主要就是新建链表和打印链表），新建链表是通过一个数组传要初始化的值。当然了，今天的也只有两道题可以用，后两道直接在leetcode的网页上写了，看起来挺复杂的还担心不好debug，理清思路之后写起来很快，也不会出错。\n\n    ``` go\n    package InitLinkList\n    \n    import \"fmt\"\n    \n    type ListNode struct {\n    \tVal  int\n    \tNext *ListNode\n    }\n    \n    func InsertElem(head *ListNode, nums []int) *ListNode {\n    \tnewHead := &ListNode{\n    \t\tVal:  0,\n    \t\tNext: head,\n    \t}\n    \tp := newHead\n    \tfor _, v := range nums {\n    \t\tp.Next = &ListNode{\n    \t\t\tVal:  v,\n    \t\t\tNext: nil,\n    \t\t}\n    \t\tp = p.Next\n    \t}\n    \treturn newHead.Next\n    }\n    \n    func PrintList(head *ListNode) {\n    \tp := head\n    \tfor p != nil {\n    \t\tfmt.Printf(\"%d\\t\", p.Val)\n    \t\tp = p.Next\n    \t}\n    \tfmt.Println()\n    }\n    \n    ```\n\n-   Go有些语法还不是很了解，今天发现了跨文件调用需要将`变量名`和`函数名`首字母大写，也叫作导出。从一些语法来看Go现在给我的感觉他就不想Java那种强面向对象编程。这点还挺好的（对我个人而言），很灵活，调用的时候也不需要实例化（也没这一种说法）。\n\n-   后三道题（最后一道题指的求是否存在环的过程）考研复习408的时候已经见过，只不过这次的身份发生了变化，面对这道题状态也不同。考研复习时候遇到手撕代码的题首先想到的是如何拿分，没思路就暴力算法。有额外时间再考虑优化。如果再试卷上我可能会使用空间复杂度更大的算法，空间换时间。但是现在在求职中，要好好的理解每一道题，每一种优化的思路，题干加以限制：`空间复杂度为O(1)`。真的需要认真思考，链表相交没有想出来，看了卡哥的讲解理解了。\n-   现在的刷题状态是这样的：多给自己思考的时间争取想到最优的解法。无论是否解出来再去看看卡哥的讲解和代码，看看别人写的和自己写的差距在哪。我的代码现在经常出现这种逻辑，对于个别情况需要单独判断，而别人的则不需要，因为自己在边界情况考虑的欠妥。明天周日休息一天。但是事情还是挺多的。\n\n<font color=\"#3914a5\">第一周打卡结束！4天结束！</font>\n","source":"_posts/day04.md","raw":"---\ntitle: 代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 链表\ncategories: 刷题\nabbrlink: b4e3c0b1\ndate: 2023-09-23 21:32:23\n---\n\n# 代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。\n\n## 24.两两交换链表中的节点\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/swap-nodes-in-pairs/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0024.两两交换链表中的节点.html)\n>\n>   视频讲解：[帮你把链表细节学清楚！ | LeetCode：24. 两两交换链表中的节点](https://www.bilibili.com/video/BV1YT411g7br)\n>\n>   状态：AC\n\n### 思路\n\n1.   定义新的头结点，定义指针`p = newHead`，定义两个新的结点`tempNode1.Val = 2`，`tempNode2.Val = 1`（这里的值`1`和`2`是为了简化描述）\n\n<img src=\"../images/day04/IMG_1372.PNG\" alt=\"链表相关指针（变量说明）\" style=\"zoom:80%;\" />\n\n2.   使用新的结点重新进行连接，并且`p`前进到下一个位置（注意连接顺序，防止断链）\n     -   `tempNode2.Next = p.Next.Next.Next`\n     -   `tempNode1.Next = tempNode2`\n     -   `p.Next = tempNode1`\n     -   `p = p.Next.Next`\n\n<img src=\"../images/day04/IMG_1373.PNG\" alt=\"IMG_1373\" style=\"zoom:80%;\" />\n\n### 代码\n\n``` go\nfunc swapPairs(head *ListNode) *ListNode {\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tp := newHead\n\tfor p.Next != nil && p.Next.Next != nil {\n\t\ttempNode1 := &ListNode{\n\t\t\tVal:  p.Next.Next.Val,\n\t\t\tNext: nil,\n\t\t}\n\t\ttempNode2 := &ListNode{\n\t\t\tVal:  p.Next.Val,\n\t\t\tNext: p.Next.Next.Next,\n\t\t}\n\t\ttempNode1.Next = tempNode2\n\t\tp.Next = tempNode1\n\t\tp = p.Next.Next\n\t}\n\treturn newHead.Next\n}\n```\n\n\n\n## 19.删除链表的倒数第N个节点\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/remove-nth-node-from-end-of-list/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF)\n>\n>   视频讲解：[链表遍历学清楚！ | LeetCode：19.删除链表倒数第N个节点](https://www.bilibili.com/video/BV1vW4y1U7Gf)\n>\n>   状态：AC\n\n### 思路\n\n定义两个指针`p`和`q`，指针`p`先出发，指针`q`保持与`p`距离为`n`之后再出发，这样`q.Next`则是待删除的元素。\n\n>   会不会出现`n`大于链表长度的情况（例如链表长度为5，删除倒数第8个元素）：不会，leetcode题解中给出。\n>\n>   <img src=\"../images/day04/QQ20230923-221152.png\" alt=\"题目说明\" style=\"zoom:80%;\" />\n\n<img src=\"../images/day04/IMG_2D422EDB0DFC-1.jpeg\" alt=\"图解\" style=\"zoom:80%;\" />\n\n### 代码\n\n``` go\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n\tif head == nil {\n\t\treturn head\n\t}\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tp := newHead\n\tfor i := 0; i <= n; i++ {\n\t\tp = p.Next\n\t}\n\tq := newHead\n\tfor p != nil {\n\t\tp = p.Next\n\t\tq = q.Next\n\t}\n\tif q.Next.Next != nil {\n\t\tq.Next = q.Next.Next\n\t} else {\n\t\tq.Next = nil\n\t}\n\n\treturn newHead.Next\n}\n```\n\n## 面试题02.07.链表相交\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html)\n>\n>   状态：AC\n\n### 思路\n\n假设是两个一维数组（只是为了方便逻辑上描述），查看是否相交，那么需要“尾部对齐”。假设长的链表开始的索引为0，我们需要从短的数组的开始。大意如下图\n\n<img src=\"../images/day04/160_1.png\" alt=\"判断第一组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/day04/160_2.png\" alt=\"判断第二组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/day04/160_3.png\" alt=\"判断第三组结点\" style=\"zoom:80%;\" />\n\n走到末尾都没发现有相同地址的节点则不存在相交的情况。\n\n-   尾部对齐操作：遍历两个链表（一组指针`p = newHeadA.Next`和`q = newHeadB.Next`），求各自的长度。\n-   重新定义一组指针（`p1 = newHeadA.Next`和`q1 = newHeadB.Next`），让其中更长的链表的指针移动到和短的同步位置<font color=\"#bdbdbd\">（这里可能是Go语言的特性？C语言不需要此操作，不重新定义指针p和q回不到起始位置）</font>\n-   同时向前移动，判断是否地址相同\n\n### 代码\n\n``` go\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode {\n    // 定义两个新的头，指向传参的头\n    newHeadA := &ListNode {\n        Val: 0,\n        Next: headA,\n    }\n    newHeadB := &ListNode {\n        Val: 0,\n        Next: headB,\n    }\n    // 求两个链表各自的长度\n    p := newHeadA.Next\n    lenA := 0\n    q := newHeadB.Next\n    lenB := 0\n    for p != nil {\n        p = p.Next\n        lenA++\n    }\n    for q != nil {\n        q = q.Next\n        lenB++\n    }\n    \n    // 定义两个新的指针，进行“对齐”操作\n    p1 := newHeadA.Next\n    q1 := newHeadB.Next\n    if lenA < lenB {\n        for i := 0; i < lenB - lenA; i++ {\n            q1 = q1.Next\n        }\n    } else {\n        for i := 0; i < lenA - lenB; i++ {\n            p1 = p1.Next\n        }\n    }\n    // 对齐后向前查找，找到了返回结点，否则为nil\n    for p1 != nil && q1 != nil {\n        if p1 == q1 {\n            return p1\n        } else {\n            p1 = p1.Next\n            q1 = q1.Next\n        }\n    }\n    return nil\n}\n```\n\n## 142. 环形链表II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/linked-list-cycle-ii/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html)\n>\n>   视频讲解：[把环形链表讲清楚！| LeetCode:142.环形链表II](https://www.bilibili.com/video/BV1if4y1d7ob)\n>\n>   状态：想不出思路后看了卡哥的讲解恍然大悟，AC！\n\n### 思路\n\n<s><font color=\"#FF0000\">最开始没有审题，当成了这道题是在问是否存在环，后来发现这只是第一问</font></s>\n\n这道题需要返回的是：如果链表有环，那么返回最后一个结点链接到了哪个结点上。\n\n1.   首先要找到，链表是否有环，这里使用的是快慢指针的算法，快指针速度为2，慢指针速度为1。若快指针走到了终点说明没有环；如果两个指针相遇说明有环。\n\n     >   因为相对速度差1，所以二者必相遇\n\n2.   找到入口：（卡哥视频讲的很好，如果有疑问一定**看完视频**再提问）\n\n<img src=\"../images/day04/142_1.jpeg\" alt=\"142_1\" style=\"zoom:80%;\" />\n\n为什么一圈必定会追上：假设他们同时进入入口（整个链表就是个环），慢指针走一圈后，快指针走两圈。如果快指针先进入，那么追上慢指针必定走不到一圈。\n\n最后推出来x=z，意味着此时的快指针降速（速度变为1），同时新定义的指针从头开始运动，两者必定在入口处相遇\n\n### 代码\n\n``` go\nfunc detectCycle(head *ListNode) *ListNode {\n    fast := head\n    slow := head\n    p := head\n    // 这层for寻找环\n    for fast != nil {\n        slow = slow.Next\n        fast = fast.Next\n        if fast != nil {\n            fast = fast.Next\n            if slow == fast {  // 两指针相遇说明有环\n            for p != fast {  // 这层for执行的是公式中x=z的一步\n                p = p.Next\n                fast = fast.Next\n            }\n            return p\n            }\n        } else {\n            break\n        }        \n    }\n    return nil\n}\n```\n\n## 小结\n\n-   今天重新写了下链表的实现（主要是vscode没有装调试leetcode插件），部分题都是自己在GoLand中自己写函数构造的链表，最后单独写了个文件保存这部分代码（主要就是新建链表和打印链表），新建链表是通过一个数组传要初始化的值。当然了，今天的也只有两道题可以用，后两道直接在leetcode的网页上写了，看起来挺复杂的还担心不好debug，理清思路之后写起来很快，也不会出错。\n\n    ``` go\n    package InitLinkList\n    \n    import \"fmt\"\n    \n    type ListNode struct {\n    \tVal  int\n    \tNext *ListNode\n    }\n    \n    func InsertElem(head *ListNode, nums []int) *ListNode {\n    \tnewHead := &ListNode{\n    \t\tVal:  0,\n    \t\tNext: head,\n    \t}\n    \tp := newHead\n    \tfor _, v := range nums {\n    \t\tp.Next = &ListNode{\n    \t\t\tVal:  v,\n    \t\t\tNext: nil,\n    \t\t}\n    \t\tp = p.Next\n    \t}\n    \treturn newHead.Next\n    }\n    \n    func PrintList(head *ListNode) {\n    \tp := head\n    \tfor p != nil {\n    \t\tfmt.Printf(\"%d\\t\", p.Val)\n    \t\tp = p.Next\n    \t}\n    \tfmt.Println()\n    }\n    \n    ```\n\n-   Go有些语法还不是很了解，今天发现了跨文件调用需要将`变量名`和`函数名`首字母大写，也叫作导出。从一些语法来看Go现在给我的感觉他就不想Java那种强面向对象编程。这点还挺好的（对我个人而言），很灵活，调用的时候也不需要实例化（也没这一种说法）。\n\n-   后三道题（最后一道题指的求是否存在环的过程）考研复习408的时候已经见过，只不过这次的身份发生了变化，面对这道题状态也不同。考研复习时候遇到手撕代码的题首先想到的是如何拿分，没思路就暴力算法。有额外时间再考虑优化。如果再试卷上我可能会使用空间复杂度更大的算法，空间换时间。但是现在在求职中，要好好的理解每一道题，每一种优化的思路，题干加以限制：`空间复杂度为O(1)`。真的需要认真思考，链表相交没有想出来，看了卡哥的讲解理解了。\n-   现在的刷题状态是这样的：多给自己思考的时间争取想到最优的解法。无论是否解出来再去看看卡哥的讲解和代码，看看别人写的和自己写的差距在哪。我的代码现在经常出现这种逻辑，对于个别情况需要单独判断，而别人的则不需要，因为自己在边界情况考虑的欠妥。明天周日休息一天。但是事情还是挺多的。\n\n<font color=\"#3914a5\">第一周打卡结束！4天结束！</font>\n","slug":"day04","published":1,"updated":"2023-10-24T19:32:02.656Z","_id":"cln7q7alt0003vswh2kd6gmmb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第四天-24-两两交换链表中的节点、19-删除链表的倒数第N个节点、面试题02-07-链表相交、142-环形链表II。\"><a href=\"#代码随想录算法训练营第四天-24-两两交换链表中的节点、19-删除链表的倒数第N个节点、面试题02-07-链表相交、142-环形链表II。\" class=\"headerlink\" title=\"代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。\"></a>代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。</h1><h2 id=\"24-两两交换链表中的节点\"><a href=\"#24-两两交换链表中的节点\" class=\"headerlink\" title=\"24.两两交换链表中的节点\"></a>24.两两交换链表中的节点</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/swap-nodes-in-pairs/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0024.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1YT411g7br\">帮你把链表细节学清楚！ | LeetCode：24. 两两交换链表中的节点</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>定义新的头结点，定义指针<code>p = newHead</code>，定义两个新的结点<code>tempNode1.Val = 2</code>，<code>tempNode2.Val = 1</code>（这里的值<code>1</code>和<code>2</code>是为了简化描述）</li>\n</ol>\n<img src=\"../images/day04/IMG_1372.PNG\" alt=\"链表相关指针（变量说明）\" style=\"zoom:80%;\" />\n\n<ol start=\"2\">\n<li>使用新的结点重新进行连接，并且<code>p</code>前进到下一个位置（注意连接顺序，防止断链）<ul>\n<li><code>tempNode2.Next = p.Next.Next.Next</code></li>\n<li><code>tempNode1.Next = tempNode2</code></li>\n<li><code>p.Next = tempNode1</code></li>\n<li><code>p = p.Next.Next</code></li>\n</ul>\n</li>\n</ol>\n<img src=\"../images/day04/IMG_1373.PNG\" alt=\"IMG_1373\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">swapPairs</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &amp;&amp; p.Next.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\ttempNode1 := &amp;ListNode&#123;<br>\t\t\tVal:  p.Next.Next.Val,<br>\t\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t\t&#125;<br>\t\ttempNode2 := &amp;ListNode&#123;<br>\t\t\tVal:  p.Next.Val,<br>\t\t\tNext: p.Next.Next.Next,<br>\t\t&#125;<br>\t\ttempNode1.Next = tempNode2<br>\t\tp.Next = tempNode1<br>\t\tp = p.Next.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"19-删除链表的倒数第N个节点\"><a href=\"#19-删除链表的倒数第N个节点\" class=\"headerlink\" title=\"19.删除链表的倒数第N个节点\"></a>19.删除链表的倒数第N个节点</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1vW4y1U7Gf\">链表遍历学清楚！ | LeetCode：19.删除链表倒数第N个节点</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>定义两个指针<code>p</code>和<code>q</code>，指针<code>p</code>先出发，指针<code>q</code>保持与<code>p</code>距离为<code>n</code>之后再出发，这样<code>q.Next</code>则是待删除的元素。</p>\n<blockquote>\n<p>  会不会出现<code>n</code>大于链表长度的情况（例如链表长度为5，删除倒数第8个元素）：不会，leetcode题解中给出。</p>\n  <img src=\"../images/day04/QQ20230923-221152.png\" alt=\"题目说明\" style=\"zoom:80%;\" />\n</blockquote>\n<img src=\"../images/day04/IMG_2D422EDB0DFC-1.jpeg\" alt=\"图解\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeNthFromEnd</span><span class=\"hljs-params\">(head *ListNode, n <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> head == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> head<br>\t&#125;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt;= n; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tq := newHead<br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp = p.Next<br>\t\tq = q.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> q.Next.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tq.Next = q.Next.Next<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tq.Next = <span class=\"hljs-literal\">nil</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"面试题02-07-链表相交\"><a href=\"#面试题02-07-链表相交\" class=\"headerlink\" title=\"面试题02.07.链表相交\"></a>面试题02.07.链表相交</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>假设是两个一维数组（只是为了方便逻辑上描述），查看是否相交，那么需要“尾部对齐”。假设长的链表开始的索引为0，我们需要从短的数组的开始。大意如下图</p>\n<img src=\"../images/day04/160_1.png\" alt=\"判断第一组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/day04/160_2.png\" alt=\"判断第二组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/day04/160_3.png\" alt=\"判断第三组结点\" style=\"zoom:80%;\" />\n\n<p>走到末尾都没发现有相同地址的节点则不存在相交的情况。</p>\n<ul>\n<li>尾部对齐操作：遍历两个链表（一组指针<code>p = newHeadA.Next</code>和<code>q = newHeadB.Next</code>），求各自的长度。</li>\n<li>重新定义一组指针（<code>p1 = newHeadA.Next</code>和<code>q1 = newHeadB.Next</code>），让其中更长的链表的指针移动到和短的同步位置<font color=\"#bdbdbd\">（这里可能是Go语言的特性？C语言不需要此操作，不重新定义指针p和q回不到起始位置）</font></li>\n<li>同时向前移动，判断是否地址相同</li>\n</ul>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getIntersectionNode</span><span class=\"hljs-params\">(headA, headB *ListNode)</span></span> *ListNode &#123;<br>    <span class=\"hljs-comment\">// 定义两个新的头，指向传参的头</span><br>    newHeadA := &amp;ListNode &#123;<br>        Val: <span class=\"hljs-number\">0</span>,<br>        Next: headA,<br>    &#125;<br>    newHeadB := &amp;ListNode &#123;<br>        Val: <span class=\"hljs-number\">0</span>,<br>        Next: headB,<br>    &#125;<br>    <span class=\"hljs-comment\">// 求两个链表各自的长度</span><br>    p := newHeadA.Next<br>    lenA := <span class=\"hljs-number\">0</span><br>    q := newHeadB.Next<br>    lenB := <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>        p = p.Next<br>        lenA++<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> q != <span class=\"hljs-literal\">nil</span> &#123;<br>        q = q.Next<br>        lenB++<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">// 定义两个新的指针，进行“对齐”操作</span><br>    p1 := newHeadA.Next<br>    q1 := newHeadB.Next<br>    <span class=\"hljs-keyword\">if</span> lenA &lt; lenB &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; lenB - lenA; i++ &#123;<br>            q1 = q1.Next<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; lenA - lenB; i++ &#123;<br>            p1 = p1.Next<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 对齐后向前查找，找到了返回结点，否则为nil</span><br>    <span class=\"hljs-keyword\">for</span> p1 != <span class=\"hljs-literal\">nil</span> &amp;&amp; q1 != <span class=\"hljs-literal\">nil</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> p1 == q1 &#123;<br>            <span class=\"hljs-keyword\">return</span> p1<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            p1 = p1.Next<br>            q1 = q1.Next<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"142-环形链表II\"><a href=\"#142-环形链表II\" class=\"headerlink\" title=\"142. 环形链表II\"></a>142. 环形链表II</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1if4y1d7ob\">把环形链表讲清楚！| LeetCode:142.环形链表II</a></p>\n<p>  状态：想不出思路后看了卡哥的讲解恍然大悟，AC！</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><s><font color=\"#FF0000\">最开始没有审题，当成了这道题是在问是否存在环，后来发现这只是第一问</font></s></p>\n<p>这道题需要返回的是：如果链表有环，那么返回最后一个结点链接到了哪个结点上。</p>\n<ol>\n<li><p>首先要找到，链表是否有环，这里使用的是快慢指针的算法，快指针速度为2，慢指针速度为1。若快指针走到了终点说明没有环；如果两个指针相遇说明有环。</p>\n<blockquote>\n<p>  因为相对速度差1，所以二者必相遇</p>\n</blockquote>\n</li>\n<li><p>找到入口：（卡哥视频讲的很好，如果有疑问一定<strong>看完视频</strong>再提问）</p>\n</li>\n</ol>\n<img src=\"../images/day04/142_1.jpeg\" alt=\"142_1\" style=\"zoom:80%;\" />\n\n<p>为什么一圈必定会追上：假设他们同时进入入口（整个链表就是个环），慢指针走一圈后，快指针走两圈。如果快指针先进入，那么追上慢指针必定走不到一圈。</p>\n<p>最后推出来x&#x3D;z，意味着此时的快指针降速（速度变为1），同时新定义的指针从头开始运动，两者必定在入口处相遇</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">detectCycle</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>    fast := head<br>    slow := head<br>    p := head<br>    <span class=\"hljs-comment\">// 这层for寻找环</span><br>    <span class=\"hljs-keyword\">for</span> fast != <span class=\"hljs-literal\">nil</span> &#123;<br>        slow = slow.Next<br>        fast = fast.Next<br>        <span class=\"hljs-keyword\">if</span> fast != <span class=\"hljs-literal\">nil</span> &#123;<br>            fast = fast.Next<br>            <span class=\"hljs-keyword\">if</span> slow == fast &#123;  <span class=\"hljs-comment\">// 两指针相遇说明有环</span><br>            <span class=\"hljs-keyword\">for</span> p != fast &#123;  <span class=\"hljs-comment\">// 这层for执行的是公式中x=z的一步</span><br>                p = p.Next<br>                fast = fast.Next<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> p<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;        <br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>今天重新写了下链表的实现（主要是vscode没有装调试leetcode插件），部分题都是自己在GoLand中自己写函数构造的链表，最后单独写了个文件保存这部分代码（主要就是新建链表和打印链表），新建链表是通过一个数组传要初始化的值。当然了，今天的也只有两道题可以用，后两道直接在leetcode的网页上写了，看起来挺复杂的还担心不好debug，理清思路之后写起来很快，也不会出错。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> InitLinkList<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-keyword\">type</span> ListNode <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal  <span class=\"hljs-type\">int</span><br>\tNext *ListNode<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">InsertElem</span><span class=\"hljs-params\">(head *ListNode, nums []<span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\tp.Next = &amp;ListNode&#123;<br>\t\t\tVal:  v,<br>\t\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t\t&#125;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">PrintList</span><span class=\"hljs-params\">(head *ListNode)</span></span> &#123;<br>\tp := head<br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>, p.Val)<br>\t\tp = p.Next<br>\t&#125;<br>\tfmt.Println()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Go有些语法还不是很了解，今天发现了跨文件调用需要将<code>变量名</code>和<code>函数名</code>首字母大写，也叫作导出。从一些语法来看Go现在给我的感觉他就不想Java那种强面向对象编程。这点还挺好的（对我个人而言），很灵活，调用的时候也不需要实例化（也没这一种说法）。</p>\n</li>\n<li><p>后三道题（最后一道题指的求是否存在环的过程）考研复习408的时候已经见过，只不过这次的身份发生了变化，面对这道题状态也不同。考研复习时候遇到手撕代码的题首先想到的是如何拿分，没思路就暴力算法。有额外时间再考虑优化。如果再试卷上我可能会使用空间复杂度更大的算法，空间换时间。但是现在在求职中，要好好的理解每一道题，每一种优化的思路，题干加以限制：<code>空间复杂度为O(1)</code>。真的需要认真思考，链表相交没有想出来，看了卡哥的讲解理解了。</p>\n</li>\n<li><p>现在的刷题状态是这样的：多给自己思考的时间争取想到最优的解法。无论是否解出来再去看看卡哥的讲解和代码，看看别人写的和自己写的差距在哪。我的代码现在经常出现这种逻辑，对于个别情况需要单独判断，而别人的则不需要，因为自己在边界情况考虑的欠妥。明天周日休息一天。但是事情还是挺多的。</p>\n</li>\n</ul>\n<p><font color=\"#3914a5\">第一周打卡结束！4天结束！</font></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第四天-24-两两交换链表中的节点、19-删除链表的倒数第N个节点、面试题02-07-链表相交、142-环形链表II。\"><a href=\"#代码随想录算法训练营第四天-24-两两交换链表中的节点、19-删除链表的倒数第N个节点、面试题02-07-链表相交、142-环形链表II。\" class=\"headerlink\" title=\"代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。\"></a>代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。</h1><h2 id=\"24-两两交换链表中的节点\"><a href=\"#24-两两交换链表中的节点\" class=\"headerlink\" title=\"24.两两交换链表中的节点\"></a>24.两两交换链表中的节点</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/swap-nodes-in-pairs/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0024.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1YT411g7br\">帮你把链表细节学清楚！ | LeetCode：24. 两两交换链表中的节点</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>定义新的头结点，定义指针<code>p = newHead</code>，定义两个新的结点<code>tempNode1.Val = 2</code>，<code>tempNode2.Val = 1</code>（这里的值<code>1</code>和<code>2</code>是为了简化描述）</li>\n</ol>\n<img src=\"../images/day04/IMG_1372.PNG\" alt=\"链表相关指针（变量说明）\" style=\"zoom:80%;\" />\n\n<ol start=\"2\">\n<li>使用新的结点重新进行连接，并且<code>p</code>前进到下一个位置（注意连接顺序，防止断链）<ul>\n<li><code>tempNode2.Next = p.Next.Next.Next</code></li>\n<li><code>tempNode1.Next = tempNode2</code></li>\n<li><code>p.Next = tempNode1</code></li>\n<li><code>p = p.Next.Next</code></li>\n</ul>\n</li>\n</ol>\n<img src=\"../images/day04/IMG_1373.PNG\" alt=\"IMG_1373\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">swapPairs</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &amp;&amp; p.Next.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\ttempNode1 := &amp;ListNode&#123;<br>\t\t\tVal:  p.Next.Next.Val,<br>\t\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t\t&#125;<br>\t\ttempNode2 := &amp;ListNode&#123;<br>\t\t\tVal:  p.Next.Val,<br>\t\t\tNext: p.Next.Next.Next,<br>\t\t&#125;<br>\t\ttempNode1.Next = tempNode2<br>\t\tp.Next = tempNode1<br>\t\tp = p.Next.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"19-删除链表的倒数第N个节点\"><a href=\"#19-删除链表的倒数第N个节点\" class=\"headerlink\" title=\"19.删除链表的倒数第N个节点\"></a>19.删除链表的倒数第N个节点</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1vW4y1U7Gf\">链表遍历学清楚！ | LeetCode：19.删除链表倒数第N个节点</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>定义两个指针<code>p</code>和<code>q</code>，指针<code>p</code>先出发，指针<code>q</code>保持与<code>p</code>距离为<code>n</code>之后再出发，这样<code>q.Next</code>则是待删除的元素。</p>\n<blockquote>\n<p>  会不会出现<code>n</code>大于链表长度的情况（例如链表长度为5，删除倒数第8个元素）：不会，leetcode题解中给出。</p>\n  <img src=\"../images/day04/QQ20230923-221152.png\" alt=\"题目说明\" style=\"zoom:80%;\" />\n</blockquote>\n<img src=\"../images/day04/IMG_2D422EDB0DFC-1.jpeg\" alt=\"图解\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeNthFromEnd</span><span class=\"hljs-params\">(head *ListNode, n <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> head == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> head<br>\t&#125;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt;= n; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tq := newHead<br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp = p.Next<br>\t\tq = q.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> q.Next.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tq.Next = q.Next.Next<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tq.Next = <span class=\"hljs-literal\">nil</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"面试题02-07-链表相交\"><a href=\"#面试题02-07-链表相交\" class=\"headerlink\" title=\"面试题02.07.链表相交\"></a>面试题02.07.链表相交</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>假设是两个一维数组（只是为了方便逻辑上描述），查看是否相交，那么需要“尾部对齐”。假设长的链表开始的索引为0，我们需要从短的数组的开始。大意如下图</p>\n<img src=\"../images/day04/160_1.png\" alt=\"判断第一组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/day04/160_2.png\" alt=\"判断第二组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/day04/160_3.png\" alt=\"判断第三组结点\" style=\"zoom:80%;\" />\n\n<p>走到末尾都没发现有相同地址的节点则不存在相交的情况。</p>\n<ul>\n<li>尾部对齐操作：遍历两个链表（一组指针<code>p = newHeadA.Next</code>和<code>q = newHeadB.Next</code>），求各自的长度。</li>\n<li>重新定义一组指针（<code>p1 = newHeadA.Next</code>和<code>q1 = newHeadB.Next</code>），让其中更长的链表的指针移动到和短的同步位置<font color=\"#bdbdbd\">（这里可能是Go语言的特性？C语言不需要此操作，不重新定义指针p和q回不到起始位置）</font></li>\n<li>同时向前移动，判断是否地址相同</li>\n</ul>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getIntersectionNode</span><span class=\"hljs-params\">(headA, headB *ListNode)</span></span> *ListNode &#123;<br>    <span class=\"hljs-comment\">// 定义两个新的头，指向传参的头</span><br>    newHeadA := &amp;ListNode &#123;<br>        Val: <span class=\"hljs-number\">0</span>,<br>        Next: headA,<br>    &#125;<br>    newHeadB := &amp;ListNode &#123;<br>        Val: <span class=\"hljs-number\">0</span>,<br>        Next: headB,<br>    &#125;<br>    <span class=\"hljs-comment\">// 求两个链表各自的长度</span><br>    p := newHeadA.Next<br>    lenA := <span class=\"hljs-number\">0</span><br>    q := newHeadB.Next<br>    lenB := <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>        p = p.Next<br>        lenA++<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> q != <span class=\"hljs-literal\">nil</span> &#123;<br>        q = q.Next<br>        lenB++<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">// 定义两个新的指针，进行“对齐”操作</span><br>    p1 := newHeadA.Next<br>    q1 := newHeadB.Next<br>    <span class=\"hljs-keyword\">if</span> lenA &lt; lenB &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; lenB - lenA; i++ &#123;<br>            q1 = q1.Next<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; lenA - lenB; i++ &#123;<br>            p1 = p1.Next<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 对齐后向前查找，找到了返回结点，否则为nil</span><br>    <span class=\"hljs-keyword\">for</span> p1 != <span class=\"hljs-literal\">nil</span> &amp;&amp; q1 != <span class=\"hljs-literal\">nil</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> p1 == q1 &#123;<br>            <span class=\"hljs-keyword\">return</span> p1<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            p1 = p1.Next<br>            q1 = q1.Next<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"142-环形链表II\"><a href=\"#142-环形链表II\" class=\"headerlink\" title=\"142. 环形链表II\"></a>142. 环形链表II</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1if4y1d7ob\">把环形链表讲清楚！| LeetCode:142.环形链表II</a></p>\n<p>  状态：想不出思路后看了卡哥的讲解恍然大悟，AC！</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><s><font color=\"#FF0000\">最开始没有审题，当成了这道题是在问是否存在环，后来发现这只是第一问</font></s></p>\n<p>这道题需要返回的是：如果链表有环，那么返回最后一个结点链接到了哪个结点上。</p>\n<ol>\n<li><p>首先要找到，链表是否有环，这里使用的是快慢指针的算法，快指针速度为2，慢指针速度为1。若快指针走到了终点说明没有环；如果两个指针相遇说明有环。</p>\n<blockquote>\n<p>  因为相对速度差1，所以二者必相遇</p>\n</blockquote>\n</li>\n<li><p>找到入口：（卡哥视频讲的很好，如果有疑问一定<strong>看完视频</strong>再提问）</p>\n</li>\n</ol>\n<img src=\"../images/day04/142_1.jpeg\" alt=\"142_1\" style=\"zoom:80%;\" />\n\n<p>为什么一圈必定会追上：假设他们同时进入入口（整个链表就是个环），慢指针走一圈后，快指针走两圈。如果快指针先进入，那么追上慢指针必定走不到一圈。</p>\n<p>最后推出来x&#x3D;z，意味着此时的快指针降速（速度变为1），同时新定义的指针从头开始运动，两者必定在入口处相遇</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">detectCycle</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>    fast := head<br>    slow := head<br>    p := head<br>    <span class=\"hljs-comment\">// 这层for寻找环</span><br>    <span class=\"hljs-keyword\">for</span> fast != <span class=\"hljs-literal\">nil</span> &#123;<br>        slow = slow.Next<br>        fast = fast.Next<br>        <span class=\"hljs-keyword\">if</span> fast != <span class=\"hljs-literal\">nil</span> &#123;<br>            fast = fast.Next<br>            <span class=\"hljs-keyword\">if</span> slow == fast &#123;  <span class=\"hljs-comment\">// 两指针相遇说明有环</span><br>            <span class=\"hljs-keyword\">for</span> p != fast &#123;  <span class=\"hljs-comment\">// 这层for执行的是公式中x=z的一步</span><br>                p = p.Next<br>                fast = fast.Next<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> p<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;        <br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>今天重新写了下链表的实现（主要是vscode没有装调试leetcode插件），部分题都是自己在GoLand中自己写函数构造的链表，最后单独写了个文件保存这部分代码（主要就是新建链表和打印链表），新建链表是通过一个数组传要初始化的值。当然了，今天的也只有两道题可以用，后两道直接在leetcode的网页上写了，看起来挺复杂的还担心不好debug，理清思路之后写起来很快，也不会出错。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> InitLinkList<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-keyword\">type</span> ListNode <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal  <span class=\"hljs-type\">int</span><br>\tNext *ListNode<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">InsertElem</span><span class=\"hljs-params\">(head *ListNode, nums []<span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\tp.Next = &amp;ListNode&#123;<br>\t\t\tVal:  v,<br>\t\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t\t&#125;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">PrintList</span><span class=\"hljs-params\">(head *ListNode)</span></span> &#123;<br>\tp := head<br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>, p.Val)<br>\t\tp = p.Next<br>\t&#125;<br>\tfmt.Println()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Go有些语法还不是很了解，今天发现了跨文件调用需要将<code>变量名</code>和<code>函数名</code>首字母大写，也叫作导出。从一些语法来看Go现在给我的感觉他就不想Java那种强面向对象编程。这点还挺好的（对我个人而言），很灵活，调用的时候也不需要实例化（也没这一种说法）。</p>\n</li>\n<li><p>后三道题（最后一道题指的求是否存在环的过程）考研复习408的时候已经见过，只不过这次的身份发生了变化，面对这道题状态也不同。考研复习时候遇到手撕代码的题首先想到的是如何拿分，没思路就暴力算法。有额外时间再考虑优化。如果再试卷上我可能会使用空间复杂度更大的算法，空间换时间。但是现在在求职中，要好好的理解每一道题，每一种优化的思路，题干加以限制：<code>空间复杂度为O(1)</code>。真的需要认真思考，链表相交没有想出来，看了卡哥的讲解理解了。</p>\n</li>\n<li><p>现在的刷题状态是这样的：多给自己思考的时间争取想到最优的解法。无论是否解出来再去看看卡哥的讲解和代码，看看别人写的和自己写的差距在哪。我的代码现在经常出现这种逻辑，对于个别情况需要单独判断，而别人的则不需要，因为自己在边界情况考虑的欠妥。明天周日休息一天。但是事情还是挺多的。</p>\n</li>\n</ul>\n<p><font color=\"#3914a5\">第一周打卡结束！4天结束！</font></p>\n"},{"title":"代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。","abbrlink":"bd069431","date":"2023-09-22T16:08:21.000Z","_content":"\n# 代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。\n\n## 203. 移除链表元素\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/remove-linked-list-elements/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html)\n>\n> 视频讲解：[链表基础操作| LeetCode：203.移除链表元素](https://www.bilibili.com/video/BV18B4y1s7R9)\n>\n> 状态：AC\n\n### 思路\n\n删除元素还是比较简单的，假设`q = p.Next`，如果删除`q`则是`p.Next = p.Next.Next`，考虑下`p.Next.Next`是否存在即可\n\n### 代码\n\n``` go\nfunc removeElements(head *ListNode, val int) *ListNode {\n\tnewHead := new(ListNode)\n\tnewHead.Next = head\n\tp := newHead\n\tfor p.Next != nil {\n\t\tif p.Next.Val == val {\n\t\t\tp.Next = p.Next.Next\n\t\t} else {\n\t\t\tp = p.Next\n\t\t}\n\t}\n\treturn newHead.Next\n}\n```\n\n\n\n## 707. 设计链表\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/design-linked-list/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html)\n>\n> 视频讲解：[帮你把链表操作学个通透！LeetCode：707.设计链表](https://www.bilibili.com/video/BV1FU4y1X7WD)\n>\n> 状态：半AC（AC了但是也没完全AC）\n\n### 思路\n\n- `(this *MyLinkedList)get(index int) int`: 先判断index是否合法，所以需要引入一个新的成员对象`size`在`MyLinkedList`中\n- `(this *MyLinkedList)AddAtHead(val int)`: 头插法只需要在新的头之后接入一个新的节点，然后`size++`\n- `(this *MyLinkedList)AddAtTail(val int)`: 尾插法只需要在整个链表之后接入一个新的节点，然后`size++`\n- `(this *MyLinkedList)DeleteAtIndex(index int)`: 删除一个元素类似上一题，只不过要判断index是否合法\n- `(this *MyLinkedList)AddAtIndex(index int, val)`: 先判断index是否合法，找到正确位置进行插入\n\n### 代码\n\n``` go\n\ntype LinkList struct {\n\tVal  int\n\tNext *LinkList\n}\n\ntype MyLinkedList struct {\n\tsize    int\n\tnewHead *LinkList\n}\n\nfunc Constructor() MyLinkedList {\n\t//return MyLinkedList{}\n\tnode := &LinkList{\n\t\tVal:  0,\n\t\tNext: nil,\n\t}\n\treturn MyLinkedList{\n\t\tnewHead: node,\n\t\tsize:    0,\n\t}\n}\n\nfunc (this *MyLinkedList) Get(index int) int {\n\tif index < 0 || index >= this.size || this == nil {\n\t\treturn -1\n\t}\n\tp := this.newHead.Next\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\treturn p.Val\n}\n\nfunc (this *MyLinkedList) AddAtHead(val int) {\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: this.newHead.Next,\n\t}\n\tthis.newHead.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) AddAtTail(val int) {\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: nil,\n\t}\n\tp := this.newHead\n\tfor p.Next != nil {\n\t\tp = p.Next\n\t}\n\tp.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) AddAtIndex(index int, val int) {\n\tif index < 0 {\n\t\tindex = 0\n\t} else if index > this.size {\n\t\treturn\n\t}\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: nil,\n\t}\n\tp := this.newHead\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\tnewNode.Next = p.Next\n\tp.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) DeleteAtIndex(index int) {\n\tif index < 0 || index >= this.size {\n\t\treturn\n\t}\n\tp := this.newHead\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\tif p.Next != nil {\n\t\tp.Next = p.Next.Next\n\t}\n\tthis.size--\n}\n\n```\n\n\n\n\n## 206. 反转链表\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/reverse-linked-list/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html)\n>\n> 视频讲解：[帮你拿下反转链表 | LeetCode：206.反转链表](https://www.bilibili.com/video/BV1nB4y1i7eL)\n>\n> 状态：AC\n\n### 思路\n\n1. 建立新的头结点`newHead` ，使其`newHead.Next = head`。\n2. 定义指针`p = head.Next`(先判断head是否为单节点)，然后手动断链，`head.Next = nil`\n3. 指针`p`不断向后，每遍历到一个元素，将这个元素保存到新的节点`newNode`，并且不断头插到`newHead`\n\n### 代码\n\n``` go\nfunc addAtHead(head *ListNode, val int) *ListNode {\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tnewNode := &ListNode{\n\t\tVal:  val,\n\t\tNext: newHead.Next,\n\t}\n\tnewHead.Next = newNode\n\treturn newHead.Next\n}\n\nfunc reverseList(head *ListNode) *ListNode {\n\tif head == nil {\n\t\treturn head\n\t}\n\tp := head.Next\n\thead.Next = nil\n\tfor p != nil {\n\t\thead = addAtHead(head, p.Val)\n\t\tp = p.Next\n\t}\n\treturn head\n}\n```\n\n\n\n## 小结\n\n- leetcode上的链表的题都是无头链表，所谓的 `head` 被叫做 `虚拟头`。我感觉还是叫做无头链表好一些，新建一个头先链接无头链表\n\n- 以前写过的都是有头链表，换到了无头链表刚开始有点不知所措、插入时候感觉怪怪的，其实都一样\n\n- `Go`的`new`相关或者初始化成员变量有了新的理解\n\n    ``` go\n    type SSS struct {\n        Val int\n    }\n    \n    //初始化的方式1\n    a := new SSS(1)\n    a.Val = 1\n    \n    //初始化的方式2\n    a := &SSS{\n        Val: 1\n    }\n    \n    ```\n\n- `Go`的构造函数看起来还有点懵\n- 最近事情太多了，周六上午招聘会、下午学校组织的求职训练营、晚上继续leetcode；周日上午训练营结课、下午再重写下链表、搞搞课题；周一还有个小活动。加油！\n","source":"_posts/day03.md","raw":"---\ntitle: 代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 链表\ncategories: 刷题\nabbrlink: bd069431\ndate: 2023-09-23 00:08:21\n---\n\n# 代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。\n\n## 203. 移除链表元素\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/remove-linked-list-elements/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html)\n>\n> 视频讲解：[链表基础操作| LeetCode：203.移除链表元素](https://www.bilibili.com/video/BV18B4y1s7R9)\n>\n> 状态：AC\n\n### 思路\n\n删除元素还是比较简单的，假设`q = p.Next`，如果删除`q`则是`p.Next = p.Next.Next`，考虑下`p.Next.Next`是否存在即可\n\n### 代码\n\n``` go\nfunc removeElements(head *ListNode, val int) *ListNode {\n\tnewHead := new(ListNode)\n\tnewHead.Next = head\n\tp := newHead\n\tfor p.Next != nil {\n\t\tif p.Next.Val == val {\n\t\t\tp.Next = p.Next.Next\n\t\t} else {\n\t\t\tp = p.Next\n\t\t}\n\t}\n\treturn newHead.Next\n}\n```\n\n\n\n## 707. 设计链表\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/design-linked-list/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html)\n>\n> 视频讲解：[帮你把链表操作学个通透！LeetCode：707.设计链表](https://www.bilibili.com/video/BV1FU4y1X7WD)\n>\n> 状态：半AC（AC了但是也没完全AC）\n\n### 思路\n\n- `(this *MyLinkedList)get(index int) int`: 先判断index是否合法，所以需要引入一个新的成员对象`size`在`MyLinkedList`中\n- `(this *MyLinkedList)AddAtHead(val int)`: 头插法只需要在新的头之后接入一个新的节点，然后`size++`\n- `(this *MyLinkedList)AddAtTail(val int)`: 尾插法只需要在整个链表之后接入一个新的节点，然后`size++`\n- `(this *MyLinkedList)DeleteAtIndex(index int)`: 删除一个元素类似上一题，只不过要判断index是否合法\n- `(this *MyLinkedList)AddAtIndex(index int, val)`: 先判断index是否合法，找到正确位置进行插入\n\n### 代码\n\n``` go\n\ntype LinkList struct {\n\tVal  int\n\tNext *LinkList\n}\n\ntype MyLinkedList struct {\n\tsize    int\n\tnewHead *LinkList\n}\n\nfunc Constructor() MyLinkedList {\n\t//return MyLinkedList{}\n\tnode := &LinkList{\n\t\tVal:  0,\n\t\tNext: nil,\n\t}\n\treturn MyLinkedList{\n\t\tnewHead: node,\n\t\tsize:    0,\n\t}\n}\n\nfunc (this *MyLinkedList) Get(index int) int {\n\tif index < 0 || index >= this.size || this == nil {\n\t\treturn -1\n\t}\n\tp := this.newHead.Next\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\treturn p.Val\n}\n\nfunc (this *MyLinkedList) AddAtHead(val int) {\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: this.newHead.Next,\n\t}\n\tthis.newHead.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) AddAtTail(val int) {\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: nil,\n\t}\n\tp := this.newHead\n\tfor p.Next != nil {\n\t\tp = p.Next\n\t}\n\tp.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) AddAtIndex(index int, val int) {\n\tif index < 0 {\n\t\tindex = 0\n\t} else if index > this.size {\n\t\treturn\n\t}\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: nil,\n\t}\n\tp := this.newHead\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\tnewNode.Next = p.Next\n\tp.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) DeleteAtIndex(index int) {\n\tif index < 0 || index >= this.size {\n\t\treturn\n\t}\n\tp := this.newHead\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\tif p.Next != nil {\n\t\tp.Next = p.Next.Next\n\t}\n\tthis.size--\n}\n\n```\n\n\n\n\n## 206. 反转链表\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/reverse-linked-list/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html)\n>\n> 视频讲解：[帮你拿下反转链表 | LeetCode：206.反转链表](https://www.bilibili.com/video/BV1nB4y1i7eL)\n>\n> 状态：AC\n\n### 思路\n\n1. 建立新的头结点`newHead` ，使其`newHead.Next = head`。\n2. 定义指针`p = head.Next`(先判断head是否为单节点)，然后手动断链，`head.Next = nil`\n3. 指针`p`不断向后，每遍历到一个元素，将这个元素保存到新的节点`newNode`，并且不断头插到`newHead`\n\n### 代码\n\n``` go\nfunc addAtHead(head *ListNode, val int) *ListNode {\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tnewNode := &ListNode{\n\t\tVal:  val,\n\t\tNext: newHead.Next,\n\t}\n\tnewHead.Next = newNode\n\treturn newHead.Next\n}\n\nfunc reverseList(head *ListNode) *ListNode {\n\tif head == nil {\n\t\treturn head\n\t}\n\tp := head.Next\n\thead.Next = nil\n\tfor p != nil {\n\t\thead = addAtHead(head, p.Val)\n\t\tp = p.Next\n\t}\n\treturn head\n}\n```\n\n\n\n## 小结\n\n- leetcode上的链表的题都是无头链表，所谓的 `head` 被叫做 `虚拟头`。我感觉还是叫做无头链表好一些，新建一个头先链接无头链表\n\n- 以前写过的都是有头链表，换到了无头链表刚开始有点不知所措、插入时候感觉怪怪的，其实都一样\n\n- `Go`的`new`相关或者初始化成员变量有了新的理解\n\n    ``` go\n    type SSS struct {\n        Val int\n    }\n    \n    //初始化的方式1\n    a := new SSS(1)\n    a.Val = 1\n    \n    //初始化的方式2\n    a := &SSS{\n        Val: 1\n    }\n    \n    ```\n\n- `Go`的构造函数看起来还有点懵\n- 最近事情太多了，周六上午招聘会、下午学校组织的求职训练营、晚上继续leetcode；周日上午训练营结课、下午再重写下链表、搞搞课题；周一还有个小活动。加油！\n","slug":"day03","published":1,"updated":"2023-10-24T19:31:36.360Z","_id":"cln7q7alu0005vswhctx76rch","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。\"><a href=\"#代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。\" class=\"headerlink\" title=\"代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。\"></a>代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。</h1><h2 id=\"203-移除链表元素\"><a href=\"#203-移除链表元素\" class=\"headerlink\" title=\"203. 移除链表元素\"></a>203. 移除链表元素</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV18B4y1s7R9\">链表基础操作| LeetCode：203.移除链表元素</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>删除元素还是比较简单的，假设<code>q = p.Next</code>，如果删除<code>q</code>则是<code>p.Next = p.Next.Next</code>，考虑下<code>p.Next.Next</code>是否存在即可</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElements</span><span class=\"hljs-params\">(head *ListNode, val <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := <span class=\"hljs-built_in\">new</span>(ListNode)<br>\tnewHead.Next = head<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> p.Next.Val == val &#123;<br>\t\t\tp.Next = p.Next.Next<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tp = p.Next<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"707-设计链表\"><a href=\"#707-设计链表\" class=\"headerlink\" title=\"707. 设计链表\"></a>707. 设计链表</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/design-linked-list/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1FU4y1X7WD\">帮你把链表操作学个通透！LeetCode：707.设计链表</a></p>\n<p>状态：半AC（AC了但是也没完全AC）</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><code>(this *MyLinkedList)get(index int) int</code>: 先判断index是否合法，所以需要引入一个新的成员对象<code>size</code>在<code>MyLinkedList</code>中</li>\n<li><code>(this *MyLinkedList)AddAtHead(val int)</code>: 头插法只需要在新的头之后接入一个新的节点，然后<code>size++</code></li>\n<li><code>(this *MyLinkedList)AddAtTail(val int)</code>: 尾插法只需要在整个链表之后接入一个新的节点，然后<code>size++</code></li>\n<li><code>(this *MyLinkedList)DeleteAtIndex(index int)</code>: 删除一个元素类似上一题，只不过要判断index是否合法</li>\n<li><code>(this *MyLinkedList)AddAtIndex(index int, val)</code>: 先判断index是否合法，找到正确位置进行插入</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-keyword\">type</span> LinkList <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal  <span class=\"hljs-type\">int</span><br>\tNext *LinkList<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> MyLinkedList <span class=\"hljs-keyword\">struct</span> &#123;<br>\tsize    <span class=\"hljs-type\">int</span><br>\tnewHead *LinkList<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> MyLinkedList &#123;<br>\t<span class=\"hljs-comment\">//return MyLinkedList&#123;&#125;</span><br>\tnode := &amp;LinkList&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> MyLinkedList&#123;<br>\t\tnewHead: node,<br>\t\tsize:    <span class=\"hljs-number\">0</span>,<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> Get(index <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> || index &gt;= this.size || this == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125;<br>\tp := this.newHead.Next<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> p.Val<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtHead(val <span class=\"hljs-type\">int</span>) &#123;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: this.newHead.Next,<br>\t&#125;<br>\tthis.newHead.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtTail(val <span class=\"hljs-type\">int</span>) &#123;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tp.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtIndex(index <span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tindex = <span class=\"hljs-number\">0</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> index &gt; this.size &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tnewNode.Next = p.Next<br>\tp.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> DeleteAtIndex(index <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> || index &gt;= this.size &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp.Next = p.Next.Next<br>\t&#125;<br>\tthis.size--<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"206-反转链表\"><a href=\"#206-反转链表\" class=\"headerlink\" title=\"206. 反转链表\"></a>206. 反转链表</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-linked-list/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1nB4y1i7eL\">帮你拿下反转链表 | LeetCode：206.反转链表</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>建立新的头结点<code>newHead</code> ，使其<code>newHead.Next = head</code>。</li>\n<li>定义指针<code>p = head.Next</code>(先判断head是否为单节点)，然后手动断链，<code>head.Next = nil</code></li>\n<li>指针<code>p</code>不断向后，每遍历到一个元素，将这个元素保存到新的节点<code>newNode</code>，并且不断头插到<code>newHead</code></li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addAtHead</span><span class=\"hljs-params\">(head *ListNode, val <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tnewNode := &amp;ListNode&#123;<br>\t\tVal:  val,<br>\t\tNext: newHead.Next,<br>\t&#125;<br>\tnewHead.Next = newNode<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverseList</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> head == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> head<br>\t&#125;<br>\tp := head.Next<br>\thead.Next = <span class=\"hljs-literal\">nil</span><br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\thead = addAtHead(head, p.Val)<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> head<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>leetcode上的链表的题都是无头链表，所谓的 <code>head</code> 被叫做 <code>虚拟头</code>。我感觉还是叫做无头链表好一些，新建一个头先链接无头链表</p>\n</li>\n<li><p>以前写过的都是有头链表，换到了无头链表刚开始有点不知所措、插入时候感觉怪怪的，其实都一样</p>\n</li>\n<li><p><code>Go</code>的<code>new</code>相关或者初始化成员变量有了新的理解</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> SSS <span class=\"hljs-keyword\">struct</span> &#123;<br>    Val <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-comment\">//初始化的方式1</span><br>a := <span class=\"hljs-built_in\">new</span> SSS(<span class=\"hljs-number\">1</span>)<br>a.Val = <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-comment\">//初始化的方式2</span><br>a := &amp;SSS&#123;<br>    Val: <span class=\"hljs-number\">1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>Go</code>的构造函数看起来还有点懵</p>\n</li>\n<li><p>最近事情太多了，周六上午招聘会、下午学校组织的求职训练营、晚上继续leetcode；周日上午训练营结课、下午再重写下链表、搞搞课题；周一还有个小活动。加油！</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。\"><a href=\"#代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。\" class=\"headerlink\" title=\"代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。\"></a>代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。</h1><h2 id=\"203-移除链表元素\"><a href=\"#203-移除链表元素\" class=\"headerlink\" title=\"203. 移除链表元素\"></a>203. 移除链表元素</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV18B4y1s7R9\">链表基础操作| LeetCode：203.移除链表元素</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>删除元素还是比较简单的，假设<code>q = p.Next</code>，如果删除<code>q</code>则是<code>p.Next = p.Next.Next</code>，考虑下<code>p.Next.Next</code>是否存在即可</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElements</span><span class=\"hljs-params\">(head *ListNode, val <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := <span class=\"hljs-built_in\">new</span>(ListNode)<br>\tnewHead.Next = head<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> p.Next.Val == val &#123;<br>\t\t\tp.Next = p.Next.Next<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tp = p.Next<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"707-设计链表\"><a href=\"#707-设计链表\" class=\"headerlink\" title=\"707. 设计链表\"></a>707. 设计链表</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/design-linked-list/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1FU4y1X7WD\">帮你把链表操作学个通透！LeetCode：707.设计链表</a></p>\n<p>状态：半AC（AC了但是也没完全AC）</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><code>(this *MyLinkedList)get(index int) int</code>: 先判断index是否合法，所以需要引入一个新的成员对象<code>size</code>在<code>MyLinkedList</code>中</li>\n<li><code>(this *MyLinkedList)AddAtHead(val int)</code>: 头插法只需要在新的头之后接入一个新的节点，然后<code>size++</code></li>\n<li><code>(this *MyLinkedList)AddAtTail(val int)</code>: 尾插法只需要在整个链表之后接入一个新的节点，然后<code>size++</code></li>\n<li><code>(this *MyLinkedList)DeleteAtIndex(index int)</code>: 删除一个元素类似上一题，只不过要判断index是否合法</li>\n<li><code>(this *MyLinkedList)AddAtIndex(index int, val)</code>: 先判断index是否合法，找到正确位置进行插入</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-keyword\">type</span> LinkList <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal  <span class=\"hljs-type\">int</span><br>\tNext *LinkList<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> MyLinkedList <span class=\"hljs-keyword\">struct</span> &#123;<br>\tsize    <span class=\"hljs-type\">int</span><br>\tnewHead *LinkList<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> MyLinkedList &#123;<br>\t<span class=\"hljs-comment\">//return MyLinkedList&#123;&#125;</span><br>\tnode := &amp;LinkList&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> MyLinkedList&#123;<br>\t\tnewHead: node,<br>\t\tsize:    <span class=\"hljs-number\">0</span>,<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> Get(index <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> || index &gt;= this.size || this == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125;<br>\tp := this.newHead.Next<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> p.Val<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtHead(val <span class=\"hljs-type\">int</span>) &#123;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: this.newHead.Next,<br>\t&#125;<br>\tthis.newHead.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtTail(val <span class=\"hljs-type\">int</span>) &#123;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tp.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtIndex(index <span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tindex = <span class=\"hljs-number\">0</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> index &gt; this.size &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tnewNode.Next = p.Next<br>\tp.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> DeleteAtIndex(index <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> || index &gt;= this.size &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp.Next = p.Next.Next<br>\t&#125;<br>\tthis.size--<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"206-反转链表\"><a href=\"#206-反转链表\" class=\"headerlink\" title=\"206. 反转链表\"></a>206. 反转链表</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-linked-list/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1nB4y1i7eL\">帮你拿下反转链表 | LeetCode：206.反转链表</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>建立新的头结点<code>newHead</code> ，使其<code>newHead.Next = head</code>。</li>\n<li>定义指针<code>p = head.Next</code>(先判断head是否为单节点)，然后手动断链，<code>head.Next = nil</code></li>\n<li>指针<code>p</code>不断向后，每遍历到一个元素，将这个元素保存到新的节点<code>newNode</code>，并且不断头插到<code>newHead</code></li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addAtHead</span><span class=\"hljs-params\">(head *ListNode, val <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tnewNode := &amp;ListNode&#123;<br>\t\tVal:  val,<br>\t\tNext: newHead.Next,<br>\t&#125;<br>\tnewHead.Next = newNode<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverseList</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> head == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> head<br>\t&#125;<br>\tp := head.Next<br>\thead.Next = <span class=\"hljs-literal\">nil</span><br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\thead = addAtHead(head, p.Val)<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> head<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>leetcode上的链表的题都是无头链表，所谓的 <code>head</code> 被叫做 <code>虚拟头</code>。我感觉还是叫做无头链表好一些，新建一个头先链接无头链表</p>\n</li>\n<li><p>以前写过的都是有头链表，换到了无头链表刚开始有点不知所措、插入时候感觉怪怪的，其实都一样</p>\n</li>\n<li><p><code>Go</code>的<code>new</code>相关或者初始化成员变量有了新的理解</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> SSS <span class=\"hljs-keyword\">struct</span> &#123;<br>    Val <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-comment\">//初始化的方式1</span><br>a := <span class=\"hljs-built_in\">new</span> SSS(<span class=\"hljs-number\">1</span>)<br>a.Val = <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-comment\">//初始化的方式2</span><br>a := &amp;SSS&#123;<br>    Val: <span class=\"hljs-number\">1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>Go</code>的构造函数看起来还有点懵</p>\n</li>\n<li><p>最近事情太多了，周六上午招聘会、下午学校组织的求职训练营、晚上继续leetcode；周日上午训练营结课、下午再重写下链表、搞搞课题；周一还有个小活动。加油！</p>\n</li>\n</ul>\n"},{"title":"代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。","abbrlink":"20198d61","date":"2023-09-25T02:09:40.000Z","_content":"\n# 代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。\n\n## 242.有效的字母异位词\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/valid-anagram/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html)\n>\n>   视频讲解：[学透哈希表，数组使用有技巧！Leetcode：242.有效的字母异位词](https://www.bilibili.com/video/BV1YG411p7BA)\n>\n>   状态：AC\n\n### 思路\n\n-   方法一：使用`map`即可。键是字母的`ASCII`码、值为频率。分别用两个串构建两个`map`，再比较两个`map`是否相同。\n\n-   方法二：看了卡哥给的代码发现优化空间还是很大的，使用一个`map`即可，存放`s`的情况。异位词满足两个条件：\n    -   两个串等长。\n    -   两个串中字母出现的频率相同。这一点可以用`s`串的`map`的`value`自减。\n\n### 代码\n\n``` go\n//麻烦的方法\nfunc isAnagram(s string, t string) bool {\n\twords1 := map[byte]int{}\n\twords2 := map[byte]int{}\n\tfor i := 0; i < len(s); i++ {\n\t\t_, ok := words1[s[i]]\n\t\tif ok {\n\t\t\twords1[s[i]] += 1\n\t\t} else {\n\t\t\twords1[s[i]] = 1\n\t\t}\n\t}\n\tfor i := 0; i < len(t); i++ {\n\t\t_, ok := words2[t[i]]\n\t\tif ok {\n\t\t\twords2[t[i]] += 1\n\t\t} else {\n\t\t\twords2[t[i]] = 1\n\t\t}\n\t}\n\n\treturn reflect.DeepEqual(words1, words2)\n}\n```\n\n``` go\n// 简单的代码\nfunc isAnagram(s, t string) bool {\n\tif len(s) != len(t) {\n\t\treturn false\n\t}\n\tcnt := map[rune]int{}\n\tfor _, ch := range s {\n\t\tcnt[ch]++\n\t}\n\tfor _, ch := range t {\n\t\tcnt[ch]--\n\t\tif cnt[ch] < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n```\n\n\n\n## 349. 两个数组的交集\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/intersection-of-two-arrays/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html)\n>\n>   视频讲解：[学透哈希表，set使用有技巧！Leetcode：349. 两个数组的交集](https://www.bilibili.com/video/BV1ba411S7wu)\n>\n>   状态：AC\n\n### 思路\n\n从求交集可以看出是要使用集合的结构，但是在Go语言中<font color=\"#ff0000\">并没有</font>集合，所以我使用了`map`（并不是用map模拟set）。map中，键为`nums1`的每个元素，值只有三种状态：第一次出现是`0`，多次出现是`1`，在`nums2`也出现过是`2`，最后遍历map，找到值为2的key。\n\n利用const和iota模拟枚举类型。\n\n### 代码\n\n``` go\nconst (\n\tNEW = iota\n\tEXIST1\n\tEXIST2\n)\n\nfunc intersection(nums1 []int, nums2 []int) []int {\n\tset := map[int]int{}  //类集合操作\n\tfor _, v := range nums1 {\n\t\tif _, ok := set[v]; !ok {\n\t\t\tset[v] = NEW  // 第一个出现\n\t\t} else {  // 多次出现\n\t\t\tset[v] = EXIST1\n\t\t}\n\t}\n\tfor _, v := range nums2 {\n\t\tif _, ok := set[v]; ok {  // nums2也出现\n\t\t\tset[v] = EXIST2\n\t\t}\n\t}\n\tvar result []int\n\tfor k, v := range set {\n\t\tif v == EXIST2 {\n\t\t\tresult = append(result, k)\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 202. 快乐数\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/happy-number/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html#%E6%80%9D%E8%B7%AF)\n>\n>   状态：AC\n\n### 思路\n\n1.   构造一个集合，用于存放每一次拆数求平方和的结果\n2.   拆数\n3.   判断结果是否是1，如果是`return true`\n4.   如果不是1，判断结果是否在集合中，如果存在则说明出现了循环，`return false`\n\n\n\n### 代码\n\n``` go\nfunc isHappy(n int) bool {\n\tset := map[int]bool{}  // 模拟集合\n\tfor {\n\t\tsum := 0\n        //拆数求平方和\n\t\tfor n > 0 {\n\t\t\tsum += (n % 10) * (n % 10)\n\t\t\tn /= 10\n\t\t}\n        //得到正确答案\n\t\tif sum == 1 {\n\t\t\treturn true\n\t\t}\n        \n        //结果不在集合中则放入集合\n\t\tif _, ok := set[sum]; !ok {\n\t\t\tset[sum] = true\n\t\t} else {// 否则退出循环 return false\n\t\t\tbreak\n\t\t}\n\t\tn = sum // 新一轮的数\n\t}\n\treturn false\n}\n```\n\n## 1.两数之和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/two-sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html)\n>\n>   视频讲解：[梦开始的地方，Leetcode：1.两数之和](https://www.bilibili.com/video/BV1aT41177mK)\n>\n>   状态：AC\n\n### 思路\n\n1.   遍历`nums`将元素存为`map`的`key`，将元素的索引存放为`map`的`value`；\n2.   再遍历`nums`，查看`target - v`是否在`key`中，并返回两个值：`nums`元素的索引和`map[target-v]`\n\n遍历两次还是思路上走弯路了，一次即可。\n\n### 代码\n\n```go\n//遍历两次\nfunc twoSum(nums []int, target int) []int {\n    mapNums := map[int]int{}\n    for i, v := range nums {\n       mapNums[v] = i\n    }\n    var result []int\n    for i, v := range nums {\n       if _, ok := mapNums[target-v]; ok && mapNums[target-v] != i {\n          result = append(result, i)\n          result = append(result, mapNums[target-v])\n          break\n       }\n    }\n    return result\n}\n```\n\n``` go\nfunc twoSum(nums []int, target int) []int {\n\tmapNums := map[int]int{}\n\tfor i, v := range nums {\n\t\tif value, ok := mapNums[target-v]; ok {\n\t\t\treturn []int{i, value}\n\t\t} else {\n\t\t\tmapNums[v] = i\n\t\t}\n\t}\n\treturn []int{}\n}\n```\n\n## 小结\n\n-   这次的题目不算很难，做起来就很快，算上写博客的时间不到两个小时\n\n-   对Go语言的map有了新的理解：\n\n    ``` go\n    test = map[int]int{}\n    if value, ok := test[key]; ok {\n    \t// key存在的情况\n    } else {\n    \t// key不存在的情况\n    }\n    ```\n\n    ``` go\n    // 使用反射来判断两个map是否相等\n    import reflect\n    reflect.DeepEqual(map1, map2)\n    ```\n\n    ``` go\n    test = map[int]int{}\n    test[1]--  // 即使不存在1，默认新增键值对{1:0}，然后再自减\n    ```\n\n    \n\n-   第一次使用Go模拟枚举\n\n    ``` go\n    const (\n    \tA iota\n        B\n        C\n    )\n    ```\n\n    \n","source":"_posts/day06.md","raw":"---\ntitle: 代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 哈希表\ncategories: 刷题\nabbrlink: 20198d61\ndate: 2023-09-25 10:09:40\n---\n\n# 代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。\n\n## 242.有效的字母异位词\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/valid-anagram/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html)\n>\n>   视频讲解：[学透哈希表，数组使用有技巧！Leetcode：242.有效的字母异位词](https://www.bilibili.com/video/BV1YG411p7BA)\n>\n>   状态：AC\n\n### 思路\n\n-   方法一：使用`map`即可。键是字母的`ASCII`码、值为频率。分别用两个串构建两个`map`，再比较两个`map`是否相同。\n\n-   方法二：看了卡哥给的代码发现优化空间还是很大的，使用一个`map`即可，存放`s`的情况。异位词满足两个条件：\n    -   两个串等长。\n    -   两个串中字母出现的频率相同。这一点可以用`s`串的`map`的`value`自减。\n\n### 代码\n\n``` go\n//麻烦的方法\nfunc isAnagram(s string, t string) bool {\n\twords1 := map[byte]int{}\n\twords2 := map[byte]int{}\n\tfor i := 0; i < len(s); i++ {\n\t\t_, ok := words1[s[i]]\n\t\tif ok {\n\t\t\twords1[s[i]] += 1\n\t\t} else {\n\t\t\twords1[s[i]] = 1\n\t\t}\n\t}\n\tfor i := 0; i < len(t); i++ {\n\t\t_, ok := words2[t[i]]\n\t\tif ok {\n\t\t\twords2[t[i]] += 1\n\t\t} else {\n\t\t\twords2[t[i]] = 1\n\t\t}\n\t}\n\n\treturn reflect.DeepEqual(words1, words2)\n}\n```\n\n``` go\n// 简单的代码\nfunc isAnagram(s, t string) bool {\n\tif len(s) != len(t) {\n\t\treturn false\n\t}\n\tcnt := map[rune]int{}\n\tfor _, ch := range s {\n\t\tcnt[ch]++\n\t}\n\tfor _, ch := range t {\n\t\tcnt[ch]--\n\t\tif cnt[ch] < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n```\n\n\n\n## 349. 两个数组的交集\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/intersection-of-two-arrays/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html)\n>\n>   视频讲解：[学透哈希表，set使用有技巧！Leetcode：349. 两个数组的交集](https://www.bilibili.com/video/BV1ba411S7wu)\n>\n>   状态：AC\n\n### 思路\n\n从求交集可以看出是要使用集合的结构，但是在Go语言中<font color=\"#ff0000\">并没有</font>集合，所以我使用了`map`（并不是用map模拟set）。map中，键为`nums1`的每个元素，值只有三种状态：第一次出现是`0`，多次出现是`1`，在`nums2`也出现过是`2`，最后遍历map，找到值为2的key。\n\n利用const和iota模拟枚举类型。\n\n### 代码\n\n``` go\nconst (\n\tNEW = iota\n\tEXIST1\n\tEXIST2\n)\n\nfunc intersection(nums1 []int, nums2 []int) []int {\n\tset := map[int]int{}  //类集合操作\n\tfor _, v := range nums1 {\n\t\tif _, ok := set[v]; !ok {\n\t\t\tset[v] = NEW  // 第一个出现\n\t\t} else {  // 多次出现\n\t\t\tset[v] = EXIST1\n\t\t}\n\t}\n\tfor _, v := range nums2 {\n\t\tif _, ok := set[v]; ok {  // nums2也出现\n\t\t\tset[v] = EXIST2\n\t\t}\n\t}\n\tvar result []int\n\tfor k, v := range set {\n\t\tif v == EXIST2 {\n\t\t\tresult = append(result, k)\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 202. 快乐数\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/happy-number/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html#%E6%80%9D%E8%B7%AF)\n>\n>   状态：AC\n\n### 思路\n\n1.   构造一个集合，用于存放每一次拆数求平方和的结果\n2.   拆数\n3.   判断结果是否是1，如果是`return true`\n4.   如果不是1，判断结果是否在集合中，如果存在则说明出现了循环，`return false`\n\n\n\n### 代码\n\n``` go\nfunc isHappy(n int) bool {\n\tset := map[int]bool{}  // 模拟集合\n\tfor {\n\t\tsum := 0\n        //拆数求平方和\n\t\tfor n > 0 {\n\t\t\tsum += (n % 10) * (n % 10)\n\t\t\tn /= 10\n\t\t}\n        //得到正确答案\n\t\tif sum == 1 {\n\t\t\treturn true\n\t\t}\n        \n        //结果不在集合中则放入集合\n\t\tif _, ok := set[sum]; !ok {\n\t\t\tset[sum] = true\n\t\t} else {// 否则退出循环 return false\n\t\t\tbreak\n\t\t}\n\t\tn = sum // 新一轮的数\n\t}\n\treturn false\n}\n```\n\n## 1.两数之和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/two-sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html)\n>\n>   视频讲解：[梦开始的地方，Leetcode：1.两数之和](https://www.bilibili.com/video/BV1aT41177mK)\n>\n>   状态：AC\n\n### 思路\n\n1.   遍历`nums`将元素存为`map`的`key`，将元素的索引存放为`map`的`value`；\n2.   再遍历`nums`，查看`target - v`是否在`key`中，并返回两个值：`nums`元素的索引和`map[target-v]`\n\n遍历两次还是思路上走弯路了，一次即可。\n\n### 代码\n\n```go\n//遍历两次\nfunc twoSum(nums []int, target int) []int {\n    mapNums := map[int]int{}\n    for i, v := range nums {\n       mapNums[v] = i\n    }\n    var result []int\n    for i, v := range nums {\n       if _, ok := mapNums[target-v]; ok && mapNums[target-v] != i {\n          result = append(result, i)\n          result = append(result, mapNums[target-v])\n          break\n       }\n    }\n    return result\n}\n```\n\n``` go\nfunc twoSum(nums []int, target int) []int {\n\tmapNums := map[int]int{}\n\tfor i, v := range nums {\n\t\tif value, ok := mapNums[target-v]; ok {\n\t\t\treturn []int{i, value}\n\t\t} else {\n\t\t\tmapNums[v] = i\n\t\t}\n\t}\n\treturn []int{}\n}\n```\n\n## 小结\n\n-   这次的题目不算很难，做起来就很快，算上写博客的时间不到两个小时\n\n-   对Go语言的map有了新的理解：\n\n    ``` go\n    test = map[int]int{}\n    if value, ok := test[key]; ok {\n    \t// key存在的情况\n    } else {\n    \t// key不存在的情况\n    }\n    ```\n\n    ``` go\n    // 使用反射来判断两个map是否相等\n    import reflect\n    reflect.DeepEqual(map1, map2)\n    ```\n\n    ``` go\n    test = map[int]int{}\n    test[1]--  // 即使不存在1，默认新增键值对{1:0}，然后再自减\n    ```\n\n    \n\n-   第一次使用Go模拟枚举\n\n    ``` go\n    const (\n    \tA iota\n        B\n        C\n    )\n    ```\n\n    \n","slug":"day06","published":1,"updated":"2023-10-24T19:32:21.281Z","_id":"cln7q7alv0008vswh1zq3fitx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第六天-242-有效的字母异位词、349-两个数组的交集、202-快乐数、1-两数之和-。\"><a href=\"#代码随想录算法训练营第六天-242-有效的字母异位词、349-两个数组的交集、202-快乐数、1-两数之和-。\" class=\"headerlink\" title=\"代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。\"></a>代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。</h1><h2 id=\"242-有效的字母异位词\"><a href=\"#242-有效的字母异位词\" class=\"headerlink\" title=\"242.有效的字母异位词\"></a>242.有效的字母异位词</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/valid-anagram/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1YG411p7BA\">学透哈希表，数组使用有技巧！Leetcode：242.有效的字母异位词</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><p>方法一：使用<code>map</code>即可。键是字母的<code>ASCII</code>码、值为频率。分别用两个串构建两个<code>map</code>，再比较两个<code>map</code>是否相同。</p>\n</li>\n<li><p>方法二：看了卡哥给的代码发现优化空间还是很大的，使用一个<code>map</code>即可，存放<code>s</code>的情况。异位词满足两个条件：</p>\n<ul>\n<li>两个串等长。</li>\n<li>两个串中字母出现的频率相同。这一点可以用<code>s</code>串的<code>map</code>的<code>value</code>自减。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//麻烦的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isAnagram</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>, t <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\twords1 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\twords2 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\t_, ok := words1[s[i]]<br>\t\t<span class=\"hljs-keyword\">if</span> ok &#123;<br>\t\t\twords1[s[i]] += <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\twords1[s[i]] = <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(t); i++ &#123;<br>\t\t_, ok := words2[t[i]]<br>\t\t<span class=\"hljs-keyword\">if</span> ok &#123;<br>\t\t\twords2[t[i]] += <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\twords2[t[i]] = <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> reflect.DeepEqual(words1, words2)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 简单的代码</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isAnagram</span><span class=\"hljs-params\">(s, t <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s) != <span class=\"hljs-built_in\">len</span>(t) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\tcnt := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">rune</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> s &#123;<br>\t\tcnt[ch]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> t &#123;<br>\t\tcnt[ch]--<br>\t\t<span class=\"hljs-keyword\">if</span> cnt[ch] &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"349-两个数组的交集\"><a href=\"#349-两个数组的交集\" class=\"headerlink\" title=\"349. 两个数组的交集\"></a>349. 两个数组的交集</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-arrays/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1ba411S7wu\">学透哈希表，set使用有技巧！Leetcode：349. 两个数组的交集</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>从求交集可以看出是要使用集合的结构，但是在Go语言中<font color=\"#ff0000\">并没有</font>集合，所以我使用了<code>map</code>（并不是用map模拟set）。map中，键为<code>nums1</code>的每个元素，值只有三种状态：第一次出现是<code>0</code>，多次出现是<code>1</code>，在<code>nums2</code>也出现过是<code>2</code>，最后遍历map，找到值为2的key。</p>\n<p>利用const和iota模拟枚举类型。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">const</span> (<br>\tNEW = <span class=\"hljs-literal\">iota</span><br>\tEXIST1<br>\tEXIST2<br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">intersection</span><span class=\"hljs-params\">(nums1 []<span class=\"hljs-type\">int</span>, nums2 []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tset := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;  <span class=\"hljs-comment\">//类集合操作</span><br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums1 &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[v]; !ok &#123;<br>\t\t\tset[v] = NEW  <span class=\"hljs-comment\">// 第一个出现</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// 多次出现</span><br>\t\t\tset[v] = EXIST1<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums2 &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[v]; ok &#123;  <span class=\"hljs-comment\">// nums2也出现</span><br>\t\t\tset[v] = EXIST2<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> set &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v == EXIST2 &#123;<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, k)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"202-快乐数\"><a href=\"#202-快乐数\" class=\"headerlink\" title=\"202. 快乐数\"></a>202. 快乐数</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/happy-number/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html#%E6%80%9D%E8%B7%AF\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>构造一个集合，用于存放每一次拆数求平方和的结果</li>\n<li>拆数</li>\n<li>判断结果是否是1，如果是<code>return true</code></li>\n<li>如果不是1，判断结果是否在集合中，如果存在则说明出现了循环，<code>return false</code></li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isHappy</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\tset := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">bool</span>&#123;&#125;  <span class=\"hljs-comment\">// 模拟集合</span><br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tsum := <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-comment\">//拆数求平方和</span><br>\t\t<span class=\"hljs-keyword\">for</span> n &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tsum += (n % <span class=\"hljs-number\">10</span>) * (n % <span class=\"hljs-number\">10</span>)<br>\t\t\tn /= <span class=\"hljs-number\">10</span><br>\t\t&#125;<br>        <span class=\"hljs-comment\">//得到正确答案</span><br>\t\t<span class=\"hljs-keyword\">if</span> sum == <span class=\"hljs-number\">1</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br>        <br>        <span class=\"hljs-comment\">//结果不在集合中则放入集合</span><br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[sum]; !ok &#123;<br>\t\t\tset[sum] = <span class=\"hljs-literal\">true</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<span class=\"hljs-comment\">// 否则退出循环 return false</span><br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t\tn = sum <span class=\"hljs-comment\">// 新一轮的数</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1.两数之和\"></a>1.两数之和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/two-sum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1aT41177mK\">梦开始的地方，Leetcode：1.两数之和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>遍历<code>nums</code>将元素存为<code>map</code>的<code>key</code>，将元素的索引存放为<code>map</code>的<code>value</code>；</li>\n<li>再遍历<code>nums</code>，查看<code>target - v</code>是否在<code>key</code>中，并返回两个值：<code>nums</code>元素的索引和<code>map[target-v]</code></li>\n</ol>\n<p>遍历两次还是思路上走弯路了，一次即可。</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//遍历两次</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">twoSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    mapNums := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>       mapNums[v] = i<br>    &#125;<br>    <span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>    <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>       <span class=\"hljs-keyword\">if</span> _, ok := mapNums[target-v]; ok &amp;&amp; mapNums[target-v] != i &#123;<br>          result = <span class=\"hljs-built_in\">append</span>(result, i)<br>          result = <span class=\"hljs-built_in\">append</span>(result, mapNums[target-v])<br>          <span class=\"hljs-keyword\">break</span><br>       &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">twoSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tmapNums := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> value, ok := mapNums[target-v]; ok &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;i, value&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tmapNums[v] = i<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>这次的题目不算很难，做起来就很快，算上写博客的时间不到两个小时</p>\n</li>\n<li><p>对Go语言的map有了新的理解：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">test = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br><span class=\"hljs-keyword\">if</span> value, ok := test[key]; ok &#123;<br>\t<span class=\"hljs-comment\">// key存在的情况</span><br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t<span class=\"hljs-comment\">// key不存在的情况</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 使用反射来判断两个map是否相等</span><br><span class=\"hljs-keyword\">import</span> reflect<br>reflect.DeepEqual(map1, map2)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">test = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>test[<span class=\"hljs-number\">1</span>]--  <span class=\"hljs-comment\">// 即使不存在1，默认新增键值对&#123;1:0&#125;，然后再自减</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>第一次使用Go模拟枚举</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">const</span> (<br>\tA <span class=\"hljs-literal\">iota</span><br>    B<br>    C<br>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第六天-242-有效的字母异位词、349-两个数组的交集、202-快乐数、1-两数之和-。\"><a href=\"#代码随想录算法训练营第六天-242-有效的字母异位词、349-两个数组的交集、202-快乐数、1-两数之和-。\" class=\"headerlink\" title=\"代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。\"></a>代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。</h1><h2 id=\"242-有效的字母异位词\"><a href=\"#242-有效的字母异位词\" class=\"headerlink\" title=\"242.有效的字母异位词\"></a>242.有效的字母异位词</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/valid-anagram/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1YG411p7BA\">学透哈希表，数组使用有技巧！Leetcode：242.有效的字母异位词</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><p>方法一：使用<code>map</code>即可。键是字母的<code>ASCII</code>码、值为频率。分别用两个串构建两个<code>map</code>，再比较两个<code>map</code>是否相同。</p>\n</li>\n<li><p>方法二：看了卡哥给的代码发现优化空间还是很大的，使用一个<code>map</code>即可，存放<code>s</code>的情况。异位词满足两个条件：</p>\n<ul>\n<li>两个串等长。</li>\n<li>两个串中字母出现的频率相同。这一点可以用<code>s</code>串的<code>map</code>的<code>value</code>自减。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//麻烦的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isAnagram</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>, t <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\twords1 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\twords2 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\t_, ok := words1[s[i]]<br>\t\t<span class=\"hljs-keyword\">if</span> ok &#123;<br>\t\t\twords1[s[i]] += <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\twords1[s[i]] = <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(t); i++ &#123;<br>\t\t_, ok := words2[t[i]]<br>\t\t<span class=\"hljs-keyword\">if</span> ok &#123;<br>\t\t\twords2[t[i]] += <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\twords2[t[i]] = <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> reflect.DeepEqual(words1, words2)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 简单的代码</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isAnagram</span><span class=\"hljs-params\">(s, t <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s) != <span class=\"hljs-built_in\">len</span>(t) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\tcnt := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">rune</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> s &#123;<br>\t\tcnt[ch]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> t &#123;<br>\t\tcnt[ch]--<br>\t\t<span class=\"hljs-keyword\">if</span> cnt[ch] &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"349-两个数组的交集\"><a href=\"#349-两个数组的交集\" class=\"headerlink\" title=\"349. 两个数组的交集\"></a>349. 两个数组的交集</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-arrays/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1ba411S7wu\">学透哈希表，set使用有技巧！Leetcode：349. 两个数组的交集</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>从求交集可以看出是要使用集合的结构，但是在Go语言中<font color=\"#ff0000\">并没有</font>集合，所以我使用了<code>map</code>（并不是用map模拟set）。map中，键为<code>nums1</code>的每个元素，值只有三种状态：第一次出现是<code>0</code>，多次出现是<code>1</code>，在<code>nums2</code>也出现过是<code>2</code>，最后遍历map，找到值为2的key。</p>\n<p>利用const和iota模拟枚举类型。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">const</span> (<br>\tNEW = <span class=\"hljs-literal\">iota</span><br>\tEXIST1<br>\tEXIST2<br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">intersection</span><span class=\"hljs-params\">(nums1 []<span class=\"hljs-type\">int</span>, nums2 []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tset := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;  <span class=\"hljs-comment\">//类集合操作</span><br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums1 &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[v]; !ok &#123;<br>\t\t\tset[v] = NEW  <span class=\"hljs-comment\">// 第一个出现</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// 多次出现</span><br>\t\t\tset[v] = EXIST1<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums2 &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[v]; ok &#123;  <span class=\"hljs-comment\">// nums2也出现</span><br>\t\t\tset[v] = EXIST2<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> set &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v == EXIST2 &#123;<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, k)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"202-快乐数\"><a href=\"#202-快乐数\" class=\"headerlink\" title=\"202. 快乐数\"></a>202. 快乐数</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/happy-number/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html#%E6%80%9D%E8%B7%AF\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>构造一个集合，用于存放每一次拆数求平方和的结果</li>\n<li>拆数</li>\n<li>判断结果是否是1，如果是<code>return true</code></li>\n<li>如果不是1，判断结果是否在集合中，如果存在则说明出现了循环，<code>return false</code></li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isHappy</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\tset := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">bool</span>&#123;&#125;  <span class=\"hljs-comment\">// 模拟集合</span><br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tsum := <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-comment\">//拆数求平方和</span><br>\t\t<span class=\"hljs-keyword\">for</span> n &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tsum += (n % <span class=\"hljs-number\">10</span>) * (n % <span class=\"hljs-number\">10</span>)<br>\t\t\tn /= <span class=\"hljs-number\">10</span><br>\t\t&#125;<br>        <span class=\"hljs-comment\">//得到正确答案</span><br>\t\t<span class=\"hljs-keyword\">if</span> sum == <span class=\"hljs-number\">1</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br>        <br>        <span class=\"hljs-comment\">//结果不在集合中则放入集合</span><br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[sum]; !ok &#123;<br>\t\t\tset[sum] = <span class=\"hljs-literal\">true</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<span class=\"hljs-comment\">// 否则退出循环 return false</span><br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t\tn = sum <span class=\"hljs-comment\">// 新一轮的数</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1.两数之和\"></a>1.两数之和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/two-sum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1aT41177mK\">梦开始的地方，Leetcode：1.两数之和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>遍历<code>nums</code>将元素存为<code>map</code>的<code>key</code>，将元素的索引存放为<code>map</code>的<code>value</code>；</li>\n<li>再遍历<code>nums</code>，查看<code>target - v</code>是否在<code>key</code>中，并返回两个值：<code>nums</code>元素的索引和<code>map[target-v]</code></li>\n</ol>\n<p>遍历两次还是思路上走弯路了，一次即可。</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//遍历两次</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">twoSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    mapNums := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>       mapNums[v] = i<br>    &#125;<br>    <span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>    <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>       <span class=\"hljs-keyword\">if</span> _, ok := mapNums[target-v]; ok &amp;&amp; mapNums[target-v] != i &#123;<br>          result = <span class=\"hljs-built_in\">append</span>(result, i)<br>          result = <span class=\"hljs-built_in\">append</span>(result, mapNums[target-v])<br>          <span class=\"hljs-keyword\">break</span><br>       &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">twoSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tmapNums := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> value, ok := mapNums[target-v]; ok &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;i, value&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tmapNums[v] = i<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>这次的题目不算很难，做起来就很快，算上写博客的时间不到两个小时</p>\n</li>\n<li><p>对Go语言的map有了新的理解：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">test = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br><span class=\"hljs-keyword\">if</span> value, ok := test[key]; ok &#123;<br>\t<span class=\"hljs-comment\">// key存在的情况</span><br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t<span class=\"hljs-comment\">// key不存在的情况</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 使用反射来判断两个map是否相等</span><br><span class=\"hljs-keyword\">import</span> reflect<br>reflect.DeepEqual(map1, map2)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">test = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>test[<span class=\"hljs-number\">1</span>]--  <span class=\"hljs-comment\">// 即使不存在1，默认新增键值对&#123;1:0&#125;，然后再自减</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>第一次使用Go模拟枚举</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">const</span> (<br>\tA <span class=\"hljs-literal\">iota</span><br>    B<br>    C<br>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"代码随想录算法训练营第八天 344. 反转字符串、541. 反转字符串II、剑指Offer 05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。","abbrlink":"6416b651","date":"2023-09-28T06:17:36.000Z","_content":"\n# 代码随想录算法训练营第八天| 344. 反转字符串、541. 反转字符串II、剑指Offer 05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。\n\n## 344. 反转字符串\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/reverse-string/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html)\n>\n>   视频讲解：[字符串基础操作！ | LeetCode：344.反转字符串](https://www.bilibili.com/video/BV1fV4y17748)\n>\n>   状态：AC\n\n### 思路\n\n![截屏2023-09-28 14.28.20](../images/day08/反转字符串.png)\n\n相同颜色的互换位置即可，即`i`与`len(s) - 1 - i`交换。`i`的范围到`len(s)/2`\n\n### 代码\n\n``` go\nfunc reverseString(s []byte) {\n\tfor i := 0; i < len(s)/2; i++ {\n\t\ttemp := s[i]\n\t\ts[i] = s[len(s)-i-1]\n\t\ts[len(s)-i-1] = temp\n\t}\n}\n```\n\n## 541. 反转字符串II\n\n>   题目链接：[力扣题目链接]([力扣题目链接](https://leetcode.cn/problems/reverse-string-ii/))\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II.html)\n>\n>   视频讲解：[字符串操作进阶！ | LeetCode：541. 反转字符串II](https://www.bilibili.com/video/BV1dT411j7NN)\n>\n>   状态：AC\n\n### 思路\n\n![反转2(1)](../images/day08/反转2(1).png)\n\n1.   如图，图中相同颜色的部分代表一个`2k`段，循环条件：`for i := 0; i < len(s); i += 2 * k`。\n2.   相同颜色下，分为两段，前`k`段和后`k`段。前`k`段进行反转，后`k`段直接拼接。如果某一段到达了字符串`s`尾部，需要停止。\n3.   由于Go语言的字符串不可变，所以新建一个变量，一点点“组装”成最终结果。前`k`段翻转直接进行反向遍历。\n\n### 代码\n\n``` go\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n\nfunc reverseStr(s string, k int) string {\n\tnewString := \"\"\n\tfor i := 0; i < len(s); i += 2 * k {\n\t\tfor j := min(len(s), i+k) - 1; j >= i; j-- { // 前k段\n\t\t\tnewString += string(s[j])\n\t\t}\n\t\tfor j := i + k; j < min(len(s), i+2*k); j++ {  // 后k段\n\t\t\tnewString += string(s[j])\n\t\t}\n\t}\n\treturn newString\n}\n```\n\n## 剑指Offer 05.替换空格、LCR22.路径加密\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/ti-huan-kong-ge-lcof/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/%E5%89%91%E6%8C%87Offer05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.html)\n>\n>   状态：AC\n\n### 思路\n\n直接投机取巧，新建一个字符串`newString`，遍历字符串`s`，如果`s[i] == '.'`，在`newString += ' '`，否则`newString += s[i]`\n\n### 代码\n\n``` go\nfunc pathEncryption(path string) string {\n\tnewString := \"\"\n\tfor _, v:= range path{\n\t\tif v == '.' {\n\t\t\tnewString += \" \"\n\t\t} else {\n\t\t\tnewString += string(v)\n\t\t}\n\t}\n    return newString\n}\n```\n\n## 151.翻转字符串里的单词\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/reverse-words-in-a-string/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html)\n>\n>   视频链接：[字符串复杂操作拿捏了！ | LeetCode:151.翻转字符串里的单词](https://www.bilibili.com/video/BV1uT41177fX)\n>\n>   状态：AC\n\n### 思路\n\n1.   使用双指针，`left`指针指向的是单词的起始位置，遍历字符串用的`i`找到单词末尾。\n2.   新建一个字符串数组`words`，将每个单词加入到其中\n3.   定义新字符串`newString`，将`words`中每个单词拼接到`newString`中（反向遍历`words`），并且如果不是最后一个单词则再加一个空格。\n\n### 代码\n\n``` go\nfunc reverseWords(s string) string {\n\twords := []string{}\n\tleft := 0\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] == ' ' {\n\t\t\tif s[left:i] != \"\" {\n\t\t\t\twords = append(words, s[left:i])\n\t\t\t}\n\t\t\tleft = i + 1\n\t\t} else if i == len(s)-1 {\n\t\t\twords = append(words, s[left:])\n\t\t}\n\t}\n\tnewString := \"\"\n\tfor i := len(words) - 1; i >= 0; i-- {\n\t\tnewString += words[i]\n\t\tif i > 0 {\n\t\t\tnewString += \" \"\n\t\t}\n\t}\n\treturn newString\n}\n```\n\n## Offer58-II.左旋转字符串\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html)\n>\n>   状态：AC\n\n### 思路\n\n#### 方法一\n\n直接拼接\n\n#### 方法二\n\n![字符串移位](../images/day08/字符串移位.png)\n\n### 代码\n\n``` go\n// 方法一\nfunc dynamicPassword(password string, target int) string {\n\treturn password[target:] + password[:target]\n}\n```\n\n``` go\n// 方法二\nfunc reverse(chars []byte, left, right int) {\n    for left < right {\n        temp := chars[left]\n        chars[left] = chars[right]\n        chars[right] = temp\n        left++\n        right--\n    }\n}\nfunc dynamicPassword(password string, target int) string {\n    chars := []byte(s)\n    reverse(chars, 0, target - 1)\n    reverse(chars, target, len(chars) - 1)\n    reverse(chars, 0, len(chars) - 1)\n    return string(chars)\n}\n```\n\n","source":"_posts/day08.md","raw":"---\ntitle: 代码随想录算法训练营第八天 344. 反转字符串、541. 反转字符串II、剑指Offer\n  05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 字符串\ncategories: 刷题\nabbrlink: 6416b651\ndate: 2023-09-28 14:17:36\n---\n\n# 代码随想录算法训练营第八天| 344. 反转字符串、541. 反转字符串II、剑指Offer 05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。\n\n## 344. 反转字符串\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/reverse-string/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html)\n>\n>   视频讲解：[字符串基础操作！ | LeetCode：344.反转字符串](https://www.bilibili.com/video/BV1fV4y17748)\n>\n>   状态：AC\n\n### 思路\n\n![截屏2023-09-28 14.28.20](../images/day08/反转字符串.png)\n\n相同颜色的互换位置即可，即`i`与`len(s) - 1 - i`交换。`i`的范围到`len(s)/2`\n\n### 代码\n\n``` go\nfunc reverseString(s []byte) {\n\tfor i := 0; i < len(s)/2; i++ {\n\t\ttemp := s[i]\n\t\ts[i] = s[len(s)-i-1]\n\t\ts[len(s)-i-1] = temp\n\t}\n}\n```\n\n## 541. 反转字符串II\n\n>   题目链接：[力扣题目链接]([力扣题目链接](https://leetcode.cn/problems/reverse-string-ii/))\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II.html)\n>\n>   视频讲解：[字符串操作进阶！ | LeetCode：541. 反转字符串II](https://www.bilibili.com/video/BV1dT411j7NN)\n>\n>   状态：AC\n\n### 思路\n\n![反转2(1)](../images/day08/反转2(1).png)\n\n1.   如图，图中相同颜色的部分代表一个`2k`段，循环条件：`for i := 0; i < len(s); i += 2 * k`。\n2.   相同颜色下，分为两段，前`k`段和后`k`段。前`k`段进行反转，后`k`段直接拼接。如果某一段到达了字符串`s`尾部，需要停止。\n3.   由于Go语言的字符串不可变，所以新建一个变量，一点点“组装”成最终结果。前`k`段翻转直接进行反向遍历。\n\n### 代码\n\n``` go\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n\nfunc reverseStr(s string, k int) string {\n\tnewString := \"\"\n\tfor i := 0; i < len(s); i += 2 * k {\n\t\tfor j := min(len(s), i+k) - 1; j >= i; j-- { // 前k段\n\t\t\tnewString += string(s[j])\n\t\t}\n\t\tfor j := i + k; j < min(len(s), i+2*k); j++ {  // 后k段\n\t\t\tnewString += string(s[j])\n\t\t}\n\t}\n\treturn newString\n}\n```\n\n## 剑指Offer 05.替换空格、LCR22.路径加密\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/ti-huan-kong-ge-lcof/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/%E5%89%91%E6%8C%87Offer05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.html)\n>\n>   状态：AC\n\n### 思路\n\n直接投机取巧，新建一个字符串`newString`，遍历字符串`s`，如果`s[i] == '.'`，在`newString += ' '`，否则`newString += s[i]`\n\n### 代码\n\n``` go\nfunc pathEncryption(path string) string {\n\tnewString := \"\"\n\tfor _, v:= range path{\n\t\tif v == '.' {\n\t\t\tnewString += \" \"\n\t\t} else {\n\t\t\tnewString += string(v)\n\t\t}\n\t}\n    return newString\n}\n```\n\n## 151.翻转字符串里的单词\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/reverse-words-in-a-string/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html)\n>\n>   视频链接：[字符串复杂操作拿捏了！ | LeetCode:151.翻转字符串里的单词](https://www.bilibili.com/video/BV1uT41177fX)\n>\n>   状态：AC\n\n### 思路\n\n1.   使用双指针，`left`指针指向的是单词的起始位置，遍历字符串用的`i`找到单词末尾。\n2.   新建一个字符串数组`words`，将每个单词加入到其中\n3.   定义新字符串`newString`，将`words`中每个单词拼接到`newString`中（反向遍历`words`），并且如果不是最后一个单词则再加一个空格。\n\n### 代码\n\n``` go\nfunc reverseWords(s string) string {\n\twords := []string{}\n\tleft := 0\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] == ' ' {\n\t\t\tif s[left:i] != \"\" {\n\t\t\t\twords = append(words, s[left:i])\n\t\t\t}\n\t\t\tleft = i + 1\n\t\t} else if i == len(s)-1 {\n\t\t\twords = append(words, s[left:])\n\t\t}\n\t}\n\tnewString := \"\"\n\tfor i := len(words) - 1; i >= 0; i-- {\n\t\tnewString += words[i]\n\t\tif i > 0 {\n\t\t\tnewString += \" \"\n\t\t}\n\t}\n\treturn newString\n}\n```\n\n## Offer58-II.左旋转字符串\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html)\n>\n>   状态：AC\n\n### 思路\n\n#### 方法一\n\n直接拼接\n\n#### 方法二\n\n![字符串移位](../images/day08/字符串移位.png)\n\n### 代码\n\n``` go\n// 方法一\nfunc dynamicPassword(password string, target int) string {\n\treturn password[target:] + password[:target]\n}\n```\n\n``` go\n// 方法二\nfunc reverse(chars []byte, left, right int) {\n    for left < right {\n        temp := chars[left]\n        chars[left] = chars[right]\n        chars[right] = temp\n        left++\n        right--\n    }\n}\nfunc dynamicPassword(password string, target int) string {\n    chars := []byte(s)\n    reverse(chars, 0, target - 1)\n    reverse(chars, target, len(chars) - 1)\n    reverse(chars, 0, len(chars) - 1)\n    return string(chars)\n}\n```\n\n","slug":"day08","published":1,"updated":"2023-10-24T19:33:49.667Z","_id":"cln7q7alv000bvswh5akb3kmg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第八天-344-反转字符串、541-反转字符串II、剑指Offer-05-替换空格、151-翻转字符串里的单词、剑指Offer58-II-左旋转字符串。\"><a href=\"#代码随想录算法训练营第八天-344-反转字符串、541-反转字符串II、剑指Offer-05-替换空格、151-翻转字符串里的单词、剑指Offer58-II-左旋转字符串。\" class=\"headerlink\" title=\"代码随想录算法训练营第八天| 344. 反转字符串、541. 反转字符串II、剑指Offer 05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。\"></a>代码随想录算法训练营第八天| 344. 反转字符串、541. 反转字符串II、剑指Offer 05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。</h1><h2 id=\"344-反转字符串\"><a href=\"#344-反转字符串\" class=\"headerlink\" title=\"344. 反转字符串\"></a>344. 反转字符串</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/reverse-string/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1fV4y17748\">字符串基础操作！ | LeetCode：344.反转字符串</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../images/day08/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.png\" alt=\"截屏2023-09-28 14.28.20\"></p>\n<p>相同颜色的互换位置即可，即<code>i</code>与<code>len(s) - 1 - i</code>交换。<code>i</code>的范围到<code>len(s)/2</code></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverseString</span><span class=\"hljs-params\">(s []<span class=\"hljs-type\">byte</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s)/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\ttemp := s[i]<br>\t\ts[i] = s[<span class=\"hljs-built_in\">len</span>(s)-i<span class=\"hljs-number\">-1</span>]<br>\t\ts[<span class=\"hljs-built_in\">len</span>(s)-i<span class=\"hljs-number\">-1</span>] = temp<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"541-反转字符串II\"><a href=\"#541-反转字符串II\" class=\"headerlink\" title=\"541. 反转字符串II\"></a>541. 反转字符串II</h2><blockquote>\n<p>  题目链接：<a href=\"%5B%E5%8A%9B%E6%89%A3%E9%A2%98%E7%9B%AE%E9%93%BE%E6%8E%A5%5D(https://leetcode.cn/problems/reverse-string-ii/)\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1dT411j7NN\">字符串操作进阶！ | LeetCode：541. 反转字符串II</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../images/day08/%E5%8F%8D%E8%BD%AC2(1).png\" alt=\"反转2(1)\"></p>\n<ol>\n<li>如图，图中相同颜色的部分代表一个<code>2k</code>段，循环条件：<code>for i := 0; i &lt; len(s); i += 2 * k</code>。</li>\n<li>相同颜色下，分为两段，前<code>k</code>段和后<code>k</code>段。前<code>k</code>段进行反转，后<code>k</code>段直接拼接。如果某一段到达了字符串<code>s</code>尾部，需要停止。</li>\n<li>由于Go语言的字符串不可变，所以新建一个变量，一点点“组装”成最终结果。前<code>k</code>段翻转直接进行反向遍历。</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &lt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> a<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> b<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverseStr</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>, k <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\tnewString := <span class=\"hljs-string\">&quot;&quot;</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i += <span class=\"hljs-number\">2</span> * k &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := min(<span class=\"hljs-built_in\">len</span>(s), i+k) - <span class=\"hljs-number\">1</span>; j &gt;= i; j-- &#123; <span class=\"hljs-comment\">// 前k段</span><br>\t\t\tnewString += <span class=\"hljs-type\">string</span>(s[j])<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + k; j &lt; min(<span class=\"hljs-built_in\">len</span>(s), i+<span class=\"hljs-number\">2</span>*k); j++ &#123;  <span class=\"hljs-comment\">// 后k段</span><br>\t\t\tnewString += <span class=\"hljs-type\">string</span>(s[j])<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newString<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"剑指Offer-05-替换空格、LCR22-路径加密\"><a href=\"#剑指Offer-05-替换空格、LCR22-路径加密\" class=\"headerlink\" title=\"剑指Offer 05.替换空格、LCR22.路径加密\"></a>剑指Offer 05.替换空格、LCR22.路径加密</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/ti-huan-kong-ge-lcof/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/%E5%89%91%E6%8C%87Offer05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.html\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>直接投机取巧，新建一个字符串<code>newString</code>，遍历字符串<code>s</code>，如果<code>s[i] == &#39;.&#39;</code>，在<code>newString += &#39; &#39;</code>，否则<code>newString += s[i]</code></p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">pathEncryption</span><span class=\"hljs-params\">(path <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\tnewString := <span class=\"hljs-string\">&quot;&quot;</span><br>\t<span class=\"hljs-keyword\">for</span> _, v:= <span class=\"hljs-keyword\">range</span> path&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-string\">&#x27;.&#x27;</span> &#123;<br>\t\t\tnewString += <span class=\"hljs-string\">&quot; &quot;</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tnewString += <span class=\"hljs-type\">string</span>(v)<br>\t\t&#125;<br>\t&#125;<br>    <span class=\"hljs-keyword\">return</span> newString<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"151-翻转字符串里的单词\"><a href=\"#151-翻转字符串里的单词\" class=\"headerlink\" title=\"151.翻转字符串里的单词\"></a>151.翻转字符串里的单词</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/reverse-words-in-a-string/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频链接：<a href=\"https://www.bilibili.com/video/BV1uT41177fX\">字符串复杂操作拿捏了！ | LeetCode:151.翻转字符串里的单词</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>使用双指针，<code>left</code>指针指向的是单词的起始位置，遍历字符串用的<code>i</code>找到单词末尾。</li>\n<li>新建一个字符串数组<code>words</code>，将每个单词加入到其中</li>\n<li>定义新字符串<code>newString</code>，将<code>words</code>中每个单词拼接到<code>newString</code>中（反向遍历<code>words</code>），并且如果不是最后一个单词则再加一个空格。</li>\n</ol>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverseWords</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\twords := []<span class=\"hljs-type\">string</span>&#123;&#125;<br>\tleft := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> s[i] == <span class=\"hljs-string\">&#x27; &#x27;</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> s[left:i] != <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t\twords = <span class=\"hljs-built_in\">append</span>(words, s[left:i])<br>\t\t\t&#125;<br>\t\t\tleft = i + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-built_in\">len</span>(s)<span class=\"hljs-number\">-1</span> &#123;<br>\t\t\twords = <span class=\"hljs-built_in\">append</span>(words, s[left:])<br>\t\t&#125;<br>\t&#125;<br>\tnewString := <span class=\"hljs-string\">&quot;&quot;</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-built_in\">len</span>(words) - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;<br>\t\tnewString += words[i]<br>\t\t<span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tnewString += <span class=\"hljs-string\">&quot; &quot;</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newString<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Offer58-II-左旋转字符串\"><a href=\"#Offer58-II-左旋转字符串\" class=\"headerlink\" title=\"Offer58-II.左旋转字符串\"></a>Offer58-II.左旋转字符串</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-4\"><a href=\"#思路-4\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>直接拼接</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p><img src=\"/../images/day08/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A7%BB%E4%BD%8D.png\" alt=\"字符串移位\"></p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法一</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dynamicPassword</span><span class=\"hljs-params\">(password <span class=\"hljs-type\">string</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> password[target:] + password[:target]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法二</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverse</span><span class=\"hljs-params\">(chars []<span class=\"hljs-type\">byte</span>, left, right <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>    <span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>        temp := chars[left]<br>        chars[left] = chars[right]<br>        chars[right] = temp<br>        left++<br>        right--<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dynamicPassword</span><span class=\"hljs-params\">(password <span class=\"hljs-type\">string</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>    chars := []<span class=\"hljs-type\">byte</span>(s)<br>    reverse(chars, <span class=\"hljs-number\">0</span>, target - <span class=\"hljs-number\">1</span>)<br>    reverse(chars, target, <span class=\"hljs-built_in\">len</span>(chars) - <span class=\"hljs-number\">1</span>)<br>    reverse(chars, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(chars) - <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(chars)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第八天-344-反转字符串、541-反转字符串II、剑指Offer-05-替换空格、151-翻转字符串里的单词、剑指Offer58-II-左旋转字符串。\"><a href=\"#代码随想录算法训练营第八天-344-反转字符串、541-反转字符串II、剑指Offer-05-替换空格、151-翻转字符串里的单词、剑指Offer58-II-左旋转字符串。\" class=\"headerlink\" title=\"代码随想录算法训练营第八天| 344. 反转字符串、541. 反转字符串II、剑指Offer 05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。\"></a>代码随想录算法训练营第八天| 344. 反转字符串、541. 反转字符串II、剑指Offer 05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。</h1><h2 id=\"344-反转字符串\"><a href=\"#344-反转字符串\" class=\"headerlink\" title=\"344. 反转字符串\"></a>344. 反转字符串</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/reverse-string/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1fV4y17748\">字符串基础操作！ | LeetCode：344.反转字符串</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../images/day08/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.png\" alt=\"截屏2023-09-28 14.28.20\"></p>\n<p>相同颜色的互换位置即可，即<code>i</code>与<code>len(s) - 1 - i</code>交换。<code>i</code>的范围到<code>len(s)/2</code></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverseString</span><span class=\"hljs-params\">(s []<span class=\"hljs-type\">byte</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s)/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\ttemp := s[i]<br>\t\ts[i] = s[<span class=\"hljs-built_in\">len</span>(s)-i<span class=\"hljs-number\">-1</span>]<br>\t\ts[<span class=\"hljs-built_in\">len</span>(s)-i<span class=\"hljs-number\">-1</span>] = temp<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"541-反转字符串II\"><a href=\"#541-反转字符串II\" class=\"headerlink\" title=\"541. 反转字符串II\"></a>541. 反转字符串II</h2><blockquote>\n<p>  题目链接：<a href=\"%5B%E5%8A%9B%E6%89%A3%E9%A2%98%E7%9B%AE%E9%93%BE%E6%8E%A5%5D(https://leetcode.cn/problems/reverse-string-ii/)\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1dT411j7NN\">字符串操作进阶！ | LeetCode：541. 反转字符串II</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../images/day08/%E5%8F%8D%E8%BD%AC2(1).png\" alt=\"反转2(1)\"></p>\n<ol>\n<li>如图，图中相同颜色的部分代表一个<code>2k</code>段，循环条件：<code>for i := 0; i &lt; len(s); i += 2 * k</code>。</li>\n<li>相同颜色下，分为两段，前<code>k</code>段和后<code>k</code>段。前<code>k</code>段进行反转，后<code>k</code>段直接拼接。如果某一段到达了字符串<code>s</code>尾部，需要停止。</li>\n<li>由于Go语言的字符串不可变，所以新建一个变量，一点点“组装”成最终结果。前<code>k</code>段翻转直接进行反向遍历。</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> a &lt; b &#123;<br>        <span class=\"hljs-keyword\">return</span> a<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> b<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverseStr</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>, k <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\tnewString := <span class=\"hljs-string\">&quot;&quot;</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i += <span class=\"hljs-number\">2</span> * k &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := min(<span class=\"hljs-built_in\">len</span>(s), i+k) - <span class=\"hljs-number\">1</span>; j &gt;= i; j-- &#123; <span class=\"hljs-comment\">// 前k段</span><br>\t\t\tnewString += <span class=\"hljs-type\">string</span>(s[j])<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + k; j &lt; min(<span class=\"hljs-built_in\">len</span>(s), i+<span class=\"hljs-number\">2</span>*k); j++ &#123;  <span class=\"hljs-comment\">// 后k段</span><br>\t\t\tnewString += <span class=\"hljs-type\">string</span>(s[j])<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newString<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"剑指Offer-05-替换空格、LCR22-路径加密\"><a href=\"#剑指Offer-05-替换空格、LCR22-路径加密\" class=\"headerlink\" title=\"剑指Offer 05.替换空格、LCR22.路径加密\"></a>剑指Offer 05.替换空格、LCR22.路径加密</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/ti-huan-kong-ge-lcof/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/%E5%89%91%E6%8C%87Offer05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.html\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>直接投机取巧，新建一个字符串<code>newString</code>，遍历字符串<code>s</code>，如果<code>s[i] == &#39;.&#39;</code>，在<code>newString += &#39; &#39;</code>，否则<code>newString += s[i]</code></p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">pathEncryption</span><span class=\"hljs-params\">(path <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\tnewString := <span class=\"hljs-string\">&quot;&quot;</span><br>\t<span class=\"hljs-keyword\">for</span> _, v:= <span class=\"hljs-keyword\">range</span> path&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-string\">&#x27;.&#x27;</span> &#123;<br>\t\t\tnewString += <span class=\"hljs-string\">&quot; &quot;</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tnewString += <span class=\"hljs-type\">string</span>(v)<br>\t\t&#125;<br>\t&#125;<br>    <span class=\"hljs-keyword\">return</span> newString<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"151-翻转字符串里的单词\"><a href=\"#151-翻转字符串里的单词\" class=\"headerlink\" title=\"151.翻转字符串里的单词\"></a>151.翻转字符串里的单词</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/reverse-words-in-a-string/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频链接：<a href=\"https://www.bilibili.com/video/BV1uT41177fX\">字符串复杂操作拿捏了！ | LeetCode:151.翻转字符串里的单词</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>使用双指针，<code>left</code>指针指向的是单词的起始位置，遍历字符串用的<code>i</code>找到单词末尾。</li>\n<li>新建一个字符串数组<code>words</code>，将每个单词加入到其中</li>\n<li>定义新字符串<code>newString</code>，将<code>words</code>中每个单词拼接到<code>newString</code>中（反向遍历<code>words</code>），并且如果不是最后一个单词则再加一个空格。</li>\n</ol>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverseWords</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\twords := []<span class=\"hljs-type\">string</span>&#123;&#125;<br>\tleft := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> s[i] == <span class=\"hljs-string\">&#x27; &#x27;</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> s[left:i] != <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t\twords = <span class=\"hljs-built_in\">append</span>(words, s[left:i])<br>\t\t\t&#125;<br>\t\t\tleft = i + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-built_in\">len</span>(s)<span class=\"hljs-number\">-1</span> &#123;<br>\t\t\twords = <span class=\"hljs-built_in\">append</span>(words, s[left:])<br>\t\t&#125;<br>\t&#125;<br>\tnewString := <span class=\"hljs-string\">&quot;&quot;</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-built_in\">len</span>(words) - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;<br>\t\tnewString += words[i]<br>\t\t<span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tnewString += <span class=\"hljs-string\">&quot; &quot;</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newString<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Offer58-II-左旋转字符串\"><a href=\"#Offer58-II-左旋转字符串\" class=\"headerlink\" title=\"Offer58-II.左旋转字符串\"></a>Offer58-II.左旋转字符串</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-4\"><a href=\"#思路-4\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>直接拼接</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p><img src=\"/../images/day08/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A7%BB%E4%BD%8D.png\" alt=\"字符串移位\"></p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法一</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dynamicPassword</span><span class=\"hljs-params\">(password <span class=\"hljs-type\">string</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> password[target:] + password[:target]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法二</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverse</span><span class=\"hljs-params\">(chars []<span class=\"hljs-type\">byte</span>, left, right <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>    <span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>        temp := chars[left]<br>        chars[left] = chars[right]<br>        chars[right] = temp<br>        left++<br>        right--<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dynamicPassword</span><span class=\"hljs-params\">(password <span class=\"hljs-type\">string</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>    chars := []<span class=\"hljs-type\">byte</span>(s)<br>    reverse(chars, <span class=\"hljs-number\">0</span>, target - <span class=\"hljs-number\">1</span>)<br>    reverse(chars, target, <span class=\"hljs-built_in\">len</span>(chars) - <span class=\"hljs-number\">1</span>)<br>    reverse(chars, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(chars) - <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(chars)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串","abbrlink":"369230e4","date":"2023-09-28T07:08:08.000Z","_content":"\n# 代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串\n\n## 28.实现strStr()\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html)\n>\n>   视频讲解：\n>\n>   -   [帮你把KMP算法学个通透！B站（理论篇）](https://www.bilibili.com/video/BV1PD4y1o7nd/)\n>   -   [帮你把KMP算法学个通透！（求next数组代码篇）](https://www.bilibili.com/video/BV1M5411j7Xx)\n>\n>   状态：看过视频之后AC\n\n### 思路\n\n具体KMP算法原理看卡哥的视频，讲的很好。\n\n#### KMP中匹配的过程\n\nKMP算法，匹配过程放入到一个小视频当中，每个画面持续3秒。好多视频讲解都是“移动模式串”来讲，自己写代码时候有点蒙，所以自己做了个小动图，不使用“移动”来呈现。\n\n<div style=\"position: relative; width: 100%; height: 100%;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day09/匹配.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n\n#### Next数组构建过程\n\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day09/next数组构建.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n\n\n#### Next数组说明\n\nNext数组中，每个元素表示：\n\n-   截止到目前为止，最长相等前后缀的长度；\n-   截止到目前为止，最长前缀的后一位。\n\n### 代码\n\n``` go\nfunc getNext(next []int, s string) {\n\tj := 0\n\tnext[0] = 0\n\tfor i := 1; i < len(s); i++ {\n\t\tfor s[i] != s[j] && j > 0 {\n\t\t\tj = next[j-1]\n\t\t}\n\t\tif s[i] == s[j] {\n\t\t\tj++\n\t\t}\n\t\tnext[i] = j\n\t\t//fmt.Printf(\"第%v次循环后的next数组结果为:%v\\n\", i, next)\n\t}\n}\n\nfunc strStr(haystack string, needle string) int {\n\tif len(needle) == 0 {\n\t\treturn 0\n\t}\n\tnext := make([]int, len(needle))\n\tgetNext(next, needle)\n\tj := 0\n\tfor i := range haystack {\n\t\tfor j > 0 && haystack[i] != needle[j] {\n\t\t\tj = next[j-1]\n\t\t}\n\t\tif haystack[i] == needle[j] {\n\t\t\tj++\n\t\t}\n\t\tif j == len(needle) {\n\t\t\treturn i - len(needle) + 1\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n\n\n## 459. 重复的字符串\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/repeated-substring-pattern/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html)\n>\n>   视频讲解：[字符串这么玩，可有点难度！ | LeetCode：459.重复的子字符串](https://www.bilibili.com/video/BV1cg41127fw)\n>\n>   状态：AC\n\n### 思路\n\n如果不使用KMP算法还是比较简单的，有很多东西语言已经帮我们实现好了。看了卡哥的讲解感叹这个思路。\n\n构建一个新字符串`newString`为两个旧串`s`的拼接，但是要掐头去尾一个元素。如果`newString`仍然包含`s`，说明存在子串构成原字符串。\n\n### 代码\n\n``` go\nfunc repeatedSubstringPattern(s string) bool {\n\tnewString := s + s\n\tnewString = newString[1 : len(newString)-2]\n\treturn strings.Contains(newString, s)\n}\n```\n\n","source":"_posts/day09.md","raw":"---\ntitle: 代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 字符串\ncategories: 刷题\nabbrlink: '369230e4'\ndate: 2023-09-28 15:08:08\n---\n\n# 代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串\n\n## 28.实现strStr()\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html)\n>\n>   视频讲解：\n>\n>   -   [帮你把KMP算法学个通透！B站（理论篇）](https://www.bilibili.com/video/BV1PD4y1o7nd/)\n>   -   [帮你把KMP算法学个通透！（求next数组代码篇）](https://www.bilibili.com/video/BV1M5411j7Xx)\n>\n>   状态：看过视频之后AC\n\n### 思路\n\n具体KMP算法原理看卡哥的视频，讲的很好。\n\n#### KMP中匹配的过程\n\nKMP算法，匹配过程放入到一个小视频当中，每个画面持续3秒。好多视频讲解都是“移动模式串”来讲，自己写代码时候有点蒙，所以自己做了个小动图，不使用“移动”来呈现。\n\n<div style=\"position: relative; width: 100%; height: 100%;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day09/匹配.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n\n#### Next数组构建过程\n\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day09/next数组构建.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n\n\n#### Next数组说明\n\nNext数组中，每个元素表示：\n\n-   截止到目前为止，最长相等前后缀的长度；\n-   截止到目前为止，最长前缀的后一位。\n\n### 代码\n\n``` go\nfunc getNext(next []int, s string) {\n\tj := 0\n\tnext[0] = 0\n\tfor i := 1; i < len(s); i++ {\n\t\tfor s[i] != s[j] && j > 0 {\n\t\t\tj = next[j-1]\n\t\t}\n\t\tif s[i] == s[j] {\n\t\t\tj++\n\t\t}\n\t\tnext[i] = j\n\t\t//fmt.Printf(\"第%v次循环后的next数组结果为:%v\\n\", i, next)\n\t}\n}\n\nfunc strStr(haystack string, needle string) int {\n\tif len(needle) == 0 {\n\t\treturn 0\n\t}\n\tnext := make([]int, len(needle))\n\tgetNext(next, needle)\n\tj := 0\n\tfor i := range haystack {\n\t\tfor j > 0 && haystack[i] != needle[j] {\n\t\t\tj = next[j-1]\n\t\t}\n\t\tif haystack[i] == needle[j] {\n\t\t\tj++\n\t\t}\n\t\tif j == len(needle) {\n\t\t\treturn i - len(needle) + 1\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n\n\n## 459. 重复的字符串\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/repeated-substring-pattern/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html)\n>\n>   视频讲解：[字符串这么玩，可有点难度！ | LeetCode：459.重复的子字符串](https://www.bilibili.com/video/BV1cg41127fw)\n>\n>   状态：AC\n\n### 思路\n\n如果不使用KMP算法还是比较简单的，有很多东西语言已经帮我们实现好了。看了卡哥的讲解感叹这个思路。\n\n构建一个新字符串`newString`为两个旧串`s`的拼接，但是要掐头去尾一个元素。如果`newString`仍然包含`s`，说明存在子串构成原字符串。\n\n### 代码\n\n``` go\nfunc repeatedSubstringPattern(s string) bool {\n\tnewString := s + s\n\tnewString = newString[1 : len(newString)-2]\n\treturn strings.Contains(newString, s)\n}\n```\n\n","slug":"day09","published":1,"updated":"2023-10-24T19:34:03.270Z","_id":"cln7q7alw000evswh5pqt7yew","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第九天-28-实现-strStr-。459-重复的子字符串\"><a href=\"#代码随想录算法训练营第九天-28-实现-strStr-。459-重复的子字符串\" class=\"headerlink\" title=\"代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串\"></a>代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串</h1><h2 id=\"28-实现strStr\"><a href=\"#28-实现strStr\" class=\"headerlink\" title=\"28.实现strStr()\"></a>28.实现strStr()</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1PD4y1o7nd/\">帮你把KMP算法学个通透！B站（理论篇）</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1M5411j7Xx\">帮你把KMP算法学个通透！（求next数组代码篇）</a></li>\n</ul>\n<p>  状态：看过视频之后AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>具体KMP算法原理看卡哥的视频，讲的很好。</p>\n<h4 id=\"KMP中匹配的过程\"><a href=\"#KMP中匹配的过程\" class=\"headerlink\" title=\"KMP中匹配的过程\"></a>KMP中匹配的过程</h4><p>KMP算法，匹配过程放入到一个小视频当中，每个画面持续3秒。好多视频讲解都是“移动模式串”来讲，自己写代码时候有点蒙，所以自己做了个小动图，不使用“移动”来呈现。</p>\n<div style=\"position: relative; width: 100%; height: 100%;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day09/匹配.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n\n<h4 id=\"Next数组构建过程\"><a href=\"#Next数组构建过程\" class=\"headerlink\" title=\"Next数组构建过程\"></a>Next数组构建过程</h4><div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day09/next数组构建.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n\n\n<h4 id=\"Next数组说明\"><a href=\"#Next数组说明\" class=\"headerlink\" title=\"Next数组说明\"></a>Next数组说明</h4><p>Next数组中，每个元素表示：</p>\n<ul>\n<li>截止到目前为止，最长相等前后缀的长度；</li>\n<li>截止到目前为止，最长前缀的后一位。</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getNext</span><span class=\"hljs-params\">(next []<span class=\"hljs-type\">int</span>, s <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\tj := <span class=\"hljs-number\">0</span><br>\tnext[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> s[i] != s[j] &amp;&amp; j &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tj = next[j<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> s[i] == s[j] &#123;<br>\t\t\tj++<br>\t\t&#125;<br>\t\tnext[i] = j<br>\t\t<span class=\"hljs-comment\">//fmt.Printf(&quot;第%v次循环后的next数组结果为:%v\\n&quot;, i, next)</span><br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">strStr</span><span class=\"hljs-params\">(haystack <span class=\"hljs-type\">string</span>, needle <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(needle) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tnext := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(needle))<br>\tgetNext(next, needle)<br>\tj := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> haystack &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j &gt; <span class=\"hljs-number\">0</span> &amp;&amp; haystack[i] != needle[j] &#123;<br>\t\t\tj = next[j<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> haystack[i] == needle[j] &#123;<br>\t\t\tj++<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> j == <span class=\"hljs-built_in\">len</span>(needle) &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> i - <span class=\"hljs-built_in\">len</span>(needle) + <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"459-重复的字符串\"><a href=\"#459-重复的字符串\" class=\"headerlink\" title=\"459. 重复的字符串\"></a>459. 重复的字符串</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/repeated-substring-pattern/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1cg41127fw\">字符串这么玩，可有点难度！ | LeetCode：459.重复的子字符串</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>如果不使用KMP算法还是比较简单的，有很多东西语言已经帮我们实现好了。看了卡哥的讲解感叹这个思路。</p>\n<p>构建一个新字符串<code>newString</code>为两个旧串<code>s</code>的拼接，但是要掐头去尾一个元素。如果<code>newString</code>仍然包含<code>s</code>，说明存在子串构成原字符串。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">repeatedSubstringPattern</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\tnewString := s + s<br>\tnewString = newString[<span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">len</span>(newString)<span class=\"hljs-number\">-2</span>]<br>\t<span class=\"hljs-keyword\">return</span> strings.Contains(newString, s)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第九天-28-实现-strStr-。459-重复的子字符串\"><a href=\"#代码随想录算法训练营第九天-28-实现-strStr-。459-重复的子字符串\" class=\"headerlink\" title=\"代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串\"></a>代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串</h1><h2 id=\"28-实现strStr\"><a href=\"#28-实现strStr\" class=\"headerlink\" title=\"28.实现strStr()\"></a>28.实现strStr()</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1PD4y1o7nd/\">帮你把KMP算法学个通透！B站（理论篇）</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1M5411j7Xx\">帮你把KMP算法学个通透！（求next数组代码篇）</a></li>\n</ul>\n<p>  状态：看过视频之后AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>具体KMP算法原理看卡哥的视频，讲的很好。</p>\n<h4 id=\"KMP中匹配的过程\"><a href=\"#KMP中匹配的过程\" class=\"headerlink\" title=\"KMP中匹配的过程\"></a>KMP中匹配的过程</h4><p>KMP算法，匹配过程放入到一个小视频当中，每个画面持续3秒。好多视频讲解都是“移动模式串”来讲，自己写代码时候有点蒙，所以自己做了个小动图，不使用“移动”来呈现。</p>\n<div style=\"position: relative; width: 100%; height: 100%;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day09/匹配.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n\n<h4 id=\"Next数组构建过程\"><a href=\"#Next数组构建过程\" class=\"headerlink\" title=\"Next数组构建过程\"></a>Next数组构建过程</h4><div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day09/next数组构建.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n\n\n<h4 id=\"Next数组说明\"><a href=\"#Next数组说明\" class=\"headerlink\" title=\"Next数组说明\"></a>Next数组说明</h4><p>Next数组中，每个元素表示：</p>\n<ul>\n<li>截止到目前为止，最长相等前后缀的长度；</li>\n<li>截止到目前为止，最长前缀的后一位。</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getNext</span><span class=\"hljs-params\">(next []<span class=\"hljs-type\">int</span>, s <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\tj := <span class=\"hljs-number\">0</span><br>\tnext[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> s[i] != s[j] &amp;&amp; j &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tj = next[j<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> s[i] == s[j] &#123;<br>\t\t\tj++<br>\t\t&#125;<br>\t\tnext[i] = j<br>\t\t<span class=\"hljs-comment\">//fmt.Printf(&quot;第%v次循环后的next数组结果为:%v\\n&quot;, i, next)</span><br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">strStr</span><span class=\"hljs-params\">(haystack <span class=\"hljs-type\">string</span>, needle <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(needle) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tnext := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(needle))<br>\tgetNext(next, needle)<br>\tj := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> haystack &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j &gt; <span class=\"hljs-number\">0</span> &amp;&amp; haystack[i] != needle[j] &#123;<br>\t\t\tj = next[j<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> haystack[i] == needle[j] &#123;<br>\t\t\tj++<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> j == <span class=\"hljs-built_in\">len</span>(needle) &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> i - <span class=\"hljs-built_in\">len</span>(needle) + <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"459-重复的字符串\"><a href=\"#459-重复的字符串\" class=\"headerlink\" title=\"459. 重复的字符串\"></a>459. 重复的字符串</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/repeated-substring-pattern/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1cg41127fw\">字符串这么玩，可有点难度！ | LeetCode：459.重复的子字符串</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>如果不使用KMP算法还是比较简单的，有很多东西语言已经帮我们实现好了。看了卡哥的讲解感叹这个思路。</p>\n<p>构建一个新字符串<code>newString</code>为两个旧串<code>s</code>的拼接，但是要掐头去尾一个元素。如果<code>newString</code>仍然包含<code>s</code>，说明存在子串构成原字符串。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">repeatedSubstringPattern</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\tnewString := s + s<br>\tnewString = newString[<span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">len</span>(newString)<span class=\"hljs-number\">-2</span>]<br>\t<span class=\"hljs-keyword\">return</span> strings.Contains(newString, s)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。","abbrlink":"bc862a56","date":"2023-09-26T03:31:08.000Z","_content":"\n# 代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。\n\n## 454. 两数相加\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/4sum-ii/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE)\n>\n>   视频讲解：[学透哈希表，map使用有技巧！LeetCode：454.四数相加II](https://www.bilibili.com/video/BV1Md4y1Q7Yh)\n>\n>   状态：TLE\n\n### 思路\n\n#### 思路一：暴力算法\n\n暴力算法就不用解释了，每个元素都遍历下。定义`count`记录满足条件情况的个数。满足条件`count++`就好。不出意外的也肯定会超时。\n\n#### 思路二：使用map\n\n将`num4`的值存入到`map4`中的`key`，值出现的次数存为`value`。三层循环后接一个判断，判断第四个数是否在`map4`中，如果存在则总数加`value`\n\n```go\nfunc fourSumCount(nums1 []int, nums2 []int, nums3 []int, nums4 []int) int {\n\tcount := 0\n\tmap4 := map[int]int{}\n\tfor _, v := range nums4 {\n\t\tmap4[v]++\n\t}\n\tfor _, i := range nums1 {\n\t\tfor _, j := range nums2 {\n\t\t\tfor _, k := range nums3 {\n\t\t\t\tif v, ok := map4[0-i-j-k]; ok {\n\t\t\t\t\tcount += v\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n```\n\n结果你猜超时没有，肯定还是超时了。\n\n#### 思路三：使用四个map\n\n每个map中都存放`nums`中出现的数以及出现的次数。第一个map定义为`map1`，键是`k1`，值是`v1`，以此类推。\n\n三层循环后判断`map4[0-k1-k2-k3]`是否存在，如果存在那么`count += v1 * v2 * v3 * v4`\n\n``` go\ncount := 0\nmap1 := map[int]int{}\nmap2 := map[int]int{}\nmap3 := map[int]int{}\nmap4 := map[int]int{}\nfor i := 0; i < len(nums1); i++ {\n    map1[nums1[i]]++\n    map2[nums2[i]]++\n    map3[nums3[i]]++\n    map4[nums4[i]]++\n}\nfor k1, v1 := range map1 {\n    for k2, v2 := range map2 {\n        for k3, v3 := range map3 {\n            if v4, ok := map4[0-k1-k2-k3]; ok {\n                count += v1 * v2 * v3 * v4\n            }\n        }\n    }\n}\nreturn count\n```\n\n结果你猜超时没有，肯定还是超时了。\n\n原因如下：如果数组中重复的数不多，或者没有，就会退化成思路二。\n\n想了许久，想不出优化的方法了，看了卡哥的题解，我就用我的理解描述一下。\n\n#### 卡哥题解\n\n先计算`nums1`与`nums2`和，将两数组所有和的情况保存到`mapAB`中。key保存的是和，value保存的是和的个数。\n\n再计算`nums3`与`nums4`和，判断`mapAB[0-k3-k4]`是否存在，若存在`count+=mapAB[0-k3-k4]`\n\n``` go\nfunc fourSumCount(nums1 []int, nums2 []int, nums3 []int, nums4 []int) int {\n\tcount := 0\n\tmapAB := map[int]int{}\n\tfor _, v1 := range nums1 {\n\t\tfor _, v2 := range nums2 {\n\t\t\tmapAB[v1+v2]++\n\t\t}\n\t}\n\tfor _, v3 := range nums3 {\n\t\tfor _, v4 := range nums4 {\n\t\t\tif v, ok := mapAB[0-v3-v4]; ok {\n\t\t\t\tcount += v\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n```\n\n## 383. 赎金信\n\n### 思路\n\n要判断`ransomNote`是否含于`magazine`，先构建一个数组，存放`magazine`的情况，索引代表字母：0代表`'a'`，1代表`'b'`等等；值代表字母出现的次数。构建好后再遍历`ransomNote`串，将对应的字母数量减少一，如果不存在直接`return false`\n\n### 代码\n\n``` go\nfunc canConstruct(ransomNote string, magazine string) bool {\n\tif len(ransomNote) > len(magazine) {\n\t\treturn false\n\t}\n\tarr := make([]int, 26)\n\tfor _, v := range magazine {\n\t\tarr[v-'a']++\n\t}\n\tfor _, v := range ransomNote {\n\t\tarr[v-'a']--\n\t\tif arr[v-'a'] < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n```\n\n\n\n## 15. 三数之和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/3sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE)\n>\n>   视频讲解：[梦破碎的地方！| LeetCode：15.三数之和](https://www.bilibili.com/video/BV1GW4y127qo)\n>\n>   状态：TLE\n\n### 思路\n\n我投降了这道题，Go的底层现在有一个新的理解！\n\n#### 方法一：回溯算法\n\n首先先将`nums`排序，利用回溯算法得到所有的组合，选择排序的原因是因为这样得到的组合，即使是重复的也可以保证顺序一致，方便判断这个组合是否出现过。最终结果保存到变量`result`，得到的可能得组合保存到变量`path`\n\n#### 代码\n\n``` go\nfunc backTracking(nums []int, index int, result *[][]int, path *[]int) {\n\tif len(*path) == 3 {\n\t\tif (*path)[0]+(*path)[1]+(*path)[2] == 0 {\n\t\t\t// 后面的append()操作是深拷贝，所以这里使用temp保存path的值\n            temp := make([]int, len(*path))  \n\t\t\tcopy(temp, *path)\n\t\t\tfor _, v := range *result {\n\t\t\t\tif reflect.DeepEqual(temp, v) {  // 使用反射判断temp是否在result中\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\t*result = append(*result, temp)\n\t\t}\n\t\treturn\n\t}\n\tfor i := index; i < len(nums); i++ {\n\t\t*path = append(*path, nums[i])\n\t\tbackTracking(nums, i+1, result, path)\n\t\t*path = (*path)[:len(*path)-1]\n\n\t}\n}\n\nfunc threeSum(nums []int) [][]int {\n\tvar result [][]int\n\tvar path []int\n\tsort.Ints(nums)\n\tbackTracking(nums, 0, &result, &path)\n\treturn result\n}\n```\n\n结果你猜超时没有，肯定还是超时了。\n\n这里我遇到了好多问题，首先是发现了`result = append(result, temp)`，这里`append`方法实际上是浅拷贝！也就是说以后`temp`的值，`result`也会变化。这也是我为什么用一个临时变量`temp`来保存`path`，而且使用的是`copy()`。\n\n要判断`temp`是否存在于`result`中，那么则需要使用反射，进行深度判断`reflect.DeepEqual(temp, v)`。\n\n##### 遇到最头大的问题！！！！！！\n\n以前用别的语言写回溯，很自然的使用了全局变量，结果在Go语言中发生了奇妙的事情。请看截图\n\n<img src=\"../images/day07/使用全局变量leetcode.png\" alt=\"使用全局变量leetcode\" style=\"zoom:80%;\" />\n\n明明输入的只有0和1，怎么会输出了2。而且这个测试用例这么眼熟呢，没错这就是给出的测试用例Case1的答案。放到Goland里面明明是正确答案！到这里就变了，说明全局变量出现了问题。解决这个问题有两个想法：\n\n-   查找有没有类似C++中的`delete`，使用完变量之后释放掉。发现并没有。而且使用完变量应该在`threeSum()`之外了，函数内释放就没有结果了。\n-   `threeSum()`定义变量，使用指针传值。\n\n当然，第二种才是正解。改完之后就是上面放出来的代码了，超时。\n\n#### 方法二：使用哈希\n\n将`nums`进行排序，并哈希处理，定义变量`map1`用作哈希表，`nums`中的每个元素做key，value则是每个元素出现的次数。\n\n使用两层for循环之后，判断`0-nums[i]-nums[j]`是否存在。若存在还需要判断每个数字出现的次数是否合法（例如`nums = [-1,0,1,2,-1,-4]`，如果找到一个组合是`[2, -4, 2]`则需要舍弃。之所以会出现这样，是因为两层for会找到`2`和`-4`，而`0-nums[i]-nums[j]`会找到重复的2）\n\n找到组合之后，对组合再排序，判断`path`是否在`result`中。\n\n``` go\nfunc threeSum(nums []int) [][]int {\n\tsort.Ints(nums)\n\tmap1 := map[int]int{}\n\tfor _, v := range nums {\n\t\tmap1[v]++\n\t}\n\tvar result [][]int\n\tfor i := 0; i < len(nums); i++ {\n\t\tfor j := i + 1; j < len(nums); j++ {\n\t\t\tif v, ok := map1[-nums[i]-nums[j]]; ok {\n\t\t\t\ttemp := []int{nums[i], nums[j], -nums[i] - nums[j]}\n\t\t\t\tsort.Ints(temp)\n\t\t\t\tcount := 0\n\t\t\t\tif nums[i] == nums[j] || nums[j] == -nums[i]-nums[j] || nums[i] == -nums[i]-nums[j] {\n\t\t\t\t\tcount = 2\n\t\t\t\t}\n\t\t\t\tif nums[i] == nums[j] && nums[j] == -nums[i]-nums[j] {\n\t\t\t\t\tcount = 3\n\t\t\t\t}\n\t\t\t\tif v >= count {\n\t\t\t\t\tflag := true\n\t\t\t\t\tfor _, value := range result {\n\t\t\t\t\t\tif reflect.DeepEqual(value, temp) {\n\t\t\t\t\t\t\tflag = false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif flag {\n\t\t\t\t\t\tresult = append(result, temp)\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n```\n\n结果你猜超时没有，肯定还是超时了。\n\n好了，我投降了，想不到好方法了。去看卡哥视频了。\n\n\n\n### 卡哥解法\n\n<font color=\"red\">这道题不适合用哈希表做</font>。双指针我想了一下也没有太想明白，主要还是去重操作。看了视频讲解很清楚了\n\n1.   数组排序，方便后序操作\n2.   先找第一个数，使用一层`for`，指针为`i`\n3.   找第二个、第三个数。分别用指针`left = i + 1`，`right = len(nums) - 1`\n4.   剪枝：如果`i>0`，那么直接`return`，说明后续不可能再有等于0的三元组了\n5.   判断`nums[i] + nums[left] + nums[right]`和0的情况\n     -   `nums[i] + nums[left] + nums[right] > 0    right--`\n     -   `nums[i] + nums[left] + nums[right] < 0    left++`\n     -   `nums[i] + nums[left] + nums[right] == 0` \n         -   这个三元组放入到结果中，但是仍然要相向前进。对于`left`，如果如果一致前进得到的`nums[left]==nums[left+1]`，说明该三元组已经存在过了（`0, -1, -1, 1 ,1`）。`right`同理，`nums[right] == nums[right - 1]`\n         -   找到各自不同的数`nums[left+1]`和`nums[right-1]`，再前进一个（`0, -1, -1, -2, 2, 1, 1`）\n\n6.   `return result`\n\n\n\n### 代码\n\n``` go\nfunc threeSum(nums []int) [][]int {\n\tsort.Ints(nums)\n\tresult := [][]int{}\n\tfor i := 0; i < len(nums); i++ {\n\t\tif nums[i] > 0 {\n\t\t\treturn result\n\t\t}\n\t\tif i > 0 && nums[i] == nums[i-1] {\n\t\t\tcontinue\n\t\t}\n\t\tleft := i + 1\n\t\tright := len(nums) - 1\n\t\tfor left < right {\n\t\t\tif nums[i]+nums[left]+nums[right] > 0 {\n\t\t\t\tright--\n\t\t\t} else if nums[i]+nums[left]+nums[right] < 0 {\n\t\t\t\tleft++\n\t\t\t} else {\n\t\t\t\tresult = append(result, []int{nums[i], nums[left], nums[right]})\n\t\t\t\tfor left < right && nums[left] == nums[left+1] {\n\t\t\t\t\tleft++\n\t\t\t\t}\n\t\t\t\tfor left < right && nums[right] == nums[right-1] {\n\t\t\t\t\tright--\n\t\t\t\t}\n\t\t\t\tleft++\n\t\t\t\tright--\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n```\n\n虽然这个代码AC了，但是毫无成就感。现在是9月27日凌晨2:53，还有一道题。继续\n\n\n\n## 18. 四数之和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/4sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0018.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html)\n>\n>   视频讲解：[难在去重和剪枝！| LeetCode：18. 四数之和](https://www.bilibili.com/video/BV1DS4y147US)\n>\n>   状态：AC\n\n### 算法\n\n算法同上题，只不过这次要先确定两个数，然后用`left`和`right`指针找第三个第四个数。有几点不同：\n\n-   这里不是与0作比较，而是`target`，不可以`nums[i] > target`之后就`break`，因为如果有一堆负数相加一定出现越加越小，使得等于`target`\n-   数组长度可能小于4，需要额外判断\n-   剪枝`i>0`开始，`j>i+1`开始，`j`永远在`i`后一位\n\n领悟了上一道题，这一题不难了\n\n### 代码\n\n``` go\nfunc fourSum(nums []int, target int) [][]int {\n\tvar result [][]int\n\tif len(nums) < 4 {\n\t\treturn result\n\t}\n\tsort.Ints(nums)\n\tfor i := 0; i < len(nums)-3; i++ {\n\t\tif i > 0 && nums[i] == nums[i-1] {\n\t\t\tcontinue\n\t\t}\n\t\tfor j := i + 1; j < len(nums)-2; j++ {\n\t\t\tif j > i+1 && nums[j] == nums[j-1] {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tleft := j + 1\n\t\t\tright := len(nums) - 1\n\t\t\tfor left < right {\n\t\t\t\tif nums[i]+nums[j]+nums[left]+nums[right] < target {\n\t\t\t\t\tleft++\n\t\t\t\t} else if nums[i]+nums[j]+nums[left]+nums[right] > target {\n\t\t\t\t\tright--\n\t\t\t\t} else {\n\t\t\t\t\tresult = append(result, []int{nums[i], nums[j], nums[left], nums[right]})\n\t\t\t\t\tfor left < right && nums[left] == nums[left+1] {\n\t\t\t\t\t\tleft++\n\t\t\t\t\t}\n\t\t\t\t\tfor left < right && nums[right] == nums[right-1] {\n\t\t\t\t\t\tright--\n\t\t\t\t\t}\n\t\t\t\t\tleft++\n\t\t\t\t\tright--\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 小结\n\n-   Go的底层有了很多认识，是以前做题或者写项目时候意识不到的。尤其是浅拷贝与深拷贝，大概找到规律了，几乎都是浅拷贝，如果想要深拷贝一定要用`copy()`\n-   由于Go的特性，Go的全局变量不可以在leetcode使用，需要指针传值\n-   晚安，准备睡觉了，3:20了，一觉起来是新的题，字符串要学KMP算法什么的了。\n","source":"_posts/day07.md","raw":"---\ntitle: 代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 哈希表\ncategories: 刷题\nabbrlink: bc862a56\ndate: 2023-09-26 11:31:08\n---\n\n# 代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。\n\n## 454. 两数相加\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/4sum-ii/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE)\n>\n>   视频讲解：[学透哈希表，map使用有技巧！LeetCode：454.四数相加II](https://www.bilibili.com/video/BV1Md4y1Q7Yh)\n>\n>   状态：TLE\n\n### 思路\n\n#### 思路一：暴力算法\n\n暴力算法就不用解释了，每个元素都遍历下。定义`count`记录满足条件情况的个数。满足条件`count++`就好。不出意外的也肯定会超时。\n\n#### 思路二：使用map\n\n将`num4`的值存入到`map4`中的`key`，值出现的次数存为`value`。三层循环后接一个判断，判断第四个数是否在`map4`中，如果存在则总数加`value`\n\n```go\nfunc fourSumCount(nums1 []int, nums2 []int, nums3 []int, nums4 []int) int {\n\tcount := 0\n\tmap4 := map[int]int{}\n\tfor _, v := range nums4 {\n\t\tmap4[v]++\n\t}\n\tfor _, i := range nums1 {\n\t\tfor _, j := range nums2 {\n\t\t\tfor _, k := range nums3 {\n\t\t\t\tif v, ok := map4[0-i-j-k]; ok {\n\t\t\t\t\tcount += v\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n```\n\n结果你猜超时没有，肯定还是超时了。\n\n#### 思路三：使用四个map\n\n每个map中都存放`nums`中出现的数以及出现的次数。第一个map定义为`map1`，键是`k1`，值是`v1`，以此类推。\n\n三层循环后判断`map4[0-k1-k2-k3]`是否存在，如果存在那么`count += v1 * v2 * v3 * v4`\n\n``` go\ncount := 0\nmap1 := map[int]int{}\nmap2 := map[int]int{}\nmap3 := map[int]int{}\nmap4 := map[int]int{}\nfor i := 0; i < len(nums1); i++ {\n    map1[nums1[i]]++\n    map2[nums2[i]]++\n    map3[nums3[i]]++\n    map4[nums4[i]]++\n}\nfor k1, v1 := range map1 {\n    for k2, v2 := range map2 {\n        for k3, v3 := range map3 {\n            if v4, ok := map4[0-k1-k2-k3]; ok {\n                count += v1 * v2 * v3 * v4\n            }\n        }\n    }\n}\nreturn count\n```\n\n结果你猜超时没有，肯定还是超时了。\n\n原因如下：如果数组中重复的数不多，或者没有，就会退化成思路二。\n\n想了许久，想不出优化的方法了，看了卡哥的题解，我就用我的理解描述一下。\n\n#### 卡哥题解\n\n先计算`nums1`与`nums2`和，将两数组所有和的情况保存到`mapAB`中。key保存的是和，value保存的是和的个数。\n\n再计算`nums3`与`nums4`和，判断`mapAB[0-k3-k4]`是否存在，若存在`count+=mapAB[0-k3-k4]`\n\n``` go\nfunc fourSumCount(nums1 []int, nums2 []int, nums3 []int, nums4 []int) int {\n\tcount := 0\n\tmapAB := map[int]int{}\n\tfor _, v1 := range nums1 {\n\t\tfor _, v2 := range nums2 {\n\t\t\tmapAB[v1+v2]++\n\t\t}\n\t}\n\tfor _, v3 := range nums3 {\n\t\tfor _, v4 := range nums4 {\n\t\t\tif v, ok := mapAB[0-v3-v4]; ok {\n\t\t\t\tcount += v\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n```\n\n## 383. 赎金信\n\n### 思路\n\n要判断`ransomNote`是否含于`magazine`，先构建一个数组，存放`magazine`的情况，索引代表字母：0代表`'a'`，1代表`'b'`等等；值代表字母出现的次数。构建好后再遍历`ransomNote`串，将对应的字母数量减少一，如果不存在直接`return false`\n\n### 代码\n\n``` go\nfunc canConstruct(ransomNote string, magazine string) bool {\n\tif len(ransomNote) > len(magazine) {\n\t\treturn false\n\t}\n\tarr := make([]int, 26)\n\tfor _, v := range magazine {\n\t\tarr[v-'a']++\n\t}\n\tfor _, v := range ransomNote {\n\t\tarr[v-'a']--\n\t\tif arr[v-'a'] < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n```\n\n\n\n## 15. 三数之和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/3sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE)\n>\n>   视频讲解：[梦破碎的地方！| LeetCode：15.三数之和](https://www.bilibili.com/video/BV1GW4y127qo)\n>\n>   状态：TLE\n\n### 思路\n\n我投降了这道题，Go的底层现在有一个新的理解！\n\n#### 方法一：回溯算法\n\n首先先将`nums`排序，利用回溯算法得到所有的组合，选择排序的原因是因为这样得到的组合，即使是重复的也可以保证顺序一致，方便判断这个组合是否出现过。最终结果保存到变量`result`，得到的可能得组合保存到变量`path`\n\n#### 代码\n\n``` go\nfunc backTracking(nums []int, index int, result *[][]int, path *[]int) {\n\tif len(*path) == 3 {\n\t\tif (*path)[0]+(*path)[1]+(*path)[2] == 0 {\n\t\t\t// 后面的append()操作是深拷贝，所以这里使用temp保存path的值\n            temp := make([]int, len(*path))  \n\t\t\tcopy(temp, *path)\n\t\t\tfor _, v := range *result {\n\t\t\t\tif reflect.DeepEqual(temp, v) {  // 使用反射判断temp是否在result中\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\t*result = append(*result, temp)\n\t\t}\n\t\treturn\n\t}\n\tfor i := index; i < len(nums); i++ {\n\t\t*path = append(*path, nums[i])\n\t\tbackTracking(nums, i+1, result, path)\n\t\t*path = (*path)[:len(*path)-1]\n\n\t}\n}\n\nfunc threeSum(nums []int) [][]int {\n\tvar result [][]int\n\tvar path []int\n\tsort.Ints(nums)\n\tbackTracking(nums, 0, &result, &path)\n\treturn result\n}\n```\n\n结果你猜超时没有，肯定还是超时了。\n\n这里我遇到了好多问题，首先是发现了`result = append(result, temp)`，这里`append`方法实际上是浅拷贝！也就是说以后`temp`的值，`result`也会变化。这也是我为什么用一个临时变量`temp`来保存`path`，而且使用的是`copy()`。\n\n要判断`temp`是否存在于`result`中，那么则需要使用反射，进行深度判断`reflect.DeepEqual(temp, v)`。\n\n##### 遇到最头大的问题！！！！！！\n\n以前用别的语言写回溯，很自然的使用了全局变量，结果在Go语言中发生了奇妙的事情。请看截图\n\n<img src=\"../images/day07/使用全局变量leetcode.png\" alt=\"使用全局变量leetcode\" style=\"zoom:80%;\" />\n\n明明输入的只有0和1，怎么会输出了2。而且这个测试用例这么眼熟呢，没错这就是给出的测试用例Case1的答案。放到Goland里面明明是正确答案！到这里就变了，说明全局变量出现了问题。解决这个问题有两个想法：\n\n-   查找有没有类似C++中的`delete`，使用完变量之后释放掉。发现并没有。而且使用完变量应该在`threeSum()`之外了，函数内释放就没有结果了。\n-   `threeSum()`定义变量，使用指针传值。\n\n当然，第二种才是正解。改完之后就是上面放出来的代码了，超时。\n\n#### 方法二：使用哈希\n\n将`nums`进行排序，并哈希处理，定义变量`map1`用作哈希表，`nums`中的每个元素做key，value则是每个元素出现的次数。\n\n使用两层for循环之后，判断`0-nums[i]-nums[j]`是否存在。若存在还需要判断每个数字出现的次数是否合法（例如`nums = [-1,0,1,2,-1,-4]`，如果找到一个组合是`[2, -4, 2]`则需要舍弃。之所以会出现这样，是因为两层for会找到`2`和`-4`，而`0-nums[i]-nums[j]`会找到重复的2）\n\n找到组合之后，对组合再排序，判断`path`是否在`result`中。\n\n``` go\nfunc threeSum(nums []int) [][]int {\n\tsort.Ints(nums)\n\tmap1 := map[int]int{}\n\tfor _, v := range nums {\n\t\tmap1[v]++\n\t}\n\tvar result [][]int\n\tfor i := 0; i < len(nums); i++ {\n\t\tfor j := i + 1; j < len(nums); j++ {\n\t\t\tif v, ok := map1[-nums[i]-nums[j]]; ok {\n\t\t\t\ttemp := []int{nums[i], nums[j], -nums[i] - nums[j]}\n\t\t\t\tsort.Ints(temp)\n\t\t\t\tcount := 0\n\t\t\t\tif nums[i] == nums[j] || nums[j] == -nums[i]-nums[j] || nums[i] == -nums[i]-nums[j] {\n\t\t\t\t\tcount = 2\n\t\t\t\t}\n\t\t\t\tif nums[i] == nums[j] && nums[j] == -nums[i]-nums[j] {\n\t\t\t\t\tcount = 3\n\t\t\t\t}\n\t\t\t\tif v >= count {\n\t\t\t\t\tflag := true\n\t\t\t\t\tfor _, value := range result {\n\t\t\t\t\t\tif reflect.DeepEqual(value, temp) {\n\t\t\t\t\t\t\tflag = false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif flag {\n\t\t\t\t\t\tresult = append(result, temp)\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n```\n\n结果你猜超时没有，肯定还是超时了。\n\n好了，我投降了，想不到好方法了。去看卡哥视频了。\n\n\n\n### 卡哥解法\n\n<font color=\"red\">这道题不适合用哈希表做</font>。双指针我想了一下也没有太想明白，主要还是去重操作。看了视频讲解很清楚了\n\n1.   数组排序，方便后序操作\n2.   先找第一个数，使用一层`for`，指针为`i`\n3.   找第二个、第三个数。分别用指针`left = i + 1`，`right = len(nums) - 1`\n4.   剪枝：如果`i>0`，那么直接`return`，说明后续不可能再有等于0的三元组了\n5.   判断`nums[i] + nums[left] + nums[right]`和0的情况\n     -   `nums[i] + nums[left] + nums[right] > 0    right--`\n     -   `nums[i] + nums[left] + nums[right] < 0    left++`\n     -   `nums[i] + nums[left] + nums[right] == 0` \n         -   这个三元组放入到结果中，但是仍然要相向前进。对于`left`，如果如果一致前进得到的`nums[left]==nums[left+1]`，说明该三元组已经存在过了（`0, -1, -1, 1 ,1`）。`right`同理，`nums[right] == nums[right - 1]`\n         -   找到各自不同的数`nums[left+1]`和`nums[right-1]`，再前进一个（`0, -1, -1, -2, 2, 1, 1`）\n\n6.   `return result`\n\n\n\n### 代码\n\n``` go\nfunc threeSum(nums []int) [][]int {\n\tsort.Ints(nums)\n\tresult := [][]int{}\n\tfor i := 0; i < len(nums); i++ {\n\t\tif nums[i] > 0 {\n\t\t\treturn result\n\t\t}\n\t\tif i > 0 && nums[i] == nums[i-1] {\n\t\t\tcontinue\n\t\t}\n\t\tleft := i + 1\n\t\tright := len(nums) - 1\n\t\tfor left < right {\n\t\t\tif nums[i]+nums[left]+nums[right] > 0 {\n\t\t\t\tright--\n\t\t\t} else if nums[i]+nums[left]+nums[right] < 0 {\n\t\t\t\tleft++\n\t\t\t} else {\n\t\t\t\tresult = append(result, []int{nums[i], nums[left], nums[right]})\n\t\t\t\tfor left < right && nums[left] == nums[left+1] {\n\t\t\t\t\tleft++\n\t\t\t\t}\n\t\t\t\tfor left < right && nums[right] == nums[right-1] {\n\t\t\t\t\tright--\n\t\t\t\t}\n\t\t\t\tleft++\n\t\t\t\tright--\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n```\n\n虽然这个代码AC了，但是毫无成就感。现在是9月27日凌晨2:53，还有一道题。继续\n\n\n\n## 18. 四数之和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/4sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0018.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html)\n>\n>   视频讲解：[难在去重和剪枝！| LeetCode：18. 四数之和](https://www.bilibili.com/video/BV1DS4y147US)\n>\n>   状态：AC\n\n### 算法\n\n算法同上题，只不过这次要先确定两个数，然后用`left`和`right`指针找第三个第四个数。有几点不同：\n\n-   这里不是与0作比较，而是`target`，不可以`nums[i] > target`之后就`break`，因为如果有一堆负数相加一定出现越加越小，使得等于`target`\n-   数组长度可能小于4，需要额外判断\n-   剪枝`i>0`开始，`j>i+1`开始，`j`永远在`i`后一位\n\n领悟了上一道题，这一题不难了\n\n### 代码\n\n``` go\nfunc fourSum(nums []int, target int) [][]int {\n\tvar result [][]int\n\tif len(nums) < 4 {\n\t\treturn result\n\t}\n\tsort.Ints(nums)\n\tfor i := 0; i < len(nums)-3; i++ {\n\t\tif i > 0 && nums[i] == nums[i-1] {\n\t\t\tcontinue\n\t\t}\n\t\tfor j := i + 1; j < len(nums)-2; j++ {\n\t\t\tif j > i+1 && nums[j] == nums[j-1] {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tleft := j + 1\n\t\t\tright := len(nums) - 1\n\t\t\tfor left < right {\n\t\t\t\tif nums[i]+nums[j]+nums[left]+nums[right] < target {\n\t\t\t\t\tleft++\n\t\t\t\t} else if nums[i]+nums[j]+nums[left]+nums[right] > target {\n\t\t\t\t\tright--\n\t\t\t\t} else {\n\t\t\t\t\tresult = append(result, []int{nums[i], nums[j], nums[left], nums[right]})\n\t\t\t\t\tfor left < right && nums[left] == nums[left+1] {\n\t\t\t\t\t\tleft++\n\t\t\t\t\t}\n\t\t\t\t\tfor left < right && nums[right] == nums[right-1] {\n\t\t\t\t\t\tright--\n\t\t\t\t\t}\n\t\t\t\t\tleft++\n\t\t\t\t\tright--\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 小结\n\n-   Go的底层有了很多认识，是以前做题或者写项目时候意识不到的。尤其是浅拷贝与深拷贝，大概找到规律了，几乎都是浅拷贝，如果想要深拷贝一定要用`copy()`\n-   由于Go的特性，Go的全局变量不可以在leetcode使用，需要指针传值\n-   晚安，准备睡觉了，3:20了，一觉起来是新的题，字符串要学KMP算法什么的了。\n","slug":"day07","published":1,"updated":"2023-10-24T19:32:35.683Z","_id":"cln7q7alw000hvswha1iihvvl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第七天-454-四数相加II、383-赎金信、15-三数之和、18-四数之和。\"><a href=\"#代码随想录算法训练营第七天-454-四数相加II、383-赎金信、15-三数之和、18-四数之和。\" class=\"headerlink\" title=\"代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。\"></a>代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。</h1><h2 id=\"454-两数相加\"><a href=\"#454-两数相加\" class=\"headerlink\" title=\"454. 两数相加\"></a>454. 两数相加</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/4sum-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Md4y1Q7Yh\">学透哈希表，map使用有技巧！LeetCode：454.四数相加II</a></p>\n<p>  状态：TLE</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"思路一：暴力算法\"><a href=\"#思路一：暴力算法\" class=\"headerlink\" title=\"思路一：暴力算法\"></a>思路一：暴力算法</h4><p>暴力算法就不用解释了，每个元素都遍历下。定义<code>count</code>记录满足条件情况的个数。满足条件<code>count++</code>就好。不出意外的也肯定会超时。</p>\n<h4 id=\"思路二：使用map\"><a href=\"#思路二：使用map\" class=\"headerlink\" title=\"思路二：使用map\"></a>思路二：使用map</h4><p>将<code>num4</code>的值存入到<code>map4</code>中的<code>key</code>，值出现的次数存为<code>value</code>。三层循环后接一个判断，判断第四个数是否在<code>map4</code>中，如果存在则总数加<code>value</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fourSumCount</span><span class=\"hljs-params\">(nums1 []<span class=\"hljs-type\">int</span>, nums2 []<span class=\"hljs-type\">int</span>, nums3 []<span class=\"hljs-type\">int</span>, nums4 []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tcount := <span class=\"hljs-number\">0</span><br>\tmap4 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums4 &#123;<br>\t\tmap4[v]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, i := <span class=\"hljs-keyword\">range</span> nums1 &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, j := <span class=\"hljs-keyword\">range</span> nums2 &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> _, k := <span class=\"hljs-keyword\">range</span> nums3 &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> v, ok := map4[<span class=\"hljs-number\">0</span>-i-j-k]; ok &#123;<br>\t\t\t\t\tcount += v<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果你猜超时没有，肯定还是超时了。</p>\n<h4 id=\"思路三：使用四个map\"><a href=\"#思路三：使用四个map\" class=\"headerlink\" title=\"思路三：使用四个map\"></a>思路三：使用四个map</h4><p>每个map中都存放<code>nums</code>中出现的数以及出现的次数。第一个map定义为<code>map1</code>，键是<code>k1</code>，值是<code>v1</code>，以此类推。</p>\n<p>三层循环后判断<code>map4[0-k1-k2-k3]</code>是否存在，如果存在那么<code>count += v1 * v2 * v3 * v4</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">count := <span class=\"hljs-number\">0</span><br>map1 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>map2 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>map3 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>map4 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br><span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums1); i++ &#123;<br>    map1[nums1[i]]++<br>    map2[nums2[i]]++<br>    map3[nums3[i]]++<br>    map4[nums4[i]]++<br>&#125;<br><span class=\"hljs-keyword\">for</span> k1, v1 := <span class=\"hljs-keyword\">range</span> map1 &#123;<br>    <span class=\"hljs-keyword\">for</span> k2, v2 := <span class=\"hljs-keyword\">range</span> map2 &#123;<br>        <span class=\"hljs-keyword\">for</span> k3, v3 := <span class=\"hljs-keyword\">range</span> map3 &#123;<br>            <span class=\"hljs-keyword\">if</span> v4, ok := map4[<span class=\"hljs-number\">0</span>-k1-k2-k3]; ok &#123;<br>                count += v1 * v2 * v3 * v4<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">return</span> count<br></code></pre></td></tr></table></figure>\n\n<p>结果你猜超时没有，肯定还是超时了。</p>\n<p>原因如下：如果数组中重复的数不多，或者没有，就会退化成思路二。</p>\n<p>想了许久，想不出优化的方法了，看了卡哥的题解，我就用我的理解描述一下。</p>\n<h4 id=\"卡哥题解\"><a href=\"#卡哥题解\" class=\"headerlink\" title=\"卡哥题解\"></a>卡哥题解</h4><p>先计算<code>nums1</code>与<code>nums2</code>和，将两数组所有和的情况保存到<code>mapAB</code>中。key保存的是和，value保存的是和的个数。</p>\n<p>再计算<code>nums3</code>与<code>nums4</code>和，判断<code>mapAB[0-k3-k4]</code>是否存在，若存在<code>count+=mapAB[0-k3-k4]</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fourSumCount</span><span class=\"hljs-params\">(nums1 []<span class=\"hljs-type\">int</span>, nums2 []<span class=\"hljs-type\">int</span>, nums3 []<span class=\"hljs-type\">int</span>, nums4 []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tcount := <span class=\"hljs-number\">0</span><br>\tmapAB := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v1 := <span class=\"hljs-keyword\">range</span> nums1 &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, v2 := <span class=\"hljs-keyword\">range</span> nums2 &#123;<br>\t\t\tmapAB[v1+v2]++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v3 := <span class=\"hljs-keyword\">range</span> nums3 &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, v4 := <span class=\"hljs-keyword\">range</span> nums4 &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> v, ok := mapAB[<span class=\"hljs-number\">0</span>-v3-v4]; ok &#123;<br>\t\t\t\tcount += v<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"383-赎金信\"><a href=\"#383-赎金信\" class=\"headerlink\" title=\"383. 赎金信\"></a>383. 赎金信</h2><h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>要判断<code>ransomNote</code>是否含于<code>magazine</code>，先构建一个数组，存放<code>magazine</code>的情况，索引代表字母：0代表<code>&#39;a&#39;</code>，1代表<code>&#39;b&#39;</code>等等；值代表字母出现的次数。构建好后再遍历<code>ransomNote</code>串，将对应的字母数量减少一，如果不存在直接<code>return false</code></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">canConstruct</span><span class=\"hljs-params\">(ransomNote <span class=\"hljs-type\">string</span>, magazine <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ransomNote) &gt; <span class=\"hljs-built_in\">len</span>(magazine) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\tarr := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">26</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> magazine &#123;<br>\t\tarr[v-<span class=\"hljs-string\">&#x27;a&#x27;</span>]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> ransomNote &#123;<br>\t\tarr[v-<span class=\"hljs-string\">&#x27;a&#x27;</span>]--<br>\t\t<span class=\"hljs-keyword\">if</span> arr[v-<span class=\"hljs-string\">&#x27;a&#x27;</span>] &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"15-三数之和\"><a href=\"#15-三数之和\" class=\"headerlink\" title=\"15. 三数之和\"></a>15. 三数之和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/3sum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1GW4y127qo\">梦破碎的地方！| LeetCode：15.三数之和</a></p>\n<p>  状态：TLE</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>我投降了这道题，Go的底层现在有一个新的理解！</p>\n<h4 id=\"方法一：回溯算法\"><a href=\"#方法一：回溯算法\" class=\"headerlink\" title=\"方法一：回溯算法\"></a>方法一：回溯算法</h4><p>首先先将<code>nums</code>排序，利用回溯算法得到所有的组合，选择排序的原因是因为这样得到的组合，即使是重复的也可以保证顺序一致，方便判断这个组合是否出现过。最终结果保存到变量<code>result</code>，得到的可能得组合保存到变量<code>path</code></p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, index <span class=\"hljs-type\">int</span>, result *[][]<span class=\"hljs-type\">int</span>, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(*path) == <span class=\"hljs-number\">3</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (*path)[<span class=\"hljs-number\">0</span>]+(*path)[<span class=\"hljs-number\">1</span>]+(*path)[<span class=\"hljs-number\">2</span>] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// 后面的append()操作是深拷贝，所以这里使用temp保存path的值</span><br>            temp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(*path))  <br>\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, *path)<br>\t\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> *result &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> reflect.DeepEqual(temp, v) &#123;  <span class=\"hljs-comment\">// 使用反射判断temp是否在result中</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t\t*result = <span class=\"hljs-built_in\">append</span>(*result, temp)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := index; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, nums[i])<br>\t\tbackTracking(nums, i+<span class=\"hljs-number\">1</span>, result, path)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br><br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">threeSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tsort.Ints(nums)<br>\tbackTracking(nums, <span class=\"hljs-number\">0</span>, &amp;result, &amp;path)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果你猜超时没有，肯定还是超时了。</p>\n<p>这里我遇到了好多问题，首先是发现了<code>result = append(result, temp)</code>，这里<code>append</code>方法实际上是浅拷贝！也就是说以后<code>temp</code>的值，<code>result</code>也会变化。这也是我为什么用一个临时变量<code>temp</code>来保存<code>path</code>，而且使用的是<code>copy()</code>。</p>\n<p>要判断<code>temp</code>是否存在于<code>result</code>中，那么则需要使用反射，进行深度判断<code>reflect.DeepEqual(temp, v)</code>。</p>\n<h5 id=\"遇到最头大的问题！！！！！！\"><a href=\"#遇到最头大的问题！！！！！！\" class=\"headerlink\" title=\"遇到最头大的问题！！！！！！\"></a>遇到最头大的问题！！！！！！</h5><p>以前用别的语言写回溯，很自然的使用了全局变量，结果在Go语言中发生了奇妙的事情。请看截图</p>\n<img src=\"../images/day07/使用全局变量leetcode.png\" alt=\"使用全局变量leetcode\" style=\"zoom:80%;\" />\n\n<p>明明输入的只有0和1，怎么会输出了2。而且这个测试用例这么眼熟呢，没错这就是给出的测试用例Case1的答案。放到Goland里面明明是正确答案！到这里就变了，说明全局变量出现了问题。解决这个问题有两个想法：</p>\n<ul>\n<li>查找有没有类似C++中的<code>delete</code>，使用完变量之后释放掉。发现并没有。而且使用完变量应该在<code>threeSum()</code>之外了，函数内释放就没有结果了。</li>\n<li><code>threeSum()</code>定义变量，使用指针传值。</li>\n</ul>\n<p>当然，第二种才是正解。改完之后就是上面放出来的代码了，超时。</p>\n<h4 id=\"方法二：使用哈希\"><a href=\"#方法二：使用哈希\" class=\"headerlink\" title=\"方法二：使用哈希\"></a>方法二：使用哈希</h4><p>将<code>nums</code>进行排序，并哈希处理，定义变量<code>map1</code>用作哈希表，<code>nums</code>中的每个元素做key，value则是每个元素出现的次数。</p>\n<p>使用两层for循环之后，判断<code>0-nums[i]-nums[j]</code>是否存在。若存在还需要判断每个数字出现的次数是否合法（例如<code>nums = [-1,0,1,2,-1,-4]</code>，如果找到一个组合是<code>[2, -4, 2]</code>则需要舍弃。之所以会出现这样，是因为两层for会找到<code>2</code>和<code>-4</code>，而<code>0-nums[i]-nums[j]</code>会找到重复的2）</p>\n<p>找到组合之后，对组合再排序，判断<code>path</code>是否在<code>result</code>中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">threeSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\tsort.Ints(nums)<br>\tmap1 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\tmap1[v]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(nums); j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> v, ok := map1[-nums[i]-nums[j]]; ok &#123;<br>\t\t\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;nums[i], nums[j], -nums[i] - nums[j]&#125;<br>\t\t\t\tsort.Ints(temp)<br>\t\t\t\tcount := <span class=\"hljs-number\">0</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> nums[i] == nums[j] || nums[j] == -nums[i]-nums[j] || nums[i] == -nums[i]-nums[j] &#123;<br>\t\t\t\t\tcount = <span class=\"hljs-number\">2</span><br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> nums[i] == nums[j] &amp;&amp; nums[j] == -nums[i]-nums[j] &#123;<br>\t\t\t\t\tcount = <span class=\"hljs-number\">3</span><br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> v &gt;= count &#123;<br>\t\t\t\t\tflag := <span class=\"hljs-literal\">true</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">for</span> _, value := <span class=\"hljs-keyword\">range</span> result &#123;<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">if</span> reflect.DeepEqual(value, temp) &#123;<br>\t\t\t\t\t\t\tflag = <span class=\"hljs-literal\">false</span><br>\t\t\t\t\t\t&#125;<br>\t\t\t\t\t&#125;<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> flag &#123;<br>\t\t\t\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t\t\t\t\t&#125;<br><br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果你猜超时没有，肯定还是超时了。</p>\n<p>好了，我投降了，想不到好方法了。去看卡哥视频了。</p>\n<h3 id=\"卡哥解法\"><a href=\"#卡哥解法\" class=\"headerlink\" title=\"卡哥解法\"></a>卡哥解法</h3><p><font color=\"red\">这道题不适合用哈希表做</font>。双指针我想了一下也没有太想明白，主要还是去重操作。看了视频讲解很清楚了</p>\n<ol>\n<li><p>数组排序，方便后序操作</p>\n</li>\n<li><p>先找第一个数，使用一层<code>for</code>，指针为<code>i</code></p>\n</li>\n<li><p>找第二个、第三个数。分别用指针<code>left = i + 1</code>，<code>right = len(nums) - 1</code></p>\n</li>\n<li><p>剪枝：如果<code>i&gt;0</code>，那么直接<code>return</code>，说明后续不可能再有等于0的三元组了</p>\n</li>\n<li><p>判断<code>nums[i] + nums[left] + nums[right]</code>和0的情况</p>\n<ul>\n<li><code>nums[i] + nums[left] + nums[right] &gt; 0    right--</code></li>\n<li><code>nums[i] + nums[left] + nums[right] &lt; 0    left++</code></li>\n<li><code>nums[i] + nums[left] + nums[right] == 0</code> <ul>\n<li>这个三元组放入到结果中，但是仍然要相向前进。对于<code>left</code>，如果如果一致前进得到的<code>nums[left]==nums[left+1]</code>，说明该三元组已经存在过了（<code>0, -1, -1, 1 ,1</code>）。<code>right</code>同理，<code>nums[right] == nums[right - 1]</code></li>\n<li>找到各自不同的数<code>nums[left+1]</code>和<code>nums[right-1]</code>，再前进一个（<code>0, -1, -1, -2, 2, 1, 1</code>）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>return result</code></p>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">threeSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\tsort.Ints(nums)<br>\tresult := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> nums[i] &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> result<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i] == nums[i<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>\t\tleft := i + <span class=\"hljs-number\">1</span><br>\t\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[i]+nums[left]+nums[right] &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\tright--<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[i]+nums[left]+nums[right] &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\tleft++<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, []<span class=\"hljs-type\">int</span>&#123;nums[i], nums[left], nums[right]&#125;)<br>\t\t\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &amp;&amp; nums[left] == nums[left+<span class=\"hljs-number\">1</span>] &#123;<br>\t\t\t\t\tleft++<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &amp;&amp; nums[right] == nums[right<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t\t\t\tright--<br>\t\t\t\t&#125;<br>\t\t\t\tleft++<br>\t\t\t\tright--<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>虽然这个代码AC了，但是毫无成就感。现在是9月27日凌晨2:53，还有一道题。继续</p>\n<h2 id=\"18-四数之和\"><a href=\"#18-四数之和\" class=\"headerlink\" title=\"18. 四数之和\"></a>18. 四数之和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/4sum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0018.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1DS4y147US\">难在去重和剪枝！| LeetCode：18. 四数之和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>算法同上题，只不过这次要先确定两个数，然后用<code>left</code>和<code>right</code>指针找第三个第四个数。有几点不同：</p>\n<ul>\n<li>这里不是与0作比较，而是<code>target</code>，不可以<code>nums[i] &gt; target</code>之后就<code>break</code>，因为如果有一堆负数相加一定出现越加越小，使得等于<code>target</code></li>\n<li>数组长度可能小于4，需要额外判断</li>\n<li>剪枝<code>i&gt;0</code>开始，<code>j&gt;i+1</code>开始，<code>j</code>永远在<code>i</code>后一位</li>\n</ul>\n<p>领悟了上一道题，这一题不难了</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fourSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) &lt; <span class=\"hljs-number\">4</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tsort.Ints(nums)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-3</span>; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i] == nums[i<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-2</span>; j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> j &gt; i+<span class=\"hljs-number\">1</span> &amp;&amp; nums[j] == nums[j<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125;<br>\t\t\tleft := j + <span class=\"hljs-number\">1</span><br>\t\t\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> nums[i]+nums[j]+nums[left]+nums[right] &lt; target &#123;<br>\t\t\t\t\tleft++<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[i]+nums[j]+nums[left]+nums[right] &gt; target &#123;<br>\t\t\t\t\tright--<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, []<span class=\"hljs-type\">int</span>&#123;nums[i], nums[j], nums[left], nums[right]&#125;)<br>\t\t\t\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &amp;&amp; nums[left] == nums[left+<span class=\"hljs-number\">1</span>] &#123;<br>\t\t\t\t\t\tleft++<br>\t\t\t\t\t&#125;<br>\t\t\t\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &amp;&amp; nums[right] == nums[right<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t\t\t\t\tright--<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tleft++<br>\t\t\t\t\tright--<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>Go的底层有了很多认识，是以前做题或者写项目时候意识不到的。尤其是浅拷贝与深拷贝，大概找到规律了，几乎都是浅拷贝，如果想要深拷贝一定要用<code>copy()</code></li>\n<li>由于Go的特性，Go的全局变量不可以在leetcode使用，需要指针传值</li>\n<li>晚安，准备睡觉了，3:20了，一觉起来是新的题，字符串要学KMP算法什么的了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第七天-454-四数相加II、383-赎金信、15-三数之和、18-四数之和。\"><a href=\"#代码随想录算法训练营第七天-454-四数相加II、383-赎金信、15-三数之和、18-四数之和。\" class=\"headerlink\" title=\"代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。\"></a>代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。</h1><h2 id=\"454-两数相加\"><a href=\"#454-两数相加\" class=\"headerlink\" title=\"454. 两数相加\"></a>454. 两数相加</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/4sum-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Md4y1Q7Yh\">学透哈希表，map使用有技巧！LeetCode：454.四数相加II</a></p>\n<p>  状态：TLE</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"思路一：暴力算法\"><a href=\"#思路一：暴力算法\" class=\"headerlink\" title=\"思路一：暴力算法\"></a>思路一：暴力算法</h4><p>暴力算法就不用解释了，每个元素都遍历下。定义<code>count</code>记录满足条件情况的个数。满足条件<code>count++</code>就好。不出意外的也肯定会超时。</p>\n<h4 id=\"思路二：使用map\"><a href=\"#思路二：使用map\" class=\"headerlink\" title=\"思路二：使用map\"></a>思路二：使用map</h4><p>将<code>num4</code>的值存入到<code>map4</code>中的<code>key</code>，值出现的次数存为<code>value</code>。三层循环后接一个判断，判断第四个数是否在<code>map4</code>中，如果存在则总数加<code>value</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fourSumCount</span><span class=\"hljs-params\">(nums1 []<span class=\"hljs-type\">int</span>, nums2 []<span class=\"hljs-type\">int</span>, nums3 []<span class=\"hljs-type\">int</span>, nums4 []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tcount := <span class=\"hljs-number\">0</span><br>\tmap4 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums4 &#123;<br>\t\tmap4[v]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, i := <span class=\"hljs-keyword\">range</span> nums1 &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, j := <span class=\"hljs-keyword\">range</span> nums2 &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> _, k := <span class=\"hljs-keyword\">range</span> nums3 &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> v, ok := map4[<span class=\"hljs-number\">0</span>-i-j-k]; ok &#123;<br>\t\t\t\t\tcount += v<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果你猜超时没有，肯定还是超时了。</p>\n<h4 id=\"思路三：使用四个map\"><a href=\"#思路三：使用四个map\" class=\"headerlink\" title=\"思路三：使用四个map\"></a>思路三：使用四个map</h4><p>每个map中都存放<code>nums</code>中出现的数以及出现的次数。第一个map定义为<code>map1</code>，键是<code>k1</code>，值是<code>v1</code>，以此类推。</p>\n<p>三层循环后判断<code>map4[0-k1-k2-k3]</code>是否存在，如果存在那么<code>count += v1 * v2 * v3 * v4</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">count := <span class=\"hljs-number\">0</span><br>map1 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>map2 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>map3 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>map4 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br><span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums1); i++ &#123;<br>    map1[nums1[i]]++<br>    map2[nums2[i]]++<br>    map3[nums3[i]]++<br>    map4[nums4[i]]++<br>&#125;<br><span class=\"hljs-keyword\">for</span> k1, v1 := <span class=\"hljs-keyword\">range</span> map1 &#123;<br>    <span class=\"hljs-keyword\">for</span> k2, v2 := <span class=\"hljs-keyword\">range</span> map2 &#123;<br>        <span class=\"hljs-keyword\">for</span> k3, v3 := <span class=\"hljs-keyword\">range</span> map3 &#123;<br>            <span class=\"hljs-keyword\">if</span> v4, ok := map4[<span class=\"hljs-number\">0</span>-k1-k2-k3]; ok &#123;<br>                count += v1 * v2 * v3 * v4<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">return</span> count<br></code></pre></td></tr></table></figure>\n\n<p>结果你猜超时没有，肯定还是超时了。</p>\n<p>原因如下：如果数组中重复的数不多，或者没有，就会退化成思路二。</p>\n<p>想了许久，想不出优化的方法了，看了卡哥的题解，我就用我的理解描述一下。</p>\n<h4 id=\"卡哥题解\"><a href=\"#卡哥题解\" class=\"headerlink\" title=\"卡哥题解\"></a>卡哥题解</h4><p>先计算<code>nums1</code>与<code>nums2</code>和，将两数组所有和的情况保存到<code>mapAB</code>中。key保存的是和，value保存的是和的个数。</p>\n<p>再计算<code>nums3</code>与<code>nums4</code>和，判断<code>mapAB[0-k3-k4]</code>是否存在，若存在<code>count+=mapAB[0-k3-k4]</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fourSumCount</span><span class=\"hljs-params\">(nums1 []<span class=\"hljs-type\">int</span>, nums2 []<span class=\"hljs-type\">int</span>, nums3 []<span class=\"hljs-type\">int</span>, nums4 []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tcount := <span class=\"hljs-number\">0</span><br>\tmapAB := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v1 := <span class=\"hljs-keyword\">range</span> nums1 &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, v2 := <span class=\"hljs-keyword\">range</span> nums2 &#123;<br>\t\t\tmapAB[v1+v2]++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v3 := <span class=\"hljs-keyword\">range</span> nums3 &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, v4 := <span class=\"hljs-keyword\">range</span> nums4 &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> v, ok := mapAB[<span class=\"hljs-number\">0</span>-v3-v4]; ok &#123;<br>\t\t\t\tcount += v<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"383-赎金信\"><a href=\"#383-赎金信\" class=\"headerlink\" title=\"383. 赎金信\"></a>383. 赎金信</h2><h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>要判断<code>ransomNote</code>是否含于<code>magazine</code>，先构建一个数组，存放<code>magazine</code>的情况，索引代表字母：0代表<code>&#39;a&#39;</code>，1代表<code>&#39;b&#39;</code>等等；值代表字母出现的次数。构建好后再遍历<code>ransomNote</code>串，将对应的字母数量减少一，如果不存在直接<code>return false</code></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">canConstruct</span><span class=\"hljs-params\">(ransomNote <span class=\"hljs-type\">string</span>, magazine <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ransomNote) &gt; <span class=\"hljs-built_in\">len</span>(magazine) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\tarr := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">26</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> magazine &#123;<br>\t\tarr[v-<span class=\"hljs-string\">&#x27;a&#x27;</span>]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> ransomNote &#123;<br>\t\tarr[v-<span class=\"hljs-string\">&#x27;a&#x27;</span>]--<br>\t\t<span class=\"hljs-keyword\">if</span> arr[v-<span class=\"hljs-string\">&#x27;a&#x27;</span>] &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"15-三数之和\"><a href=\"#15-三数之和\" class=\"headerlink\" title=\"15. 三数之和\"></a>15. 三数之和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/3sum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1GW4y127qo\">梦破碎的地方！| LeetCode：15.三数之和</a></p>\n<p>  状态：TLE</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>我投降了这道题，Go的底层现在有一个新的理解！</p>\n<h4 id=\"方法一：回溯算法\"><a href=\"#方法一：回溯算法\" class=\"headerlink\" title=\"方法一：回溯算法\"></a>方法一：回溯算法</h4><p>首先先将<code>nums</code>排序，利用回溯算法得到所有的组合，选择排序的原因是因为这样得到的组合，即使是重复的也可以保证顺序一致，方便判断这个组合是否出现过。最终结果保存到变量<code>result</code>，得到的可能得组合保存到变量<code>path</code></p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, index <span class=\"hljs-type\">int</span>, result *[][]<span class=\"hljs-type\">int</span>, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(*path) == <span class=\"hljs-number\">3</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (*path)[<span class=\"hljs-number\">0</span>]+(*path)[<span class=\"hljs-number\">1</span>]+(*path)[<span class=\"hljs-number\">2</span>] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// 后面的append()操作是深拷贝，所以这里使用temp保存path的值</span><br>            temp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(*path))  <br>\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, *path)<br>\t\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> *result &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> reflect.DeepEqual(temp, v) &#123;  <span class=\"hljs-comment\">// 使用反射判断temp是否在result中</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t\t*result = <span class=\"hljs-built_in\">append</span>(*result, temp)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := index; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, nums[i])<br>\t\tbackTracking(nums, i+<span class=\"hljs-number\">1</span>, result, path)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br><br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">threeSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tsort.Ints(nums)<br>\tbackTracking(nums, <span class=\"hljs-number\">0</span>, &amp;result, &amp;path)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果你猜超时没有，肯定还是超时了。</p>\n<p>这里我遇到了好多问题，首先是发现了<code>result = append(result, temp)</code>，这里<code>append</code>方法实际上是浅拷贝！也就是说以后<code>temp</code>的值，<code>result</code>也会变化。这也是我为什么用一个临时变量<code>temp</code>来保存<code>path</code>，而且使用的是<code>copy()</code>。</p>\n<p>要判断<code>temp</code>是否存在于<code>result</code>中，那么则需要使用反射，进行深度判断<code>reflect.DeepEqual(temp, v)</code>。</p>\n<h5 id=\"遇到最头大的问题！！！！！！\"><a href=\"#遇到最头大的问题！！！！！！\" class=\"headerlink\" title=\"遇到最头大的问题！！！！！！\"></a>遇到最头大的问题！！！！！！</h5><p>以前用别的语言写回溯，很自然的使用了全局变量，结果在Go语言中发生了奇妙的事情。请看截图</p>\n<img src=\"../images/day07/使用全局变量leetcode.png\" alt=\"使用全局变量leetcode\" style=\"zoom:80%;\" />\n\n<p>明明输入的只有0和1，怎么会输出了2。而且这个测试用例这么眼熟呢，没错这就是给出的测试用例Case1的答案。放到Goland里面明明是正确答案！到这里就变了，说明全局变量出现了问题。解决这个问题有两个想法：</p>\n<ul>\n<li>查找有没有类似C++中的<code>delete</code>，使用完变量之后释放掉。发现并没有。而且使用完变量应该在<code>threeSum()</code>之外了，函数内释放就没有结果了。</li>\n<li><code>threeSum()</code>定义变量，使用指针传值。</li>\n</ul>\n<p>当然，第二种才是正解。改完之后就是上面放出来的代码了，超时。</p>\n<h4 id=\"方法二：使用哈希\"><a href=\"#方法二：使用哈希\" class=\"headerlink\" title=\"方法二：使用哈希\"></a>方法二：使用哈希</h4><p>将<code>nums</code>进行排序，并哈希处理，定义变量<code>map1</code>用作哈希表，<code>nums</code>中的每个元素做key，value则是每个元素出现的次数。</p>\n<p>使用两层for循环之后，判断<code>0-nums[i]-nums[j]</code>是否存在。若存在还需要判断每个数字出现的次数是否合法（例如<code>nums = [-1,0,1,2,-1,-4]</code>，如果找到一个组合是<code>[2, -4, 2]</code>则需要舍弃。之所以会出现这样，是因为两层for会找到<code>2</code>和<code>-4</code>，而<code>0-nums[i]-nums[j]</code>会找到重复的2）</p>\n<p>找到组合之后，对组合再排序，判断<code>path</code>是否在<code>result</code>中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">threeSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\tsort.Ints(nums)<br>\tmap1 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\tmap1[v]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(nums); j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> v, ok := map1[-nums[i]-nums[j]]; ok &#123;<br>\t\t\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;nums[i], nums[j], -nums[i] - nums[j]&#125;<br>\t\t\t\tsort.Ints(temp)<br>\t\t\t\tcount := <span class=\"hljs-number\">0</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> nums[i] == nums[j] || nums[j] == -nums[i]-nums[j] || nums[i] == -nums[i]-nums[j] &#123;<br>\t\t\t\t\tcount = <span class=\"hljs-number\">2</span><br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> nums[i] == nums[j] &amp;&amp; nums[j] == -nums[i]-nums[j] &#123;<br>\t\t\t\t\tcount = <span class=\"hljs-number\">3</span><br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> v &gt;= count &#123;<br>\t\t\t\t\tflag := <span class=\"hljs-literal\">true</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">for</span> _, value := <span class=\"hljs-keyword\">range</span> result &#123;<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">if</span> reflect.DeepEqual(value, temp) &#123;<br>\t\t\t\t\t\t\tflag = <span class=\"hljs-literal\">false</span><br>\t\t\t\t\t\t&#125;<br>\t\t\t\t\t&#125;<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> flag &#123;<br>\t\t\t\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t\t\t\t\t&#125;<br><br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果你猜超时没有，肯定还是超时了。</p>\n<p>好了，我投降了，想不到好方法了。去看卡哥视频了。</p>\n<h3 id=\"卡哥解法\"><a href=\"#卡哥解法\" class=\"headerlink\" title=\"卡哥解法\"></a>卡哥解法</h3><p><font color=\"red\">这道题不适合用哈希表做</font>。双指针我想了一下也没有太想明白，主要还是去重操作。看了视频讲解很清楚了</p>\n<ol>\n<li><p>数组排序，方便后序操作</p>\n</li>\n<li><p>先找第一个数，使用一层<code>for</code>，指针为<code>i</code></p>\n</li>\n<li><p>找第二个、第三个数。分别用指针<code>left = i + 1</code>，<code>right = len(nums) - 1</code></p>\n</li>\n<li><p>剪枝：如果<code>i&gt;0</code>，那么直接<code>return</code>，说明后续不可能再有等于0的三元组了</p>\n</li>\n<li><p>判断<code>nums[i] + nums[left] + nums[right]</code>和0的情况</p>\n<ul>\n<li><code>nums[i] + nums[left] + nums[right] &gt; 0    right--</code></li>\n<li><code>nums[i] + nums[left] + nums[right] &lt; 0    left++</code></li>\n<li><code>nums[i] + nums[left] + nums[right] == 0</code> <ul>\n<li>这个三元组放入到结果中，但是仍然要相向前进。对于<code>left</code>，如果如果一致前进得到的<code>nums[left]==nums[left+1]</code>，说明该三元组已经存在过了（<code>0, -1, -1, 1 ,1</code>）。<code>right</code>同理，<code>nums[right] == nums[right - 1]</code></li>\n<li>找到各自不同的数<code>nums[left+1]</code>和<code>nums[right-1]</code>，再前进一个（<code>0, -1, -1, -2, 2, 1, 1</code>）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>return result</code></p>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">threeSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\tsort.Ints(nums)<br>\tresult := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> nums[i] &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> result<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i] == nums[i<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>\t\tleft := i + <span class=\"hljs-number\">1</span><br>\t\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[i]+nums[left]+nums[right] &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\tright--<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[i]+nums[left]+nums[right] &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\tleft++<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, []<span class=\"hljs-type\">int</span>&#123;nums[i], nums[left], nums[right]&#125;)<br>\t\t\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &amp;&amp; nums[left] == nums[left+<span class=\"hljs-number\">1</span>] &#123;<br>\t\t\t\t\tleft++<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &amp;&amp; nums[right] == nums[right<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t\t\t\tright--<br>\t\t\t\t&#125;<br>\t\t\t\tleft++<br>\t\t\t\tright--<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>虽然这个代码AC了，但是毫无成就感。现在是9月27日凌晨2:53，还有一道题。继续</p>\n<h2 id=\"18-四数之和\"><a href=\"#18-四数之和\" class=\"headerlink\" title=\"18. 四数之和\"></a>18. 四数之和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/4sum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0018.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1DS4y147US\">难在去重和剪枝！| LeetCode：18. 四数之和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>算法同上题，只不过这次要先确定两个数，然后用<code>left</code>和<code>right</code>指针找第三个第四个数。有几点不同：</p>\n<ul>\n<li>这里不是与0作比较，而是<code>target</code>，不可以<code>nums[i] &gt; target</code>之后就<code>break</code>，因为如果有一堆负数相加一定出现越加越小，使得等于<code>target</code></li>\n<li>数组长度可能小于4，需要额外判断</li>\n<li>剪枝<code>i&gt;0</code>开始，<code>j&gt;i+1</code>开始，<code>j</code>永远在<code>i</code>后一位</li>\n</ul>\n<p>领悟了上一道题，这一题不难了</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fourSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) &lt; <span class=\"hljs-number\">4</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tsort.Ints(nums)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-3</span>; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i] == nums[i<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-2</span>; j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> j &gt; i+<span class=\"hljs-number\">1</span> &amp;&amp; nums[j] == nums[j<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125;<br>\t\t\tleft := j + <span class=\"hljs-number\">1</span><br>\t\t\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> nums[i]+nums[j]+nums[left]+nums[right] &lt; target &#123;<br>\t\t\t\t\tleft++<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[i]+nums[j]+nums[left]+nums[right] &gt; target &#123;<br>\t\t\t\t\tright--<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, []<span class=\"hljs-type\">int</span>&#123;nums[i], nums[j], nums[left], nums[right]&#125;)<br>\t\t\t\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &amp;&amp; nums[left] == nums[left+<span class=\"hljs-number\">1</span>] &#123;<br>\t\t\t\t\t\tleft++<br>\t\t\t\t\t&#125;<br>\t\t\t\t\t<span class=\"hljs-keyword\">for</span> left &lt; right &amp;&amp; nums[right] == nums[right<span class=\"hljs-number\">-1</span>] &#123;<br>\t\t\t\t\t\tright--<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tleft++<br>\t\t\t\t\tright--<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>Go的底层有了很多认识，是以前做题或者写项目时候意识不到的。尤其是浅拷贝与深拷贝，大概找到规律了，几乎都是浅拷贝，如果想要深拷贝一定要用<code>copy()</code></li>\n<li>由于Go的特性，Go的全局变量不可以在leetcode使用，需要指针传值</li>\n<li>晚安，准备睡觉了，3:20了，一觉起来是新的题，字符串要学KMP算法什么的了。</li>\n</ul>\n"},{"title":"代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。","abbrlink":"a8d0ca77","date":"2023-10-01T16:36:27.000Z","_content":"\n# 代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。\n\n## 232.用栈实现队列\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/implement-queue-using-stacks/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html)\n>\n> 视频讲解：[栈的基本操作！ | LeetCode：232.用栈实现队列](https://www.bilibili.com/video/BV1nY4y1w7VC)\n>\n> 状态：AC\n\n### 思路\n\n- 初始化两个栈，一个作为主栈`Stack1`、一个作为副栈`Stack2`\n- 主栈存放数据、副栈临时放数据\n- `Push`操作：将数据放入`Stack1`中\n- `Pop`操作：\n    - 将`Stack1`中所有元素退栈，并入栈`Stack2`。\n    - 将`Stack2`的栈顶元素出栈\n    - 将`Stack2`中所有元素退栈，并入栈`Stack1`。\n- `Peek`操作：\n    - 将`Stack1`中所有元素退栈，并入栈`Stack2`。\n    - 取`Stack2`的栈顶元素\n    - 将`Stack2`中所有元素退栈，并入栈`Stack1`。\n- `Empty`操作：\n    - 查看`Stack1`是否为空即可\n\n### 代码\n\n``` go\ntype MyQueue struct {\n\tStack1 arraystack.Stack\n\tStack2 arraystack.Stack\n}\n\nfunc Constructor() MyQueue {\n\treturn MyQueue{\n\t\tStack1: *arraystack.New(),\n\t\tStack2: *arraystack.New(),\n\t}\n}\n\nfunc (this *MyQueue) Push(x int) {\n\tthis.Stack1.Push(x)\n}\n\nfunc (this *MyQueue) Pop() int {\n\tfor !this.Stack1.Empty() {\n\t\tif v, ok := this.Stack1.Pop(); ok {\n\t\t\tthis.Stack2.Push(v)\n\t\t}\n\t}\n\tvalue, _ := this.Stack2.Pop()\n\tfor !this.Stack2.Empty() {\n\t\tif v, ok := this.Stack2.Pop(); ok {\n\t\t\tthis.Stack1.Push(v)\n\t\t}\n\t}\n\treturn value.(int)\n}\n\nfunc (this *MyQueue) Peek() int {\n\tfor !this.Stack1.Empty() {\n\t\tif v, ok := this.Stack1.Pop(); ok {\n\t\t\tthis.Stack2.Push(v)\n\t\t}\n\t}\n\tvalue, _ := this.Stack2.Peek()\n\tfor !this.Stack2.Empty() {\n\t\tif v, ok := this.Stack2.Pop(); ok {\n\t\t\tthis.Stack1.Push(v)\n\t\t}\n\t}\n\treturn value.(int)\n}\n\nfunc (this *MyQueue) Empty() bool {\n\treturn this.Stack1.Empty()\n}\n```\n\n## 225. 用队列实现栈\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/implement-stack-using-queues/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html)\n>\n> 视频讲解：[队列的基本操作！ | LeetCode：225. 用队列实现栈](https://www.bilibili.com/video/BV1Fd4y1K7sm)\n>\n> 状态：AC\n\n### 思路\n\n- 初始化一个队列`Queue1`\n- 主栈存放数据、副栈临时放数据\n- `Push`操作：将数据入队`Queue1`\n- `Pop`操作：\n    - 将`Queue1`前`n-1`个元素出队，随后入队在队尾\n    - 最后一个元素出队，返回\n- `Top`操作：\n    - 将`Queue`每个出队，随后入队在队尾\n    - 如果是最后一个元素出队，保存该值，并入队\n    - 返回那个值\n- `Empty`操作：\n    - 查看`Queue1`是否为空即可\n\n### 代码\n\n``` go\ntype MyStack struct {\n\tQueue1 arrayqueue.Queue\n}\n\nfunc Constructor() MyStack {\n\treturn MyStack{\n\t\tQueue1: *arrayqueue.New(),\n\t}\n}\n\nfunc (this *MyStack) Push(x int) {\n\tthis.Queue1.Enqueue(x)\n}\n\nfunc (this *MyStack) Pop() int {\n\tfor i := 0; i < this.Queue1.Size()-1; i++ {\n\t\tv, _ := this.Queue1.Dequeue()\n\t\tvalue := v.(int)\n\t\tthis.Queue1.Enqueue(value)\n\t}\n\tv, _ := this.Queue1.Dequeue()\n\tvalue := v.(int)\n\treturn value\n}\n\nfunc (this *MyStack) Top() int {\n\ttop := 0\n\tfor i := 0; i < this.Queue1.Size(); i++ {\n\t\tv, _ := this.Queue1.Dequeue()\n\t\tvalue := v.(int)\n\t\tthis.Queue1.Enqueue(value)\n\t\tif i == this.Queue1.Size()-1 {\n\t\t\ttop = value\n\t\t}\n\t}\n\treturn top\n}\n\nfunc (this *MyStack) Empty() bool {\n\treturn this.Queue1.Empty()\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n * param_3 := obj.Top();\n * param_4 := obj.Empty();\n */\n\n```\n\n","source":"_posts/day10.md","raw":"---\ntitle: 代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 栈与队列\ncategories: 刷题\nabbrlink: a8d0ca77\ndate: 2023-10-02 00:36:27\n---\n\n# 代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。\n\n## 232.用栈实现队列\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/implement-queue-using-stacks/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html)\n>\n> 视频讲解：[栈的基本操作！ | LeetCode：232.用栈实现队列](https://www.bilibili.com/video/BV1nY4y1w7VC)\n>\n> 状态：AC\n\n### 思路\n\n- 初始化两个栈，一个作为主栈`Stack1`、一个作为副栈`Stack2`\n- 主栈存放数据、副栈临时放数据\n- `Push`操作：将数据放入`Stack1`中\n- `Pop`操作：\n    - 将`Stack1`中所有元素退栈，并入栈`Stack2`。\n    - 将`Stack2`的栈顶元素出栈\n    - 将`Stack2`中所有元素退栈，并入栈`Stack1`。\n- `Peek`操作：\n    - 将`Stack1`中所有元素退栈，并入栈`Stack2`。\n    - 取`Stack2`的栈顶元素\n    - 将`Stack2`中所有元素退栈，并入栈`Stack1`。\n- `Empty`操作：\n    - 查看`Stack1`是否为空即可\n\n### 代码\n\n``` go\ntype MyQueue struct {\n\tStack1 arraystack.Stack\n\tStack2 arraystack.Stack\n}\n\nfunc Constructor() MyQueue {\n\treturn MyQueue{\n\t\tStack1: *arraystack.New(),\n\t\tStack2: *arraystack.New(),\n\t}\n}\n\nfunc (this *MyQueue) Push(x int) {\n\tthis.Stack1.Push(x)\n}\n\nfunc (this *MyQueue) Pop() int {\n\tfor !this.Stack1.Empty() {\n\t\tif v, ok := this.Stack1.Pop(); ok {\n\t\t\tthis.Stack2.Push(v)\n\t\t}\n\t}\n\tvalue, _ := this.Stack2.Pop()\n\tfor !this.Stack2.Empty() {\n\t\tif v, ok := this.Stack2.Pop(); ok {\n\t\t\tthis.Stack1.Push(v)\n\t\t}\n\t}\n\treturn value.(int)\n}\n\nfunc (this *MyQueue) Peek() int {\n\tfor !this.Stack1.Empty() {\n\t\tif v, ok := this.Stack1.Pop(); ok {\n\t\t\tthis.Stack2.Push(v)\n\t\t}\n\t}\n\tvalue, _ := this.Stack2.Peek()\n\tfor !this.Stack2.Empty() {\n\t\tif v, ok := this.Stack2.Pop(); ok {\n\t\t\tthis.Stack1.Push(v)\n\t\t}\n\t}\n\treturn value.(int)\n}\n\nfunc (this *MyQueue) Empty() bool {\n\treturn this.Stack1.Empty()\n}\n```\n\n## 225. 用队列实现栈\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/implement-stack-using-queues/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html)\n>\n> 视频讲解：[队列的基本操作！ | LeetCode：225. 用队列实现栈](https://www.bilibili.com/video/BV1Fd4y1K7sm)\n>\n> 状态：AC\n\n### 思路\n\n- 初始化一个队列`Queue1`\n- 主栈存放数据、副栈临时放数据\n- `Push`操作：将数据入队`Queue1`\n- `Pop`操作：\n    - 将`Queue1`前`n-1`个元素出队，随后入队在队尾\n    - 最后一个元素出队，返回\n- `Top`操作：\n    - 将`Queue`每个出队，随后入队在队尾\n    - 如果是最后一个元素出队，保存该值，并入队\n    - 返回那个值\n- `Empty`操作：\n    - 查看`Queue1`是否为空即可\n\n### 代码\n\n``` go\ntype MyStack struct {\n\tQueue1 arrayqueue.Queue\n}\n\nfunc Constructor() MyStack {\n\treturn MyStack{\n\t\tQueue1: *arrayqueue.New(),\n\t}\n}\n\nfunc (this *MyStack) Push(x int) {\n\tthis.Queue1.Enqueue(x)\n}\n\nfunc (this *MyStack) Pop() int {\n\tfor i := 0; i < this.Queue1.Size()-1; i++ {\n\t\tv, _ := this.Queue1.Dequeue()\n\t\tvalue := v.(int)\n\t\tthis.Queue1.Enqueue(value)\n\t}\n\tv, _ := this.Queue1.Dequeue()\n\tvalue := v.(int)\n\treturn value\n}\n\nfunc (this *MyStack) Top() int {\n\ttop := 0\n\tfor i := 0; i < this.Queue1.Size(); i++ {\n\t\tv, _ := this.Queue1.Dequeue()\n\t\tvalue := v.(int)\n\t\tthis.Queue1.Enqueue(value)\n\t\tif i == this.Queue1.Size()-1 {\n\t\t\ttop = value\n\t\t}\n\t}\n\treturn top\n}\n\nfunc (this *MyStack) Empty() bool {\n\treturn this.Queue1.Empty()\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n * param_3 := obj.Top();\n * param_4 := obj.Empty();\n */\n\n```\n\n","slug":"day10","published":1,"updated":"2023-10-24T19:34:28.354Z","_id":"cln7q7alx000kvswh2zt2gd2z","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第十天-232-用栈实现队列、225-用队列实现栈。\"><a href=\"#代码随想录算法训练营第十天-232-用栈实现队列、225-用队列实现栈。\" class=\"headerlink\" title=\"代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。\"></a>代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。</h1><h2 id=\"232-用栈实现队列\"><a href=\"#232-用栈实现队列\" class=\"headerlink\" title=\"232.用栈实现队列\"></a>232.用栈实现队列</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/implement-queue-using-stacks/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1nY4y1w7VC\">栈的基本操作！ | LeetCode：232.用栈实现队列</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>初始化两个栈，一个作为主栈<code>Stack1</code>、一个作为副栈<code>Stack2</code></li>\n<li>主栈存放数据、副栈临时放数据</li>\n<li><code>Push</code>操作：将数据放入<code>Stack1</code>中</li>\n<li><code>Pop</code>操作：<ul>\n<li>将<code>Stack1</code>中所有元素退栈，并入栈<code>Stack2</code>。</li>\n<li>将<code>Stack2</code>的栈顶元素出栈</li>\n<li>将<code>Stack2</code>中所有元素退栈，并入栈<code>Stack1</code>。</li>\n</ul>\n</li>\n<li><code>Peek</code>操作：<ul>\n<li>将<code>Stack1</code>中所有元素退栈，并入栈<code>Stack2</code>。</li>\n<li>取<code>Stack2</code>的栈顶元素</li>\n<li>将<code>Stack2</code>中所有元素退栈，并入栈<code>Stack1</code>。</li>\n</ul>\n</li>\n<li><code>Empty</code>操作：<ul>\n<li>查看<code>Stack1</code>是否为空即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> MyQueue <span class=\"hljs-keyword\">struct</span> &#123;<br>\tStack1 arraystack.Stack<br>\tStack2 arraystack.Stack<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> MyQueue &#123;<br>\t<span class=\"hljs-keyword\">return</span> MyQueue&#123;<br>\t\tStack1: *arraystack.New(),<br>\t\tStack2: *arraystack.New(),<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyQueue)</span></span> Push(x <span class=\"hljs-type\">int</span>) &#123;<br>\tthis.Stack1.Push(x)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyQueue)</span></span> Pop() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> !this.Stack1.Empty() &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v, ok := this.Stack1.Pop(); ok &#123;<br>\t\t\tthis.Stack2.Push(v)<br>\t\t&#125;<br>\t&#125;<br>\tvalue, _ := this.Stack2.Pop()<br>\t<span class=\"hljs-keyword\">for</span> !this.Stack2.Empty() &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v, ok := this.Stack2.Pop(); ok &#123;<br>\t\t\tthis.Stack1.Push(v)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> value.(<span class=\"hljs-type\">int</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyQueue)</span></span> Peek() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> !this.Stack1.Empty() &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v, ok := this.Stack1.Pop(); ok &#123;<br>\t\t\tthis.Stack2.Push(v)<br>\t\t&#125;<br>\t&#125;<br>\tvalue, _ := this.Stack2.Peek()<br>\t<span class=\"hljs-keyword\">for</span> !this.Stack2.Empty() &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v, ok := this.Stack2.Pop(); ok &#123;<br>\t\t\tthis.Stack1.Push(v)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> value.(<span class=\"hljs-type\">int</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyQueue)</span></span> Empty() <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> this.Stack1.Empty()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"225-用队列实现栈\"><a href=\"#225-用队列实现栈\" class=\"headerlink\" title=\"225. 用队列实现栈\"></a>225. 用队列实现栈</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/implement-stack-using-queues/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1Fd4y1K7sm\">队列的基本操作！ | LeetCode：225. 用队列实现栈</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>初始化一个队列<code>Queue1</code></li>\n<li>主栈存放数据、副栈临时放数据</li>\n<li><code>Push</code>操作：将数据入队<code>Queue1</code></li>\n<li><code>Pop</code>操作：<ul>\n<li>将<code>Queue1</code>前<code>n-1</code>个元素出队，随后入队在队尾</li>\n<li>最后一个元素出队，返回</li>\n</ul>\n</li>\n<li><code>Top</code>操作：<ul>\n<li>将<code>Queue</code>每个出队，随后入队在队尾</li>\n<li>如果是最后一个元素出队，保存该值，并入队</li>\n<li>返回那个值</li>\n</ul>\n</li>\n<li><code>Empty</code>操作：<ul>\n<li>查看<code>Queue1</code>是否为空即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> MyStack <span class=\"hljs-keyword\">struct</span> &#123;<br>\tQueue1 arrayqueue.Queue<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> MyStack &#123;<br>\t<span class=\"hljs-keyword\">return</span> MyStack&#123;<br>\t\tQueue1: *arrayqueue.New(),<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyStack)</span></span> Push(x <span class=\"hljs-type\">int</span>) &#123;<br>\tthis.Queue1.Enqueue(x)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyStack)</span></span> Pop() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; this.Queue1.Size()<span class=\"hljs-number\">-1</span>; i++ &#123;<br>\t\tv, _ := this.Queue1.Dequeue()<br>\t\tvalue := v.(<span class=\"hljs-type\">int</span>)<br>\t\tthis.Queue1.Enqueue(value)<br>\t&#125;<br>\tv, _ := this.Queue1.Dequeue()<br>\tvalue := v.(<span class=\"hljs-type\">int</span>)<br>\t<span class=\"hljs-keyword\">return</span> value<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyStack)</span></span> Top() <span class=\"hljs-type\">int</span> &#123;<br>\ttop := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; this.Queue1.Size(); i++ &#123;<br>\t\tv, _ := this.Queue1.Dequeue()<br>\t\tvalue := v.(<span class=\"hljs-type\">int</span>)<br>\t\tthis.Queue1.Enqueue(value)<br>\t\t<span class=\"hljs-keyword\">if</span> i == this.Queue1.Size()<span class=\"hljs-number\">-1</span> &#123;<br>\t\t\ttop = value<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> top<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyStack)</span></span> Empty() <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> this.Queue1.Empty()<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Your MyStack object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"> * obj := Constructor();</span><br><span class=\"hljs-comment\"> * obj.Push(x);</span><br><span class=\"hljs-comment\"> * param_2 := obj.Pop();</span><br><span class=\"hljs-comment\"> * param_3 := obj.Top();</span><br><span class=\"hljs-comment\"> * param_4 := obj.Empty();</span><br><span class=\"hljs-comment\"> */</span><br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第十天-232-用栈实现队列、225-用队列实现栈。\"><a href=\"#代码随想录算法训练营第十天-232-用栈实现队列、225-用队列实现栈。\" class=\"headerlink\" title=\"代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。\"></a>代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。</h1><h2 id=\"232-用栈实现队列\"><a href=\"#232-用栈实现队列\" class=\"headerlink\" title=\"232.用栈实现队列\"></a>232.用栈实现队列</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/implement-queue-using-stacks/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1nY4y1w7VC\">栈的基本操作！ | LeetCode：232.用栈实现队列</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>初始化两个栈，一个作为主栈<code>Stack1</code>、一个作为副栈<code>Stack2</code></li>\n<li>主栈存放数据、副栈临时放数据</li>\n<li><code>Push</code>操作：将数据放入<code>Stack1</code>中</li>\n<li><code>Pop</code>操作：<ul>\n<li>将<code>Stack1</code>中所有元素退栈，并入栈<code>Stack2</code>。</li>\n<li>将<code>Stack2</code>的栈顶元素出栈</li>\n<li>将<code>Stack2</code>中所有元素退栈，并入栈<code>Stack1</code>。</li>\n</ul>\n</li>\n<li><code>Peek</code>操作：<ul>\n<li>将<code>Stack1</code>中所有元素退栈，并入栈<code>Stack2</code>。</li>\n<li>取<code>Stack2</code>的栈顶元素</li>\n<li>将<code>Stack2</code>中所有元素退栈，并入栈<code>Stack1</code>。</li>\n</ul>\n</li>\n<li><code>Empty</code>操作：<ul>\n<li>查看<code>Stack1</code>是否为空即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> MyQueue <span class=\"hljs-keyword\">struct</span> &#123;<br>\tStack1 arraystack.Stack<br>\tStack2 arraystack.Stack<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> MyQueue &#123;<br>\t<span class=\"hljs-keyword\">return</span> MyQueue&#123;<br>\t\tStack1: *arraystack.New(),<br>\t\tStack2: *arraystack.New(),<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyQueue)</span></span> Push(x <span class=\"hljs-type\">int</span>) &#123;<br>\tthis.Stack1.Push(x)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyQueue)</span></span> Pop() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> !this.Stack1.Empty() &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v, ok := this.Stack1.Pop(); ok &#123;<br>\t\t\tthis.Stack2.Push(v)<br>\t\t&#125;<br>\t&#125;<br>\tvalue, _ := this.Stack2.Pop()<br>\t<span class=\"hljs-keyword\">for</span> !this.Stack2.Empty() &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v, ok := this.Stack2.Pop(); ok &#123;<br>\t\t\tthis.Stack1.Push(v)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> value.(<span class=\"hljs-type\">int</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyQueue)</span></span> Peek() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> !this.Stack1.Empty() &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v, ok := this.Stack1.Pop(); ok &#123;<br>\t\t\tthis.Stack2.Push(v)<br>\t\t&#125;<br>\t&#125;<br>\tvalue, _ := this.Stack2.Peek()<br>\t<span class=\"hljs-keyword\">for</span> !this.Stack2.Empty() &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v, ok := this.Stack2.Pop(); ok &#123;<br>\t\t\tthis.Stack1.Push(v)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> value.(<span class=\"hljs-type\">int</span>)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyQueue)</span></span> Empty() <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> this.Stack1.Empty()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"225-用队列实现栈\"><a href=\"#225-用队列实现栈\" class=\"headerlink\" title=\"225. 用队列实现栈\"></a>225. 用队列实现栈</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/implement-stack-using-queues/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1Fd4y1K7sm\">队列的基本操作！ | LeetCode：225. 用队列实现栈</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>初始化一个队列<code>Queue1</code></li>\n<li>主栈存放数据、副栈临时放数据</li>\n<li><code>Push</code>操作：将数据入队<code>Queue1</code></li>\n<li><code>Pop</code>操作：<ul>\n<li>将<code>Queue1</code>前<code>n-1</code>个元素出队，随后入队在队尾</li>\n<li>最后一个元素出队，返回</li>\n</ul>\n</li>\n<li><code>Top</code>操作：<ul>\n<li>将<code>Queue</code>每个出队，随后入队在队尾</li>\n<li>如果是最后一个元素出队，保存该值，并入队</li>\n<li>返回那个值</li>\n</ul>\n</li>\n<li><code>Empty</code>操作：<ul>\n<li>查看<code>Queue1</code>是否为空即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> MyStack <span class=\"hljs-keyword\">struct</span> &#123;<br>\tQueue1 arrayqueue.Queue<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> MyStack &#123;<br>\t<span class=\"hljs-keyword\">return</span> MyStack&#123;<br>\t\tQueue1: *arrayqueue.New(),<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyStack)</span></span> Push(x <span class=\"hljs-type\">int</span>) &#123;<br>\tthis.Queue1.Enqueue(x)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyStack)</span></span> Pop() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; this.Queue1.Size()<span class=\"hljs-number\">-1</span>; i++ &#123;<br>\t\tv, _ := this.Queue1.Dequeue()<br>\t\tvalue := v.(<span class=\"hljs-type\">int</span>)<br>\t\tthis.Queue1.Enqueue(value)<br>\t&#125;<br>\tv, _ := this.Queue1.Dequeue()<br>\tvalue := v.(<span class=\"hljs-type\">int</span>)<br>\t<span class=\"hljs-keyword\">return</span> value<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyStack)</span></span> Top() <span class=\"hljs-type\">int</span> &#123;<br>\ttop := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; this.Queue1.Size(); i++ &#123;<br>\t\tv, _ := this.Queue1.Dequeue()<br>\t\tvalue := v.(<span class=\"hljs-type\">int</span>)<br>\t\tthis.Queue1.Enqueue(value)<br>\t\t<span class=\"hljs-keyword\">if</span> i == this.Queue1.Size()<span class=\"hljs-number\">-1</span> &#123;<br>\t\t\ttop = value<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> top<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyStack)</span></span> Empty() <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> this.Queue1.Empty()<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Your MyStack object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"> * obj := Constructor();</span><br><span class=\"hljs-comment\"> * obj.Push(x);</span><br><span class=\"hljs-comment\"> * param_2 := obj.Pop();</span><br><span class=\"hljs-comment\"> * param_3 := obj.Top();</span><br><span class=\"hljs-comment\"> * param_4 := obj.Empty();</span><br><span class=\"hljs-comment\"> */</span><br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。","abbrlink":"bdbe1e6e","date":"2023-10-03T11:58:17.000Z","_content":"\n# 代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。\n\n## 20.有效的括号\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/valid-parentheses/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html)\n>\n> 视频讲解：[栈的拿手好戏！| LeetCode：20. 有效的括号](https://www.bilibili.com/video/BV1AF411w78g)\n>\n> 状态：AC\n\n### 思路\n\n题目保证了输入的字符串只有括号。遇到左括号入栈，遇到右括号出栈，但是要比较出栈的元素和当前的右括号是否匹配，不匹配直接`return false`。最终判断栈是否为空即可。\n\n### 代码\n\n``` go\nfunc isValid(s string) bool {\n\tstack := arraystack.New()\n\tfor _, v := range s {\n\t\tswitch v {\n\t\tcase '(', '[', '{':\n\t\t\tstack.Push(v)\n\t\tcase ')':\n\t\t\ttemp, _ := stack.Pop()\n\t\t\tif temp == '(' {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\tcase ']':\n\t\t\ttemp, _ := stack.Pop()\n\t\t\tif temp == '[' {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\tcase '}':\n\t\t\ttemp, _ := stack.Pop()\n\t\t\tif temp == '{' {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.Empty()\n}\n\n```\n\n## 1047.删除字符串中的所有相邻重复项\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.html)\n>\n> 视频讲解：[栈的好戏还要继续！| LeetCode：1047. 删除字符串中的所有相邻重复项](https://www.bilibili.com/video/BV12a411P7mw)\n>\n> 状态：AC\n\n### 思路\n\n将每个元素与栈顶元素进行比较（前提是栈非空、如果空直接入栈即可），比较相等元素出栈。\n\n### 代码\n\n``` go\nfunc removeDuplicates(s string) string {\n\tif len(s) == 1 {\n\t\treturn s\n\t}\n\tbyteString := []rune(s)\n\tstack := arraystack.New()\n\tstack.Push(byteString[0])\n\n\tfor i := 1; i < len(byteString); i++ {\n\t\ttemp, _ := stack.Peek()\n\t\tif temp == byteString[i] {\n\t\t\tstack.Pop()\n\t\t} else {\n\t\t\tstack.Push(byteString[i])\n\t\t}\n\t}\n\tvar newByte []rune\n\tlength := stack.Size()\n\tfor i := 0; i < length; i++ {\n\t\ttemp, _ := stack.Pop()\n\t\ttemp1 := temp.(rune)\n\t\tnewByte = append(newByte, temp1)\n\t}\n\tfor i := 0; i < len(newByte)/2; i++ {\n\t\tnewByte[i], newByte[len(newByte)-1-i] = newByte[len(newByte)-1-i], newByte[i]\n\t}\n\treturn string(newByte)\n}\n```\n\n此处用的是一个真正意义上的数据结构的栈，存储的是单个字符，写起来还是很长，看了题解之后发现只用字符数组即可，改正后代码\n\n``` go\nfunc removeDuplicates(s string) string {\n\tvar stack []rune\n\tfor _, v := range s {\n\t\tif len(stack) > 0 && stack[len(stack)-1] == v {\n\t\t\tstack = stack[:len(stack)-1]\n\t\t} else {\n\t\t\tstack = append(stack, v)\n\t\t}\n\t}\n\treturn string(stack)\n}\n```\n\n## 150.逆波兰表达式\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/evaluate-reverse-polish-notation/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.html)\n>\n> 视频讲解：栈的最后表演！ | LeetCode：150. 逆波兰表达式求值](https://www.bilibili.com/video/BV1kd4y1o7on)\n>\n> 状态：AC\n\n### 思路\n\n明白题意之后，发现每次到运算符时候需要将前面两个数进行计算，如：`[\"a\", \"b\", \"+\"]`运算结果是`a+b`。不难想到要使用栈。\n\n先将字符串数组转换为数字，可以成功转换则入栈，否则出栈两个元素，并且将两个元素相加之后再重新入栈。\n\n### 代码\n\n``` go\n\nfunc EvalRPN(tokens []string) int {\n\tstack := arraystack.New()\n\tfor _, v := range tokens {\n\t\tnum, err := strconv.Atoi(v)\n\t\tif err == nil {  // 如果成功转换数字\n\t\t\tstack.Push(num)\n\t\t} else {  // 否则计算后重新入栈\n\t\t\tb, _ := stack.Pop()\n\t\t\ta, _ := stack.Pop()\n\t\t\tif v == \"+\" {\n\t\t\t\tstack.Push(a.(int) + b.(int))\n\t\t\t} else if v == \"-\" {\n\t\t\t\tstack.Push(a.(int) - b.(int))\n\t\t\t} else if v == \"*\" {\n\t\t\t\tstack.Push(a.(int) * b.(int))\n\t\t\t} else if v == \"/\" {\n\t\t\t\tstack.Push(a.(int) / b.(int))\n\t\t\t}\n\t\t}\n\t}\n\tresult, _ := stack.Peek()  // 此刻的栈顶为结果\n\treturn result.(int)\n}\n\n```\n\n","source":"_posts/day11.md","raw":"---\ntitle: 代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 栈与队列\ncategories: 刷题\nabbrlink: bdbe1e6e\ndate: 2023-10-03 19:58:17\n---\n\n# 代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。\n\n## 20.有效的括号\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/valid-parentheses/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html)\n>\n> 视频讲解：[栈的拿手好戏！| LeetCode：20. 有效的括号](https://www.bilibili.com/video/BV1AF411w78g)\n>\n> 状态：AC\n\n### 思路\n\n题目保证了输入的字符串只有括号。遇到左括号入栈，遇到右括号出栈，但是要比较出栈的元素和当前的右括号是否匹配，不匹配直接`return false`。最终判断栈是否为空即可。\n\n### 代码\n\n``` go\nfunc isValid(s string) bool {\n\tstack := arraystack.New()\n\tfor _, v := range s {\n\t\tswitch v {\n\t\tcase '(', '[', '{':\n\t\t\tstack.Push(v)\n\t\tcase ')':\n\t\t\ttemp, _ := stack.Pop()\n\t\t\tif temp == '(' {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\tcase ']':\n\t\t\ttemp, _ := stack.Pop()\n\t\t\tif temp == '[' {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\tcase '}':\n\t\t\ttemp, _ := stack.Pop()\n\t\t\tif temp == '{' {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.Empty()\n}\n\n```\n\n## 1047.删除字符串中的所有相邻重复项\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.html)\n>\n> 视频讲解：[栈的好戏还要继续！| LeetCode：1047. 删除字符串中的所有相邻重复项](https://www.bilibili.com/video/BV12a411P7mw)\n>\n> 状态：AC\n\n### 思路\n\n将每个元素与栈顶元素进行比较（前提是栈非空、如果空直接入栈即可），比较相等元素出栈。\n\n### 代码\n\n``` go\nfunc removeDuplicates(s string) string {\n\tif len(s) == 1 {\n\t\treturn s\n\t}\n\tbyteString := []rune(s)\n\tstack := arraystack.New()\n\tstack.Push(byteString[0])\n\n\tfor i := 1; i < len(byteString); i++ {\n\t\ttemp, _ := stack.Peek()\n\t\tif temp == byteString[i] {\n\t\t\tstack.Pop()\n\t\t} else {\n\t\t\tstack.Push(byteString[i])\n\t\t}\n\t}\n\tvar newByte []rune\n\tlength := stack.Size()\n\tfor i := 0; i < length; i++ {\n\t\ttemp, _ := stack.Pop()\n\t\ttemp1 := temp.(rune)\n\t\tnewByte = append(newByte, temp1)\n\t}\n\tfor i := 0; i < len(newByte)/2; i++ {\n\t\tnewByte[i], newByte[len(newByte)-1-i] = newByte[len(newByte)-1-i], newByte[i]\n\t}\n\treturn string(newByte)\n}\n```\n\n此处用的是一个真正意义上的数据结构的栈，存储的是单个字符，写起来还是很长，看了题解之后发现只用字符数组即可，改正后代码\n\n``` go\nfunc removeDuplicates(s string) string {\n\tvar stack []rune\n\tfor _, v := range s {\n\t\tif len(stack) > 0 && stack[len(stack)-1] == v {\n\t\t\tstack = stack[:len(stack)-1]\n\t\t} else {\n\t\t\tstack = append(stack, v)\n\t\t}\n\t}\n\treturn string(stack)\n}\n```\n\n## 150.逆波兰表达式\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/evaluate-reverse-polish-notation/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.html)\n>\n> 视频讲解：栈的最后表演！ | LeetCode：150. 逆波兰表达式求值](https://www.bilibili.com/video/BV1kd4y1o7on)\n>\n> 状态：AC\n\n### 思路\n\n明白题意之后，发现每次到运算符时候需要将前面两个数进行计算，如：`[\"a\", \"b\", \"+\"]`运算结果是`a+b`。不难想到要使用栈。\n\n先将字符串数组转换为数字，可以成功转换则入栈，否则出栈两个元素，并且将两个元素相加之后再重新入栈。\n\n### 代码\n\n``` go\n\nfunc EvalRPN(tokens []string) int {\n\tstack := arraystack.New()\n\tfor _, v := range tokens {\n\t\tnum, err := strconv.Atoi(v)\n\t\tif err == nil {  // 如果成功转换数字\n\t\t\tstack.Push(num)\n\t\t} else {  // 否则计算后重新入栈\n\t\t\tb, _ := stack.Pop()\n\t\t\ta, _ := stack.Pop()\n\t\t\tif v == \"+\" {\n\t\t\t\tstack.Push(a.(int) + b.(int))\n\t\t\t} else if v == \"-\" {\n\t\t\t\tstack.Push(a.(int) - b.(int))\n\t\t\t} else if v == \"*\" {\n\t\t\t\tstack.Push(a.(int) * b.(int))\n\t\t\t} else if v == \"/\" {\n\t\t\t\tstack.Push(a.(int) / b.(int))\n\t\t\t}\n\t\t}\n\t}\n\tresult, _ := stack.Peek()  // 此刻的栈顶为结果\n\treturn result.(int)\n}\n\n```\n\n","slug":"day11","published":1,"updated":"2023-10-24T19:34:40.776Z","_id":"clnaa9ei20000fowh95tf648u","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第十一天-20-有效的括号、1047-删除字符串中的所有相邻重复项、150-逆波兰表达式求值。\"><a href=\"#代码随想录算法训练营第十一天-20-有效的括号、1047-删除字符串中的所有相邻重复项、150-逆波兰表达式求值。\" class=\"headerlink\" title=\"代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。\"></a>代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。</h1><h2 id=\"20-有效的括号\"><a href=\"#20-有效的括号\" class=\"headerlink\" title=\"20.有效的括号\"></a>20.有效的括号</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/valid-parentheses/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1AF411w78g\">栈的拿手好戏！| LeetCode：20. 有效的括号</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>题目保证了输入的字符串只有括号。遇到左括号入栈，遇到右括号出栈，但是要比较出栈的元素和当前的右括号是否匹配，不匹配直接<code>return false</code>。最终判断栈是否为空即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isValid</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\tstack := arraystack.New()<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> s &#123;<br>\t\t<span class=\"hljs-keyword\">switch</span> v &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;(&#x27;</span>, <span class=\"hljs-string\">&#x27;[&#x27;</span>, <span class=\"hljs-string\">&#x27;&#123;&#x27;</span>:<br>\t\t\tstack.Push(v)<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;)&#x27;</span>:<br>\t\t\ttemp, _ := stack.Pop()<br>\t\t\t<span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-string\">&#x27;(&#x27;</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;]&#x27;</span>:<br>\t\t\ttemp, _ := stack.Pop()<br>\t\t\t<span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-string\">&#x27;[&#x27;</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>:<br>\t\t\ttemp, _ := stack.Pop()<br>\t\t\t<span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-string\">&#x27;&#123;&#x27;</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> stack.Empty()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1047-删除字符串中的所有相邻重复项\"><a href=\"#1047-删除字符串中的所有相邻重复项\" class=\"headerlink\" title=\"1047.删除字符串中的所有相邻重复项\"></a>1047.删除字符串中的所有相邻重复项</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV12a411P7mw\">栈的好戏还要继续！| LeetCode：1047. 删除字符串中的所有相邻重复项</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>将每个元素与栈顶元素进行比较（前提是栈非空、如果空直接入栈即可），比较相等元素出栈。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeDuplicates</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s) == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> s<br>\t&#125;<br>\tbyteString := []<span class=\"hljs-type\">rune</span>(s)<br>\tstack := arraystack.New()<br>\tstack.Push(byteString[<span class=\"hljs-number\">0</span>])<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(byteString); i++ &#123;<br>\t\ttemp, _ := stack.Peek()<br>\t\t<span class=\"hljs-keyword\">if</span> temp == byteString[i] &#123;<br>\t\t\tstack.Pop()<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tstack.Push(byteString[i])<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> newByte []<span class=\"hljs-type\">rune</span><br>\tlength := stack.Size()<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; length; i++ &#123;<br>\t\ttemp, _ := stack.Pop()<br>\t\ttemp1 := temp.(<span class=\"hljs-type\">rune</span>)<br>\t\tnewByte = <span class=\"hljs-built_in\">append</span>(newByte, temp1)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(newByte)/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\tnewByte[i], newByte[<span class=\"hljs-built_in\">len</span>(newByte)<span class=\"hljs-number\">-1</span>-i] = newByte[<span class=\"hljs-built_in\">len</span>(newByte)<span class=\"hljs-number\">-1</span>-i], newByte[i]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(newByte)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此处用的是一个真正意义上的数据结构的栈，存储的是单个字符，写起来还是很长，看了题解之后发现只用字符数组即可，改正后代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeDuplicates</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> stack []<span class=\"hljs-type\">rune</span><br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> s &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) &gt; <span class=\"hljs-number\">0</span> &amp;&amp; stack[<span class=\"hljs-built_in\">len</span>(stack)<span class=\"hljs-number\">-1</span>] == v &#123;<br>\t\t\tstack = stack[:<span class=\"hljs-built_in\">len</span>(stack)<span class=\"hljs-number\">-1</span>]<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tstack = <span class=\"hljs-built_in\">append</span>(stack, v)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(stack)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"150-逆波兰表达式\"><a href=\"#150-逆波兰表达式\" class=\"headerlink\" title=\"150.逆波兰表达式\"></a>150.逆波兰表达式</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/evaluate-reverse-polish-notation/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：栈的最后表演！ | LeetCode：150. 逆波兰表达式求值](<a href=\"https://www.bilibili.com/video/BV1kd4y1o7on\">https://www.bilibili.com/video/BV1kd4y1o7on</a>)</p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>明白题意之后，发现每次到运算符时候需要将前面两个数进行计算，如：<code>[&quot;a&quot;, &quot;b&quot;, &quot;+&quot;]</code>运算结果是<code>a+b</code>。不难想到要使用栈。</p>\n<p>先将字符串数组转换为数字，可以成功转换则入栈，否则出栈两个元素，并且将两个元素相加之后再重新入栈。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">EvalRPN</span><span class=\"hljs-params\">(tokens []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tstack := arraystack.New()<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> tokens &#123;<br>\t\tnum, err := strconv.Atoi(v)<br>\t\t<span class=\"hljs-keyword\">if</span> err == <span class=\"hljs-literal\">nil</span> &#123;  <span class=\"hljs-comment\">// 如果成功转换数字</span><br>\t\t\tstack.Push(num)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// 否则计算后重新入栈</span><br>\t\t\tb, _ := stack.Pop()<br>\t\t\ta, _ := stack.Pop()<br>\t\t\t<span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-string\">&quot;+&quot;</span> &#123;<br>\t\t\t\tstack.Push(a.(<span class=\"hljs-type\">int</span>) + b.(<span class=\"hljs-type\">int</span>))<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-string\">&quot;-&quot;</span> &#123;<br>\t\t\t\tstack.Push(a.(<span class=\"hljs-type\">int</span>) - b.(<span class=\"hljs-type\">int</span>))<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-string\">&quot;*&quot;</span> &#123;<br>\t\t\t\tstack.Push(a.(<span class=\"hljs-type\">int</span>) * b.(<span class=\"hljs-type\">int</span>))<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-string\">&quot;/&quot;</span> &#123;<br>\t\t\t\tstack.Push(a.(<span class=\"hljs-type\">int</span>) / b.(<span class=\"hljs-type\">int</span>))<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\tresult, _ := stack.Peek()  <span class=\"hljs-comment\">// 此刻的栈顶为结果</span><br>\t<span class=\"hljs-keyword\">return</span> result.(<span class=\"hljs-type\">int</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第十一天-20-有效的括号、1047-删除字符串中的所有相邻重复项、150-逆波兰表达式求值。\"><a href=\"#代码随想录算法训练营第十一天-20-有效的括号、1047-删除字符串中的所有相邻重复项、150-逆波兰表达式求值。\" class=\"headerlink\" title=\"代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。\"></a>代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。</h1><h2 id=\"20-有效的括号\"><a href=\"#20-有效的括号\" class=\"headerlink\" title=\"20.有效的括号\"></a>20.有效的括号</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/valid-parentheses/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1AF411w78g\">栈的拿手好戏！| LeetCode：20. 有效的括号</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>题目保证了输入的字符串只有括号。遇到左括号入栈，遇到右括号出栈，但是要比较出栈的元素和当前的右括号是否匹配，不匹配直接<code>return false</code>。最终判断栈是否为空即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isValid</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\tstack := arraystack.New()<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> s &#123;<br>\t\t<span class=\"hljs-keyword\">switch</span> v &#123;<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;(&#x27;</span>, <span class=\"hljs-string\">&#x27;[&#x27;</span>, <span class=\"hljs-string\">&#x27;&#123;&#x27;</span>:<br>\t\t\tstack.Push(v)<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;)&#x27;</span>:<br>\t\t\ttemp, _ := stack.Pop()<br>\t\t\t<span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-string\">&#x27;(&#x27;</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;]&#x27;</span>:<br>\t\t\ttemp, _ := stack.Pop()<br>\t\t\t<span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-string\">&#x27;[&#x27;</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>:<br>\t\t\ttemp, _ := stack.Pop()<br>\t\t\t<span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-string\">&#x27;&#123;&#x27;</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> stack.Empty()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1047-删除字符串中的所有相邻重复项\"><a href=\"#1047-删除字符串中的所有相邻重复项\" class=\"headerlink\" title=\"1047.删除字符串中的所有相邻重复项\"></a>1047.删除字符串中的所有相邻重复项</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV12a411P7mw\">栈的好戏还要继续！| LeetCode：1047. 删除字符串中的所有相邻重复项</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>将每个元素与栈顶元素进行比较（前提是栈非空、如果空直接入栈即可），比较相等元素出栈。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeDuplicates</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s) == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> s<br>\t&#125;<br>\tbyteString := []<span class=\"hljs-type\">rune</span>(s)<br>\tstack := arraystack.New()<br>\tstack.Push(byteString[<span class=\"hljs-number\">0</span>])<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(byteString); i++ &#123;<br>\t\ttemp, _ := stack.Peek()<br>\t\t<span class=\"hljs-keyword\">if</span> temp == byteString[i] &#123;<br>\t\t\tstack.Pop()<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tstack.Push(byteString[i])<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> newByte []<span class=\"hljs-type\">rune</span><br>\tlength := stack.Size()<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; length; i++ &#123;<br>\t\ttemp, _ := stack.Pop()<br>\t\ttemp1 := temp.(<span class=\"hljs-type\">rune</span>)<br>\t\tnewByte = <span class=\"hljs-built_in\">append</span>(newByte, temp1)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(newByte)/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\tnewByte[i], newByte[<span class=\"hljs-built_in\">len</span>(newByte)<span class=\"hljs-number\">-1</span>-i] = newByte[<span class=\"hljs-built_in\">len</span>(newByte)<span class=\"hljs-number\">-1</span>-i], newByte[i]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(newByte)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此处用的是一个真正意义上的数据结构的栈，存储的是单个字符，写起来还是很长，看了题解之后发现只用字符数组即可，改正后代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeDuplicates</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> stack []<span class=\"hljs-type\">rune</span><br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> s &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) &gt; <span class=\"hljs-number\">0</span> &amp;&amp; stack[<span class=\"hljs-built_in\">len</span>(stack)<span class=\"hljs-number\">-1</span>] == v &#123;<br>\t\t\tstack = stack[:<span class=\"hljs-built_in\">len</span>(stack)<span class=\"hljs-number\">-1</span>]<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tstack = <span class=\"hljs-built_in\">append</span>(stack, v)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(stack)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"150-逆波兰表达式\"><a href=\"#150-逆波兰表达式\" class=\"headerlink\" title=\"150.逆波兰表达式\"></a>150.逆波兰表达式</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/evaluate-reverse-polish-notation/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：栈的最后表演！ | LeetCode：150. 逆波兰表达式求值](<a href=\"https://www.bilibili.com/video/BV1kd4y1o7on\">https://www.bilibili.com/video/BV1kd4y1o7on</a>)</p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>明白题意之后，发现每次到运算符时候需要将前面两个数进行计算，如：<code>[&quot;a&quot;, &quot;b&quot;, &quot;+&quot;]</code>运算结果是<code>a+b</code>。不难想到要使用栈。</p>\n<p>先将字符串数组转换为数字，可以成功转换则入栈，否则出栈两个元素，并且将两个元素相加之后再重新入栈。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">EvalRPN</span><span class=\"hljs-params\">(tokens []<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tstack := arraystack.New()<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> tokens &#123;<br>\t\tnum, err := strconv.Atoi(v)<br>\t\t<span class=\"hljs-keyword\">if</span> err == <span class=\"hljs-literal\">nil</span> &#123;  <span class=\"hljs-comment\">// 如果成功转换数字</span><br>\t\t\tstack.Push(num)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// 否则计算后重新入栈</span><br>\t\t\tb, _ := stack.Pop()<br>\t\t\ta, _ := stack.Pop()<br>\t\t\t<span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-string\">&quot;+&quot;</span> &#123;<br>\t\t\t\tstack.Push(a.(<span class=\"hljs-type\">int</span>) + b.(<span class=\"hljs-type\">int</span>))<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-string\">&quot;-&quot;</span> &#123;<br>\t\t\t\tstack.Push(a.(<span class=\"hljs-type\">int</span>) - b.(<span class=\"hljs-type\">int</span>))<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-string\">&quot;*&quot;</span> &#123;<br>\t\t\t\tstack.Push(a.(<span class=\"hljs-type\">int</span>) * b.(<span class=\"hljs-type\">int</span>))<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-string\">&quot;/&quot;</span> &#123;<br>\t\t\t\tstack.Push(a.(<span class=\"hljs-type\">int</span>) / b.(<span class=\"hljs-type\">int</span>))<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\tresult, _ := stack.Peek()  <span class=\"hljs-comment\">// 此刻的栈顶为结果</span><br>\t<span class=\"hljs-keyword\">return</span> result.(<span class=\"hljs-type\">int</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"【study】Leetcode中Go语言第三方包","abbrlink":"2360e101","date":"2023-10-03T12:17:03.000Z","_content":"\n# 【study】Leetcode中Go语言第三方包\n\n在刷Leetcode时，发现Go并不像其他语言有原生的栈、队列等等结构。虽然很多操作都可以用**切片**或**数组**代替，但还是想知道如果自己想使用这些数据结构应该怎么办。\n\n![Leetcode中的Go](../images/【study】Leetcode中Go语言第三方包/Leetcode中的Go.png)\n\n![Leetcode支持Go的第三方库](../images/【study】Leetcode中Go语言第三方包/Leetcode支持Go的第三方库.png)\n\n[支持的库的连接](https://github.com/emirpasic/gods/tree/v1.18.1)\n\n\n\n包含的数据结构如下\n\n\n- Containers\n  - Lists\n    - ArrayList\n    - SinglyLinkedList\n    - DoublyLinkedList\n  - Sets\n    - HashSet\n    - TreeSet\n    - LinkedHashSet\n  - Stacks\n    - LinkedListStack\n    - ArrayStack\n  - Maps\n    - HashMap\n    - TreeMap\n    - LinkedHashMap\n    - HashBidiMap\n    - TreeBidiMap\n  - Trees\n    - RedBlackTree\n    - AVLTree\n    - BTree\n    - BinaryHeap\n  - Queues\n    - LinkedListQueue\n    - ArrayQueue\n    - CircularBuffer\n    - PriorityQueue\n- Functions\n    - Comparator\n    - Iterator\n      - IteratorWithIndex\n      - IteratorWithKey\n      - ReverseIteratorWithIndex\n      - ReverseIteratorWithKey\n    - Enumerable\n      - EnumerableWithIndex\n      - EnumerableWithKey\n    - Serialization\n      - JSONSerializer\n      - JSONDeserializer\n    - Sort\n    - Container\n- Appendix\n\n所有数据结构都依赖`Container`接口，调用起来也很方便\n\n### 以栈举例\n\n``` go\nimport \"github.com/emirpasic/gods/stacks/arraystack\"\n\nfunc main() {\n    stack = arraystack.New()  // 初始化一个栈\n    stack.Push(1)  // 入栈\n    value, _ := stack.Peek()  // 查看站定元素\n    value, _ := stack.Pop()  // 出栈\n    size := stack.Size()  // 栈的大小\n    isEmpty := stack.Empty()  // 是否为空栈\n    stack.Clear()  // 清空栈\n}\n```\n\n更多操作可以看github中的`README.md`文件或者看源码\n","source":"_posts/【study】Leetcode中Go语言第三方包.md","raw":"---\ntitle: 【study】Leetcode中Go语言第三方包\ntags:\n  - Study\n  - LeetCode\n  - Go\ncategories: Study\nabbrlink: '2360e101'\ndate: 2023-10-03 20:17:03\n---\n\n# 【study】Leetcode中Go语言第三方包\n\n在刷Leetcode时，发现Go并不像其他语言有原生的栈、队列等等结构。虽然很多操作都可以用**切片**或**数组**代替，但还是想知道如果自己想使用这些数据结构应该怎么办。\n\n![Leetcode中的Go](../images/【study】Leetcode中Go语言第三方包/Leetcode中的Go.png)\n\n![Leetcode支持Go的第三方库](../images/【study】Leetcode中Go语言第三方包/Leetcode支持Go的第三方库.png)\n\n[支持的库的连接](https://github.com/emirpasic/gods/tree/v1.18.1)\n\n\n\n包含的数据结构如下\n\n\n- Containers\n  - Lists\n    - ArrayList\n    - SinglyLinkedList\n    - DoublyLinkedList\n  - Sets\n    - HashSet\n    - TreeSet\n    - LinkedHashSet\n  - Stacks\n    - LinkedListStack\n    - ArrayStack\n  - Maps\n    - HashMap\n    - TreeMap\n    - LinkedHashMap\n    - HashBidiMap\n    - TreeBidiMap\n  - Trees\n    - RedBlackTree\n    - AVLTree\n    - BTree\n    - BinaryHeap\n  - Queues\n    - LinkedListQueue\n    - ArrayQueue\n    - CircularBuffer\n    - PriorityQueue\n- Functions\n    - Comparator\n    - Iterator\n      - IteratorWithIndex\n      - IteratorWithKey\n      - ReverseIteratorWithIndex\n      - ReverseIteratorWithKey\n    - Enumerable\n      - EnumerableWithIndex\n      - EnumerableWithKey\n    - Serialization\n      - JSONSerializer\n      - JSONDeserializer\n    - Sort\n    - Container\n- Appendix\n\n所有数据结构都依赖`Container`接口，调用起来也很方便\n\n### 以栈举例\n\n``` go\nimport \"github.com/emirpasic/gods/stacks/arraystack\"\n\nfunc main() {\n    stack = arraystack.New()  // 初始化一个栈\n    stack.Push(1)  // 入栈\n    value, _ := stack.Peek()  // 查看站定元素\n    value, _ := stack.Pop()  // 出栈\n    size := stack.Size()  // 栈的大小\n    isEmpty := stack.Empty()  // 是否为空栈\n    stack.Clear()  // 清空栈\n}\n```\n\n更多操作可以看github中的`README.md`文件或者看源码\n","slug":"【study】Leetcode中Go语言第三方包","published":1,"updated":"2023-10-03T12:35:50.313Z","_id":"clnaazf5b0000r4whg2w0by34","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【study】Leetcode中Go语言第三方包\"><a href=\"#【study】Leetcode中Go语言第三方包\" class=\"headerlink\" title=\"【study】Leetcode中Go语言第三方包\"></a>【study】Leetcode中Go语言第三方包</h1><p>在刷Leetcode时，发现Go并不像其他语言有原生的栈、队列等等结构。虽然很多操作都可以用<strong>切片</strong>或<strong>数组</strong>代替，但还是想知道如果自己想使用这些数据结构应该怎么办。</p>\n<p><img src=\"/../images/%E3%80%90study%E3%80%91Leetcode%E4%B8%ADGo%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/Leetcode%E4%B8%AD%E7%9A%84Go.png\" alt=\"Leetcode中的Go\"></p>\n<p><img src=\"/../images/%E3%80%90study%E3%80%91Leetcode%E4%B8%ADGo%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/Leetcode%E6%94%AF%E6%8C%81Go%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93.png\" alt=\"Leetcode支持Go的第三方库\"></p>\n<p><a href=\"https://github.com/emirpasic/gods/tree/v1.18.1\">支持的库的连接</a></p>\n<p>包含的数据结构如下</p>\n<ul>\n<li>Containers<ul>\n<li>Lists<ul>\n<li>ArrayList</li>\n<li>SinglyLinkedList</li>\n<li>DoublyLinkedList</li>\n</ul>\n</li>\n<li>Sets<ul>\n<li>HashSet</li>\n<li>TreeSet</li>\n<li>LinkedHashSet</li>\n</ul>\n</li>\n<li>Stacks<ul>\n<li>LinkedListStack</li>\n<li>ArrayStack</li>\n</ul>\n</li>\n<li>Maps<ul>\n<li>HashMap</li>\n<li>TreeMap</li>\n<li>LinkedHashMap</li>\n<li>HashBidiMap</li>\n<li>TreeBidiMap</li>\n</ul>\n</li>\n<li>Trees<ul>\n<li>RedBlackTree</li>\n<li>AVLTree</li>\n<li>BTree</li>\n<li>BinaryHeap</li>\n</ul>\n</li>\n<li>Queues<ul>\n<li>LinkedListQueue</li>\n<li>ArrayQueue</li>\n<li>CircularBuffer</li>\n<li>PriorityQueue</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Functions<ul>\n<li>Comparator</li>\n<li>Iterator<ul>\n<li>IteratorWithIndex</li>\n<li>IteratorWithKey</li>\n<li>ReverseIteratorWithIndex</li>\n<li>ReverseIteratorWithKey</li>\n</ul>\n</li>\n<li>Enumerable<ul>\n<li>EnumerableWithIndex</li>\n<li>EnumerableWithKey</li>\n</ul>\n</li>\n<li>Serialization<ul>\n<li>JSONSerializer</li>\n<li>JSONDeserializer</li>\n</ul>\n</li>\n<li>Sort</li>\n<li>Container</li>\n</ul>\n</li>\n<li>Appendix</li>\n</ul>\n<p>所有数据结构都依赖<code>Container</code>接口，调用起来也很方便</p>\n<h3 id=\"以栈举例\"><a href=\"#以栈举例\" class=\"headerlink\" title=\"以栈举例\"></a>以栈举例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/emirpasic/gods/stacks/arraystack&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>    stack = arraystack.New()  <span class=\"hljs-comment\">// 初始化一个栈</span><br>    stack.Push(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// 入栈</span><br>    value, _ := stack.Peek()  <span class=\"hljs-comment\">// 查看站定元素</span><br>    value, _ := stack.Pop()  <span class=\"hljs-comment\">// 出栈</span><br>    size := stack.Size()  <span class=\"hljs-comment\">// 栈的大小</span><br>    isEmpty := stack.Empty()  <span class=\"hljs-comment\">// 是否为空栈</span><br>    stack.Clear()  <span class=\"hljs-comment\">// 清空栈</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>更多操作可以看github中的<code>README.md</code>文件或者看源码</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【study】Leetcode中Go语言第三方包\"><a href=\"#【study】Leetcode中Go语言第三方包\" class=\"headerlink\" title=\"【study】Leetcode中Go语言第三方包\"></a>【study】Leetcode中Go语言第三方包</h1><p>在刷Leetcode时，发现Go并不像其他语言有原生的栈、队列等等结构。虽然很多操作都可以用<strong>切片</strong>或<strong>数组</strong>代替，但还是想知道如果自己想使用这些数据结构应该怎么办。</p>\n<p><img src=\"/../images/%E3%80%90study%E3%80%91Leetcode%E4%B8%ADGo%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/Leetcode%E4%B8%AD%E7%9A%84Go.png\" alt=\"Leetcode中的Go\"></p>\n<p><img src=\"/../images/%E3%80%90study%E3%80%91Leetcode%E4%B8%ADGo%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/Leetcode%E6%94%AF%E6%8C%81Go%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93.png\" alt=\"Leetcode支持Go的第三方库\"></p>\n<p><a href=\"https://github.com/emirpasic/gods/tree/v1.18.1\">支持的库的连接</a></p>\n<p>包含的数据结构如下</p>\n<ul>\n<li>Containers<ul>\n<li>Lists<ul>\n<li>ArrayList</li>\n<li>SinglyLinkedList</li>\n<li>DoublyLinkedList</li>\n</ul>\n</li>\n<li>Sets<ul>\n<li>HashSet</li>\n<li>TreeSet</li>\n<li>LinkedHashSet</li>\n</ul>\n</li>\n<li>Stacks<ul>\n<li>LinkedListStack</li>\n<li>ArrayStack</li>\n</ul>\n</li>\n<li>Maps<ul>\n<li>HashMap</li>\n<li>TreeMap</li>\n<li>LinkedHashMap</li>\n<li>HashBidiMap</li>\n<li>TreeBidiMap</li>\n</ul>\n</li>\n<li>Trees<ul>\n<li>RedBlackTree</li>\n<li>AVLTree</li>\n<li>BTree</li>\n<li>BinaryHeap</li>\n</ul>\n</li>\n<li>Queues<ul>\n<li>LinkedListQueue</li>\n<li>ArrayQueue</li>\n<li>CircularBuffer</li>\n<li>PriorityQueue</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Functions<ul>\n<li>Comparator</li>\n<li>Iterator<ul>\n<li>IteratorWithIndex</li>\n<li>IteratorWithKey</li>\n<li>ReverseIteratorWithIndex</li>\n<li>ReverseIteratorWithKey</li>\n</ul>\n</li>\n<li>Enumerable<ul>\n<li>EnumerableWithIndex</li>\n<li>EnumerableWithKey</li>\n</ul>\n</li>\n<li>Serialization<ul>\n<li>JSONSerializer</li>\n<li>JSONDeserializer</li>\n</ul>\n</li>\n<li>Sort</li>\n<li>Container</li>\n</ul>\n</li>\n<li>Appendix</li>\n</ul>\n<p>所有数据结构都依赖<code>Container</code>接口，调用起来也很方便</p>\n<h3 id=\"以栈举例\"><a href=\"#以栈举例\" class=\"headerlink\" title=\"以栈举例\"></a>以栈举例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/emirpasic/gods/stacks/arraystack&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>    stack = arraystack.New()  <span class=\"hljs-comment\">// 初始化一个栈</span><br>    stack.Push(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// 入栈</span><br>    value, _ := stack.Peek()  <span class=\"hljs-comment\">// 查看站定元素</span><br>    value, _ := stack.Pop()  <span class=\"hljs-comment\">// 出栈</span><br>    size := stack.Size()  <span class=\"hljs-comment\">// 栈的大小</span><br>    isEmpty := stack.Empty()  <span class=\"hljs-comment\">// 是否为空栈</span><br>    stack.Clear()  <span class=\"hljs-comment\">// 清空栈</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>更多操作可以看github中的<code>README.md</code>文件或者看源码</p>\n"},{"title":"代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。","abbrlink":"9ab3b9d2","date":"2023-10-04T11:45:02.000Z","_content":"\n# 代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。\n\n## 239.滑动窗口最大值\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/sliding-window-maximum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html)\n>\n>   视频讲解：[单调队列正式登场！| LeetCode：239. 滑动窗口最大值](https://www.bilibili.com/video/BV1XS4y1p7qj)\n>\n>   状态：TLE\n\n### 思路\n\n#### 方法一\n\n遍历每个滑动窗口（看作一个队列），升序排序后取最大（复制一段新的数组，在新的里面排序）。时间复杂度为O(n^2log n)。超时\n\n#### 方法二（卡哥讲解）\n\n1.   准备一个自定义的双向队列数据结构，让其中的`front`端保持最大值，并且重构`Pop()`和`Push()`操作。\n2.   先将前K的元素`Push()`入队，但是要进行判断。如果后入队的元素大于之前入队的元素，那么之前的元素`PopBack()`。可以保持`front`端一直为最大。\n3.   `Pop()`除了最大值的所有元素\n4.   `Push()`一个新的元素\n5.   `GetMaxValue()`，并且加入到结果切片中\n6.   重复3\\~5直至`nums`结尾\n\n### 代码\n\n#### 重构两个函数，新增功能GetMaxValue()\n\n-   `GetMaxValue()`：会保持在队列`front`的位置，可以使用`Front()`操作取代。\n\n``` go\nfunc (this *Deque) Front() int {\n\treturn this.queue[0]\n}\n```\n\n-   `Pop()`：出队时，只有一种情况，旧的最大值不在新的滑动窗口内，旧的最大值出队（切片舍去第一个元素）\n\n``` go\nfunc (this *Deque) Pop(value int) {\n\tif !this.Empty() && value == this.Front() {\n\t\tthis.queue = this.queue[1:]\n\t}\n}\n```\n\n-   `Push()`：入队时，如果入队的值`value`大于队列`back`位置的元素，让该元素`PopBack()`（切片舍去最后一个元素）\n\n``` go\nfunc (this *Deque) Push(value int) {\n\tfor !this.Empty() && value > this.Back() {\n\t\tthis.queue = this.queue[:len(this.queue)-1]\n\t}\n\tthis.queue = append(this.queue, value)\n}\n```\n\n### 代码\n\n``` go\ntype Deque struct {\n\tqueue []int\n}\n\nfunc Constructor() *Deque {\n\treturn &Deque{queue: make([]int, 0)}\n}\n\nfunc (this *Deque) Front() int {\n\treturn this.queue[0]\n}\n\nfunc (this *Deque) Back() int {\n\treturn this.queue[len(this.queue)-1]\n}\n\nfunc (this *Deque) Empty() bool {\n\treturn len(this.queue) == 0\n}\n\nfunc (this *Deque) Push(value int) {\n\tfor !this.Empty() && value > this.Back() {\n\t\tthis.queue = this.queue[:len(this.queue)-1]\n\t}\n\tthis.queue = append(this.queue, value)\n}\n\nfunc (this *Deque) Pop(value int) {\n\tif !this.Empty() && value == this.Front() {\n\t\tthis.queue = this.queue[1:]\n\t}\n}\n\nfunc maxSlidingWindow(nums []int, k int) []int {\n\tdeque := Constructor()\n\tvar result []int\n\tfor i := 0; i < k; i++ {\n\t\tdeque.Push(nums[i])\n\t}\n\tresult = append(result, deque.Front())\n\tfor i := k; i < len(nums); i++ {\n\t\tdeque.Pop(nums[i-k])\n\t\tdeque.Push(nums[i])\n\t\tresult = append(result, deque.Front())\n\t}\n\treturn result\n}\n```\n\n## 347. 前K个高频元素\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/top-k-frequent-elements/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html)\n>\n>   视频讲解：[优先级队列正式登场！大顶堆、小顶堆该怎么用？| LeetCode：347.前 K 个高频元素](https://www.bilibili.com/video/BV1Xg41167Lz)\n>\n>   状态：AC\n\n### 思路\n\n1.   构建键值对<key, value>，`key`为数字，`value`为该数字出现的次数。\n2.   生成优先队列，优先级为`value`\n3.   取优先队列的前K个元素\n\n### 代码\n\n``` go\n// 优先队列中的条目\ntype Element struct {\n\tNum     int\n\tCount   int\n}\n// 比较器函数，根据Count降序\nfunc byPriority(a, b interface{}) int {\n\tpriorityA := a.(Element).Count\n\tpriorityB := b.(Element).Count\n\treturn -utils.IntComparator(priorityA, priorityB) // \"-\" 代表降序\n}\n\nfunc topKFrequent(nums []int, k int) []int {\n\t// 构建键值对\n    maps := map[int]int{}\n\tfor _, v := range nums {\n\t\tmaps[v]++\n\t}\n    // 初始化优先队列\n\tpq := priorityqueue.NewWith(byPriority)\n\tfor k, v := range maps {\n\t\tpq.Enqueue(Element{\n\t\t\tNum:     k,\n\t\t\tCount: v,\n\t\t})\n\t}\n\tvar result []int\n    // 取前k个元素保存到result中\n\tfor i := 0; i < k; i++ {\n\t\tvalue, _ := pq.Dequeue()\n\t\tresult = append(result, value.(Element).Num)\n\t}\n\treturn result\n}\n```\n\n","source":"_posts/day12.md","raw":"---\ntitle: 代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 栈与队列\ncategories: 刷题\nabbrlink: 9ab3b9d2\ndate: 2023-10-04 19:45:02\n---\n\n# 代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。\n\n## 239.滑动窗口最大值\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/sliding-window-maximum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html)\n>\n>   视频讲解：[单调队列正式登场！| LeetCode：239. 滑动窗口最大值](https://www.bilibili.com/video/BV1XS4y1p7qj)\n>\n>   状态：TLE\n\n### 思路\n\n#### 方法一\n\n遍历每个滑动窗口（看作一个队列），升序排序后取最大（复制一段新的数组，在新的里面排序）。时间复杂度为O(n^2log n)。超时\n\n#### 方法二（卡哥讲解）\n\n1.   准备一个自定义的双向队列数据结构，让其中的`front`端保持最大值，并且重构`Pop()`和`Push()`操作。\n2.   先将前K的元素`Push()`入队，但是要进行判断。如果后入队的元素大于之前入队的元素，那么之前的元素`PopBack()`。可以保持`front`端一直为最大。\n3.   `Pop()`除了最大值的所有元素\n4.   `Push()`一个新的元素\n5.   `GetMaxValue()`，并且加入到结果切片中\n6.   重复3\\~5直至`nums`结尾\n\n### 代码\n\n#### 重构两个函数，新增功能GetMaxValue()\n\n-   `GetMaxValue()`：会保持在队列`front`的位置，可以使用`Front()`操作取代。\n\n``` go\nfunc (this *Deque) Front() int {\n\treturn this.queue[0]\n}\n```\n\n-   `Pop()`：出队时，只有一种情况，旧的最大值不在新的滑动窗口内，旧的最大值出队（切片舍去第一个元素）\n\n``` go\nfunc (this *Deque) Pop(value int) {\n\tif !this.Empty() && value == this.Front() {\n\t\tthis.queue = this.queue[1:]\n\t}\n}\n```\n\n-   `Push()`：入队时，如果入队的值`value`大于队列`back`位置的元素，让该元素`PopBack()`（切片舍去最后一个元素）\n\n``` go\nfunc (this *Deque) Push(value int) {\n\tfor !this.Empty() && value > this.Back() {\n\t\tthis.queue = this.queue[:len(this.queue)-1]\n\t}\n\tthis.queue = append(this.queue, value)\n}\n```\n\n### 代码\n\n``` go\ntype Deque struct {\n\tqueue []int\n}\n\nfunc Constructor() *Deque {\n\treturn &Deque{queue: make([]int, 0)}\n}\n\nfunc (this *Deque) Front() int {\n\treturn this.queue[0]\n}\n\nfunc (this *Deque) Back() int {\n\treturn this.queue[len(this.queue)-1]\n}\n\nfunc (this *Deque) Empty() bool {\n\treturn len(this.queue) == 0\n}\n\nfunc (this *Deque) Push(value int) {\n\tfor !this.Empty() && value > this.Back() {\n\t\tthis.queue = this.queue[:len(this.queue)-1]\n\t}\n\tthis.queue = append(this.queue, value)\n}\n\nfunc (this *Deque) Pop(value int) {\n\tif !this.Empty() && value == this.Front() {\n\t\tthis.queue = this.queue[1:]\n\t}\n}\n\nfunc maxSlidingWindow(nums []int, k int) []int {\n\tdeque := Constructor()\n\tvar result []int\n\tfor i := 0; i < k; i++ {\n\t\tdeque.Push(nums[i])\n\t}\n\tresult = append(result, deque.Front())\n\tfor i := k; i < len(nums); i++ {\n\t\tdeque.Pop(nums[i-k])\n\t\tdeque.Push(nums[i])\n\t\tresult = append(result, deque.Front())\n\t}\n\treturn result\n}\n```\n\n## 347. 前K个高频元素\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/top-k-frequent-elements/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html)\n>\n>   视频讲解：[优先级队列正式登场！大顶堆、小顶堆该怎么用？| LeetCode：347.前 K 个高频元素](https://www.bilibili.com/video/BV1Xg41167Lz)\n>\n>   状态：AC\n\n### 思路\n\n1.   构建键值对<key, value>，`key`为数字，`value`为该数字出现的次数。\n2.   生成优先队列，优先级为`value`\n3.   取优先队列的前K个元素\n\n### 代码\n\n``` go\n// 优先队列中的条目\ntype Element struct {\n\tNum     int\n\tCount   int\n}\n// 比较器函数，根据Count降序\nfunc byPriority(a, b interface{}) int {\n\tpriorityA := a.(Element).Count\n\tpriorityB := b.(Element).Count\n\treturn -utils.IntComparator(priorityA, priorityB) // \"-\" 代表降序\n}\n\nfunc topKFrequent(nums []int, k int) []int {\n\t// 构建键值对\n    maps := map[int]int{}\n\tfor _, v := range nums {\n\t\tmaps[v]++\n\t}\n    // 初始化优先队列\n\tpq := priorityqueue.NewWith(byPriority)\n\tfor k, v := range maps {\n\t\tpq.Enqueue(Element{\n\t\t\tNum:     k,\n\t\t\tCount: v,\n\t\t})\n\t}\n\tvar result []int\n    // 取前k个元素保存到result中\n\tfor i := 0; i < k; i++ {\n\t\tvalue, _ := pq.Dequeue()\n\t\tresult = append(result, value.(Element).Num)\n\t}\n\treturn result\n}\n```\n\n","slug":"day12","published":1,"updated":"2023-10-24T19:34:50.089Z","_id":"clnbysihy0000zez810crdqln","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第十二天-239-滑动窗口最大值、347-前K个高频元素。\"><a href=\"#代码随想录算法训练营第十二天-239-滑动窗口最大值、347-前K个高频元素。\" class=\"headerlink\" title=\"代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。\"></a>代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。</h1><h2 id=\"239-滑动窗口最大值\"><a href=\"#239-滑动窗口最大值\" class=\"headerlink\" title=\"239.滑动窗口最大值\"></a>239.滑动窗口最大值</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/sliding-window-maximum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1XS4y1p7qj\">单调队列正式登场！| LeetCode：239. 滑动窗口最大值</a></p>\n<p>  状态：TLE</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>遍历每个滑动窗口（看作一个队列），升序排序后取最大（复制一段新的数组，在新的里面排序）。时间复杂度为O(n^2log n)。超时</p>\n<h4 id=\"方法二（卡哥讲解）\"><a href=\"#方法二（卡哥讲解）\" class=\"headerlink\" title=\"方法二（卡哥讲解）\"></a>方法二（卡哥讲解）</h4><ol>\n<li>准备一个自定义的双向队列数据结构，让其中的<code>front</code>端保持最大值，并且重构<code>Pop()</code>和<code>Push()</code>操作。</li>\n<li>先将前K的元素<code>Push()</code>入队，但是要进行判断。如果后入队的元素大于之前入队的元素，那么之前的元素<code>PopBack()</code>。可以保持<code>front</code>端一直为最大。</li>\n<li><code>Pop()</code>除了最大值的所有元素</li>\n<li><code>Push()</code>一个新的元素</li>\n<li><code>GetMaxValue()</code>，并且加入到结果切片中</li>\n<li>重复3~5直至<code>nums</code>结尾</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><h4 id=\"重构两个函数，新增功能GetMaxValue\"><a href=\"#重构两个函数，新增功能GetMaxValue\" class=\"headerlink\" title=\"重构两个函数，新增功能GetMaxValue()\"></a>重构两个函数，新增功能GetMaxValue()</h4><ul>\n<li><code>GetMaxValue()</code>：会保持在队列<code>front</code>的位置，可以使用<code>Front()</code>操作取代。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Front() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> this.queue[<span class=\"hljs-number\">0</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Pop()</code>：出队时，只有一种情况，旧的最大值不在新的滑动窗口内，旧的最大值出队（切片舍去第一个元素）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Pop(value <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> !this.Empty() &amp;&amp; value == this.Front() &#123;<br>\t\tthis.queue = this.queue[<span class=\"hljs-number\">1</span>:]<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Push()</code>：入队时，如果入队的值<code>value</code>大于队列<code>back</code>位置的元素，让该元素<code>PopBack()</code>（切片舍去最后一个元素）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Push(value <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">for</span> !this.Empty() &amp;&amp; value &gt; this.Back() &#123;<br>\t\tthis.queue = this.queue[:<span class=\"hljs-built_in\">len</span>(this.queue)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>\tthis.queue = <span class=\"hljs-built_in\">append</span>(this.queue, value)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Deque <span class=\"hljs-keyword\">struct</span> &#123;<br>\tqueue []<span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> *Deque &#123;<br>\t<span class=\"hljs-keyword\">return</span> &amp;Deque&#123;queue: <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">0</span>)&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Front() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> this.queue[<span class=\"hljs-number\">0</span>]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Back() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> this.queue[<span class=\"hljs-built_in\">len</span>(this.queue)<span class=\"hljs-number\">-1</span>]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Empty() <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(this.queue) == <span class=\"hljs-number\">0</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Push(value <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">for</span> !this.Empty() &amp;&amp; value &gt; this.Back() &#123;<br>\t\tthis.queue = this.queue[:<span class=\"hljs-built_in\">len</span>(this.queue)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>\tthis.queue = <span class=\"hljs-built_in\">append</span>(this.queue, value)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Pop(value <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> !this.Empty() &amp;&amp; value == this.Front() &#123;<br>\t\tthis.queue = this.queue[<span class=\"hljs-number\">1</span>:]<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxSlidingWindow</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tdeque := Constructor()<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; k; i++ &#123;<br>\t\tdeque.Push(nums[i])<br>\t&#125;<br>\tresult = <span class=\"hljs-built_in\">append</span>(result, deque.Front())<br>\t<span class=\"hljs-keyword\">for</span> i := k; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tdeque.Pop(nums[i-k])<br>\t\tdeque.Push(nums[i])<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, deque.Front())<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"347-前K个高频元素\"><a href=\"#347-前K个高频元素\" class=\"headerlink\" title=\"347. 前K个高频元素\"></a>347. 前K个高频元素</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/top-k-frequent-elements/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Xg41167Lz\">优先级队列正式登场！大顶堆、小顶堆该怎么用？| LeetCode：347.前 K 个高频元素</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>构建键值对&lt;key, value&gt;，<code>key</code>为数字，<code>value</code>为该数字出现的次数。</li>\n<li>生成优先队列，优先级为<code>value</code></li>\n<li>取优先队列的前K个元素</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 优先队列中的条目</span><br><span class=\"hljs-keyword\">type</span> Element <span class=\"hljs-keyword\">struct</span> &#123;<br>\tNum     <span class=\"hljs-type\">int</span><br>\tCount   <span class=\"hljs-type\">int</span><br>&#125;<br><span class=\"hljs-comment\">// 比较器函数，根据Count降序</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">byPriority</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tpriorityA := a.(Element).Count<br>\tpriorityB := b.(Element).Count<br>\t<span class=\"hljs-keyword\">return</span> -utils.IntComparator(priorityA, priorityB) <span class=\"hljs-comment\">// &quot;-&quot; 代表降序</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">topKFrequent</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 构建键值对</span><br>    maps := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\tmaps[v]++<br>\t&#125;<br>    <span class=\"hljs-comment\">// 初始化优先队列</span><br>\tpq := priorityqueue.NewWith(byPriority)<br>\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> maps &#123;<br>\t\tpq.Enqueue(Element&#123;<br>\t\t\tNum:     k,<br>\t\t\tCount: v,<br>\t\t&#125;)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>    <span class=\"hljs-comment\">// 取前k个元素保存到result中</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; k; i++ &#123;<br>\t\tvalue, _ := pq.Dequeue()<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, value.(Element).Num)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第十二天-239-滑动窗口最大值、347-前K个高频元素。\"><a href=\"#代码随想录算法训练营第十二天-239-滑动窗口最大值、347-前K个高频元素。\" class=\"headerlink\" title=\"代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。\"></a>代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。</h1><h2 id=\"239-滑动窗口最大值\"><a href=\"#239-滑动窗口最大值\" class=\"headerlink\" title=\"239.滑动窗口最大值\"></a>239.滑动窗口最大值</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/sliding-window-maximum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1XS4y1p7qj\">单调队列正式登场！| LeetCode：239. 滑动窗口最大值</a></p>\n<p>  状态：TLE</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>遍历每个滑动窗口（看作一个队列），升序排序后取最大（复制一段新的数组，在新的里面排序）。时间复杂度为O(n^2log n)。超时</p>\n<h4 id=\"方法二（卡哥讲解）\"><a href=\"#方法二（卡哥讲解）\" class=\"headerlink\" title=\"方法二（卡哥讲解）\"></a>方法二（卡哥讲解）</h4><ol>\n<li>准备一个自定义的双向队列数据结构，让其中的<code>front</code>端保持最大值，并且重构<code>Pop()</code>和<code>Push()</code>操作。</li>\n<li>先将前K的元素<code>Push()</code>入队，但是要进行判断。如果后入队的元素大于之前入队的元素，那么之前的元素<code>PopBack()</code>。可以保持<code>front</code>端一直为最大。</li>\n<li><code>Pop()</code>除了最大值的所有元素</li>\n<li><code>Push()</code>一个新的元素</li>\n<li><code>GetMaxValue()</code>，并且加入到结果切片中</li>\n<li>重复3~5直至<code>nums</code>结尾</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><h4 id=\"重构两个函数，新增功能GetMaxValue\"><a href=\"#重构两个函数，新增功能GetMaxValue\" class=\"headerlink\" title=\"重构两个函数，新增功能GetMaxValue()\"></a>重构两个函数，新增功能GetMaxValue()</h4><ul>\n<li><code>GetMaxValue()</code>：会保持在队列<code>front</code>的位置，可以使用<code>Front()</code>操作取代。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Front() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> this.queue[<span class=\"hljs-number\">0</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Pop()</code>：出队时，只有一种情况，旧的最大值不在新的滑动窗口内，旧的最大值出队（切片舍去第一个元素）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Pop(value <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> !this.Empty() &amp;&amp; value == this.Front() &#123;<br>\t\tthis.queue = this.queue[<span class=\"hljs-number\">1</span>:]<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Push()</code>：入队时，如果入队的值<code>value</code>大于队列<code>back</code>位置的元素，让该元素<code>PopBack()</code>（切片舍去最后一个元素）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Push(value <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">for</span> !this.Empty() &amp;&amp; value &gt; this.Back() &#123;<br>\t\tthis.queue = this.queue[:<span class=\"hljs-built_in\">len</span>(this.queue)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>\tthis.queue = <span class=\"hljs-built_in\">append</span>(this.queue, value)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Deque <span class=\"hljs-keyword\">struct</span> &#123;<br>\tqueue []<span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> *Deque &#123;<br>\t<span class=\"hljs-keyword\">return</span> &amp;Deque&#123;queue: <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">0</span>)&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Front() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> this.queue[<span class=\"hljs-number\">0</span>]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Back() <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> this.queue[<span class=\"hljs-built_in\">len</span>(this.queue)<span class=\"hljs-number\">-1</span>]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Empty() <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(this.queue) == <span class=\"hljs-number\">0</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Push(value <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">for</span> !this.Empty() &amp;&amp; value &gt; this.Back() &#123;<br>\t\tthis.queue = this.queue[:<span class=\"hljs-built_in\">len</span>(this.queue)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>\tthis.queue = <span class=\"hljs-built_in\">append</span>(this.queue, value)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *Deque)</span></span> Pop(value <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> !this.Empty() &amp;&amp; value == this.Front() &#123;<br>\t\tthis.queue = this.queue[<span class=\"hljs-number\">1</span>:]<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxSlidingWindow</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tdeque := Constructor()<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; k; i++ &#123;<br>\t\tdeque.Push(nums[i])<br>\t&#125;<br>\tresult = <span class=\"hljs-built_in\">append</span>(result, deque.Front())<br>\t<span class=\"hljs-keyword\">for</span> i := k; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tdeque.Pop(nums[i-k])<br>\t\tdeque.Push(nums[i])<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, deque.Front())<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"347-前K个高频元素\"><a href=\"#347-前K个高频元素\" class=\"headerlink\" title=\"347. 前K个高频元素\"></a>347. 前K个高频元素</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/top-k-frequent-elements/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Xg41167Lz\">优先级队列正式登场！大顶堆、小顶堆该怎么用？| LeetCode：347.前 K 个高频元素</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>构建键值对&lt;key, value&gt;，<code>key</code>为数字，<code>value</code>为该数字出现的次数。</li>\n<li>生成优先队列，优先级为<code>value</code></li>\n<li>取优先队列的前K个元素</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 优先队列中的条目</span><br><span class=\"hljs-keyword\">type</span> Element <span class=\"hljs-keyword\">struct</span> &#123;<br>\tNum     <span class=\"hljs-type\">int</span><br>\tCount   <span class=\"hljs-type\">int</span><br>&#125;<br><span class=\"hljs-comment\">// 比较器函数，根据Count降序</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">byPriority</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tpriorityA := a.(Element).Count<br>\tpriorityB := b.(Element).Count<br>\t<span class=\"hljs-keyword\">return</span> -utils.IntComparator(priorityA, priorityB) <span class=\"hljs-comment\">// &quot;-&quot; 代表降序</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">topKFrequent</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 构建键值对</span><br>    maps := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\tmaps[v]++<br>\t&#125;<br>    <span class=\"hljs-comment\">// 初始化优先队列</span><br>\tpq := priorityqueue.NewWith(byPriority)<br>\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> maps &#123;<br>\t\tpq.Enqueue(Element&#123;<br>\t\t\tNum:     k,<br>\t\t\tCount: v,<br>\t\t&#125;)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>    <span class=\"hljs-comment\">// 取前k个元素保存到result中</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; k; i++ &#123;<br>\t\tvalue, _ := pq.Dequeue()<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, value.(Element).Num)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历","abbrlink":"5d0ef500","date":"2023-10-06T11:14:44.000Z","_content":"\n# 代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历\n\n## 二叉树的遍历\n\n>   题目链接：\n>\n>   -   [144.二叉树的前序遍历](https://leetcode.cn/problems/binary-tree-preorder-traversal/)\n>   -   [145.二叉树的后序遍历](https://leetcode.cn/problems/binary-tree-postorder-traversal/)\n>   -   [94.二叉树的中序遍历](https://leetcode.cn/problems/binary-tree-inorder-traversal/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html)\n>\n>   视频讲解：[每次写递归都要靠直觉？ 这次带你学透二叉树的递归遍历！](https://www.bilibili.com/video/BV1Wh411S7xt)\n>\n>   状态：AC\n\n### 递归思路\n\n递归还是比较简单的，直接按照遍历规则写递归代码即可\n\n### 代码\n\n``` go\n// 递归前序遍历\nfunc preorderTraversal(root *TreeNode) []int {\n\tvar result []int\n\tgetResultPreorder(root, &result)\n\treturn result\n}\n\nfunc getResultPreorder(root *TreeNode, result *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\t*result = append(*result, root.Val)\n\tgetResultPreorder(root.Left, result)\n\tgetResultPreorder(root.Right, result)\n}\n```\n\n``` go\n// 递归后序遍历\nfunc postorderTraversal(root *TreeNode) []int {\n\tvar result []int\n\tgetResultPostorder(root, &result)\n\treturn result\n}\n\nfunc getResultPostorder(root *TreeNode, result *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tgetResultPostorder(root.Left, result)\n\tgetResultPostorder(root.Right, result)\n\t*result = append(*result, root.Val)\n}\n```\n\n``` go\n// 递归中序遍历\nfunc inorderTraversal(root *TreeNode) []int {\n\tvar result []int\n\tgetResultInorder(root, &result)\n\treturn result\n}\n\nfunc getResultInorder(root *TreeNode, result *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tgetResultInorder(root.Left, result)\n\t*result = append(*result, root.Val)\n\tgetResultInorder(root.Right, result)\n}\n```\n\n### 非递归思路\n\n非递归需要借助栈来实现，每次存放树的左右节点（若存在），并判断根节点应该在什么时候存入结果数组。\n\n``` go\n// 非递归前序遍历\nfunc preorderTraversal(root *TreeNode) []int {\n\tstack := arraystack.New()\n\tresult := []int{}\n\tif root == nil {\n\t\treturn result\n\t}\n\tstack.Push(root)\n\tfor !stack.Empty() {\n\t\tvalue, _ := stack.Pop()\n\t\tresult = append(result, value.(*TreeNode).Val)\n\t\tif value.(*TreeNode).Right != nil {\n\t\t\tstack.Push(value.(*TreeNode).Right)\n\t\t}\n\t\tif value.(*TreeNode).Left != nil {\n\t\t\tstack.Push(value.(*TreeNode).Left)\n\t\t}\n\t}\n\treturn result\n}\n```\n\n``` go\n// 非递归后序遍历\nfunc postorderTraversal(root *TreeNode) []int {\n\tstack := arraystack.New()\n\tresult := []int{}\n\tif root == nil {\n\t\treturn result\n\t}\n\tstack.Push(root)\n\tfor !stack.Empty() {\n\t\tvalue, _ := stack.Pop()\n\t\tresult = append(result, value.(*TreeNode).Val)\n\t\tif value.(*TreeNode).Left != nil {\n\t\t\tstack.Push(value.(*TreeNode).Left)\n\t\t}\n\t\tif value.(*TreeNode).Right != nil {\n\t\t\tstack.Push(value.(*TreeNode).Right)\n\t\t}\n\t}\n\tfor i := 0; i < len(result)/2; i++ {\n\t\tresult[i], result[len(result)-1-i] = result[len(result)-1-i], result[i]\n\t}\n\treturn result\n}\n\n```\n\n``` go\n// 非递归中序遍历\nfunc InorderTraversal1(root *TreeNode) []int {\n\tstack := arraystack.New()\n\tresult := []int{}\n\tif root == nil {\n\t\treturn result\n\t}\n\tp := root\n\tfor !stack.Empty() || p != nil {\n\t\tif p != nil {\n\t\t\tstack.Push(p)\n\t\t\tp = p.Left\n\t\t} else {\n\t\t\tnode, _ := stack.Pop()\n\t\t\tp = node.(*TreeNode)\n\t\t\tresult = append(result, p.Val)\n\t\t\tp = p.Right\n\t\t}\n\t}\n\treturn result\n}\n\n```\n\n","source":"_posts/day13.md","raw":"---\ntitle: 代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 二叉树\ncategories: 刷题\nabbrlink: 5d0ef500\ndate: 2023-10-06 19:14:44\n---\n\n# 代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历\n\n## 二叉树的遍历\n\n>   题目链接：\n>\n>   -   [144.二叉树的前序遍历](https://leetcode.cn/problems/binary-tree-preorder-traversal/)\n>   -   [145.二叉树的后序遍历](https://leetcode.cn/problems/binary-tree-postorder-traversal/)\n>   -   [94.二叉树的中序遍历](https://leetcode.cn/problems/binary-tree-inorder-traversal/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html)\n>\n>   视频讲解：[每次写递归都要靠直觉？ 这次带你学透二叉树的递归遍历！](https://www.bilibili.com/video/BV1Wh411S7xt)\n>\n>   状态：AC\n\n### 递归思路\n\n递归还是比较简单的，直接按照遍历规则写递归代码即可\n\n### 代码\n\n``` go\n// 递归前序遍历\nfunc preorderTraversal(root *TreeNode) []int {\n\tvar result []int\n\tgetResultPreorder(root, &result)\n\treturn result\n}\n\nfunc getResultPreorder(root *TreeNode, result *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\t*result = append(*result, root.Val)\n\tgetResultPreorder(root.Left, result)\n\tgetResultPreorder(root.Right, result)\n}\n```\n\n``` go\n// 递归后序遍历\nfunc postorderTraversal(root *TreeNode) []int {\n\tvar result []int\n\tgetResultPostorder(root, &result)\n\treturn result\n}\n\nfunc getResultPostorder(root *TreeNode, result *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tgetResultPostorder(root.Left, result)\n\tgetResultPostorder(root.Right, result)\n\t*result = append(*result, root.Val)\n}\n```\n\n``` go\n// 递归中序遍历\nfunc inorderTraversal(root *TreeNode) []int {\n\tvar result []int\n\tgetResultInorder(root, &result)\n\treturn result\n}\n\nfunc getResultInorder(root *TreeNode, result *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tgetResultInorder(root.Left, result)\n\t*result = append(*result, root.Val)\n\tgetResultInorder(root.Right, result)\n}\n```\n\n### 非递归思路\n\n非递归需要借助栈来实现，每次存放树的左右节点（若存在），并判断根节点应该在什么时候存入结果数组。\n\n``` go\n// 非递归前序遍历\nfunc preorderTraversal(root *TreeNode) []int {\n\tstack := arraystack.New()\n\tresult := []int{}\n\tif root == nil {\n\t\treturn result\n\t}\n\tstack.Push(root)\n\tfor !stack.Empty() {\n\t\tvalue, _ := stack.Pop()\n\t\tresult = append(result, value.(*TreeNode).Val)\n\t\tif value.(*TreeNode).Right != nil {\n\t\t\tstack.Push(value.(*TreeNode).Right)\n\t\t}\n\t\tif value.(*TreeNode).Left != nil {\n\t\t\tstack.Push(value.(*TreeNode).Left)\n\t\t}\n\t}\n\treturn result\n}\n```\n\n``` go\n// 非递归后序遍历\nfunc postorderTraversal(root *TreeNode) []int {\n\tstack := arraystack.New()\n\tresult := []int{}\n\tif root == nil {\n\t\treturn result\n\t}\n\tstack.Push(root)\n\tfor !stack.Empty() {\n\t\tvalue, _ := stack.Pop()\n\t\tresult = append(result, value.(*TreeNode).Val)\n\t\tif value.(*TreeNode).Left != nil {\n\t\t\tstack.Push(value.(*TreeNode).Left)\n\t\t}\n\t\tif value.(*TreeNode).Right != nil {\n\t\t\tstack.Push(value.(*TreeNode).Right)\n\t\t}\n\t}\n\tfor i := 0; i < len(result)/2; i++ {\n\t\tresult[i], result[len(result)-1-i] = result[len(result)-1-i], result[i]\n\t}\n\treturn result\n}\n\n```\n\n``` go\n// 非递归中序遍历\nfunc InorderTraversal1(root *TreeNode) []int {\n\tstack := arraystack.New()\n\tresult := []int{}\n\tif root == nil {\n\t\treturn result\n\t}\n\tp := root\n\tfor !stack.Empty() || p != nil {\n\t\tif p != nil {\n\t\t\tstack.Push(p)\n\t\t\tp = p.Left\n\t\t} else {\n\t\t\tnode, _ := stack.Pop()\n\t\t\tp = node.(*TreeNode)\n\t\t\tresult = append(result, p.Val)\n\t\t\tp = p.Right\n\t\t}\n\t}\n\treturn result\n}\n\n```\n\n","slug":"day13","published":1,"updated":"2023-10-24T19:34:58.404Z","_id":"clneippor0000vez88eiyex1t","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第十三天-144-二叉树的前序遍历、145-二叉树的后序遍历、94-二叉树的中序遍历\"><a href=\"#代码随想录算法训练营第十三天-144-二叉树的前序遍历、145-二叉树的后序遍历、94-二叉树的中序遍历\" class=\"headerlink\" title=\"代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历\"></a>代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历</h1><h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><blockquote>\n<p>  题目链接：</p>\n<ul>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-preorder-traversal/\">144.二叉树的前序遍历</a></li>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-postorder-traversal/\">145.二叉树的后序遍历</a></li>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-inorder-traversal/\">94.二叉树的中序遍历</a></li>\n</ul>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Wh411S7xt\">每次写递归都要靠直觉？ 这次带你学透二叉树的递归遍历！</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"递归思路\"><a href=\"#递归思路\" class=\"headerlink\" title=\"递归思路\"></a>递归思路</h3><p>递归还是比较简单的，直接按照遍历规则写递归代码即可</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归前序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">preorderTraversal</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\tgetResultPreorder(root, &amp;result)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResultPreorder</span><span class=\"hljs-params\">(root *TreeNode, result *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t*result = <span class=\"hljs-built_in\">append</span>(*result, root.Val)<br>\tgetResultPreorder(root.Left, result)<br>\tgetResultPreorder(root.Right, result)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归后序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">postorderTraversal</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\tgetResultPostorder(root, &amp;result)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResultPostorder</span><span class=\"hljs-params\">(root *TreeNode, result *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tgetResultPostorder(root.Left, result)<br>\tgetResultPostorder(root.Right, result)<br>\t*result = <span class=\"hljs-built_in\">append</span>(*result, root.Val)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归中序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">inorderTraversal</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\tgetResultInorder(root, &amp;result)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResultInorder</span><span class=\"hljs-params\">(root *TreeNode, result *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tgetResultInorder(root.Left, result)<br>\t*result = <span class=\"hljs-built_in\">append</span>(*result, root.Val)<br>\tgetResultInorder(root.Right, result)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"非递归思路\"><a href=\"#非递归思路\" class=\"headerlink\" title=\"非递归思路\"></a>非递归思路</h3><p>非递归需要借助栈来实现，每次存放树的左右节点（若存在），并判断根节点应该在什么时候存入结果数组。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 非递归前序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">preorderTraversal</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tstack := arraystack.New()<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tstack.Push(root)<br>\t<span class=\"hljs-keyword\">for</span> !stack.Empty() &#123;<br>\t\tvalue, _ := stack.Pop()<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, value.(*TreeNode).Val)<br>\t\t<span class=\"hljs-keyword\">if</span> value.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tstack.Push(value.(*TreeNode).Right)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> value.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tstack.Push(value.(*TreeNode).Left)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 非递归后序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">postorderTraversal</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tstack := arraystack.New()<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tstack.Push(root)<br>\t<span class=\"hljs-keyword\">for</span> !stack.Empty() &#123;<br>\t\tvalue, _ := stack.Pop()<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, value.(*TreeNode).Val)<br>\t\t<span class=\"hljs-keyword\">if</span> value.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tstack.Push(value.(*TreeNode).Left)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> value.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tstack.Push(value.(*TreeNode).Right)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(result)/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\tresult[i], result[<span class=\"hljs-built_in\">len</span>(result)<span class=\"hljs-number\">-1</span>-i] = result[<span class=\"hljs-built_in\">len</span>(result)<span class=\"hljs-number\">-1</span>-i], result[i]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 非递归中序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">InorderTraversal1</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tstack := arraystack.New()<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tp := root<br>\t<span class=\"hljs-keyword\">for</span> !stack.Empty() || p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tstack.Push(p)<br>\t\t\tp = p.Left<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tnode, _ := stack.Pop()<br>\t\t\tp = node.(*TreeNode)<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, p.Val)<br>\t\t\tp = p.Right<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第十三天-144-二叉树的前序遍历、145-二叉树的后序遍历、94-二叉树的中序遍历\"><a href=\"#代码随想录算法训练营第十三天-144-二叉树的前序遍历、145-二叉树的后序遍历、94-二叉树的中序遍历\" class=\"headerlink\" title=\"代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历\"></a>代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历</h1><h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><blockquote>\n<p>  题目链接：</p>\n<ul>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-preorder-traversal/\">144.二叉树的前序遍历</a></li>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-postorder-traversal/\">145.二叉树的后序遍历</a></li>\n<li><a href=\"https://leetcode.cn/problems/binary-tree-inorder-traversal/\">94.二叉树的中序遍历</a></li>\n</ul>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Wh411S7xt\">每次写递归都要靠直觉？ 这次带你学透二叉树的递归遍历！</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"递归思路\"><a href=\"#递归思路\" class=\"headerlink\" title=\"递归思路\"></a>递归思路</h3><p>递归还是比较简单的，直接按照遍历规则写递归代码即可</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归前序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">preorderTraversal</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\tgetResultPreorder(root, &amp;result)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResultPreorder</span><span class=\"hljs-params\">(root *TreeNode, result *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t*result = <span class=\"hljs-built_in\">append</span>(*result, root.Val)<br>\tgetResultPreorder(root.Left, result)<br>\tgetResultPreorder(root.Right, result)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归后序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">postorderTraversal</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\tgetResultPostorder(root, &amp;result)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResultPostorder</span><span class=\"hljs-params\">(root *TreeNode, result *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tgetResultPostorder(root.Left, result)<br>\tgetResultPostorder(root.Right, result)<br>\t*result = <span class=\"hljs-built_in\">append</span>(*result, root.Val)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归中序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">inorderTraversal</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\tgetResultInorder(root, &amp;result)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResultInorder</span><span class=\"hljs-params\">(root *TreeNode, result *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tgetResultInorder(root.Left, result)<br>\t*result = <span class=\"hljs-built_in\">append</span>(*result, root.Val)<br>\tgetResultInorder(root.Right, result)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"非递归思路\"><a href=\"#非递归思路\" class=\"headerlink\" title=\"非递归思路\"></a>非递归思路</h3><p>非递归需要借助栈来实现，每次存放树的左右节点（若存在），并判断根节点应该在什么时候存入结果数组。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 非递归前序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">preorderTraversal</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tstack := arraystack.New()<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tstack.Push(root)<br>\t<span class=\"hljs-keyword\">for</span> !stack.Empty() &#123;<br>\t\tvalue, _ := stack.Pop()<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, value.(*TreeNode).Val)<br>\t\t<span class=\"hljs-keyword\">if</span> value.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tstack.Push(value.(*TreeNode).Right)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> value.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tstack.Push(value.(*TreeNode).Left)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 非递归后序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">postorderTraversal</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tstack := arraystack.New()<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tstack.Push(root)<br>\t<span class=\"hljs-keyword\">for</span> !stack.Empty() &#123;<br>\t\tvalue, _ := stack.Pop()<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, value.(*TreeNode).Val)<br>\t\t<span class=\"hljs-keyword\">if</span> value.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tstack.Push(value.(*TreeNode).Left)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> value.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tstack.Push(value.(*TreeNode).Right)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(result)/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\tresult[i], result[<span class=\"hljs-built_in\">len</span>(result)<span class=\"hljs-number\">-1</span>-i] = result[<span class=\"hljs-built_in\">len</span>(result)<span class=\"hljs-number\">-1</span>-i], result[i]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 非递归中序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">InorderTraversal1</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tstack := arraystack.New()<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tp := root<br>\t<span class=\"hljs-keyword\">for</span> !stack.Empty() || p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tstack.Push(p)<br>\t\t\tp = p.Left<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tnode, _ := stack.Pop()<br>\t\t\tp = node.(*TreeNode)<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, p.Val)<br>\t\t\tp = p.Right<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度、226.翻转二叉树、101.对称二叉树","abbrlink":"e1408dd4","date":"2023-10-07T13:33:44.000Z","_content":"# 代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度\n\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html)\n>\n> 视频讲解：[讲透二叉树的层序遍历 | 广度优先搜索 | LeetCode：102.二叉树的层序遍历](https://www.bilibili.com/video/BV1GY4y1u7b2)\n\n## 102. 二叉树的层序遍历\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/binary-tree-level-order-traversal/)\n>\n> 状态：AC\n\n### 思路\n\n层序遍历顾名思义就是要一层一层的输出树的结点，父节点输出后还要将子节点保存一下，到下一层继续使用，这种依次使用，队列的数据结构是最合适的。父节点先入队，将两个子节点依次入队。这一层的父节点入队过后要统计有多少个，为了输出每层分别是谁\n\n### 代码\n\n```go\nfunc levelOrder(root *TreeNode) [][]int {\n\tvar result [][]int\n\tif root == nil {\n\t\treturn result\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\treturn result\n}\n```\n\n## 107. 二叉树的层序遍历II\n\n> 题目链接：[107.二叉树的层次遍历II](https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/)\n>\n> 状态：AC\n\n### 思路\n\n基本同上，这次不过要从下向上输出，翻转最后上一题的`result`即可\n\n### 代码\n\n``` go\nfunc levelOrderBottom(root *TreeNode) [][]int {\n\tvar result [][]int\n\tif root == nil {\n\t\treturn result\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\tfor i := 0; i < len(result)/2; i++ {\n\t\tresult[i], result[len(result)-1-i] = result[len(result)-1-i], result[i]\n\t}\n\treturn result\n}\n```\n\n## 199.二叉树的右视图\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/binary-tree-right-side-view/)\n>\n> 状态：AC\n\n### 思路\n\n将第一次层序遍历的结果使用二维数组逐行写出来，不难发现右视图就是二维数组每一行的最后一个元素\n\n### 代码\n\n``` go\nfunc rightSideView(root *TreeNode) []int {\n\tvar results [][]int\n\tif root == nil {\n\t\treturn []int{}\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresults = append(results, temp)\n\t}\n\tresult := []int{}\n\tfor _, v := range results {\n\t\tresult = append(result, v[len(v)-1])\n\t}\n\treturn result\n}\n\n```\n\n## 637.二叉树的层平均值\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/average-of-levels-in-binary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n层序每一层之后求平均值\n\n### 代码\n\n``` go\nfunc averageOfLevels(root *TreeNode) []float64 {\n\tvar result []float64\n\tif root == nil {\n\t\treturn result\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\tsum := 0\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\tsum += node.(*TreeNode).Val\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, float64(sum)/float64(size))\n\t}\n\treturn result\n}\n```\n\n## 429.N叉树的层序遍历\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/n-ary-tree-level-order-traversal/)\n>\n> 状态：AC\n\n### 思路\n\n层序添加子节点改为循环遍历`Children`数组即可\n\n### 代码\n\n``` go\ntype Node struct {\n\tVal      int\n\tChildren []*Node\n}\n\nfunc levelOrder(root *Node) [][]int {\n\tvar result [][]int\n\tif root == nil {\n\t\treturn result\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*Node).Val)\n\t\t\tfor j := 0; j < len(node.(*Node).Children); j++ {\n\t\t\t\tif node.(*Node).Children[j] != nil {\n\t\t\t\t\tqueue.Enqueue(node.(*Node).Children[j])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\treturn result\n}\n\n```\n\n## 515.在每个树行中找最大值\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/find-largest-value-in-each-tree-row/)\n>\n> 状态：AC\n\n### 思路\n\n每一层找最大，模版依旧\n\n### 代码\n\n``` go\nfunc largestValues(root *TreeNode) []int {\n\tvar result []int\n\tif root == nil {\n\t\treturn result\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\tmaxNum := math.MinInt32\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\tif node.(*TreeNode).Val > maxNum {\n\t\t\t\tmaxNum = node.(*TreeNode).Val\n\t\t\t}\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, maxNum)\n\t}\n\treturn result\n}\n\n```\n\n##  116.填充每个节点的下一个右侧节点指针、 117.填充每个节点的下一个右侧节点指针II\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/)\n>\n> 状态：AC\n\n### 思路\n\n每行遍历出来看做一个链表，两道题代码思路一样\n\n### 代码\n\n``` go\n\n// 与117题代码相同\ntype Node struct {\n\tVal   int\n\tLeft  *Node\n\tRight *Node\n\tNext  *Node\n}\n\nfunc Connect(root *Node) *Node {\n\tif root == nil {\n\t\treturn nil\n\t}\n\tqueue := arrayqueue.New()\n\troot.Next = nil\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\tvar p *Node = nil\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\n\t\t\tif node.(*Node).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*Node).Left)\n\t\t\t}\n\t\t\tif node.(*Node).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*Node).Right)\n\t\t\t}\n\t\t\tif p == nil {\n\t\t\t\tp = node.(*Node)\n\t\t\t} else {\n\t\t\t\tp.Next = node.(*Node)\n\t\t\t\tp = p.Next\n\t\t\t}\n\t\t}\n\t\tp.Next = nil\n\t}\n\treturn root\n}\n\n```\n\n##  104.二叉树的最大深度\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/maximum-depth-of-binary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n使用递归法，如果递归到叶子节点则返回0，否则使用左右叶子结点继续向下递归，深度加一。取左右结点的最大值\n\n#### 方法二\n\n层序遍历，看`result`二维数组的行数\n\n### 代码\n\n``` go\n// 递归\nfunc maxNum(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc maxDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\treturn maxNum(maxDepth(root.Left), maxDepth(root.Right)) + 1\n}\n```\n\n``` go\n// 层序\nfunc maxDepth1(root *TreeNode) int {\n\tvar result [][]int\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\treturn len(result)\n}\n```\n\n## 111.二叉树的最小深度\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/minimum-depth-of-binary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n使用递归法，递归终止条件如下：到达了叶子节点`return 1`。到达空节点`return 0`。分别向左和右结点继续递归，计算更小的层数，当前层递归完成后`return 层数加一`\n\n#### 方法二\n\n使用层序遍历。遍历时如果遇到叶子节点说明到达了最低点，直接`return 当前层数`\n\n``` go\n//递归\nfunc minNum(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc minDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tif root.Left == nil && root.Right == nil {\n\t\treturn 1\n\t}\n\tminN := math.MaxInt32\n\tif root.Left != nil {\n\t\tminN = minNum(minDepth(root.Left), minN)\n\t}\n\tif root.Right != nil {\n\t\tminN = minNum(minDepth(root.Right), minN)\n\t}\n\treturn minN + 1\n}\n```\n\n``` go\n//层序\nfunc minDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tcount := 0\n\tfor !queue.Empty() {\n\t\tcount++\n\t\tsize := queue.Size()\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Left == nil && node.(*TreeNode).Right == nil {\n\t\t\t\treturn count\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n```\n\n## 226.翻转二叉树\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/invert-binary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n交换当前结点左右子节点，向下递归\n\n### 代码\n\n``` go\nfunc invertTree(root *TreeNode) *TreeNode {\n\tif root == nil {\n\t\treturn root\n\t}\n\troot.Left, root.Right = root.Right, root.Left\n\tinvertTree(root.Left)\n\tinvertTree(root.Right)\n\treturn root\n}\n```\n\n##  101. 对称二叉树\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/symmetric-tree/)\n>\n> 文章链接：[代码随想录(programmercarl.com)](https://programmercarl.com/0101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n>\n> 视频链接：[同时操作两个二叉树 | LeetCode：101. 对称二叉树](https://www.bilibili.com/video/BV1ue4y1Y7Mf)\n>\n> 状态：AC\n\n### 思路\n\n<font color=\"red\">错误思路如下</font>\n\n最开始想的是输出中序遍历的结果，根节点一定是最中间的数，比较两端是否对称即可。但是这种情况没考虑到\n\n``` go\n//      1\n//     / \\\n//    2   2\n//   /   /\n//  2   2\n```\n\n所以这个思路是错的\n\n---\n\n<font color=\"green\">正确思路如下</font>\n\n用后序遍历和“伪后序遍历”依次比较子树。后序遍历是左右根，伪后序比那里是右左根，这样可以比较相同的结点。\n\n使用递归需要做如下判断\n\n- 递归函数的构造\n    - 比较左右结点，传参是两个节点`func compare(left, right *TreeNode) bool`\n- 递归终止条件\n    - 两个节点均为空节点，对称`return true`\n    - 左空右不空，或，左不空右空，不对称`return false`\n    - 左右均不空，但是值不同，不对称`return false`\n- 单次递归逻辑\n    - 左节点的左 和 右结点的右  向下递归\n    - 且 左节点的右 和 右结点的左  向下递归\n    - 且二者值均为`true`\n\n### 代码\n\n``` go\nfunc compare(left, right *TreeNode) bool {\n\tif left == nil && right == nil {\n\t\treturn true\n\t}\n\tif left != nil && right == nil {\n\t\treturn false\n\t}\n\tif left == nil && right != nil {\n\t\treturn false\n\t}\n\tif left.Val != right.Val {\n\t\treturn false\n\t}\n\treturn compare(left.Left, right.Right) && compare(left.Right, right.Left)\n\n}\n\nfunc isSymmetric(root *TreeNode) bool {\n\tif root == nil {\n\t\treturn true\n\t}\n\treturn compare(root.Left, root.Right)\n}\n```\n\n","source":"_posts/day14.md","raw":"---\ntitle: 代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度、226.翻转二叉树、101.对称二叉树\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 二叉树\ncategories: 刷题\nabbrlink: e1408dd4\ndate: 2023-10-07 21:33:44\n---\n# 代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度\n\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html)\n>\n> 视频讲解：[讲透二叉树的层序遍历 | 广度优先搜索 | LeetCode：102.二叉树的层序遍历](https://www.bilibili.com/video/BV1GY4y1u7b2)\n\n## 102. 二叉树的层序遍历\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/binary-tree-level-order-traversal/)\n>\n> 状态：AC\n\n### 思路\n\n层序遍历顾名思义就是要一层一层的输出树的结点，父节点输出后还要将子节点保存一下，到下一层继续使用，这种依次使用，队列的数据结构是最合适的。父节点先入队，将两个子节点依次入队。这一层的父节点入队过后要统计有多少个，为了输出每层分别是谁\n\n### 代码\n\n```go\nfunc levelOrder(root *TreeNode) [][]int {\n\tvar result [][]int\n\tif root == nil {\n\t\treturn result\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\treturn result\n}\n```\n\n## 107. 二叉树的层序遍历II\n\n> 题目链接：[107.二叉树的层次遍历II](https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/)\n>\n> 状态：AC\n\n### 思路\n\n基本同上，这次不过要从下向上输出，翻转最后上一题的`result`即可\n\n### 代码\n\n``` go\nfunc levelOrderBottom(root *TreeNode) [][]int {\n\tvar result [][]int\n\tif root == nil {\n\t\treturn result\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\tfor i := 0; i < len(result)/2; i++ {\n\t\tresult[i], result[len(result)-1-i] = result[len(result)-1-i], result[i]\n\t}\n\treturn result\n}\n```\n\n## 199.二叉树的右视图\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/binary-tree-right-side-view/)\n>\n> 状态：AC\n\n### 思路\n\n将第一次层序遍历的结果使用二维数组逐行写出来，不难发现右视图就是二维数组每一行的最后一个元素\n\n### 代码\n\n``` go\nfunc rightSideView(root *TreeNode) []int {\n\tvar results [][]int\n\tif root == nil {\n\t\treturn []int{}\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresults = append(results, temp)\n\t}\n\tresult := []int{}\n\tfor _, v := range results {\n\t\tresult = append(result, v[len(v)-1])\n\t}\n\treturn result\n}\n\n```\n\n## 637.二叉树的层平均值\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/average-of-levels-in-binary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n层序每一层之后求平均值\n\n### 代码\n\n``` go\nfunc averageOfLevels(root *TreeNode) []float64 {\n\tvar result []float64\n\tif root == nil {\n\t\treturn result\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\tsum := 0\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\tsum += node.(*TreeNode).Val\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, float64(sum)/float64(size))\n\t}\n\treturn result\n}\n```\n\n## 429.N叉树的层序遍历\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/n-ary-tree-level-order-traversal/)\n>\n> 状态：AC\n\n### 思路\n\n层序添加子节点改为循环遍历`Children`数组即可\n\n### 代码\n\n``` go\ntype Node struct {\n\tVal      int\n\tChildren []*Node\n}\n\nfunc levelOrder(root *Node) [][]int {\n\tvar result [][]int\n\tif root == nil {\n\t\treturn result\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*Node).Val)\n\t\t\tfor j := 0; j < len(node.(*Node).Children); j++ {\n\t\t\t\tif node.(*Node).Children[j] != nil {\n\t\t\t\t\tqueue.Enqueue(node.(*Node).Children[j])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\treturn result\n}\n\n```\n\n## 515.在每个树行中找最大值\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/find-largest-value-in-each-tree-row/)\n>\n> 状态：AC\n\n### 思路\n\n每一层找最大，模版依旧\n\n### 代码\n\n``` go\nfunc largestValues(root *TreeNode) []int {\n\tvar result []int\n\tif root == nil {\n\t\treturn result\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\tmaxNum := math.MinInt32\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\tif node.(*TreeNode).Val > maxNum {\n\t\t\t\tmaxNum = node.(*TreeNode).Val\n\t\t\t}\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, maxNum)\n\t}\n\treturn result\n}\n\n```\n\n##  116.填充每个节点的下一个右侧节点指针、 117.填充每个节点的下一个右侧节点指针II\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/)\n>\n> 状态：AC\n\n### 思路\n\n每行遍历出来看做一个链表，两道题代码思路一样\n\n### 代码\n\n``` go\n\n// 与117题代码相同\ntype Node struct {\n\tVal   int\n\tLeft  *Node\n\tRight *Node\n\tNext  *Node\n}\n\nfunc Connect(root *Node) *Node {\n\tif root == nil {\n\t\treturn nil\n\t}\n\tqueue := arrayqueue.New()\n\troot.Next = nil\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\tvar p *Node = nil\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\n\t\t\tif node.(*Node).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*Node).Left)\n\t\t\t}\n\t\t\tif node.(*Node).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*Node).Right)\n\t\t\t}\n\t\t\tif p == nil {\n\t\t\t\tp = node.(*Node)\n\t\t\t} else {\n\t\t\t\tp.Next = node.(*Node)\n\t\t\t\tp = p.Next\n\t\t\t}\n\t\t}\n\t\tp.Next = nil\n\t}\n\treturn root\n}\n\n```\n\n##  104.二叉树的最大深度\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/maximum-depth-of-binary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n使用递归法，如果递归到叶子节点则返回0，否则使用左右叶子结点继续向下递归，深度加一。取左右结点的最大值\n\n#### 方法二\n\n层序遍历，看`result`二维数组的行数\n\n### 代码\n\n``` go\n// 递归\nfunc maxNum(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc maxDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\treturn maxNum(maxDepth(root.Left), maxDepth(root.Right)) + 1\n}\n```\n\n``` go\n// 层序\nfunc maxDepth1(root *TreeNode) int {\n\tvar result [][]int\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\treturn len(result)\n}\n```\n\n## 111.二叉树的最小深度\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/minimum-depth-of-binary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n使用递归法，递归终止条件如下：到达了叶子节点`return 1`。到达空节点`return 0`。分别向左和右结点继续递归，计算更小的层数，当前层递归完成后`return 层数加一`\n\n#### 方法二\n\n使用层序遍历。遍历时如果遇到叶子节点说明到达了最低点，直接`return 当前层数`\n\n``` go\n//递归\nfunc minNum(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc minDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tif root.Left == nil && root.Right == nil {\n\t\treturn 1\n\t}\n\tminN := math.MaxInt32\n\tif root.Left != nil {\n\t\tminN = minNum(minDepth(root.Left), minN)\n\t}\n\tif root.Right != nil {\n\t\tminN = minNum(minDepth(root.Right), minN)\n\t}\n\treturn minN + 1\n}\n```\n\n``` go\n//层序\nfunc minDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tcount := 0\n\tfor !queue.Empty() {\n\t\tcount++\n\t\tsize := queue.Size()\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Left == nil && node.(*TreeNode).Right == nil {\n\t\t\t\treturn count\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n```\n\n## 226.翻转二叉树\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/invert-binary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n交换当前结点左右子节点，向下递归\n\n### 代码\n\n``` go\nfunc invertTree(root *TreeNode) *TreeNode {\n\tif root == nil {\n\t\treturn root\n\t}\n\troot.Left, root.Right = root.Right, root.Left\n\tinvertTree(root.Left)\n\tinvertTree(root.Right)\n\treturn root\n}\n```\n\n##  101. 对称二叉树\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/symmetric-tree/)\n>\n> 文章链接：[代码随想录(programmercarl.com)](https://programmercarl.com/0101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n>\n> 视频链接：[同时操作两个二叉树 | LeetCode：101. 对称二叉树](https://www.bilibili.com/video/BV1ue4y1Y7Mf)\n>\n> 状态：AC\n\n### 思路\n\n<font color=\"red\">错误思路如下</font>\n\n最开始想的是输出中序遍历的结果，根节点一定是最中间的数，比较两端是否对称即可。但是这种情况没考虑到\n\n``` go\n//      1\n//     / \\\n//    2   2\n//   /   /\n//  2   2\n```\n\n所以这个思路是错的\n\n---\n\n<font color=\"green\">正确思路如下</font>\n\n用后序遍历和“伪后序遍历”依次比较子树。后序遍历是左右根，伪后序比那里是右左根，这样可以比较相同的结点。\n\n使用递归需要做如下判断\n\n- 递归函数的构造\n    - 比较左右结点，传参是两个节点`func compare(left, right *TreeNode) bool`\n- 递归终止条件\n    - 两个节点均为空节点，对称`return true`\n    - 左空右不空，或，左不空右空，不对称`return false`\n    - 左右均不空，但是值不同，不对称`return false`\n- 单次递归逻辑\n    - 左节点的左 和 右结点的右  向下递归\n    - 且 左节点的右 和 右结点的左  向下递归\n    - 且二者值均为`true`\n\n### 代码\n\n``` go\nfunc compare(left, right *TreeNode) bool {\n\tif left == nil && right == nil {\n\t\treturn true\n\t}\n\tif left != nil && right == nil {\n\t\treturn false\n\t}\n\tif left == nil && right != nil {\n\t\treturn false\n\t}\n\tif left.Val != right.Val {\n\t\treturn false\n\t}\n\treturn compare(left.Left, right.Right) && compare(left.Right, right.Left)\n\n}\n\nfunc isSymmetric(root *TreeNode) bool {\n\tif root == nil {\n\t\treturn true\n\t}\n\treturn compare(root.Left, root.Right)\n}\n```\n\n","slug":"day14","published":1,"updated":"2023-10-24T19:35:03.644Z","_id":"clng3wbhs0000t4whcaffbolr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第十四天-102-二叉树的层序遍历、107-二叉树的层次遍历II、199-二叉树的右视图、637-二叉树的层平均值、429-N叉树的层序遍历、515-在每个树行中找最大值、116-填充每个节点的下一个右侧节点指、117-填充每个节点的下一个右侧节点指针II、104-二叉树的最大深度、111-二叉树的最小深度\"><a href=\"#代码随想录算法训练营第十四天-102-二叉树的层序遍历、107-二叉树的层次遍历II、199-二叉树的右视图、637-二叉树的层平均值、429-N叉树的层序遍历、515-在每个树行中找最大值、116-填充每个节点的下一个右侧节点指、117-填充每个节点的下一个右侧节点指针II、104-二叉树的最大深度、111-二叉树的最小深度\" class=\"headerlink\" title=\"代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度\"></a>代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度</h1><blockquote>\n<p>文章讲解：<a href=\"https://programmercarl.com/0102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1GY4y1u7b2\">讲透二叉树的层序遍历 | 广度优先搜索 | LeetCode：102.二叉树的层序遍历</a></p>\n</blockquote>\n<h2 id=\"102-二叉树的层序遍历\"><a href=\"#102-二叉树的层序遍历\" class=\"headerlink\" title=\"102. 二叉树的层序遍历\"></a>102. 二叉树的层序遍历</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>层序遍历顾名思义就是要一层一层的输出树的结点，父节点输出后还要将子节点保存一下，到下一层继续使用，这种依次使用，队列的数据结构是最合适的。父节点先入队，将两个子节点依次入队。这一层的父节点入队过后要统计有多少个，为了输出每层分别是谁</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">levelOrder</span><span class=\"hljs-params\">(root *TreeNode)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"107-二叉树的层序遍历II\"><a href=\"#107-二叉树的层序遍历II\" class=\"headerlink\" title=\"107. 二叉树的层序遍历II\"></a>107. 二叉树的层序遍历II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/\">107.二叉树的层次遍历II</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>基本同上，这次不过要从下向上输出，翻转最后上一题的<code>result</code>即可</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">levelOrderBottom</span><span class=\"hljs-params\">(root *TreeNode)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(result)/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\tresult[i], result[<span class=\"hljs-built_in\">len</span>(result)<span class=\"hljs-number\">-1</span>-i] = result[<span class=\"hljs-built_in\">len</span>(result)<span class=\"hljs-number\">-1</span>-i], result[i]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"199-二叉树的右视图\"><a href=\"#199-二叉树的右视图\" class=\"headerlink\" title=\"199.二叉树的右视图\"></a>199.二叉树的右视图</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/binary-tree-right-side-view/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>将第一次层序遍历的结果使用二维数组逐行写出来，不难发现右视图就是二维数组每一行的最后一个元素</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rightSideView</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> results [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresults = <span class=\"hljs-built_in\">append</span>(results, temp)<br>\t&#125;<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> results &#123;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, v[<span class=\"hljs-built_in\">len</span>(v)<span class=\"hljs-number\">-1</span>])<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"637-二叉树的层平均值\"><a href=\"#637-二叉树的层平均值\" class=\"headerlink\" title=\"637.二叉树的层平均值\"></a>637.二叉树的层平均值</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/average-of-levels-in-binary-tree/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>层序每一层之后求平均值</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">averageOfLevels</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">float64</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">float64</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\tsum := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\tsum += node.(*TreeNode).Val<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, <span class=\"hljs-type\">float64</span>(sum)/<span class=\"hljs-type\">float64</span>(size))<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"429-N叉树的层序遍历\"><a href=\"#429-N叉树的层序遍历\" class=\"headerlink\" title=\"429.N叉树的层序遍历\"></a>429.N叉树的层序遍历</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/n-ary-tree-level-order-traversal/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-4\"><a href=\"#思路-4\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>层序添加子节点改为循环遍历<code>Children</code>数组即可</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal      <span class=\"hljs-type\">int</span><br>\tChildren []*Node<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">levelOrder</span><span class=\"hljs-params\">(root *Node)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*Node).Val)<br>\t\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">len</span>(node.(*Node).Children); j++ &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> node.(*Node).Children[j] != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\tqueue.Enqueue(node.(*Node).Children[j])<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"515-在每个树行中找最大值\"><a href=\"#515-在每个树行中找最大值\" class=\"headerlink\" title=\"515.在每个树行中找最大值\"></a>515.在每个树行中找最大值</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/find-largest-value-in-each-tree-row/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-5\"><a href=\"#思路-5\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>每一层找最大，模版依旧</p>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">largestValues</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\tmaxNum := math.MinInt32<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Val &gt; maxNum &#123;<br>\t\t\t\tmaxNum = node.(*TreeNode).Val<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, maxNum)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"116-填充每个节点的下一个右侧节点指针、-117-填充每个节点的下一个右侧节点指针II\"><a href=\"#116-填充每个节点的下一个右侧节点指针、-117-填充每个节点的下一个右侧节点指针II\" class=\"headerlink\" title=\"116.填充每个节点的下一个右侧节点指针、 117.填充每个节点的下一个右侧节点指针II\"></a>116.填充每个节点的下一个右侧节点指针、 117.填充每个节点的下一个右侧节点指针II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-6\"><a href=\"#思路-6\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>每行遍历出来看做一个链表，两道题代码思路一样</p>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-comment\">// 与117题代码相同</span><br><span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal   <span class=\"hljs-type\">int</span><br>\tLeft  *Node<br>\tRight *Node<br>\tNext  *Node<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">(root *Node)</span></span> *Node &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\troot.Next = <span class=\"hljs-literal\">nil</span><br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\t<span class=\"hljs-keyword\">var</span> p *Node = <span class=\"hljs-literal\">nil</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br><br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*Node).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*Node).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*Node).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*Node).Right)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> p == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tp = node.(*Node)<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tp.Next = node.(*Node)<br>\t\t\t\tp = p.Next<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tp.Next = <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"104-二叉树的最大深度\"><a href=\"#104-二叉树的最大深度\" class=\"headerlink\" title=\"104.二叉树的最大深度\"></a>104.二叉树的最大深度</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-7\"><a href=\"#思路-7\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用递归法，如果递归到叶子节点则返回0，否则使用左右叶子结点继续向下递归，深度加一。取左右结点的最大值</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>层序遍历，看<code>result</code>二维数组的行数</p>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> maxNum(maxDepth(root.Left), maxDepth(root.Right)) + <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 层序</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth1</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"111-二叉树的最小深度\"><a href=\"#111-二叉树的最小深度\" class=\"headerlink\" title=\"111.二叉树的最小深度\"></a>111.二叉树的最小深度</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-8\"><a href=\"#思路-8\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用递归法，递归终止条件如下：到达了叶子节点<code>return 1</code>。到达空节点<code>return 0</code>。分别向左和右结点继续递归，计算更小的层数，当前层递归完成后<code>return 层数加一</code></p>\n<h4 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>使用层序遍历。遍历时如果遇到叶子节点说明到达了最低点，直接<code>return 当前层数</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//递归</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &lt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>\t&#125;<br>\tminN := math.MaxInt32<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tminN = minNum(minDepth(root.Left), minN)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tminN = minNum(minDepth(root.Right), minN)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minN + <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//层序</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\tcount := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tcount++<br>\t\tsize := queue.Size()<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; node.(*TreeNode).Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> count<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"226-翻转二叉树\"><a href=\"#226-翻转二叉树\" class=\"headerlink\" title=\"226.翻转二叉树\"></a>226.翻转二叉树</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/invert-binary-tree/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-9\"><a href=\"#思路-9\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>交换当前结点左右子节点，向下递归</p>\n<h3 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">invertTree</span><span class=\"hljs-params\">(root *TreeNode)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root<br>\t&#125;<br>\troot.Left, root.Right = root.Right, root.Left<br>\tinvertTree(root.Left)<br>\tinvertTree(root.Right)<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"101-对称二叉树\"><a href=\"#101-对称二叉树\" class=\"headerlink\" title=\"101. 对称二叉树\"></a>101. 对称二叉树</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/symmetric-tree/\">力扣题目链接</a></p>\n<p>文章链接：<a href=\"https://programmercarl.com/0101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频链接：<a href=\"https://www.bilibili.com/video/BV1ue4y1Y7Mf\">同时操作两个二叉树 | LeetCode：101. 对称二叉树</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-10\"><a href=\"#思路-10\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><font color=\"red\">错误思路如下</font></p>\n<p>最开始想的是输出中序遍历的结果，根节点一定是最中间的数，比较两端是否对称即可。但是这种情况没考虑到</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//      1</span><br><span class=\"hljs-comment\">//     / \\</span><br><span class=\"hljs-comment\">//    2   2</span><br><span class=\"hljs-comment\">//   /   /</span><br><span class=\"hljs-comment\">//  2   2</span><br></code></pre></td></tr></table></figure>\n\n<p>所以这个思路是错的</p>\n<hr>\n<p><font color=\"green\">正确思路如下</font></p>\n<p>用后序遍历和“伪后序遍历”依次比较子树。后序遍历是左右根，伪后序比那里是右左根，这样可以比较相同的结点。</p>\n<p>使用递归需要做如下判断</p>\n<ul>\n<li>递归函数的构造<ul>\n<li>比较左右结点，传参是两个节点<code>func compare(left, right *TreeNode) bool</code></li>\n</ul>\n</li>\n<li>递归终止条件<ul>\n<li>两个节点均为空节点，对称<code>return true</code></li>\n<li>左空右不空，或，左不空右空，不对称<code>return false</code></li>\n<li>左右均不空，但是值不同，不对称<code>return false</code></li>\n</ul>\n</li>\n<li>单次递归逻辑<ul>\n<li>左节点的左 和 右结点的右  向下递归</li>\n<li>且 左节点的右 和 右结点的左  向下递归</li>\n<li>且二者值均为<code>true</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码-9\"><a href=\"#代码-9\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(left, right *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> left == <span class=\"hljs-literal\">nil</span> &amp;&amp; right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> left != <span class=\"hljs-literal\">nil</span> &amp;&amp; right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> left == <span class=\"hljs-literal\">nil</span> &amp;&amp; right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> left.Val != right.Val &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> compare(left.Left, right.Right) &amp;&amp; compare(left.Right, right.Left)<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isSymmetric</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> compare(root.Left, root.Right)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第十四天-102-二叉树的层序遍历、107-二叉树的层次遍历II、199-二叉树的右视图、637-二叉树的层平均值、429-N叉树的层序遍历、515-在每个树行中找最大值、116-填充每个节点的下一个右侧节点指、117-填充每个节点的下一个右侧节点指针II、104-二叉树的最大深度、111-二叉树的最小深度\"><a href=\"#代码随想录算法训练营第十四天-102-二叉树的层序遍历、107-二叉树的层次遍历II、199-二叉树的右视图、637-二叉树的层平均值、429-N叉树的层序遍历、515-在每个树行中找最大值、116-填充每个节点的下一个右侧节点指、117-填充每个节点的下一个右侧节点指针II、104-二叉树的最大深度、111-二叉树的最小深度\" class=\"headerlink\" title=\"代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度\"></a>代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度</h1><blockquote>\n<p>文章讲解：<a href=\"https://programmercarl.com/0102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1GY4y1u7b2\">讲透二叉树的层序遍历 | 广度优先搜索 | LeetCode：102.二叉树的层序遍历</a></p>\n</blockquote>\n<h2 id=\"102-二叉树的层序遍历\"><a href=\"#102-二叉树的层序遍历\" class=\"headerlink\" title=\"102. 二叉树的层序遍历\"></a>102. 二叉树的层序遍历</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>层序遍历顾名思义就是要一层一层的输出树的结点，父节点输出后还要将子节点保存一下，到下一层继续使用，这种依次使用，队列的数据结构是最合适的。父节点先入队，将两个子节点依次入队。这一层的父节点入队过后要统计有多少个，为了输出每层分别是谁</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">levelOrder</span><span class=\"hljs-params\">(root *TreeNode)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"107-二叉树的层序遍历II\"><a href=\"#107-二叉树的层序遍历II\" class=\"headerlink\" title=\"107. 二叉树的层序遍历II\"></a>107. 二叉树的层序遍历II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/\">107.二叉树的层次遍历II</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>基本同上，这次不过要从下向上输出，翻转最后上一题的<code>result</code>即可</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">levelOrderBottom</span><span class=\"hljs-params\">(root *TreeNode)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(result)/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\tresult[i], result[<span class=\"hljs-built_in\">len</span>(result)<span class=\"hljs-number\">-1</span>-i] = result[<span class=\"hljs-built_in\">len</span>(result)<span class=\"hljs-number\">-1</span>-i], result[i]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"199-二叉树的右视图\"><a href=\"#199-二叉树的右视图\" class=\"headerlink\" title=\"199.二叉树的右视图\"></a>199.二叉树的右视图</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/binary-tree-right-side-view/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>将第一次层序遍历的结果使用二维数组逐行写出来，不难发现右视图就是二维数组每一行的最后一个元素</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rightSideView</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> results [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresults = <span class=\"hljs-built_in\">append</span>(results, temp)<br>\t&#125;<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> results &#123;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, v[<span class=\"hljs-built_in\">len</span>(v)<span class=\"hljs-number\">-1</span>])<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"637-二叉树的层平均值\"><a href=\"#637-二叉树的层平均值\" class=\"headerlink\" title=\"637.二叉树的层平均值\"></a>637.二叉树的层平均值</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/average-of-levels-in-binary-tree/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>层序每一层之后求平均值</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">averageOfLevels</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">float64</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">float64</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\tsum := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\tsum += node.(*TreeNode).Val<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, <span class=\"hljs-type\">float64</span>(sum)/<span class=\"hljs-type\">float64</span>(size))<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"429-N叉树的层序遍历\"><a href=\"#429-N叉树的层序遍历\" class=\"headerlink\" title=\"429.N叉树的层序遍历\"></a>429.N叉树的层序遍历</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/n-ary-tree-level-order-traversal/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-4\"><a href=\"#思路-4\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>层序添加子节点改为循环遍历<code>Children</code>数组即可</p>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal      <span class=\"hljs-type\">int</span><br>\tChildren []*Node<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">levelOrder</span><span class=\"hljs-params\">(root *Node)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*Node).Val)<br>\t\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">len</span>(node.(*Node).Children); j++ &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> node.(*Node).Children[j] != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\tqueue.Enqueue(node.(*Node).Children[j])<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"515-在每个树行中找最大值\"><a href=\"#515-在每个树行中找最大值\" class=\"headerlink\" title=\"515.在每个树行中找最大值\"></a>515.在每个树行中找最大值</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/find-largest-value-in-each-tree-row/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-5\"><a href=\"#思路-5\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>每一层找最大，模版依旧</p>\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">largestValues</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> result<br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\tmaxNum := math.MinInt32<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Val &gt; maxNum &#123;<br>\t\t\t\tmaxNum = node.(*TreeNode).Val<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, maxNum)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"116-填充每个节点的下一个右侧节点指针、-117-填充每个节点的下一个右侧节点指针II\"><a href=\"#116-填充每个节点的下一个右侧节点指针、-117-填充每个节点的下一个右侧节点指针II\" class=\"headerlink\" title=\"116.填充每个节点的下一个右侧节点指针、 117.填充每个节点的下一个右侧节点指针II\"></a>116.填充每个节点的下一个右侧节点指针、 117.填充每个节点的下一个右侧节点指针II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-6\"><a href=\"#思路-6\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>每行遍历出来看做一个链表，两道题代码思路一样</p>\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-comment\">// 与117题代码相同</span><br><span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal   <span class=\"hljs-type\">int</span><br>\tLeft  *Node<br>\tRight *Node<br>\tNext  *Node<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">(root *Node)</span></span> *Node &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\troot.Next = <span class=\"hljs-literal\">nil</span><br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\t<span class=\"hljs-keyword\">var</span> p *Node = <span class=\"hljs-literal\">nil</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br><br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*Node).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*Node).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*Node).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*Node).Right)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> p == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tp = node.(*Node)<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tp.Next = node.(*Node)<br>\t\t\t\tp = p.Next<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tp.Next = <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"104-二叉树的最大深度\"><a href=\"#104-二叉树的最大深度\" class=\"headerlink\" title=\"104.二叉树的最大深度\"></a>104.二叉树的最大深度</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-7\"><a href=\"#思路-7\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用递归法，如果递归到叶子节点则返回0，否则使用左右叶子结点继续向下递归，深度加一。取左右结点的最大值</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>层序遍历，看<code>result</code>二维数组的行数</p>\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> maxNum(maxDepth(root.Left), maxDepth(root.Right)) + <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 层序</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth1</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"111-二叉树的最小深度\"><a href=\"#111-二叉树的最小深度\" class=\"headerlink\" title=\"111.二叉树的最小深度\"></a>111.二叉树的最小深度</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-8\"><a href=\"#思路-8\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用递归法，递归终止条件如下：到达了叶子节点<code>return 1</code>。到达空节点<code>return 0</code>。分别向左和右结点继续递归，计算更小的层数，当前层递归完成后<code>return 层数加一</code></p>\n<h4 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>使用层序遍历。遍历时如果遇到叶子节点说明到达了最低点，直接<code>return 当前层数</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//递归</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &lt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>\t&#125;<br>\tminN := math.MaxInt32<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tminN = minNum(minDepth(root.Left), minN)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tminN = minNum(minDepth(root.Right), minN)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minN + <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//层序</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\tcount := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tcount++<br>\t\tsize := queue.Size()<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; node.(*TreeNode).Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> count<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"226-翻转二叉树\"><a href=\"#226-翻转二叉树\" class=\"headerlink\" title=\"226.翻转二叉树\"></a>226.翻转二叉树</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/invert-binary-tree/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-9\"><a href=\"#思路-9\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>交换当前结点左右子节点，向下递归</p>\n<h3 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">invertTree</span><span class=\"hljs-params\">(root *TreeNode)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root<br>\t&#125;<br>\troot.Left, root.Right = root.Right, root.Left<br>\tinvertTree(root.Left)<br>\tinvertTree(root.Right)<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"101-对称二叉树\"><a href=\"#101-对称二叉树\" class=\"headerlink\" title=\"101. 对称二叉树\"></a>101. 对称二叉树</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/symmetric-tree/\">力扣题目链接</a></p>\n<p>文章链接：<a href=\"https://programmercarl.com/0101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频链接：<a href=\"https://www.bilibili.com/video/BV1ue4y1Y7Mf\">同时操作两个二叉树 | LeetCode：101. 对称二叉树</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-10\"><a href=\"#思路-10\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><font color=\"red\">错误思路如下</font></p>\n<p>最开始想的是输出中序遍历的结果，根节点一定是最中间的数，比较两端是否对称即可。但是这种情况没考虑到</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//      1</span><br><span class=\"hljs-comment\">//     / \\</span><br><span class=\"hljs-comment\">//    2   2</span><br><span class=\"hljs-comment\">//   /   /</span><br><span class=\"hljs-comment\">//  2   2</span><br></code></pre></td></tr></table></figure>\n\n<p>所以这个思路是错的</p>\n<hr>\n<p><font color=\"green\">正确思路如下</font></p>\n<p>用后序遍历和“伪后序遍历”依次比较子树。后序遍历是左右根，伪后序比那里是右左根，这样可以比较相同的结点。</p>\n<p>使用递归需要做如下判断</p>\n<ul>\n<li>递归函数的构造<ul>\n<li>比较左右结点，传参是两个节点<code>func compare(left, right *TreeNode) bool</code></li>\n</ul>\n</li>\n<li>递归终止条件<ul>\n<li>两个节点均为空节点，对称<code>return true</code></li>\n<li>左空右不空，或，左不空右空，不对称<code>return false</code></li>\n<li>左右均不空，但是值不同，不对称<code>return false</code></li>\n</ul>\n</li>\n<li>单次递归逻辑<ul>\n<li>左节点的左 和 右结点的右  向下递归</li>\n<li>且 左节点的右 和 右结点的左  向下递归</li>\n<li>且二者值均为<code>true</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码-9\"><a href=\"#代码-9\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(left, right *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> left == <span class=\"hljs-literal\">nil</span> &amp;&amp; right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> left != <span class=\"hljs-literal\">nil</span> &amp;&amp; right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> left == <span class=\"hljs-literal\">nil</span> &amp;&amp; right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> left.Val != right.Val &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> compare(left.Left, right.Right) &amp;&amp; compare(left.Right, right.Left)<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isSymmetric</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> compare(root.Left, root.Right)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度","abbrlink":"e2c426b8","date":"2023-10-07T13:33:49.000Z","_content":"\n# 代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度\n\n##  104.二叉树的最大深度\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/maximum-depth-of-binary-tree/)\n>\n> 文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html)\n>\n> 视频讲解：[二叉树的高度和深度有啥区别？究竟用什么遍历顺序？很多录友搞不懂 | 104.二叉树的最大深度](https://www.bilibili.com/video/BV1Gd4y1V75u)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n使用递归法，如果递归到叶子节点则返回0，否则使用左右叶子结点继续向下递归，深度加一。取左右结点的最大值\n\n#### 方法二\n\n层序遍历，看`result`二维数组的行数\n\n### 代码\n\n``` go\n// 递归\nfunc maxNum(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc maxDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\treturn maxNum(maxDepth(root.Left), maxDepth(root.Right)) + 1\n}\n```\n\n``` go\n// 层序\nfunc maxDepth1(root *TreeNode) int {\n\tvar result [][]int\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\treturn len(result)\n}\n```\n\n## 559. N 叉树的最大深度\n\n> 题目链接：[559. N 叉树的最大深度](https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n递归遍历每个子树，叶子节点时候`return 0`，否则下一层深度加一\n\n#### 方法二\n\n每一层遍历时候入队的不是`Left`和`Right`，而是每一个`Children[i]`节点，最后输出`result`的大小\n\n### 代码\n\n``` go\n// 递归法\nfunc maxNum(a, b int) int {\n     if a > b {\n         return a\n     }\n     return b\n }\n\nfunc maxDepth(root *Node) int {\n    if root == nil {\n\t\treturn 0\n\t}\n\tdepth := 1\n\tfor _, v := range root.Children {\n\t\tdepth = maxNum(depth, maxDepth(v)+1)\n\t}\n\treturn depth\n}\n```\n\n\n\n``` go\n//层先法\nfunc maxDepth(root *Node) int {\n    var result [][]int\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\tvar temp []int\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*Node).Val)\n\t\t\tfor j := 0; j < len(node.(*Node).Children); j++ {\n\t\t\t\tif node.(*Node).Children[j] != nil {\n\t\t\t\t\tqueue.Enqueue(node.(*Node).Children[j])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\treturn len(result)\n}\n```\n\n## 111.二叉树的最小深度\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/minimum-depth-of-binary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n使用递归法，递归终止条件如下：到达了叶子节点`return 1`。到达空节点`return 0`。分别向左和右结点继续递归，计算更小的层数，当前层递归完成后`return 层数加一`\n\n#### 方法二\n\n使用层序遍历。遍历时如果遇到叶子节点说明到达了最低点，直接`return 当前层数`\n\n``` go\n//递归\nfunc minNum(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc minDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tif root.Left == nil && root.Right == nil {\n\t\treturn 1\n\t}\n\tminN := math.MaxInt32\n\tif root.Left != nil {\n\t\tminN = minNum(minDepth(root.Left), minN)\n\t}\n\tif root.Right != nil {\n\t\tminN = minNum(minDepth(root.Right), minN)\n\t}\n\treturn minN + 1\n}\n```\n\n``` go\n//层序\nfunc minDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tcount := 0\n\tfor !queue.Empty() {\n\t\tcount++\n\t\tsize := queue.Size()\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Left == nil && node.(*TreeNode).Right == nil {\n\t\t\t\treturn count\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n```\n\n## 222. 完全二叉树的节点个数\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/count-complete-tree-nodes/)\n>\n> 文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0222.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.html#%E6%80%9D%E8%B7%AF)\n>\n> 视频讲解：[要理解普通二叉树和完全二叉树的区别！ | LeetCode：222.完全二叉树节点的数量](https://www.bilibili.com/video/BV1eW4y1B7pD)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n使用前序、中序、后序、前序遍历都可，输出节点个数\n\n### 代码\n\n``` go\n// 前序遍历\nfunc countNodes(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tcount := 0\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\tcount++\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n```\n\n","source":"_posts/day15.md","raw":"---\ntitle: 代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度\nabbrlink: e2c426b8\ndate: 2023-10-07 21:33:49\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 二叉树\ncategories: 刷题\n---\n\n# 代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度\n\n##  104.二叉树的最大深度\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/maximum-depth-of-binary-tree/)\n>\n> 文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html)\n>\n> 视频讲解：[二叉树的高度和深度有啥区别？究竟用什么遍历顺序？很多录友搞不懂 | 104.二叉树的最大深度](https://www.bilibili.com/video/BV1Gd4y1V75u)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n使用递归法，如果递归到叶子节点则返回0，否则使用左右叶子结点继续向下递归，深度加一。取左右结点的最大值\n\n#### 方法二\n\n层序遍历，看`result`二维数组的行数\n\n### 代码\n\n``` go\n// 递归\nfunc maxNum(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc maxDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\treturn maxNum(maxDepth(root.Left), maxDepth(root.Right)) + 1\n}\n```\n\n``` go\n// 层序\nfunc maxDepth1(root *TreeNode) int {\n\tvar result [][]int\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\treturn len(result)\n}\n```\n\n## 559. N 叉树的最大深度\n\n> 题目链接：[559. N 叉树的最大深度](https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n递归遍历每个子树，叶子节点时候`return 0`，否则下一层深度加一\n\n#### 方法二\n\n每一层遍历时候入队的不是`Left`和`Right`，而是每一个`Children[i]`节点，最后输出`result`的大小\n\n### 代码\n\n``` go\n// 递归法\nfunc maxNum(a, b int) int {\n     if a > b {\n         return a\n     }\n     return b\n }\n\nfunc maxDepth(root *Node) int {\n    if root == nil {\n\t\treturn 0\n\t}\n\tdepth := 1\n\tfor _, v := range root.Children {\n\t\tdepth = maxNum(depth, maxDepth(v)+1)\n\t}\n\treturn depth\n}\n```\n\n\n\n``` go\n//层先法\nfunc maxDepth(root *Node) int {\n    var result [][]int\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\tvar temp []int\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*Node).Val)\n\t\t\tfor j := 0; j < len(node.(*Node).Children); j++ {\n\t\t\t\tif node.(*Node).Children[j] != nil {\n\t\t\t\t\tqueue.Enqueue(node.(*Node).Children[j])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\treturn len(result)\n}\n```\n\n## 111.二叉树的最小深度\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/minimum-depth-of-binary-tree/)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n使用递归法，递归终止条件如下：到达了叶子节点`return 1`。到达空节点`return 0`。分别向左和右结点继续递归，计算更小的层数，当前层递归完成后`return 层数加一`\n\n#### 方法二\n\n使用层序遍历。遍历时如果遇到叶子节点说明到达了最低点，直接`return 当前层数`\n\n``` go\n//递归\nfunc minNum(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc minDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tif root.Left == nil && root.Right == nil {\n\t\treturn 1\n\t}\n\tminN := math.MaxInt32\n\tif root.Left != nil {\n\t\tminN = minNum(minDepth(root.Left), minN)\n\t}\n\tif root.Right != nil {\n\t\tminN = minNum(minDepth(root.Right), minN)\n\t}\n\treturn minN + 1\n}\n```\n\n``` go\n//层序\nfunc minDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tcount := 0\n\tfor !queue.Empty() {\n\t\tcount++\n\t\tsize := queue.Size()\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Left == nil && node.(*TreeNode).Right == nil {\n\t\t\t\treturn count\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n```\n\n## 222. 完全二叉树的节点个数\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/count-complete-tree-nodes/)\n>\n> 文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0222.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.html#%E6%80%9D%E8%B7%AF)\n>\n> 视频讲解：[要理解普通二叉树和完全二叉树的区别！ | LeetCode：222.完全二叉树节点的数量](https://www.bilibili.com/video/BV1eW4y1B7pD)\n>\n> 状态：AC\n\n### 思路\n\n#### 方法一\n\n使用前序、中序、后序、前序遍历都可，输出节点个数\n\n### 代码\n\n``` go\n// 前序遍历\nfunc countNodes(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tqueue := arrayqueue.New()\n\tqueue.Enqueue(root)\n\tcount := 0\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\tcount++\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n```\n\n","slug":"day15","published":1,"updated":"2023-10-24T19:35:10.134Z","_id":"clng3wbhv0001t4wh0pjq02ff","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第十五天-104-二叉树的最大深度、559-n叉树的最大深度\"><a href=\"#代码随想录算法训练营第十五天-104-二叉树的最大深度、559-n叉树的最大深度\" class=\"headerlink\" title=\"代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度\"></a>代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度</h1><h2 id=\"104-二叉树的最大深度\"><a href=\"#104-二叉树的最大深度\" class=\"headerlink\" title=\"104.二叉树的最大深度\"></a>104.二叉树的最大深度</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1Gd4y1V75u\">二叉树的高度和深度有啥区别？究竟用什么遍历顺序？很多录友搞不懂 | 104.二叉树的最大深度</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用递归法，如果递归到叶子节点则返回0，否则使用左右叶子结点继续向下递归，深度加一。取左右结点的最大值</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>层序遍历，看<code>result</code>二维数组的行数</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> maxNum(maxDepth(root.Left), maxDepth(root.Right)) + <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 层序</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth1</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"559-N-叉树的最大深度\"><a href=\"#559-N-叉树的最大深度\" class=\"headerlink\" title=\"559. N 叉树的最大深度\"></a>559. N 叉树的最大深度</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/\">559. N 叉树的最大深度</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>递归遍历每个子树，叶子节点时候<code>return 0</code>，否则下一层深度加一</p>\n<h4 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>每一层遍历时候入队的不是<code>Left</code>和<code>Right</code>，而是每一个<code>Children[i]</code>节点，最后输出<code>result</code>的大小</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>     <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>         <span class=\"hljs-keyword\">return</span> a<br>     &#125;<br>     <span class=\"hljs-keyword\">return</span> b<br> &#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth</span><span class=\"hljs-params\">(root *Node)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tdepth := <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> root.Children &#123;<br>\t\tdepth = maxNum(depth, maxDepth(v)+<span class=\"hljs-number\">1</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> depth<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//层先法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth</span><span class=\"hljs-params\">(root *Node)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\t<span class=\"hljs-keyword\">var</span> temp []<span class=\"hljs-type\">int</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*Node).Val)<br>\t\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">len</span>(node.(*Node).Children); j++ &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> node.(*Node).Children[j] != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\tqueue.Enqueue(node.(*Node).Children[j])<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"111-二叉树的最小深度\"><a href=\"#111-二叉树的最小深度\" class=\"headerlink\" title=\"111.二叉树的最小深度\"></a>111.二叉树的最小深度</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一-2\"><a href=\"#方法一-2\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用递归法，递归终止条件如下：到达了叶子节点<code>return 1</code>。到达空节点<code>return 0</code>。分别向左和右结点继续递归，计算更小的层数，当前层递归完成后<code>return 层数加一</code></p>\n<h4 id=\"方法二-2\"><a href=\"#方法二-2\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>使用层序遍历。遍历时如果遇到叶子节点说明到达了最低点，直接<code>return 当前层数</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//递归</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &lt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>\t&#125;<br>\tminN := math.MaxInt32<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tminN = minNum(minDepth(root.Left), minN)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tminN = minNum(minDepth(root.Right), minN)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minN + <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//层序</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\tcount := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tcount++<br>\t\tsize := queue.Size()<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; node.(*TreeNode).Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> count<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"222-完全二叉树的节点个数\"><a href=\"#222-完全二叉树的节点个数\" class=\"headerlink\" title=\"222. 完全二叉树的节点个数\"></a>222. 完全二叉树的节点个数</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/count-complete-tree-nodes/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0222.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.html#%E6%80%9D%E8%B7%AF\">代码随想录(https://programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1eW4y1B7pD\">要理解普通二叉树和完全二叉树的区别！ | LeetCode：222.完全二叉树节点的数量</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一-3\"><a href=\"#方法一-3\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用前序、中序、后序、前序遍历都可，输出节点个数</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 前序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">countNodes</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\tcount := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\tcount++<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第十五天-104-二叉树的最大深度、559-n叉树的最大深度\"><a href=\"#代码随想录算法训练营第十五天-104-二叉树的最大深度、559-n叉树的最大深度\" class=\"headerlink\" title=\"代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度\"></a>代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度</h1><h2 id=\"104-二叉树的最大深度\"><a href=\"#104-二叉树的最大深度\" class=\"headerlink\" title=\"104.二叉树的最大深度\"></a>104.二叉树的最大深度</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1Gd4y1V75u\">二叉树的高度和深度有啥区别？究竟用什么遍历顺序？很多录友搞不懂 | 104.二叉树的最大深度</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用递归法，如果递归到叶子节点则返回0，否则使用左右叶子结点继续向下递归，深度加一。取左右结点的最大值</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>层序遍历，看<code>result</code>二维数组的行数</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> maxNum(maxDepth(root.Left), maxDepth(root.Right)) + <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 层序</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth1</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"559-N-叉树的最大深度\"><a href=\"#559-N-叉树的最大深度\" class=\"headerlink\" title=\"559. N 叉树的最大深度\"></a>559. N 叉树的最大深度</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/\">559. N 叉树的最大深度</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>递归遍历每个子树，叶子节点时候<code>return 0</code>，否则下一层深度加一</p>\n<h4 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>每一层遍历时候入队的不是<code>Left</code>和<code>Right</code>，而是每一个<code>Children[i]</code>节点，最后输出<code>result</code>的大小</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 递归法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>     <span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>         <span class=\"hljs-keyword\">return</span> a<br>     &#125;<br>     <span class=\"hljs-keyword\">return</span> b<br> &#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth</span><span class=\"hljs-params\">(root *Node)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tdepth := <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> root.Children &#123;<br>\t\tdepth = maxNum(depth, maxDepth(v)+<span class=\"hljs-number\">1</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> depth<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//层先法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxDepth</span><span class=\"hljs-params\">(root *Node)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\t<span class=\"hljs-keyword\">var</span> temp []<span class=\"hljs-type\">int</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*Node).Val)<br>\t\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">len</span>(node.(*Node).Children); j++ &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> node.(*Node).Children[j] != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\tqueue.Enqueue(node.(*Node).Children[j])<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"111-二叉树的最小深度\"><a href=\"#111-二叉树的最小深度\" class=\"headerlink\" title=\"111.二叉树的最小深度\"></a>111.二叉树的最小深度</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/\">力扣题目链接</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一-2\"><a href=\"#方法一-2\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用递归法，递归终止条件如下：到达了叶子节点<code>return 1</code>。到达空节点<code>return 0</code>。分别向左和右结点继续递归，计算更小的层数，当前层递归完成后<code>return 层数加一</code></p>\n<h4 id=\"方法二-2\"><a href=\"#方法二-2\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>使用层序遍历。遍历时如果遇到叶子节点说明到达了最低点，直接<code>return 当前层数</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//递归</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &lt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>\t&#125;<br>\tminN := math.MaxInt32<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tminN = minNum(minDepth(root.Left), minN)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tminN = minNum(minDepth(root.Right), minN)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minN + <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//层序</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minDepth</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\tcount := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tcount++<br>\t\tsize := queue.Size()<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; node.(*TreeNode).Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> count<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"222-完全二叉树的节点个数\"><a href=\"#222-完全二叉树的节点个数\" class=\"headerlink\" title=\"222. 完全二叉树的节点个数\"></a>222. 完全二叉树的节点个数</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/count-complete-tree-nodes/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0222.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.html#%E6%80%9D%E8%B7%AF\">代码随想录(https://programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1eW4y1B7pD\">要理解普通二叉树和完全二叉树的区别！ | LeetCode：222.完全二叉树节点的数量</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"方法一-3\"><a href=\"#方法一-3\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用前序、中序、后序、前序遍历都可，输出节点个数</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 前序遍历</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">countNodes</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tqueue := arrayqueue.New()<br>\tqueue.Enqueue(root)<br>\tcount := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\tcount++<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和","abbrlink":"467977b0","date":"2023-10-09T15:26:52.000Z","_content":"\n# 代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和\n\n## 110. 平衡二叉树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/balanced-binary-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n>\n>   视频讲解：[后序遍历求高度，高度判断是否平衡 | LeetCode：110.平衡二叉树](https://www.bilibili.com/video/BV1Ug411S7my)\n>\n>   状态：AC\n\n### 思路\n\n由之前的104题：求二叉树最大深度一讲，卡哥提到过深度和高度的区别，结合这道题的视频看懂了。举个例子，我们现在站在地上，看见一幢楼会说：“这楼有多高？”；看见一个坑，会说：“这坑有多深？”。也就是说高度要从下往上看、深度要从上往下看。从下向上自然就需要后序遍历。\n\n1.   每个叶子节点的高度为1，叶子节点的子节点（也就是两个空节点）高度为0；\n2.   定义左子树高度为`leftHeight`，左子树递归返回左子树的高度，如果高度为`-1`则执行`return -1`；\n3.   定义右子树高度为`rightHeight`，右子树递归返回右子树的高度，如果高度为`-1`则执行`return -1`；\n4.   比较左右子树高度差，差的绝对值小于等于1，说明是平衡二叉树，将最高的子树高度加一，回到2、3步继续。否则不为平衡二叉树，`return -1`。\n\n### 代码\n\n``` go\n// 平衡二叉树\nfunc isBalanced(root *TreeNode) bool {\n\treturn backTracking(root) != -1\n}\n// 返回最大值\nfunc maxNum(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc backTracking(root *TreeNode) int {\n    // 空节点\n\tif root == nil {\n\t\treturn 0\n\t}\n\t// left child\n\tleftHeight := backTracking(root.Left)\n\tif leftHeight == -1 {\n\t\treturn -1\n\t}\n\t// right child\n\trightHeight := backTracking(root.Right)\n\tif rightHeight == -1 {\n\t\treturn -1\n\t}\n\t// 不是平衡二叉树\n\tif rightHeight-leftHeight > 1 || rightHeight-leftHeight < -1 {\n\t\treturn -1\n\t} else {\n\t\treturn maxNum(rightHeight, leftHeight) + 1  //高度加一继续返回\n\t}\n}\n```\n\n## 257. 二叉树的所有路径\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/binary-tree-paths/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.html)\n>\n>   视频讲解：[递归中带着回溯，你感受到了没？| LeetCode：257. 二叉树的所有路径](https://www.bilibili.com/video/BV1ZG411G7Dh)\n>\n>   状态：AC\n\n### 思路\n\n回溯算法的比较典型的应用，要输出所有的路径，应该使用先序遍历。走到叶子结点后将路径添加至最后的结果。\n\n卡哥回溯三部曲：\n\n1.   确立函数参数和返回值：由于是Go语言，全局变量在LeetCode中会出现一些问题，具体可以查看这篇我的这篇博客[Go语言刷LeetCode使用全局变量的问题](https://promisewang.github.io/post/bc862a56.html#%E9%81%87%E5%88%B0%E6%9C%80%E5%A4%B4%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81)。函数变量包括：\n     -   根节点`root`\n     -   这道题的结果`result`\n     -   一条路径`path`\n2.   确定终止条件：当前节点为子节点时，保存`path`到`result`，`return`\n3.   单次递归：左节点不为空，向左递归；右节点不为空；向右递归\n\n### 代码\n\n``` go\nfunc binaryTreePaths(root *TreeNode) []string {\n\tresult := []string{}\n\tpath := []int{}\n\tgetResult(root, &result, &path)\n\treturn result\n}\n\nfunc getResult(root *TreeNode, result *[]string, path *[]int) {\n    // 终止条件，并且将切片类型的path按要求写成字符串，添加到result中。\n\tif root.Left == nil && root.Right == nil {\n\t\t*path = append(*path, root.Val) //添加新的节点\n\t\tvar temp string\n\t\tif len(*path) == 1 {\n\t\t\ttemp = \"1\"\n\t\t} else {\n\t\t\ttemp = strconv.Itoa((*path)[0])\n\t\t\tfor i := 1; i < len(*path); i++ {\n\t\t\t\ttemp += \"->\" + strconv.Itoa((*path)[i])\n\t\t\t}\n\t\t}\n\t\t*path = (*path)[:len(*path)-1]\n\t\t*result = append(*result, temp)\n\t\treturn\n\t}\n    // 左节点不为空，向左递归\n\tif root.Left != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult(root.Left, result, path)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n    \n    // 右节点不为空，向右递归\n\tif root.Right != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult(root.Right, result, path)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n}\n\n```\n\n## 404.左叶子之和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/sum-of-left-leaves/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C.html)\n>\n>   视频讲解：[二叉树的题目中，总有一些规则让你找不到北 | LeetCode：404.左叶子之和](https://www.bilibili.com/video/BV1GY4y1K7z8)\n>\n>   状态：AC\n\n### 思路\n\n要判断的是所有左叶子的和，选择先序遍历。递归三部曲请出来：\n\n1.   确立函数参数和返回值：此处没有用全局变量，需要使用一个指针存放和。如何判断是左节点，我这里引入一个变量`flag`为`bool`类型。如果向左节点递归，则为`true`，否则为`false`。这样当到达叶子节点时候判断`flag`值就能知道是不是左叶子\n     -   根节点`root`\n     -   和指针`sum`\n     -   是否为左节点`flag`\n2.   确定终止条件：如果是叶子节点，并且`flag == true`，`*sum += root.Val`，返回。\n3.   单次递归：如果左节点不为空，向左递归，`flag = true`；如果右结点不为空，向右递归，`flag = false`\n\n### 代码\n\n``` go\nfunc sumOfLeftLeaves(root *TreeNode) int {\n\tif root.Left == nil && root.Right == nil {\n\t\treturn 0\n\t}\n\tsum := 0\n\tgetSum(root, &sum, false)\n\treturn sum\n}\n\n// flag为true, 代表左节点; 否则是右结点\nfunc getSum(root *TreeNode, sum *int, flag bool) { \n\tif root.Left == nil && root.Right == nil && flag {\n\t\t*sum += root.Val\n\t\treturn\n\t}\n\tif root.Left != nil {\n\t\tgetSum(root.Left, sum, true)\n\t}\n\tif root.Right != nil {\n\t\tgetSum(root.Right, sum, false)\n\t}\n}\n```\n\n","source":"_posts/day17.md","raw":"---\ntitle: 代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 二叉树\ncategories: 刷题\nabbrlink: 467977b0\ndate: 2023-10-09 23:26:52\n---\n\n# 代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和\n\n## 110. 平衡二叉树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/balanced-binary-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n>\n>   视频讲解：[后序遍历求高度，高度判断是否平衡 | LeetCode：110.平衡二叉树](https://www.bilibili.com/video/BV1Ug411S7my)\n>\n>   状态：AC\n\n### 思路\n\n由之前的104题：求二叉树最大深度一讲，卡哥提到过深度和高度的区别，结合这道题的视频看懂了。举个例子，我们现在站在地上，看见一幢楼会说：“这楼有多高？”；看见一个坑，会说：“这坑有多深？”。也就是说高度要从下往上看、深度要从上往下看。从下向上自然就需要后序遍历。\n\n1.   每个叶子节点的高度为1，叶子节点的子节点（也就是两个空节点）高度为0；\n2.   定义左子树高度为`leftHeight`，左子树递归返回左子树的高度，如果高度为`-1`则执行`return -1`；\n3.   定义右子树高度为`rightHeight`，右子树递归返回右子树的高度，如果高度为`-1`则执行`return -1`；\n4.   比较左右子树高度差，差的绝对值小于等于1，说明是平衡二叉树，将最高的子树高度加一，回到2、3步继续。否则不为平衡二叉树，`return -1`。\n\n### 代码\n\n``` go\n// 平衡二叉树\nfunc isBalanced(root *TreeNode) bool {\n\treturn backTracking(root) != -1\n}\n// 返回最大值\nfunc maxNum(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc backTracking(root *TreeNode) int {\n    // 空节点\n\tif root == nil {\n\t\treturn 0\n\t}\n\t// left child\n\tleftHeight := backTracking(root.Left)\n\tif leftHeight == -1 {\n\t\treturn -1\n\t}\n\t// right child\n\trightHeight := backTracking(root.Right)\n\tif rightHeight == -1 {\n\t\treturn -1\n\t}\n\t// 不是平衡二叉树\n\tif rightHeight-leftHeight > 1 || rightHeight-leftHeight < -1 {\n\t\treturn -1\n\t} else {\n\t\treturn maxNum(rightHeight, leftHeight) + 1  //高度加一继续返回\n\t}\n}\n```\n\n## 257. 二叉树的所有路径\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/binary-tree-paths/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.html)\n>\n>   视频讲解：[递归中带着回溯，你感受到了没？| LeetCode：257. 二叉树的所有路径](https://www.bilibili.com/video/BV1ZG411G7Dh)\n>\n>   状态：AC\n\n### 思路\n\n回溯算法的比较典型的应用，要输出所有的路径，应该使用先序遍历。走到叶子结点后将路径添加至最后的结果。\n\n卡哥回溯三部曲：\n\n1.   确立函数参数和返回值：由于是Go语言，全局变量在LeetCode中会出现一些问题，具体可以查看这篇我的这篇博客[Go语言刷LeetCode使用全局变量的问题](https://promisewang.github.io/post/bc862a56.html#%E9%81%87%E5%88%B0%E6%9C%80%E5%A4%B4%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81)。函数变量包括：\n     -   根节点`root`\n     -   这道题的结果`result`\n     -   一条路径`path`\n2.   确定终止条件：当前节点为子节点时，保存`path`到`result`，`return`\n3.   单次递归：左节点不为空，向左递归；右节点不为空；向右递归\n\n### 代码\n\n``` go\nfunc binaryTreePaths(root *TreeNode) []string {\n\tresult := []string{}\n\tpath := []int{}\n\tgetResult(root, &result, &path)\n\treturn result\n}\n\nfunc getResult(root *TreeNode, result *[]string, path *[]int) {\n    // 终止条件，并且将切片类型的path按要求写成字符串，添加到result中。\n\tif root.Left == nil && root.Right == nil {\n\t\t*path = append(*path, root.Val) //添加新的节点\n\t\tvar temp string\n\t\tif len(*path) == 1 {\n\t\t\ttemp = \"1\"\n\t\t} else {\n\t\t\ttemp = strconv.Itoa((*path)[0])\n\t\t\tfor i := 1; i < len(*path); i++ {\n\t\t\t\ttemp += \"->\" + strconv.Itoa((*path)[i])\n\t\t\t}\n\t\t}\n\t\t*path = (*path)[:len(*path)-1]\n\t\t*result = append(*result, temp)\n\t\treturn\n\t}\n    // 左节点不为空，向左递归\n\tif root.Left != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult(root.Left, result, path)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n    \n    // 右节点不为空，向右递归\n\tif root.Right != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult(root.Right, result, path)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n}\n\n```\n\n## 404.左叶子之和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/sum-of-left-leaves/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C.html)\n>\n>   视频讲解：[二叉树的题目中，总有一些规则让你找不到北 | LeetCode：404.左叶子之和](https://www.bilibili.com/video/BV1GY4y1K7z8)\n>\n>   状态：AC\n\n### 思路\n\n要判断的是所有左叶子的和，选择先序遍历。递归三部曲请出来：\n\n1.   确立函数参数和返回值：此处没有用全局变量，需要使用一个指针存放和。如何判断是左节点，我这里引入一个变量`flag`为`bool`类型。如果向左节点递归，则为`true`，否则为`false`。这样当到达叶子节点时候判断`flag`值就能知道是不是左叶子\n     -   根节点`root`\n     -   和指针`sum`\n     -   是否为左节点`flag`\n2.   确定终止条件：如果是叶子节点，并且`flag == true`，`*sum += root.Val`，返回。\n3.   单次递归：如果左节点不为空，向左递归，`flag = true`；如果右结点不为空，向右递归，`flag = false`\n\n### 代码\n\n``` go\nfunc sumOfLeftLeaves(root *TreeNode) int {\n\tif root.Left == nil && root.Right == nil {\n\t\treturn 0\n\t}\n\tsum := 0\n\tgetSum(root, &sum, false)\n\treturn sum\n}\n\n// flag为true, 代表左节点; 否则是右结点\nfunc getSum(root *TreeNode, sum *int, flag bool) { \n\tif root.Left == nil && root.Right == nil && flag {\n\t\t*sum += root.Val\n\t\treturn\n\t}\n\tif root.Left != nil {\n\t\tgetSum(root.Left, sum, true)\n\t}\n\tif root.Right != nil {\n\t\tgetSum(root.Right, sum, false)\n\t}\n}\n```\n\n","slug":"day17","published":1,"updated":"2023-10-24T19:35:13.701Z","_id":"clnj3c70v0000puz86u7wb17m","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第十七天-110-平衡二叉树、257-二叉树的所有路径、404-左叶子之和\"><a href=\"#代码随想录算法训练营第十七天-110-平衡二叉树、257-二叉树的所有路径、404-左叶子之和\" class=\"headerlink\" title=\"代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和\"></a>代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和</h1><h2 id=\"110-平衡二叉树\"><a href=\"#110-平衡二叉树\" class=\"headerlink\" title=\"110. 平衡二叉树\"></a>110. 平衡二叉树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/balanced-binary-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Ug411S7my\">后序遍历求高度，高度判断是否平衡 | LeetCode：110.平衡二叉树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>由之前的104题：求二叉树最大深度一讲，卡哥提到过深度和高度的区别，结合这道题的视频看懂了。举个例子，我们现在站在地上，看见一幢楼会说：“这楼有多高？”；看见一个坑，会说：“这坑有多深？”。也就是说高度要从下往上看、深度要从上往下看。从下向上自然就需要后序遍历。</p>\n<ol>\n<li>每个叶子节点的高度为1，叶子节点的子节点（也就是两个空节点）高度为0；</li>\n<li>定义左子树高度为<code>leftHeight</code>，左子树递归返回左子树的高度，如果高度为<code>-1</code>则执行<code>return -1</code>；</li>\n<li>定义右子树高度为<code>rightHeight</code>，右子树递归返回右子树的高度，如果高度为<code>-1</code>则执行<code>return -1</code>；</li>\n<li>比较左右子树高度差，差的绝对值小于等于1，说明是平衡二叉树，将最高的子树高度加一，回到2、3步继续。否则不为平衡二叉树，<code>return -1</code>。</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 平衡二叉树</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isBalanced</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> backTracking(root) != <span class=\"hljs-number\">-1</span><br>&#125;<br><span class=\"hljs-comment\">// 返回最大值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// 空节点</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// left child</span><br>\tleftHeight := backTracking(root.Left)<br>\t<span class=\"hljs-keyword\">if</span> leftHeight == <span class=\"hljs-number\">-1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// right child</span><br>\trightHeight := backTracking(root.Right)<br>\t<span class=\"hljs-keyword\">if</span> rightHeight == <span class=\"hljs-number\">-1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// 不是平衡二叉树</span><br>\t<span class=\"hljs-keyword\">if</span> rightHeight-leftHeight &gt; <span class=\"hljs-number\">1</span> || rightHeight-leftHeight &lt; <span class=\"hljs-number\">-1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> maxNum(rightHeight, leftHeight) + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\">//高度加一继续返回</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"257-二叉树的所有路径\"><a href=\"#257-二叉树的所有路径\" class=\"headerlink\" title=\"257. 二叉树的所有路径\"></a>257. 二叉树的所有路径</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/binary-tree-paths/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1ZG411G7Dh\">递归中带着回溯，你感受到了没？| LeetCode：257. 二叉树的所有路径</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>回溯算法的比较典型的应用，要输出所有的路径，应该使用先序遍历。走到叶子结点后将路径添加至最后的结果。</p>\n<p>卡哥回溯三部曲：</p>\n<ol>\n<li>确立函数参数和返回值：由于是Go语言，全局变量在LeetCode中会出现一些问题，具体可以查看这篇我的这篇博客<a href=\"https://promisewang.github.io/post/bc862a56.html#%E9%81%87%E5%88%B0%E6%9C%80%E5%A4%B4%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81\">Go语言刷LeetCode使用全局变量的问题</a>。函数变量包括：<ul>\n<li>根节点<code>root</code></li>\n<li>这道题的结果<code>result</code></li>\n<li>一条路径<code>path</code></li>\n</ul>\n</li>\n<li>确定终止条件：当前节点为子节点时，保存<code>path</code>到<code>result</code>，<code>return</code></li>\n<li>单次递归：左节点不为空，向左递归；右节点不为空；向右递归</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">binaryTreePaths</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">string</span> &#123;<br>\tresult := []<span class=\"hljs-type\">string</span>&#123;&#125;<br>\tpath := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tgetResult(root, &amp;result, &amp;path)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResult</span><span class=\"hljs-params\">(root *TreeNode, result *[]<span class=\"hljs-type\">string</span>, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>    <span class=\"hljs-comment\">// 终止条件，并且将切片类型的path按要求写成字符串，添加到result中。</span><br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val) <span class=\"hljs-comment\">//添加新的节点</span><br>\t\t<span class=\"hljs-keyword\">var</span> temp <span class=\"hljs-type\">string</span><br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(*path) == <span class=\"hljs-number\">1</span> &#123;<br>\t\t\ttemp = <span class=\"hljs-string\">&quot;1&quot;</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\ttemp = strconv.Itoa((*path)[<span class=\"hljs-number\">0</span>])<br>\t\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(*path); i++ &#123;<br>\t\t\t\ttemp += <span class=\"hljs-string\">&quot;-&gt;&quot;</span> + strconv.Itoa((*path)[i])<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t\t*result = <span class=\"hljs-built_in\">append</span>(*result, temp)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>    <span class=\"hljs-comment\">// 左节点不为空，向左递归</span><br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult(root.Left, result, path)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>    <br>    <span class=\"hljs-comment\">// 右节点不为空，向右递归</span><br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult(root.Right, result, path)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"404-左叶子之和\"><a href=\"#404-左叶子之和\" class=\"headerlink\" title=\"404.左叶子之和\"></a>404.左叶子之和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/sum-of-left-leaves/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1GY4y1K7z8\">二叉树的题目中，总有一些规则让你找不到北 | LeetCode：404.左叶子之和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>要判断的是所有左叶子的和，选择先序遍历。递归三部曲请出来：</p>\n<ol>\n<li>确立函数参数和返回值：此处没有用全局变量，需要使用一个指针存放和。如何判断是左节点，我这里引入一个变量<code>flag</code>为<code>bool</code>类型。如果向左节点递归，则为<code>true</code>，否则为<code>false</code>。这样当到达叶子节点时候判断<code>flag</code>值就能知道是不是左叶子<ul>\n<li>根节点<code>root</code></li>\n<li>和指针<code>sum</code></li>\n<li>是否为左节点<code>flag</code></li>\n</ul>\n</li>\n<li>确定终止条件：如果是叶子节点，并且<code>flag == true</code>，<code>*sum += root.Val</code>，返回。</li>\n<li>单次递归：如果左节点不为空，向左递归，<code>flag = true</code>；如果右结点不为空，向右递归，<code>flag = false</code></li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sumOfLeftLeaves</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tsum := <span class=\"hljs-number\">0</span><br>\tgetSum(root, &amp;sum, <span class=\"hljs-literal\">false</span>)<br>\t<span class=\"hljs-keyword\">return</span> sum<br>&#125;<br><br><span class=\"hljs-comment\">// flag为true, 代表左节点; 否则是右结点</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getSum</span><span class=\"hljs-params\">(root *TreeNode, sum *<span class=\"hljs-type\">int</span>, flag <span class=\"hljs-type\">bool</span>)</span></span> &#123; <br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &amp;&amp; flag &#123;<br>\t\t*sum += root.Val<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tgetSum(root.Left, sum, <span class=\"hljs-literal\">true</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tgetSum(root.Right, sum, <span class=\"hljs-literal\">false</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第十七天-110-平衡二叉树、257-二叉树的所有路径、404-左叶子之和\"><a href=\"#代码随想录算法训练营第十七天-110-平衡二叉树、257-二叉树的所有路径、404-左叶子之和\" class=\"headerlink\" title=\"代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和\"></a>代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和</h1><h2 id=\"110-平衡二叉树\"><a href=\"#110-平衡二叉树\" class=\"headerlink\" title=\"110. 平衡二叉树\"></a>110. 平衡二叉树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/balanced-binary-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Ug411S7my\">后序遍历求高度，高度判断是否平衡 | LeetCode：110.平衡二叉树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>由之前的104题：求二叉树最大深度一讲，卡哥提到过深度和高度的区别，结合这道题的视频看懂了。举个例子，我们现在站在地上，看见一幢楼会说：“这楼有多高？”；看见一个坑，会说：“这坑有多深？”。也就是说高度要从下往上看、深度要从上往下看。从下向上自然就需要后序遍历。</p>\n<ol>\n<li>每个叶子节点的高度为1，叶子节点的子节点（也就是两个空节点）高度为0；</li>\n<li>定义左子树高度为<code>leftHeight</code>，左子树递归返回左子树的高度，如果高度为<code>-1</code>则执行<code>return -1</code>；</li>\n<li>定义右子树高度为<code>rightHeight</code>，右子树递归返回右子树的高度，如果高度为<code>-1</code>则执行<code>return -1</code>；</li>\n<li>比较左右子树高度差，差的绝对值小于等于1，说明是平衡二叉树，将最高的子树高度加一，回到2、3步继续。否则不为平衡二叉树，<code>return -1</code>。</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 平衡二叉树</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isBalanced</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> backTracking(root) != <span class=\"hljs-number\">-1</span><br>&#125;<br><span class=\"hljs-comment\">// 返回最大值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">maxNum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> a &gt; b &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> b<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>    <span class=\"hljs-comment\">// 空节点</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// left child</span><br>\tleftHeight := backTracking(root.Left)<br>\t<span class=\"hljs-keyword\">if</span> leftHeight == <span class=\"hljs-number\">-1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// right child</span><br>\trightHeight := backTracking(root.Right)<br>\t<span class=\"hljs-keyword\">if</span> rightHeight == <span class=\"hljs-number\">-1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// 不是平衡二叉树</span><br>\t<span class=\"hljs-keyword\">if</span> rightHeight-leftHeight &gt; <span class=\"hljs-number\">1</span> || rightHeight-leftHeight &lt; <span class=\"hljs-number\">-1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> maxNum(rightHeight, leftHeight) + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\">//高度加一继续返回</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"257-二叉树的所有路径\"><a href=\"#257-二叉树的所有路径\" class=\"headerlink\" title=\"257. 二叉树的所有路径\"></a>257. 二叉树的所有路径</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/binary-tree-paths/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1ZG411G7Dh\">递归中带着回溯，你感受到了没？| LeetCode：257. 二叉树的所有路径</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>回溯算法的比较典型的应用，要输出所有的路径，应该使用先序遍历。走到叶子结点后将路径添加至最后的结果。</p>\n<p>卡哥回溯三部曲：</p>\n<ol>\n<li>确立函数参数和返回值：由于是Go语言，全局变量在LeetCode中会出现一些问题，具体可以查看这篇我的这篇博客<a href=\"https://promisewang.github.io/post/bc862a56.html#%E9%81%87%E5%88%B0%E6%9C%80%E5%A4%B4%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81\">Go语言刷LeetCode使用全局变量的问题</a>。函数变量包括：<ul>\n<li>根节点<code>root</code></li>\n<li>这道题的结果<code>result</code></li>\n<li>一条路径<code>path</code></li>\n</ul>\n</li>\n<li>确定终止条件：当前节点为子节点时，保存<code>path</code>到<code>result</code>，<code>return</code></li>\n<li>单次递归：左节点不为空，向左递归；右节点不为空；向右递归</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">binaryTreePaths</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">string</span> &#123;<br>\tresult := []<span class=\"hljs-type\">string</span>&#123;&#125;<br>\tpath := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tgetResult(root, &amp;result, &amp;path)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResult</span><span class=\"hljs-params\">(root *TreeNode, result *[]<span class=\"hljs-type\">string</span>, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>    <span class=\"hljs-comment\">// 终止条件，并且将切片类型的path按要求写成字符串，添加到result中。</span><br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val) <span class=\"hljs-comment\">//添加新的节点</span><br>\t\t<span class=\"hljs-keyword\">var</span> temp <span class=\"hljs-type\">string</span><br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(*path) == <span class=\"hljs-number\">1</span> &#123;<br>\t\t\ttemp = <span class=\"hljs-string\">&quot;1&quot;</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\ttemp = strconv.Itoa((*path)[<span class=\"hljs-number\">0</span>])<br>\t\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(*path); i++ &#123;<br>\t\t\t\ttemp += <span class=\"hljs-string\">&quot;-&gt;&quot;</span> + strconv.Itoa((*path)[i])<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t\t*result = <span class=\"hljs-built_in\">append</span>(*result, temp)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>    <span class=\"hljs-comment\">// 左节点不为空，向左递归</span><br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult(root.Left, result, path)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>    <br>    <span class=\"hljs-comment\">// 右节点不为空，向右递归</span><br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult(root.Right, result, path)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"404-左叶子之和\"><a href=\"#404-左叶子之和\" class=\"headerlink\" title=\"404.左叶子之和\"></a>404.左叶子之和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/sum-of-left-leaves/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1GY4y1K7z8\">二叉树的题目中，总有一些规则让你找不到北 | LeetCode：404.左叶子之和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>要判断的是所有左叶子的和，选择先序遍历。递归三部曲请出来：</p>\n<ol>\n<li>确立函数参数和返回值：此处没有用全局变量，需要使用一个指针存放和。如何判断是左节点，我这里引入一个变量<code>flag</code>为<code>bool</code>类型。如果向左节点递归，则为<code>true</code>，否则为<code>false</code>。这样当到达叶子节点时候判断<code>flag</code>值就能知道是不是左叶子<ul>\n<li>根节点<code>root</code></li>\n<li>和指针<code>sum</code></li>\n<li>是否为左节点<code>flag</code></li>\n</ul>\n</li>\n<li>确定终止条件：如果是叶子节点，并且<code>flag == true</code>，<code>*sum += root.Val</code>，返回。</li>\n<li>单次递归：如果左节点不为空，向左递归，<code>flag = true</code>；如果右结点不为空，向右递归，<code>flag = false</code></li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sumOfLeftLeaves</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\tsum := <span class=\"hljs-number\">0</span><br>\tgetSum(root, &amp;sum, <span class=\"hljs-literal\">false</span>)<br>\t<span class=\"hljs-keyword\">return</span> sum<br>&#125;<br><br><span class=\"hljs-comment\">// flag为true, 代表左节点; 否则是右结点</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getSum</span><span class=\"hljs-params\">(root *TreeNode, sum *<span class=\"hljs-type\">int</span>, flag <span class=\"hljs-type\">bool</span>)</span></span> &#123; <br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &amp;&amp; flag &#123;<br>\t\t*sum += root.Val<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tgetSum(root.Left, sum, <span class=\"hljs-literal\">true</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tgetSum(root.Right, sum, <span class=\"hljs-literal\">false</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第十八天 513.找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树","abbrlink":"de527742","date":"2023-10-10T11:56:14.000Z","_content":"\n# 代码随想录算法训练营第十八天  513找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树\n\n## 513. 找树左下角的值\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/find-bottom-left-tree-value/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC.html)\n>\n>   视频讲解：[怎么找二叉树的左下角？ 递归中又带回溯了，怎么办？| LeetCode：513.找二叉树左下角的值](https://www.bilibili.com/video/BV1424y1Z7pn)\n>\n>   状态：AC\n\n### 思路\n\n这道题对左下角的定义是：最后一行，最左面的元素，只需要层序遍历，输出最后一行的第一个元素即可。\n\n### 代码\n\n``` go\nfunc findBottomLeftValue(root *TreeNode) int {\n\tqueue := arrayqueue.New()\n\tvar result [][]int\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\tfmt.Println(result)\n\treturn result[len(result)-1][0]\n}\n\n```\n\n## 112. 路径总和、113. 路径总和II\n\n>   题目链接：\n>\n>   -   [112.路径总和](https://leetcode.cn/problems/path-sum/)\n>   -   [113.路径总和ii](https://leetcode.cn/problems/path-sum-ii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0112.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C.html)\n>\n>   视频讲解：[拿不准的遍历顺序，搞不清的回溯过程，我太难了！ | LeetCode：112. 路径总和](https://www.bilibili.com/video/BV19t4y1L7CR)\n>\n>   状态：AC\n\n### 思路\n\n1.   找到根节点到叶子节点的路径：这里使用先序遍历（深度搜索）\n2.   将该路径所有节点求和，判断是否等于`targetSum`，有则保存至`result`中\n\n### 代码\n\n``` go\n// 112题\nfunc hasPathSum(root *TreeNode, targetSum int) bool {\n\tvar result [][]int\n\tvar path []int\n\tgetResult(root, &result, &path)\n\tfor i := 0; i < len(result); i++ {\n\t\tsum := 0\n\t\tfor _, v := range result[i] {\n\t\t\tsum += v\n\t\t}\n\t\tif sum == targetSum {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc getResult(root *TreeNode, result *[][]int, path *[]int) {\n\tif root.Left == nil && root.Right == nil {\n\t\t*path = append(*path, root.Val)\n\t\ttemp := make([]int, len(*path))\n\t\tcopy(temp, *path)\n\t\t*result = append(*result, temp)\n\t\t*path = (*path)[:len(*path)-1]\n\t\treturn\n\t}\n\tif root.Left != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult(root.Left, result, path)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n\tif root.Right != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult(root.Right, result, path)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n}\n```\n\n``` go\n// 113题\nfunc pathSum(root *TreeNode, targetSum int) [][]int {\n\tvar result [][]int\n\tvar path []int\n\tgetResult1(root, &result, &path, targetSum)\n\treturn result\n}\n\nfunc getResult1(root *TreeNode, result *[][]int, path *[]int, target int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tif root.Left == nil && root.Right == nil {\n\t\t*path = append(*path, root.Val)\n\t\tsum := 0\n\t\tfor _, v := range *path {\n\t\t\tsum += v\n\t\t}\n\t\tif sum == target {\n\t\t\ttemp := make([]int, len(*path))\n\t\t\tcopy(temp, *path)\n\t\t\t*result = append(*result, temp)\n\t\t}\n\t\t*path = (*path)[:len(*path)-1]\n\t\treturn\n\t}\n\tif root.Left != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult1(root.Left, result, path, target)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n\tif root.Right != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult1(root.Right, result, path, target)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n}\n```\n\n## 106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树\n\n>   题目链接：\n>\n>   -   [106.从中序与后序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)\n>   -   [105.从前序与中序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0106.%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n>\n>   视频讲解：[坑很多！来看看你掉过几次坑 | LeetCode：106.从中序与后序遍历序列构造二叉树](https://www.bilibili.com/video/BV1vW4y1i7dn)\n>\n>   状态：AC\n\n### 思路\n\n这道题自己最开始想的不是很明白，而且自己在考试时做这类题也没有固定的套路，看了下卡哥的讲解\n\n- 后序数组长度为0, 空节点\n- 后序数组最后一个元素为父节点元素\n- 寻找中序数组位置  作切割点\n- 切中序数组\n- 切后序数组\n- 递归处理左区间 右区间\n\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day18/力扣106.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n### 代码\n\n``` go\n// 中序后序建立二叉树\nfunc buildTree(inorder []int, postorder []int) *TreeNode {\n\t// 1.后序数组长度为0, 空节点\n\tif len(postorder) == 0 {\n\t\treturn nil\n\t}\n\t// 2.后序数组最后一个元素为父节点元素\n\trootValue := postorder[len(postorder)-1]\n\troot := &TreeNode{\n\t\tVal:   rootValue,\n\t\tLeft:  nil,\n\t\tRight: nil,\n\t}\n\tif len(postorder) == 1 {\n\t\treturn root\n\t}\n\t// 3.寻找中序数组位置  作切割点\n\tindex := 0\n\tfor ; index < len(inorder); index++ {\n\t\tif inorder[index] == rootValue {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// 4.切中序数组\n\tleftInorder := inorder[:index]\n\trightInorder := inorder[index+1:]\n\t// 5.切后序数组\n\tleftPostorder := postorder[:len(leftInorder)]\n\trightPostorder := postorder[len(leftPostorder) : len(leftPostorder)+len(rightInorder)]\n\t// 6.递归处理左区间 右区间\n\troot.Left = buildTree(leftInorder, leftPostorder)\n\troot.Right = buildTree(rightInorder, rightPostorder)\n\treturn root\n}\n```\n\n``` go\n// 前序中序建立二叉树\nfunc buildTree2(preorder []int, inorder []int) *TreeNode {\n\t// 1.前序数组为0, 空节点\n\tif len(preorder) == 0 {\n\t\treturn nil\n\t}\n\t// 2.前序数组第一个元素为节点元素\n\trootValue := preorder[0]\n\troot := &TreeNode{\n\t\tVal:   rootValue,\n\t\tLeft:  nil,\n\t\tRight: nil,\n\t}\n\tif len(preorder) == 1 {\n\t\treturn root\n\t}\n\t// 3.寻找中序数组位置  作切割点\n\tindex := 0\n\tfor ; index < len(inorder); index++ {\n\t\tif inorder[index] == rootValue {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// 4.切中序数组\n\tleftInorder := inorder[:index]\n\trightInorder := inorder[index+1:]\n\t// 5.切前序数组\n\tleftPreorder := preorder[1 : len(leftInorder)+1]\n\trightPreorder := preorder[len(leftPreorder)+1:]\n\t// 6.递归处理左区间 右区间\n\troot.Left = buildTree2(leftPreorder, leftInorder)\n\troot.Right = buildTree2(rightPreorder, rightInorder)\n\treturn root\n}\n\n```\n\n","source":"_posts/day18.md","raw":"---\ntitle: 代码随想录算法训练营第十八天 513.找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 二叉树\ncategories: 刷题\nabbrlink: de527742\ndate: 2023-10-10 19:56:14\n---\n\n# 代码随想录算法训练营第十八天  513找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树\n\n## 513. 找树左下角的值\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/find-bottom-left-tree-value/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC.html)\n>\n>   视频讲解：[怎么找二叉树的左下角？ 递归中又带回溯了，怎么办？| LeetCode：513.找二叉树左下角的值](https://www.bilibili.com/video/BV1424y1Z7pn)\n>\n>   状态：AC\n\n### 思路\n\n这道题对左下角的定义是：最后一行，最左面的元素，只需要层序遍历，输出最后一行的第一个元素即可。\n\n### 代码\n\n``` go\nfunc findBottomLeftValue(root *TreeNode) int {\n\tqueue := arrayqueue.New()\n\tvar result [][]int\n\tqueue.Enqueue(root)\n\tfor !queue.Empty() {\n\t\tsize := queue.Size()\n\t\ttemp := []int{}\n\t\tfor i := 0; i < size; i++ {\n\t\t\tnode, _ := queue.Dequeue()\n\t\t\ttemp = append(temp, node.(*TreeNode).Val)\n\t\t\tif node.(*TreeNode).Left != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)\n\t\t\t}\n\t\t\tif node.(*TreeNode).Right != nil {\n\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)\n\t\t\t}\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\tfmt.Println(result)\n\treturn result[len(result)-1][0]\n}\n\n```\n\n## 112. 路径总和、113. 路径总和II\n\n>   题目链接：\n>\n>   -   [112.路径总和](https://leetcode.cn/problems/path-sum/)\n>   -   [113.路径总和ii](https://leetcode.cn/problems/path-sum-ii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0112.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C.html)\n>\n>   视频讲解：[拿不准的遍历顺序，搞不清的回溯过程，我太难了！ | LeetCode：112. 路径总和](https://www.bilibili.com/video/BV19t4y1L7CR)\n>\n>   状态：AC\n\n### 思路\n\n1.   找到根节点到叶子节点的路径：这里使用先序遍历（深度搜索）\n2.   将该路径所有节点求和，判断是否等于`targetSum`，有则保存至`result`中\n\n### 代码\n\n``` go\n// 112题\nfunc hasPathSum(root *TreeNode, targetSum int) bool {\n\tvar result [][]int\n\tvar path []int\n\tgetResult(root, &result, &path)\n\tfor i := 0; i < len(result); i++ {\n\t\tsum := 0\n\t\tfor _, v := range result[i] {\n\t\t\tsum += v\n\t\t}\n\t\tif sum == targetSum {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc getResult(root *TreeNode, result *[][]int, path *[]int) {\n\tif root.Left == nil && root.Right == nil {\n\t\t*path = append(*path, root.Val)\n\t\ttemp := make([]int, len(*path))\n\t\tcopy(temp, *path)\n\t\t*result = append(*result, temp)\n\t\t*path = (*path)[:len(*path)-1]\n\t\treturn\n\t}\n\tif root.Left != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult(root.Left, result, path)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n\tif root.Right != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult(root.Right, result, path)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n}\n```\n\n``` go\n// 113题\nfunc pathSum(root *TreeNode, targetSum int) [][]int {\n\tvar result [][]int\n\tvar path []int\n\tgetResult1(root, &result, &path, targetSum)\n\treturn result\n}\n\nfunc getResult1(root *TreeNode, result *[][]int, path *[]int, target int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tif root.Left == nil && root.Right == nil {\n\t\t*path = append(*path, root.Val)\n\t\tsum := 0\n\t\tfor _, v := range *path {\n\t\t\tsum += v\n\t\t}\n\t\tif sum == target {\n\t\t\ttemp := make([]int, len(*path))\n\t\t\tcopy(temp, *path)\n\t\t\t*result = append(*result, temp)\n\t\t}\n\t\t*path = (*path)[:len(*path)-1]\n\t\treturn\n\t}\n\tif root.Left != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult1(root.Left, result, path, target)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n\tif root.Right != nil {\n\t\t*path = append(*path, root.Val)\n\t\tgetResult1(root.Right, result, path, target)\n\t\t*path = (*path)[:len(*path)-1]\n\t}\n}\n```\n\n## 106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树\n\n>   题目链接：\n>\n>   -   [106.从中序与后序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)\n>   -   [105.从前序与中序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0106.%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n>\n>   视频讲解：[坑很多！来看看你掉过几次坑 | LeetCode：106.从中序与后序遍历序列构造二叉树](https://www.bilibili.com/video/BV1vW4y1i7dn)\n>\n>   状态：AC\n\n### 思路\n\n这道题自己最开始想的不是很明白，而且自己在考试时做这类题也没有固定的套路，看了下卡哥的讲解\n\n- 后序数组长度为0, 空节点\n- 后序数组最后一个元素为父节点元素\n- 寻找中序数组位置  作切割点\n- 切中序数组\n- 切后序数组\n- 递归处理左区间 右区间\n\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day18/力扣106.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n### 代码\n\n``` go\n// 中序后序建立二叉树\nfunc buildTree(inorder []int, postorder []int) *TreeNode {\n\t// 1.后序数组长度为0, 空节点\n\tif len(postorder) == 0 {\n\t\treturn nil\n\t}\n\t// 2.后序数组最后一个元素为父节点元素\n\trootValue := postorder[len(postorder)-1]\n\troot := &TreeNode{\n\t\tVal:   rootValue,\n\t\tLeft:  nil,\n\t\tRight: nil,\n\t}\n\tif len(postorder) == 1 {\n\t\treturn root\n\t}\n\t// 3.寻找中序数组位置  作切割点\n\tindex := 0\n\tfor ; index < len(inorder); index++ {\n\t\tif inorder[index] == rootValue {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// 4.切中序数组\n\tleftInorder := inorder[:index]\n\trightInorder := inorder[index+1:]\n\t// 5.切后序数组\n\tleftPostorder := postorder[:len(leftInorder)]\n\trightPostorder := postorder[len(leftPostorder) : len(leftPostorder)+len(rightInorder)]\n\t// 6.递归处理左区间 右区间\n\troot.Left = buildTree(leftInorder, leftPostorder)\n\troot.Right = buildTree(rightInorder, rightPostorder)\n\treturn root\n}\n```\n\n``` go\n// 前序中序建立二叉树\nfunc buildTree2(preorder []int, inorder []int) *TreeNode {\n\t// 1.前序数组为0, 空节点\n\tif len(preorder) == 0 {\n\t\treturn nil\n\t}\n\t// 2.前序数组第一个元素为节点元素\n\trootValue := preorder[0]\n\troot := &TreeNode{\n\t\tVal:   rootValue,\n\t\tLeft:  nil,\n\t\tRight: nil,\n\t}\n\tif len(preorder) == 1 {\n\t\treturn root\n\t}\n\t// 3.寻找中序数组位置  作切割点\n\tindex := 0\n\tfor ; index < len(inorder); index++ {\n\t\tif inorder[index] == rootValue {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// 4.切中序数组\n\tleftInorder := inorder[:index]\n\trightInorder := inorder[index+1:]\n\t// 5.切前序数组\n\tleftPreorder := preorder[1 : len(leftInorder)+1]\n\trightPreorder := preorder[len(leftPreorder)+1:]\n\t// 6.递归处理左区间 右区间\n\troot.Left = buildTree2(leftPreorder, leftInorder)\n\troot.Right = buildTree2(rightPreorder, rightInorder)\n\treturn root\n}\n\n```\n\n","slug":"day18","published":1,"updated":"2023-10-24T19:35:18.347Z","_id":"clnlur4z20000n4z8e7m66upr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第十八天-513找树左下角的值、112-路径总和、113-路径总和II、106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树\"><a href=\"#代码随想录算法训练营第十八天-513找树左下角的值、112-路径总和、113-路径总和II、106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树\" class=\"headerlink\" title=\"代码随想录算法训练营第十八天  513找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树\"></a>代码随想录算法训练营第十八天  513找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树</h1><h2 id=\"513-找树左下角的值\"><a href=\"#513-找树左下角的值\" class=\"headerlink\" title=\"513. 找树左下角的值\"></a>513. 找树左下角的值</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-bottom-left-tree-value/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1424y1Z7pn\">怎么找二叉树的左下角？ 递归中又带回溯了，怎么办？| LeetCode：513.找二叉树左下角的值</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题对左下角的定义是：最后一行，最左面的元素，只需要层序遍历，输出最后一行的第一个元素即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findBottomLeftValue</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tqueue := arrayqueue.New()<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\tfmt.Println(result)<br>\t<span class=\"hljs-keyword\">return</span> result[<span class=\"hljs-built_in\">len</span>(result)<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"112-路径总和、113-路径总和II\"><a href=\"#112-路径总和、113-路径总和II\" class=\"headerlink\" title=\"112. 路径总和、113. 路径总和II\"></a>112. 路径总和、113. 路径总和II</h2><blockquote>\n<p>  题目链接：</p>\n<ul>\n<li><a href=\"https://leetcode.cn/problems/path-sum/\">112.路径总和</a></li>\n<li><a href=\"https://leetcode.cn/problems/path-sum-ii/\">113.路径总和ii</a></li>\n</ul>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0112.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV19t4y1L7CR\">拿不准的遍历顺序，搞不清的回溯过程，我太难了！ | LeetCode：112. 路径总和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>找到根节点到叶子节点的路径：这里使用先序遍历（深度搜索）</li>\n<li>将该路径所有节点求和，判断是否等于<code>targetSum</code>，有则保存至<code>result</code>中</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 112题</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">hasPathSum</span><span class=\"hljs-params\">(root *TreeNode, targetSum <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tgetResult(root, &amp;result, &amp;path)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(result); i++ &#123;<br>\t\tsum := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> result[i] &#123;<br>\t\t\tsum += v<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> sum == targetSum &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResult</span><span class=\"hljs-params\">(root *TreeNode, result *[][]<span class=\"hljs-type\">int</span>, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(*path))<br>\t\t<span class=\"hljs-built_in\">copy</span>(temp, *path)<br>\t\t*result = <span class=\"hljs-built_in\">append</span>(*result, temp)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult(root.Left, result, path)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult(root.Right, result, path)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 113题</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">pathSum</span><span class=\"hljs-params\">(root *TreeNode, targetSum <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tgetResult1(root, &amp;result, &amp;path, targetSum)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResult1</span><span class=\"hljs-params\">(root *TreeNode, result *[][]<span class=\"hljs-type\">int</span>, path *[]<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tsum := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> *path &#123;<br>\t\t\tsum += v<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> sum == target &#123;<br>\t\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(*path))<br>\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, *path)<br>\t\t\t*result = <span class=\"hljs-built_in\">append</span>(*result, temp)<br>\t\t&#125;<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult1(root.Left, result, path, target)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult1(root.Right, result, path, target)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树\"><a href=\"#106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树\" class=\"headerlink\" title=\"106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树\"></a>106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树</h2><blockquote>\n<p>  题目链接：</p>\n<ul>\n<li><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\">106.从中序与后序遍历序列构造二叉树</a></li>\n<li><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\">105.从前序与中序遍历序列构造二叉树</a></li>\n</ul>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0106.%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1vW4y1i7dn\">坑很多！来看看你掉过几次坑 | LeetCode：106.从中序与后序遍历序列构造二叉树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题自己最开始想的不是很明白，而且自己在考试时做这类题也没有固定的套路，看了下卡哥的讲解</p>\n<ul>\n<li>后序数组长度为0, 空节点</li>\n<li>后序数组最后一个元素为父节点元素</li>\n<li>寻找中序数组位置  作切割点</li>\n<li>切中序数组</li>\n<li>切后序数组</li>\n<li>递归处理左区间 右区间</li>\n</ul>\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day18/力扣106.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 中序后序建立二叉树</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">buildTree</span><span class=\"hljs-params\">(inorder []<span class=\"hljs-type\">int</span>, postorder []<span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-comment\">// 1.后序数组长度为0, 空节点</span><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(postorder) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// 2.后序数组最后一个元素为父节点元素</span><br>\trootValue := postorder[<span class=\"hljs-built_in\">len</span>(postorder)<span class=\"hljs-number\">-1</span>]<br>\troot := &amp;TreeNode&#123;<br>\t\tVal:   rootValue,<br>\t\tLeft:  <span class=\"hljs-literal\">nil</span>,<br>\t\tRight: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(postorder) == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root<br>\t&#125;<br>\t<span class=\"hljs-comment\">// 3.寻找中序数组位置  作切割点</span><br>\tindex := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> ; index &lt; <span class=\"hljs-built_in\">len</span>(inorder); index++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> inorder[index] == rootValue &#123;<br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 4.切中序数组</span><br>\tleftInorder := inorder[:index]<br>\trightInorder := inorder[index+<span class=\"hljs-number\">1</span>:]<br>\t<span class=\"hljs-comment\">// 5.切后序数组</span><br>\tleftPostorder := postorder[:<span class=\"hljs-built_in\">len</span>(leftInorder)]<br>\trightPostorder := postorder[<span class=\"hljs-built_in\">len</span>(leftPostorder) : <span class=\"hljs-built_in\">len</span>(leftPostorder)+<span class=\"hljs-built_in\">len</span>(rightInorder)]<br>\t<span class=\"hljs-comment\">// 6.递归处理左区间 右区间</span><br>\troot.Left = buildTree(leftInorder, leftPostorder)<br>\troot.Right = buildTree(rightInorder, rightPostorder)<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 前序中序建立二叉树</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">buildTree2</span><span class=\"hljs-params\">(preorder []<span class=\"hljs-type\">int</span>, inorder []<span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-comment\">// 1.前序数组为0, 空节点</span><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(preorder) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// 2.前序数组第一个元素为节点元素</span><br>\trootValue := preorder[<span class=\"hljs-number\">0</span>]<br>\troot := &amp;TreeNode&#123;<br>\t\tVal:   rootValue,<br>\t\tLeft:  <span class=\"hljs-literal\">nil</span>,<br>\t\tRight: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(preorder) == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root<br>\t&#125;<br>\t<span class=\"hljs-comment\">// 3.寻找中序数组位置  作切割点</span><br>\tindex := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> ; index &lt; <span class=\"hljs-built_in\">len</span>(inorder); index++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> inorder[index] == rootValue &#123;<br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 4.切中序数组</span><br>\tleftInorder := inorder[:index]<br>\trightInorder := inorder[index+<span class=\"hljs-number\">1</span>:]<br>\t<span class=\"hljs-comment\">// 5.切前序数组</span><br>\tleftPreorder := preorder[<span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">len</span>(leftInorder)+<span class=\"hljs-number\">1</span>]<br>\trightPreorder := preorder[<span class=\"hljs-built_in\">len</span>(leftPreorder)+<span class=\"hljs-number\">1</span>:]<br>\t<span class=\"hljs-comment\">// 6.递归处理左区间 右区间</span><br>\troot.Left = buildTree2(leftPreorder, leftInorder)<br>\troot.Right = buildTree2(rightPreorder, rightInorder)<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第十八天-513找树左下角的值、112-路径总和、113-路径总和II、106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树\"><a href=\"#代码随想录算法训练营第十八天-513找树左下角的值、112-路径总和、113-路径总和II、106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树\" class=\"headerlink\" title=\"代码随想录算法训练营第十八天  513找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树\"></a>代码随想录算法训练营第十八天  513找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树</h1><h2 id=\"513-找树左下角的值\"><a href=\"#513-找树左下角的值\" class=\"headerlink\" title=\"513. 找树左下角的值\"></a>513. 找树左下角的值</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-bottom-left-tree-value/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1424y1Z7pn\">怎么找二叉树的左下角？ 递归中又带回溯了，怎么办？| LeetCode：513.找二叉树左下角的值</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题对左下角的定义是：最后一行，最左面的元素，只需要层序遍历，输出最后一行的第一个元素即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findBottomLeftValue</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tqueue := arrayqueue.New()<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\tqueue.Enqueue(root)<br>\t<span class=\"hljs-keyword\">for</span> !queue.Empty() &#123;<br>\t\tsize := queue.Size()<br>\t\ttemp := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; size; i++ &#123;<br>\t\t\tnode, _ := queue.Dequeue()<br>\t\t\ttemp = <span class=\"hljs-built_in\">append</span>(temp, node.(*TreeNode).Val)<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Left)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> node.(*TreeNode).Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tqueue.Enqueue(node.(*TreeNode).Right)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t&#125;<br>\tfmt.Println(result)<br>\t<span class=\"hljs-keyword\">return</span> result[<span class=\"hljs-built_in\">len</span>(result)<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"112-路径总和、113-路径总和II\"><a href=\"#112-路径总和、113-路径总和II\" class=\"headerlink\" title=\"112. 路径总和、113. 路径总和II\"></a>112. 路径总和、113. 路径总和II</h2><blockquote>\n<p>  题目链接：</p>\n<ul>\n<li><a href=\"https://leetcode.cn/problems/path-sum/\">112.路径总和</a></li>\n<li><a href=\"https://leetcode.cn/problems/path-sum-ii/\">113.路径总和ii</a></li>\n</ul>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0112.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV19t4y1L7CR\">拿不准的遍历顺序，搞不清的回溯过程，我太难了！ | LeetCode：112. 路径总和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>找到根节点到叶子节点的路径：这里使用先序遍历（深度搜索）</li>\n<li>将该路径所有节点求和，判断是否等于<code>targetSum</code>，有则保存至<code>result</code>中</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 112题</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">hasPathSum</span><span class=\"hljs-params\">(root *TreeNode, targetSum <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tgetResult(root, &amp;result, &amp;path)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(result); i++ &#123;<br>\t\tsum := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> result[i] &#123;<br>\t\t\tsum += v<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> sum == targetSum &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResult</span><span class=\"hljs-params\">(root *TreeNode, result *[][]<span class=\"hljs-type\">int</span>, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(*path))<br>\t\t<span class=\"hljs-built_in\">copy</span>(temp, *path)<br>\t\t*result = <span class=\"hljs-built_in\">append</span>(*result, temp)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult(root.Left, result, path)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult(root.Right, result, path)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 113题</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">pathSum</span><span class=\"hljs-params\">(root *TreeNode, targetSum <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tgetResult1(root, &amp;result, &amp;path, targetSum)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getResult1</span><span class=\"hljs-params\">(root *TreeNode, result *[][]<span class=\"hljs-type\">int</span>, path *[]<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tsum := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> *path &#123;<br>\t\t\tsum += v<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> sum == target &#123;<br>\t\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(*path))<br>\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, *path)<br>\t\t\t*result = <span class=\"hljs-built_in\">append</span>(*result, temp)<br>\t\t&#125;<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult1(root.Left, result, path, target)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t\tgetResult1(root.Right, result, path, target)<br>\t\t*path = (*path)[:<span class=\"hljs-built_in\">len</span>(*path)<span class=\"hljs-number\">-1</span>]<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树\"><a href=\"#106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树\" class=\"headerlink\" title=\"106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树\"></a>106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树</h2><blockquote>\n<p>  题目链接：</p>\n<ul>\n<li><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\">106.从中序与后序遍历序列构造二叉树</a></li>\n<li><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\">105.从前序与中序遍历序列构造二叉树</a></li>\n</ul>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0106.%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1vW4y1i7dn\">坑很多！来看看你掉过几次坑 | LeetCode：106.从中序与后序遍历序列构造二叉树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题自己最开始想的不是很明白，而且自己在考试时做这类题也没有固定的套路，看了下卡哥的讲解</p>\n<ul>\n<li>后序数组长度为0, 空节点</li>\n<li>后序数组最后一个元素为父节点元素</li>\n<li>寻找中序数组位置  作切割点</li>\n<li>切中序数组</li>\n<li>切后序数组</li>\n<li>递归处理左区间 右区间</li>\n</ul>\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day18/力扣106.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 中序后序建立二叉树</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">buildTree</span><span class=\"hljs-params\">(inorder []<span class=\"hljs-type\">int</span>, postorder []<span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-comment\">// 1.后序数组长度为0, 空节点</span><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(postorder) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// 2.后序数组最后一个元素为父节点元素</span><br>\trootValue := postorder[<span class=\"hljs-built_in\">len</span>(postorder)<span class=\"hljs-number\">-1</span>]<br>\troot := &amp;TreeNode&#123;<br>\t\tVal:   rootValue,<br>\t\tLeft:  <span class=\"hljs-literal\">nil</span>,<br>\t\tRight: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(postorder) == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root<br>\t&#125;<br>\t<span class=\"hljs-comment\">// 3.寻找中序数组位置  作切割点</span><br>\tindex := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> ; index &lt; <span class=\"hljs-built_in\">len</span>(inorder); index++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> inorder[index] == rootValue &#123;<br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 4.切中序数组</span><br>\tleftInorder := inorder[:index]<br>\trightInorder := inorder[index+<span class=\"hljs-number\">1</span>:]<br>\t<span class=\"hljs-comment\">// 5.切后序数组</span><br>\tleftPostorder := postorder[:<span class=\"hljs-built_in\">len</span>(leftInorder)]<br>\trightPostorder := postorder[<span class=\"hljs-built_in\">len</span>(leftPostorder) : <span class=\"hljs-built_in\">len</span>(leftPostorder)+<span class=\"hljs-built_in\">len</span>(rightInorder)]<br>\t<span class=\"hljs-comment\">// 6.递归处理左区间 右区间</span><br>\troot.Left = buildTree(leftInorder, leftPostorder)<br>\troot.Right = buildTree(rightInorder, rightPostorder)<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 前序中序建立二叉树</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">buildTree2</span><span class=\"hljs-params\">(preorder []<span class=\"hljs-type\">int</span>, inorder []<span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-comment\">// 1.前序数组为0, 空节点</span><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(preorder) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// 2.前序数组第一个元素为节点元素</span><br>\trootValue := preorder[<span class=\"hljs-number\">0</span>]<br>\troot := &amp;TreeNode&#123;<br>\t\tVal:   rootValue,<br>\t\tLeft:  <span class=\"hljs-literal\">nil</span>,<br>\t\tRight: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(preorder) == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root<br>\t&#125;<br>\t<span class=\"hljs-comment\">// 3.寻找中序数组位置  作切割点</span><br>\tindex := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> ; index &lt; <span class=\"hljs-built_in\">len</span>(inorder); index++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> inorder[index] == rootValue &#123;<br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 4.切中序数组</span><br>\tleftInorder := inorder[:index]<br>\trightInorder := inorder[index+<span class=\"hljs-number\">1</span>:]<br>\t<span class=\"hljs-comment\">// 5.切前序数组</span><br>\tleftPreorder := preorder[<span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">len</span>(leftInorder)+<span class=\"hljs-number\">1</span>]<br>\trightPreorder := preorder[<span class=\"hljs-built_in\">len</span>(leftPreorder)+<span class=\"hljs-number\">1</span>:]<br>\t<span class=\"hljs-comment\">// 6.递归处理左区间 右区间</span><br>\troot.Left = buildTree2(leftPreorder, leftInorder)<br>\troot.Right = buildTree2(rightPreorder, rightInorder)<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第十九天  654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树","abbrlink":"38d5093a","date":"2023-10-12T14:38:04.000Z","_content":"\n# 代码随想录算法训练营第十九天 654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树\n\n## 654.最大二叉树\n\n>   题目链接：[力扣题目地址](https://leetcode.cn/problems/maximum-binary-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0654.%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n>\n>   视频讲解：[又是构造二叉树，又有很多坑！| LeetCode：654.最大二叉树](https://www.bilibili.com/video/BV1MG411G7ox)\n>\n>   状态：AC\n\n### 思路\n\n1.   找到当前数组最大值`max`以及所在位置`maxIndex`\n2.   新建一个节点，将`max`设为节点的值，判断此时的数组长度是否为0\n3.   切割左数组和右数组、并向左子树和右子树递归\n\n### 代码\n\n``` go\nfunc constructMaximumBinaryTree(nums []int) *TreeNode {\n\tmax := 0\n\tmaxIndex := 0\n\tfor i, v := range nums {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t\tmaxIndex = i\n\t\t}\n\t}\n\troot := &TreeNode{\n\t\tVal:   max,\n\t\tLeft:  nil,\n\t\tRight: nil,\n\t}\n\tif len(nums) == 0 {\n\t\treturn root\n\t}\n\tleftNums := nums[:maxIndex]\n\trightNums := nums[maxIndex+1:]\n\tif len(leftNums) != 0 {\n\t\troot.Left = constructMaximumBinaryTree(leftNums)\n\t}\n\tif len(rightNums) != 0 {\n\t\troot.Right = constructMaximumBinaryTree(rightNums)\n\t}\n\treturn root\n}\n```\n\n## 617. 合并二叉树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/merge-two-binary-trees/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0617.%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n>\n>   视频讲解：[一起操作两个二叉树？有点懵！| LeetCode：617.合并二叉树](https://www.bilibili.com/video/BV1m14y1Y7JK)\n>\n>   状态：AC\n\n### 思路\n\n合并二叉树首先以其中一棵树为基准，将另一棵树“移植”过来。这里以`root1`为准\n\n1.   如果`root1`是空节点，说明应该把`root2`的东西“移植过来”（如果没有也没事）\n2.   反之同理，如果`root2`是空节点，则`root1`继续向下遍历\n3.   `root1.Val += root2.Val`\n4.   `root1.Left`是两棵树向左节点遍历返回的结果。`root1.Right`是两棵树向左节点遍历返回的结果\n\n### 代码\n\n``` go\nfunc mergeTrees(root1 *TreeNode, root2 *TreeNode) *TreeNode {\n\tif root1 == nil {\n\t\treturn root2\n\t}\n\tif root2 == nil {\n\t\treturn root1\n\t}\n\troot1.Val += root2.Val\n\troot1.Left = mergeTrees(root1.Left, root2.Left)\n\troot1.Right = mergeTrees(root1.Right, root2.Right)\n\treturn root1\n}\n```\n\n## 700.二叉搜索树中的搜索\n\n>   题目链接：[力扣题目地址](https://leetcode.cn/problems/search-in-a-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0700.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2.html)\n>\n>   视频讲解：[不愧是搜索树，这次搜索有方向了！| LeetCode：700.二叉搜索树中的搜索](https://www.bilibili.com/video/BV1wG411g7sF)\n>\n>   状态：AC\n\n### 思路\n\n这里的搜索并不是返回是否找到，而是要返回子树，总的思路是一样的\n\n1.   `val < root.Val`，向左找；`val > root.Val`，向右找；相等则返回当前结点（包含了子树）\n\n### 代码\n\n``` go\nfunc searchBST(root *TreeNode, val int) *TreeNode {\n\tif root == nil {\n\t\treturn nil\n\t}\n\tvar node *TreeNode\n\tif root.Val == val {\n\t\tnode = root\n\t\treturn node\n\t} else if val < root.Val {\n\t\tnode = searchBST(root.Left, val)\n\t} else {\n\t\tnode = searchBST(root.Right, val)\n\t}\n\treturn node\n}\n```\n\n## 98. 验证二叉搜索树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/validate-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://leetcode.cn/problems/validate-binary-search-tree/)\n>\n>   视频讲解：[你对二叉搜索树了解的还不够！ | LeetCode：98.验证二叉搜索树](https://www.bilibili.com/video/BV18P411n7Q4)\n>\n>   状态：AC\n\n### 思路\n\n-   <font color=\"red\">错误思路</font>：顺序遍历每个节点，比较是否“左<根<右”，如果均满足返回true，否则是false\n\n    >   错误原因：如果树如下\n    >\n    >   ​            2\n    >\n    >   ​         /     \\\n    >\n    >   ​       1        3\n    >\n    >   ​         \\\n    >\n    >   ​           4\n    >\n    >   4比2大，但是出现在了2的左边\n    >\n    >   ``` go\n    >   // 错误的代码\n    >   func isValidBST(root *TreeNode) bool {\n    >   \tif root.Left == nil && root.Right != nil {\n    >   \t\tif root.Val < root.Right.Val {\n    >   \t\t\treturn isValidBST(root.Right)\n    >   \t\t} else {\n    >   \t\t\treturn false\n    >   \t\t}\n    >   \t} else if root.Left != nil && root.Right == nil {\n    >   \t\tif root.Left.Val < root.Val {\n    >   \t\t\treturn isValidBST(root.Left)\n    >   \t\t} else {\n    >   \t\t\treturn false\n    >   \t\t}\n    >   \t} else if root.Left != nil && root.Right != nil {\n    >   \t  if root.Left.Val < root.Val && root.Val < root.Right.Val {\n    >   \t\treturn isValidBST(root.Left) && isValidBST(root.Right)\n    >   \t} else {\n    >   \t\treturn false\n    >   \t\t}\n    >       } else {\n    >   \t\treturn true\n    >   \t}\n    >   }\n    >   ```\n    >\n    >   \n\n-   简单看了下卡哥的文档，知道了用中序遍历，中序遍历得到的结果如果是递增序列则为搜索树\n\n    >   如果树为如下，力扣的测试用例返回的是false，所以不能出现相等的情况\n    >\n    >   ​            2\n    >\n    >   ​         /     \\\n    >\n    >   ​       2        2\n\n### 代码\n\n``` go\nfunc isValidBST(root *TreeNode) bool {\n\tvar path []int\n\tinorder(root, &path)\n\tfor i := 1; i < len(path); i++ {\n\t\tif path[i-1] >= path[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\nfunc inorder(root *TreeNode, path *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tinorder(root.Left, path)\n\t*path = append(*path, root.Val)\n\tinorder(root.Right, path)\n}\n```\n\n","source":"_posts/day19.md","raw":"---\ntitle: 代码随想录算法训练营第十九天  654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 二叉树\ncategories: 刷题\nabbrlink: 38d5093a\ndate: 2023-10-12 22:38:04\n---\n\n# 代码随想录算法训练营第十九天 654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树\n\n## 654.最大二叉树\n\n>   题目链接：[力扣题目地址](https://leetcode.cn/problems/maximum-binary-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0654.%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n>\n>   视频讲解：[又是构造二叉树，又有很多坑！| LeetCode：654.最大二叉树](https://www.bilibili.com/video/BV1MG411G7ox)\n>\n>   状态：AC\n\n### 思路\n\n1.   找到当前数组最大值`max`以及所在位置`maxIndex`\n2.   新建一个节点，将`max`设为节点的值，判断此时的数组长度是否为0\n3.   切割左数组和右数组、并向左子树和右子树递归\n\n### 代码\n\n``` go\nfunc constructMaximumBinaryTree(nums []int) *TreeNode {\n\tmax := 0\n\tmaxIndex := 0\n\tfor i, v := range nums {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t\tmaxIndex = i\n\t\t}\n\t}\n\troot := &TreeNode{\n\t\tVal:   max,\n\t\tLeft:  nil,\n\t\tRight: nil,\n\t}\n\tif len(nums) == 0 {\n\t\treturn root\n\t}\n\tleftNums := nums[:maxIndex]\n\trightNums := nums[maxIndex+1:]\n\tif len(leftNums) != 0 {\n\t\troot.Left = constructMaximumBinaryTree(leftNums)\n\t}\n\tif len(rightNums) != 0 {\n\t\troot.Right = constructMaximumBinaryTree(rightNums)\n\t}\n\treturn root\n}\n```\n\n## 617. 合并二叉树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/merge-two-binary-trees/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0617.%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n>\n>   视频讲解：[一起操作两个二叉树？有点懵！| LeetCode：617.合并二叉树](https://www.bilibili.com/video/BV1m14y1Y7JK)\n>\n>   状态：AC\n\n### 思路\n\n合并二叉树首先以其中一棵树为基准，将另一棵树“移植”过来。这里以`root1`为准\n\n1.   如果`root1`是空节点，说明应该把`root2`的东西“移植过来”（如果没有也没事）\n2.   反之同理，如果`root2`是空节点，则`root1`继续向下遍历\n3.   `root1.Val += root2.Val`\n4.   `root1.Left`是两棵树向左节点遍历返回的结果。`root1.Right`是两棵树向左节点遍历返回的结果\n\n### 代码\n\n``` go\nfunc mergeTrees(root1 *TreeNode, root2 *TreeNode) *TreeNode {\n\tif root1 == nil {\n\t\treturn root2\n\t}\n\tif root2 == nil {\n\t\treturn root1\n\t}\n\troot1.Val += root2.Val\n\troot1.Left = mergeTrees(root1.Left, root2.Left)\n\troot1.Right = mergeTrees(root1.Right, root2.Right)\n\treturn root1\n}\n```\n\n## 700.二叉搜索树中的搜索\n\n>   题目链接：[力扣题目地址](https://leetcode.cn/problems/search-in-a-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0700.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2.html)\n>\n>   视频讲解：[不愧是搜索树，这次搜索有方向了！| LeetCode：700.二叉搜索树中的搜索](https://www.bilibili.com/video/BV1wG411g7sF)\n>\n>   状态：AC\n\n### 思路\n\n这里的搜索并不是返回是否找到，而是要返回子树，总的思路是一样的\n\n1.   `val < root.Val`，向左找；`val > root.Val`，向右找；相等则返回当前结点（包含了子树）\n\n### 代码\n\n``` go\nfunc searchBST(root *TreeNode, val int) *TreeNode {\n\tif root == nil {\n\t\treturn nil\n\t}\n\tvar node *TreeNode\n\tif root.Val == val {\n\t\tnode = root\n\t\treturn node\n\t} else if val < root.Val {\n\t\tnode = searchBST(root.Left, val)\n\t} else {\n\t\tnode = searchBST(root.Right, val)\n\t}\n\treturn node\n}\n```\n\n## 98. 验证二叉搜索树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/validate-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://leetcode.cn/problems/validate-binary-search-tree/)\n>\n>   视频讲解：[你对二叉搜索树了解的还不够！ | LeetCode：98.验证二叉搜索树](https://www.bilibili.com/video/BV18P411n7Q4)\n>\n>   状态：AC\n\n### 思路\n\n-   <font color=\"red\">错误思路</font>：顺序遍历每个节点，比较是否“左<根<右”，如果均满足返回true，否则是false\n\n    >   错误原因：如果树如下\n    >\n    >   ​            2\n    >\n    >   ​         /     \\\n    >\n    >   ​       1        3\n    >\n    >   ​         \\\n    >\n    >   ​           4\n    >\n    >   4比2大，但是出现在了2的左边\n    >\n    >   ``` go\n    >   // 错误的代码\n    >   func isValidBST(root *TreeNode) bool {\n    >   \tif root.Left == nil && root.Right != nil {\n    >   \t\tif root.Val < root.Right.Val {\n    >   \t\t\treturn isValidBST(root.Right)\n    >   \t\t} else {\n    >   \t\t\treturn false\n    >   \t\t}\n    >   \t} else if root.Left != nil && root.Right == nil {\n    >   \t\tif root.Left.Val < root.Val {\n    >   \t\t\treturn isValidBST(root.Left)\n    >   \t\t} else {\n    >   \t\t\treturn false\n    >   \t\t}\n    >   \t} else if root.Left != nil && root.Right != nil {\n    >   \t  if root.Left.Val < root.Val && root.Val < root.Right.Val {\n    >   \t\treturn isValidBST(root.Left) && isValidBST(root.Right)\n    >   \t} else {\n    >   \t\treturn false\n    >   \t\t}\n    >       } else {\n    >   \t\treturn true\n    >   \t}\n    >   }\n    >   ```\n    >\n    >   \n\n-   简单看了下卡哥的文档，知道了用中序遍历，中序遍历得到的结果如果是递增序列则为搜索树\n\n    >   如果树为如下，力扣的测试用例返回的是false，所以不能出现相等的情况\n    >\n    >   ​            2\n    >\n    >   ​         /     \\\n    >\n    >   ​       2        2\n\n### 代码\n\n``` go\nfunc isValidBST(root *TreeNode) bool {\n\tvar path []int\n\tinorder(root, &path)\n\tfor i := 1; i < len(path); i++ {\n\t\tif path[i-1] >= path[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\nfunc inorder(root *TreeNode, path *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tinorder(root.Left, path)\n\t*path = append(*path, root.Val)\n\tinorder(root.Right, path)\n}\n```\n\n","slug":"day19","published":1,"updated":"2023-10-24T19:35:24.017Z","_id":"clnnb2tpy0000soz8djs5abxe","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第十九天-654-最大二叉树、617-合并二叉树、700-二叉搜索树中的搜索、98-验证二叉搜索树\"><a href=\"#代码随想录算法训练营第十九天-654-最大二叉树、617-合并二叉树、700-二叉搜索树中的搜索、98-验证二叉搜索树\" class=\"headerlink\" title=\"代码随想录算法训练营第十九天 654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树\"></a>代码随想录算法训练营第十九天 654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树</h1><h2 id=\"654-最大二叉树\"><a href=\"#654-最大二叉树\" class=\"headerlink\" title=\"654.最大二叉树\"></a>654.最大二叉树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/maximum-binary-tree/\">力扣题目地址</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0654.%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1MG411G7ox\">又是构造二叉树，又有很多坑！| LeetCode：654.最大二叉树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>找到当前数组最大值<code>max</code>以及所在位置<code>maxIndex</code></li>\n<li>新建一个节点，将<code>max</code>设为节点的值，判断此时的数组长度是否为0</li>\n<li>切割左数组和右数组、并向左子树和右子树递归</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">constructMaximumBinaryTree</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\tmax := <span class=\"hljs-number\">0</span><br>\tmaxIndex := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v &gt; max &#123;<br>\t\t\tmax = v<br>\t\t\tmaxIndex = i<br>\t\t&#125;<br>\t&#125;<br>\troot := &amp;TreeNode&#123;<br>\t\tVal:   max,<br>\t\tLeft:  <span class=\"hljs-literal\">nil</span>,<br>\t\tRight: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root<br>\t&#125;<br>\tleftNums := nums[:maxIndex]<br>\trightNums := nums[maxIndex+<span class=\"hljs-number\">1</span>:]<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(leftNums) != <span class=\"hljs-number\">0</span> &#123;<br>\t\troot.Left = constructMaximumBinaryTree(leftNums)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(rightNums) != <span class=\"hljs-number\">0</span> &#123;<br>\t\troot.Right = constructMaximumBinaryTree(rightNums)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"617-合并二叉树\"><a href=\"#617-合并二叉树\" class=\"headerlink\" title=\"617. 合并二叉树\"></a>617. 合并二叉树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/merge-two-binary-trees/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0617.%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1m14y1Y7JK\">一起操作两个二叉树？有点懵！| LeetCode：617.合并二叉树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>合并二叉树首先以其中一棵树为基准，将另一棵树“移植”过来。这里以<code>root1</code>为准</p>\n<ol>\n<li>如果<code>root1</code>是空节点，说明应该把<code>root2</code>的东西“移植过来”（如果没有也没事）</li>\n<li>反之同理，如果<code>root2</code>是空节点，则<code>root1</code>继续向下遍历</li>\n<li><code>root1.Val += root2.Val</code></li>\n<li><code>root1.Left</code>是两棵树向左节点遍历返回的结果。<code>root1.Right</code>是两棵树向左节点遍历返回的结果</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mergeTrees</span><span class=\"hljs-params\">(root1 *TreeNode, root2 *TreeNode)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> root1 == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root2<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root2 == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root1<br>\t&#125;<br>\troot1.Val += root2.Val<br>\troot1.Left = mergeTrees(root1.Left, root2.Left)<br>\troot1.Right = mergeTrees(root1.Right, root2.Right)<br>\t<span class=\"hljs-keyword\">return</span> root1<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"700-二叉搜索树中的搜索\"><a href=\"#700-二叉搜索树中的搜索\" class=\"headerlink\" title=\"700.二叉搜索树中的搜索\"></a>700.二叉搜索树中的搜索</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/search-in-a-binary-search-tree/\">力扣题目地址</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0700.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1wG411g7sF\">不愧是搜索树，这次搜索有方向了！| LeetCode：700.二叉搜索树中的搜索</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这里的搜索并不是返回是否找到，而是要返回子树，总的思路是一样的</p>\n<ol>\n<li><code>val &lt; root.Val</code>，向左找；<code>val &gt; root.Val</code>，向右找；相等则返回当前结点（包含了子树）</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchBST</span><span class=\"hljs-params\">(root *TreeNode, val <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> node *TreeNode<br>\t<span class=\"hljs-keyword\">if</span> root.Val == val &#123;<br>\t\tnode = root<br>\t\t<span class=\"hljs-keyword\">return</span> node<br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> val &lt; root.Val &#123;<br>\t\tnode = searchBST(root.Left, val)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tnode = searchBST(root.Right, val)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> node<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"98-验证二叉搜索树\"><a href=\"#98-验证二叉搜索树\" class=\"headerlink\" title=\"98. 验证二叉搜索树\"></a>98. 验证二叉搜索树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV18P411n7Q4\">你对二叉搜索树了解的还不够！ | LeetCode：98.验证二叉搜索树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><p><font color=\"red\">错误思路</font>：顺序遍历每个节点，比较是否“左&lt;根&lt;右”，如果均满足返回true，否则是false</p>\n<blockquote>\n<p>  错误原因：如果树如下</p>\n<p>  ​            2</p>\n<p>  ​         &#x2F;     \\</p>\n<p>  ​       1        3</p>\n<p>  ​         \\</p>\n<p>  ​           4</p>\n<p>  4比2大，但是出现在了2的左边</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 错误的代码</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isValidBST</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> root.Val &lt; root.Right.Val &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> isValidBST(root.Right)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> root.Left.Val &lt; root.Val &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> isValidBST(root.Left)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t  <span class=\"hljs-keyword\">if</span> root.Left.Val &lt; root.Val &amp;&amp; root.Val &lt; root.Right.Val &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> isValidBST(root.Left) &amp;&amp; isValidBST(root.Right)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</blockquote>\n</li>\n<li><p>简单看了下卡哥的文档，知道了用中序遍历，中序遍历得到的结果如果是递增序列则为搜索树</p>\n<blockquote>\n<p>  如果树为如下，力扣的测试用例返回的是false，所以不能出现相等的情况</p>\n<p>  ​            2</p>\n<p>  ​         &#x2F;     \\</p>\n<p>  ​       2        2</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isValidBST</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tinorder(root, &amp;path)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(path); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> path[i<span class=\"hljs-number\">-1</span>] &gt;= path[i] &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">inorder</span><span class=\"hljs-params\">(root *TreeNode, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tinorder(root.Left, path)<br>\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\tinorder(root.Right, path)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第十九天-654-最大二叉树、617-合并二叉树、700-二叉搜索树中的搜索、98-验证二叉搜索树\"><a href=\"#代码随想录算法训练营第十九天-654-最大二叉树、617-合并二叉树、700-二叉搜索树中的搜索、98-验证二叉搜索树\" class=\"headerlink\" title=\"代码随想录算法训练营第十九天 654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树\"></a>代码随想录算法训练营第十九天 654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树</h1><h2 id=\"654-最大二叉树\"><a href=\"#654-最大二叉树\" class=\"headerlink\" title=\"654.最大二叉树\"></a>654.最大二叉树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/maximum-binary-tree/\">力扣题目地址</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0654.%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1MG411G7ox\">又是构造二叉树，又有很多坑！| LeetCode：654.最大二叉树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>找到当前数组最大值<code>max</code>以及所在位置<code>maxIndex</code></li>\n<li>新建一个节点，将<code>max</code>设为节点的值，判断此时的数组长度是否为0</li>\n<li>切割左数组和右数组、并向左子树和右子树递归</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">constructMaximumBinaryTree</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\tmax := <span class=\"hljs-number\">0</span><br>\tmaxIndex := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v &gt; max &#123;<br>\t\t\tmax = v<br>\t\t\tmaxIndex = i<br>\t\t&#125;<br>\t&#125;<br>\troot := &amp;TreeNode&#123;<br>\t\tVal:   max,<br>\t\tLeft:  <span class=\"hljs-literal\">nil</span>,<br>\t\tRight: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root<br>\t&#125;<br>\tleftNums := nums[:maxIndex]<br>\trightNums := nums[maxIndex+<span class=\"hljs-number\">1</span>:]<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(leftNums) != <span class=\"hljs-number\">0</span> &#123;<br>\t\troot.Left = constructMaximumBinaryTree(leftNums)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(rightNums) != <span class=\"hljs-number\">0</span> &#123;<br>\t\troot.Right = constructMaximumBinaryTree(rightNums)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"617-合并二叉树\"><a href=\"#617-合并二叉树\" class=\"headerlink\" title=\"617. 合并二叉树\"></a>617. 合并二叉树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/merge-two-binary-trees/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0617.%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1m14y1Y7JK\">一起操作两个二叉树？有点懵！| LeetCode：617.合并二叉树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>合并二叉树首先以其中一棵树为基准，将另一棵树“移植”过来。这里以<code>root1</code>为准</p>\n<ol>\n<li>如果<code>root1</code>是空节点，说明应该把<code>root2</code>的东西“移植过来”（如果没有也没事）</li>\n<li>反之同理，如果<code>root2</code>是空节点，则<code>root1</code>继续向下遍历</li>\n<li><code>root1.Val += root2.Val</code></li>\n<li><code>root1.Left</code>是两棵树向左节点遍历返回的结果。<code>root1.Right</code>是两棵树向左节点遍历返回的结果</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mergeTrees</span><span class=\"hljs-params\">(root1 *TreeNode, root2 *TreeNode)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> root1 == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root2<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root2 == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root1<br>\t&#125;<br>\troot1.Val += root2.Val<br>\troot1.Left = mergeTrees(root1.Left, root2.Left)<br>\troot1.Right = mergeTrees(root1.Right, root2.Right)<br>\t<span class=\"hljs-keyword\">return</span> root1<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"700-二叉搜索树中的搜索\"><a href=\"#700-二叉搜索树中的搜索\" class=\"headerlink\" title=\"700.二叉搜索树中的搜索\"></a>700.二叉搜索树中的搜索</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/search-in-a-binary-search-tree/\">力扣题目地址</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0700.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1wG411g7sF\">不愧是搜索树，这次搜索有方向了！| LeetCode：700.二叉搜索树中的搜索</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这里的搜索并不是返回是否找到，而是要返回子树，总的思路是一样的</p>\n<ol>\n<li><code>val &lt; root.Val</code>，向左找；<code>val &gt; root.Val</code>，向右找；相等则返回当前结点（包含了子树）</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchBST</span><span class=\"hljs-params\">(root *TreeNode, val <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> node *TreeNode<br>\t<span class=\"hljs-keyword\">if</span> root.Val == val &#123;<br>\t\tnode = root<br>\t\t<span class=\"hljs-keyword\">return</span> node<br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> val &lt; root.Val &#123;<br>\t\tnode = searchBST(root.Left, val)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tnode = searchBST(root.Right, val)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> node<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"98-验证二叉搜索树\"><a href=\"#98-验证二叉搜索树\" class=\"headerlink\" title=\"98. 验证二叉搜索树\"></a>98. 验证二叉搜索树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV18P411n7Q4\">你对二叉搜索树了解的还不够！ | LeetCode：98.验证二叉搜索树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><p><font color=\"red\">错误思路</font>：顺序遍历每个节点，比较是否“左&lt;根&lt;右”，如果均满足返回true，否则是false</p>\n<blockquote>\n<p>  错误原因：如果树如下</p>\n<p>  ​            2</p>\n<p>  ​         &#x2F;     \\</p>\n<p>  ​       1        3</p>\n<p>  ​         \\</p>\n<p>  ​           4</p>\n<p>  4比2大，但是出现在了2的左边</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 错误的代码</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isValidBST</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> root.Val &lt; root.Right.Val &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> isValidBST(root.Right)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> root.Left.Val &lt; root.Val &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> isValidBST(root.Left)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t  <span class=\"hljs-keyword\">if</span> root.Left.Val &lt; root.Val &amp;&amp; root.Val &lt; root.Right.Val &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> isValidBST(root.Left) &amp;&amp; isValidBST(root.Right)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</blockquote>\n</li>\n<li><p>简单看了下卡哥的文档，知道了用中序遍历，中序遍历得到的结果如果是递增序列则为搜索树</p>\n<blockquote>\n<p>  如果树为如下，力扣的测试用例返回的是false，所以不能出现相等的情况</p>\n<p>  ​            2</p>\n<p>  ​         &#x2F;     \\</p>\n<p>  ​       2        2</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isValidBST</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tinorder(root, &amp;path)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(path); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> path[i<span class=\"hljs-number\">-1</span>] &gt;= path[i] &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">inorder</span><span class=\"hljs-params\">(root *TreeNode, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tinorder(root.Left, path)<br>\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\tinorder(root.Right, path)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先","abbrlink":"80a9e5fb","date":"2023-10-14T09:58:14.000Z","_content":"\n# 代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先\n\n## 530.二叉搜索树的最小绝对差\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/minimum-absolute-difference-in-bst/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0530.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.html)\n>\n>   视频讲解：[二叉搜索树中，需要掌握如何双指针遍历！| LeetCode：530.二叉搜索树的最小绝对差](https://www.bilibili.com/video/BV1DD4y11779)\n>\n>   状态：AC\n\n### 思路\n\n-   思路一：二叉搜索树中序遍历是递增的，中序遍历后得到结果数组，再遍历结果数组，计算相邻元素的差，找最小值。\n-   思路二：使用双指针，看了卡哥的解法豁然开朗。定义当前指针`cur`和上个节点的指针`pre=nil`\n    1.   `cur`开始中序遍历时，不断找最左节点的值\n    2.   和`pre`指针判断，如果`pre`为空，说明当前是第一个节点，此后将`pre=cur`\n    3.   `cur`继续递归，`pre`始终会慢`cur`一层\n    4.   比较`cur.Val - pre.Val<minNum`\n\n### 代码\n\n``` go\n// 思路一\nfunc getMinimumDifference(root *TreeNode) int {\n\tvar path []int\n\tinorder(root, &path)\n\tminNum := math.MaxInt32\n\tfor i := 1; i < len(path); i++ {\n\t\tif path[i]-path[i-1] < minNum {\n\t\t\tminNum = path[i] - path[i-1]\n\t\t}\n\t}\n\treturn minNum\n}\n\nfunc inorder(root *TreeNode, path *[]int) {\n\tif root.Left != nil {\n\t\tinorder(root.Left, path)\n\t}\n\t*path = append(*path, root.Val)\n\tif root.Right != nil {\n\t\tinorder(root.Right, path)\n\t}\n}\n```\n\n``` go\n// 思路二\nfunc getMinimumDifference(root *TreeNode) int {\n\tminNum := 999999999\n\tvar pre *TreeNode\n\tvar inorder2 func(cur *TreeNode)\n\tinorder2 = func(cur *TreeNode) {\n\t\tif cur == nil {\n\t\t\treturn\n\t\t}\n\t\tinorder2(cur.Left)\n\t\tif pre != nil && cur.Val-pre.Val < minNum {\n\t\t\tminNum = cur.Val - pre.Val\n\t\t}\n\t\tpre = cur\n\t\tinorder2(cur.Right)\n\t}\n\tinorder2(root)\n\treturn minNum\n}\n```\n\n## 501.二叉搜索树中的众数\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/find-mode-in-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0501.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0.html)\n>\n>   视频讲解：[不仅双指针，还有代码技巧可以惊艳到你！ | LeetCode：501.二叉搜索树中的众数](https://www.bilibili.com/video/BV1fD4y117gp)\n>\n>   状态：AC\n\n### 思路\n\n整体思路和上题基本类似，依旧使用双指针。只不过要多定义些变量，用来存放历史最大值`maxCount`，当前最大值`count`，众数结果`maxNum`\n\n-   如果`cur.Val == pre.Val`，`count++`；\n-   否则判断`count`与`maxCount`\n    -   `count > maxCount`：清空`maxNum`，放入新的值\n    -   `count == maxCount`：追加新的值\n    -   `count < maxCount`：不管\n    -   更新`count = 1`\n\n### 代码\n\n``` go\nfunc findMode(root *TreeNode) []int {\n\tmaxCount := 0\n\tmaxNum := []int{}\n\tcount := 0\n\tvar pre *TreeNode\n\tvar mid func(cur *TreeNode)\n\tmid = func(cur *TreeNode) {\n\t\tif cur == nil {\n\t\t\treturn\n\t\t}\n\t\tmid(cur.Left)\n\t\tif pre == nil {\n\t\t\tcount = 1\n\t\t} else if pre.Val == cur.Val {\n\t\t\tcount++\n\t\t} else {\n\t\t\tcount = 1\n\t\t}\n\t\tpre = cur\n\t\tif count == maxCount {\n\t\t\tmaxNum = append(maxNum, cur.Val)\n\t\t} else if count > maxCount {\n\t\t\tmaxCount = count\n\t\t\tmaxNum = []int{cur.Val}\n\t\t}\n\t\tmid(cur.Right)\n\t}\n\tmid(root)\n\treturn maxNum\n}\n\n```\n\n## 236.二叉树的最近公共祖先\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html)\n>\n>   视频讲解：[自底向上查找，有点难度！ | LeetCode：236. 二叉树的最近公共祖先](https://www.bilibili.com/video/BV1jd4y1B7E2)\n>\n>   状态：AC\n\n### 思路\n\n这道题和卡哥的思路不同。我依旧使用了中序遍历。\n\n1.   中序遍历得到结果`path`\n2.   查找中序遍历中`p`与`q`的位置，与`root`进行判断\n     -   如果`root`在`p`和`q`的左（右）侧，`root`则需要向右（左）节点移动\n     -   如果`root`在`p`和`q`之间（或`root`是`p`或`q`），返回即可，具体可以看下方视频\n\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day20/二叉树公共祖先.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n### 代码\n\n``` go\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n\tvar path []int\n\tgetInorderPath(root, &path)\n\tfor {\n\t\tindex := 0\n\t\tindexP := 0\n\t\tindexQ := 0\n\t\t// 找到当前根结点\n\t\tfor i := 0; i < len(path); i++ {\n\t\t\tif root.Val == path[i] {\n\t\t\t\tindex = i\n\t\t\t}\n\t\t\tif p.Val == path[i] {\n\t\t\t\tindexP = i\n\t\t\t}\n\t\t\tif q.Val == path[i] {\n\t\t\t\tindexQ = i\n\t\t\t}\n\t\t}\n\t\tif indexP == index {\n\t\t\treturn p\n\t\t}\n\t\tif indexQ == index {\n\t\t\treturn q\n\t\t}\n\t\t// p,q 分散在中序遍历的根结点两侧\n\t\tif indexP < index && index < indexQ || indexQ < index && index < indexP {\n\t\t\treturn root\n\t\t}\n\t\t// p,q 在根节点左侧\n\t\tif indexP < index && indexQ < index {\n\t\t\troot = root.Left\n\t\t\tcontinue\n\t\t}\n\t\t// p,q 在根节点右侧\n\t\tif index < indexP && index < indexQ {\n\t\t\troot = root.Right\n\t\t\tcontinue\n\t\t}\n\n\t}\n}\nfunc getInorderPath(root *TreeNode, path *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tgetInorderPath(root.Left, path)\n\t*path = append(*path, root.Val)\n\tgetInorderPath(root.Right, path)\n}\n```\n\n","source":"_posts/day20.md","raw":"---\ntitle: 代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 二叉树\ncategories: 刷题\nabbrlink: 80a9e5fb\ndate: 2023-10-14 17:58:14\n---\n\n# 代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先\n\n## 530.二叉搜索树的最小绝对差\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/minimum-absolute-difference-in-bst/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0530.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.html)\n>\n>   视频讲解：[二叉搜索树中，需要掌握如何双指针遍历！| LeetCode：530.二叉搜索树的最小绝对差](https://www.bilibili.com/video/BV1DD4y11779)\n>\n>   状态：AC\n\n### 思路\n\n-   思路一：二叉搜索树中序遍历是递增的，中序遍历后得到结果数组，再遍历结果数组，计算相邻元素的差，找最小值。\n-   思路二：使用双指针，看了卡哥的解法豁然开朗。定义当前指针`cur`和上个节点的指针`pre=nil`\n    1.   `cur`开始中序遍历时，不断找最左节点的值\n    2.   和`pre`指针判断，如果`pre`为空，说明当前是第一个节点，此后将`pre=cur`\n    3.   `cur`继续递归，`pre`始终会慢`cur`一层\n    4.   比较`cur.Val - pre.Val<minNum`\n\n### 代码\n\n``` go\n// 思路一\nfunc getMinimumDifference(root *TreeNode) int {\n\tvar path []int\n\tinorder(root, &path)\n\tminNum := math.MaxInt32\n\tfor i := 1; i < len(path); i++ {\n\t\tif path[i]-path[i-1] < minNum {\n\t\t\tminNum = path[i] - path[i-1]\n\t\t}\n\t}\n\treturn minNum\n}\n\nfunc inorder(root *TreeNode, path *[]int) {\n\tif root.Left != nil {\n\t\tinorder(root.Left, path)\n\t}\n\t*path = append(*path, root.Val)\n\tif root.Right != nil {\n\t\tinorder(root.Right, path)\n\t}\n}\n```\n\n``` go\n// 思路二\nfunc getMinimumDifference(root *TreeNode) int {\n\tminNum := 999999999\n\tvar pre *TreeNode\n\tvar inorder2 func(cur *TreeNode)\n\tinorder2 = func(cur *TreeNode) {\n\t\tif cur == nil {\n\t\t\treturn\n\t\t}\n\t\tinorder2(cur.Left)\n\t\tif pre != nil && cur.Val-pre.Val < minNum {\n\t\t\tminNum = cur.Val - pre.Val\n\t\t}\n\t\tpre = cur\n\t\tinorder2(cur.Right)\n\t}\n\tinorder2(root)\n\treturn minNum\n}\n```\n\n## 501.二叉搜索树中的众数\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/find-mode-in-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0501.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0.html)\n>\n>   视频讲解：[不仅双指针，还有代码技巧可以惊艳到你！ | LeetCode：501.二叉搜索树中的众数](https://www.bilibili.com/video/BV1fD4y117gp)\n>\n>   状态：AC\n\n### 思路\n\n整体思路和上题基本类似，依旧使用双指针。只不过要多定义些变量，用来存放历史最大值`maxCount`，当前最大值`count`，众数结果`maxNum`\n\n-   如果`cur.Val == pre.Val`，`count++`；\n-   否则判断`count`与`maxCount`\n    -   `count > maxCount`：清空`maxNum`，放入新的值\n    -   `count == maxCount`：追加新的值\n    -   `count < maxCount`：不管\n    -   更新`count = 1`\n\n### 代码\n\n``` go\nfunc findMode(root *TreeNode) []int {\n\tmaxCount := 0\n\tmaxNum := []int{}\n\tcount := 0\n\tvar pre *TreeNode\n\tvar mid func(cur *TreeNode)\n\tmid = func(cur *TreeNode) {\n\t\tif cur == nil {\n\t\t\treturn\n\t\t}\n\t\tmid(cur.Left)\n\t\tif pre == nil {\n\t\t\tcount = 1\n\t\t} else if pre.Val == cur.Val {\n\t\t\tcount++\n\t\t} else {\n\t\t\tcount = 1\n\t\t}\n\t\tpre = cur\n\t\tif count == maxCount {\n\t\t\tmaxNum = append(maxNum, cur.Val)\n\t\t} else if count > maxCount {\n\t\t\tmaxCount = count\n\t\t\tmaxNum = []int{cur.Val}\n\t\t}\n\t\tmid(cur.Right)\n\t}\n\tmid(root)\n\treturn maxNum\n}\n\n```\n\n## 236.二叉树的最近公共祖先\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html)\n>\n>   视频讲解：[自底向上查找，有点难度！ | LeetCode：236. 二叉树的最近公共祖先](https://www.bilibili.com/video/BV1jd4y1B7E2)\n>\n>   状态：AC\n\n### 思路\n\n这道题和卡哥的思路不同。我依旧使用了中序遍历。\n\n1.   中序遍历得到结果`path`\n2.   查找中序遍历中`p`与`q`的位置，与`root`进行判断\n     -   如果`root`在`p`和`q`的左（右）侧，`root`则需要向右（左）节点移动\n     -   如果`root`在`p`和`q`之间（或`root`是`p`或`q`），返回即可，具体可以看下方视频\n\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day20/二叉树公共祖先.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n### 代码\n\n``` go\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n\tvar path []int\n\tgetInorderPath(root, &path)\n\tfor {\n\t\tindex := 0\n\t\tindexP := 0\n\t\tindexQ := 0\n\t\t// 找到当前根结点\n\t\tfor i := 0; i < len(path); i++ {\n\t\t\tif root.Val == path[i] {\n\t\t\t\tindex = i\n\t\t\t}\n\t\t\tif p.Val == path[i] {\n\t\t\t\tindexP = i\n\t\t\t}\n\t\t\tif q.Val == path[i] {\n\t\t\t\tindexQ = i\n\t\t\t}\n\t\t}\n\t\tif indexP == index {\n\t\t\treturn p\n\t\t}\n\t\tif indexQ == index {\n\t\t\treturn q\n\t\t}\n\t\t// p,q 分散在中序遍历的根结点两侧\n\t\tif indexP < index && index < indexQ || indexQ < index && index < indexP {\n\t\t\treturn root\n\t\t}\n\t\t// p,q 在根节点左侧\n\t\tif indexP < index && indexQ < index {\n\t\t\troot = root.Left\n\t\t\tcontinue\n\t\t}\n\t\t// p,q 在根节点右侧\n\t\tif index < indexP && index < indexQ {\n\t\t\troot = root.Right\n\t\t\tcontinue\n\t\t}\n\n\t}\n}\nfunc getInorderPath(root *TreeNode, path *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tgetInorderPath(root.Left, path)\n\t*path = append(*path, root.Val)\n\tgetInorderPath(root.Right, path)\n}\n```\n\n","slug":"day20","published":1,"updated":"2023-10-24T19:35:29.131Z","_id":"clnq2vqiy00000zz8hy1x816j","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二十天-530-二叉搜索树的最小绝对差、501-二叉搜索树中的众数、236-二叉树的最近公共祖先\"><a href=\"#代码随想录算法训练营第二十天-530-二叉搜索树的最小绝对差、501-二叉搜索树中的众数、236-二叉树的最近公共祖先\" class=\"headerlink\" title=\"代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先\"></a>代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先</h1><h2 id=\"530-二叉搜索树的最小绝对差\"><a href=\"#530-二叉搜索树的最小绝对差\" class=\"headerlink\" title=\"530.二叉搜索树的最小绝对差\"></a>530.二叉搜索树的最小绝对差</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/minimum-absolute-difference-in-bst/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0530.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1DD4y11779\">二叉搜索树中，需要掌握如何双指针遍历！| LeetCode：530.二叉搜索树的最小绝对差</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>思路一：二叉搜索树中序遍历是递增的，中序遍历后得到结果数组，再遍历结果数组，计算相邻元素的差，找最小值。</li>\n<li>思路二：使用双指针，看了卡哥的解法豁然开朗。定义当前指针<code>cur</code>和上个节点的指针<code>pre=nil</code><ol>\n<li><code>cur</code>开始中序遍历时，不断找最左节点的值</li>\n<li>和<code>pre</code>指针判断，如果<code>pre</code>为空，说明当前是第一个节点，此后将<code>pre=cur</code></li>\n<li><code>cur</code>继续递归，<code>pre</code>始终会慢<code>cur</code>一层</li>\n<li>比较<code>cur.Val - pre.Val&lt;minNum</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 思路一</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getMinimumDifference</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tinorder(root, &amp;path)<br>\tminNum := math.MaxInt32<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(path); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> path[i]-path[i<span class=\"hljs-number\">-1</span>] &lt; minNum &#123;<br>\t\t\tminNum = path[i] - path[i<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minNum<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">inorder</span><span class=\"hljs-params\">(root *TreeNode, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tinorder(root.Left, path)<br>\t&#125;<br>\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tinorder(root.Right, path)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 思路二</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getMinimumDifference</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tminNum := <span class=\"hljs-number\">999999999</span><br>\t<span class=\"hljs-keyword\">var</span> pre *TreeNode<br>\t<span class=\"hljs-keyword\">var</span> inorder2 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span><br>\tinorder2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> cur == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\tinorder2(cur.Left)<br>\t\t<span class=\"hljs-keyword\">if</span> pre != <span class=\"hljs-literal\">nil</span> &amp;&amp; cur.Val-pre.Val &lt; minNum &#123;<br>\t\t\tminNum = cur.Val - pre.Val<br>\t\t&#125;<br>\t\tpre = cur<br>\t\tinorder2(cur.Right)<br>\t&#125;<br>\tinorder2(root)<br>\t<span class=\"hljs-keyword\">return</span> minNum<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"501-二叉搜索树中的众数\"><a href=\"#501-二叉搜索树中的众数\" class=\"headerlink\" title=\"501.二叉搜索树中的众数\"></a>501.二叉搜索树中的众数</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-mode-in-binary-search-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0501.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1fD4y117gp\">不仅双指针，还有代码技巧可以惊艳到你！ | LeetCode：501.二叉搜索树中的众数</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>整体思路和上题基本类似，依旧使用双指针。只不过要多定义些变量，用来存放历史最大值<code>maxCount</code>，当前最大值<code>count</code>，众数结果<code>maxNum</code></p>\n<ul>\n<li>如果<code>cur.Val == pre.Val</code>，<code>count++</code>；</li>\n<li>否则判断<code>count</code>与<code>maxCount</code><ul>\n<li><code>count &gt; maxCount</code>：清空<code>maxNum</code>，放入新的值</li>\n<li><code>count == maxCount</code>：追加新的值</li>\n<li><code>count &lt; maxCount</code>：不管</li>\n<li>更新<code>count = 1</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findMode</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tmaxCount := <span class=\"hljs-number\">0</span><br>\tmaxNum := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tcount := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">var</span> pre *TreeNode<br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span><br>\tmid = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> cur == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\tmid(cur.Left)<br>\t\t<span class=\"hljs-keyword\">if</span> pre == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tcount = <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> pre.Val == cur.Val &#123;<br>\t\t\tcount++<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tcount = <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t\tpre = cur<br>\t\t<span class=\"hljs-keyword\">if</span> count == maxCount &#123;<br>\t\t\tmaxNum = <span class=\"hljs-built_in\">append</span>(maxNum, cur.Val)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> count &gt; maxCount &#123;<br>\t\t\tmaxCount = count<br>\t\t\tmaxNum = []<span class=\"hljs-type\">int</span>&#123;cur.Val&#125;<br>\t\t&#125;<br>\t\tmid(cur.Right)<br>\t&#125;<br>\tmid(root)<br>\t<span class=\"hljs-keyword\">return</span> maxNum<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"236-二叉树的最近公共祖先\"><a href=\"#236-二叉树的最近公共祖先\" class=\"headerlink\" title=\"236.二叉树的最近公共祖先\"></a>236.二叉树的最近公共祖先</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1jd4y1B7E2\">自底向上查找，有点难度！ | LeetCode：236. 二叉树的最近公共祖先</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题和卡哥的思路不同。我依旧使用了中序遍历。</p>\n<ol>\n<li>中序遍历得到结果<code>path</code></li>\n<li>查找中序遍历中<code>p</code>与<code>q</code>的位置，与<code>root</code>进行判断<ul>\n<li>如果<code>root</code>在<code>p</code>和<code>q</code>的左（右）侧，<code>root</code>则需要向右（左）节点移动</li>\n<li>如果<code>root</code>在<code>p</code>和<code>q</code>之间（或<code>root</code>是<code>p</code>或<code>q</code>），返回即可，具体可以看下方视频</li>\n</ul>\n</li>\n</ol>\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day20/二叉树公共祖先.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">lowestCommonAncestor</span><span class=\"hljs-params\">(root, p, q *TreeNode)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tgetInorderPath(root, &amp;path)<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tindex := <span class=\"hljs-number\">0</span><br>\t\tindexP := <span class=\"hljs-number\">0</span><br>\t\tindexQ := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-comment\">// 找到当前根结点</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(path); i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> root.Val == path[i] &#123;<br>\t\t\t\tindex = i<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> p.Val == path[i] &#123;<br>\t\t\t\tindexP = i<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> q.Val == path[i] &#123;<br>\t\t\t\tindexQ = i<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> indexP == index &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> p<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> indexQ == index &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> q<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// p,q 分散在中序遍历的根结点两侧</span><br>\t\t<span class=\"hljs-keyword\">if</span> indexP &lt; index &amp;&amp; index &lt; indexQ || indexQ &lt; index &amp;&amp; index &lt; indexP &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> root<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// p,q 在根节点左侧</span><br>\t\t<span class=\"hljs-keyword\">if</span> indexP &lt; index &amp;&amp; indexQ &lt; index &#123;<br>\t\t\troot = root.Left<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// p,q 在根节点右侧</span><br>\t\t<span class=\"hljs-keyword\">if</span> index &lt; indexP &amp;&amp; index &lt; indexQ &#123;<br>\t\t\troot = root.Right<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br><br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getInorderPath</span><span class=\"hljs-params\">(root *TreeNode, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tgetInorderPath(root.Left, path)<br>\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\tgetInorderPath(root.Right, path)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二十天-530-二叉搜索树的最小绝对差、501-二叉搜索树中的众数、236-二叉树的最近公共祖先\"><a href=\"#代码随想录算法训练营第二十天-530-二叉搜索树的最小绝对差、501-二叉搜索树中的众数、236-二叉树的最近公共祖先\" class=\"headerlink\" title=\"代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先\"></a>代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先</h1><h2 id=\"530-二叉搜索树的最小绝对差\"><a href=\"#530-二叉搜索树的最小绝对差\" class=\"headerlink\" title=\"530.二叉搜索树的最小绝对差\"></a>530.二叉搜索树的最小绝对差</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/minimum-absolute-difference-in-bst/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0530.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1DD4y11779\">二叉搜索树中，需要掌握如何双指针遍历！| LeetCode：530.二叉搜索树的最小绝对差</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>思路一：二叉搜索树中序遍历是递增的，中序遍历后得到结果数组，再遍历结果数组，计算相邻元素的差，找最小值。</li>\n<li>思路二：使用双指针，看了卡哥的解法豁然开朗。定义当前指针<code>cur</code>和上个节点的指针<code>pre=nil</code><ol>\n<li><code>cur</code>开始中序遍历时，不断找最左节点的值</li>\n<li>和<code>pre</code>指针判断，如果<code>pre</code>为空，说明当前是第一个节点，此后将<code>pre=cur</code></li>\n<li><code>cur</code>继续递归，<code>pre</code>始终会慢<code>cur</code>一层</li>\n<li>比较<code>cur.Val - pre.Val&lt;minNum</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 思路一</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getMinimumDifference</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tinorder(root, &amp;path)<br>\tminNum := math.MaxInt32<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(path); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> path[i]-path[i<span class=\"hljs-number\">-1</span>] &lt; minNum &#123;<br>\t\t\tminNum = path[i] - path[i<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minNum<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">inorder</span><span class=\"hljs-params\">(root *TreeNode, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tinorder(root.Left, path)<br>\t&#125;<br>\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tinorder(root.Right, path)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 思路二</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getMinimumDifference</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tminNum := <span class=\"hljs-number\">999999999</span><br>\t<span class=\"hljs-keyword\">var</span> pre *TreeNode<br>\t<span class=\"hljs-keyword\">var</span> inorder2 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span><br>\tinorder2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> cur == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\tinorder2(cur.Left)<br>\t\t<span class=\"hljs-keyword\">if</span> pre != <span class=\"hljs-literal\">nil</span> &amp;&amp; cur.Val-pre.Val &lt; minNum &#123;<br>\t\t\tminNum = cur.Val - pre.Val<br>\t\t&#125;<br>\t\tpre = cur<br>\t\tinorder2(cur.Right)<br>\t&#125;<br>\tinorder2(root)<br>\t<span class=\"hljs-keyword\">return</span> minNum<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"501-二叉搜索树中的众数\"><a href=\"#501-二叉搜索树中的众数\" class=\"headerlink\" title=\"501.二叉搜索树中的众数\"></a>501.二叉搜索树中的众数</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-mode-in-binary-search-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0501.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1fD4y117gp\">不仅双指针，还有代码技巧可以惊艳到你！ | LeetCode：501.二叉搜索树中的众数</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>整体思路和上题基本类似，依旧使用双指针。只不过要多定义些变量，用来存放历史最大值<code>maxCount</code>，当前最大值<code>count</code>，众数结果<code>maxNum</code></p>\n<ul>\n<li>如果<code>cur.Val == pre.Val</code>，<code>count++</code>；</li>\n<li>否则判断<code>count</code>与<code>maxCount</code><ul>\n<li><code>count &gt; maxCount</code>：清空<code>maxNum</code>，放入新的值</li>\n<li><code>count == maxCount</code>：追加新的值</li>\n<li><code>count &lt; maxCount</code>：不管</li>\n<li>更新<code>count = 1</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findMode</span><span class=\"hljs-params\">(root *TreeNode)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tmaxCount := <span class=\"hljs-number\">0</span><br>\tmaxNum := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tcount := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">var</span> pre *TreeNode<br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span><br>\tmid = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> cur == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\tmid(cur.Left)<br>\t\t<span class=\"hljs-keyword\">if</span> pre == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tcount = <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> pre.Val == cur.Val &#123;<br>\t\t\tcount++<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tcount = <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t\tpre = cur<br>\t\t<span class=\"hljs-keyword\">if</span> count == maxCount &#123;<br>\t\t\tmaxNum = <span class=\"hljs-built_in\">append</span>(maxNum, cur.Val)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> count &gt; maxCount &#123;<br>\t\t\tmaxCount = count<br>\t\t\tmaxNum = []<span class=\"hljs-type\">int</span>&#123;cur.Val&#125;<br>\t\t&#125;<br>\t\tmid(cur.Right)<br>\t&#125;<br>\tmid(root)<br>\t<span class=\"hljs-keyword\">return</span> maxNum<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"236-二叉树的最近公共祖先\"><a href=\"#236-二叉树的最近公共祖先\" class=\"headerlink\" title=\"236.二叉树的最近公共祖先\"></a>236.二叉树的最近公共祖先</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1jd4y1B7E2\">自底向上查找，有点难度！ | LeetCode：236. 二叉树的最近公共祖先</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题和卡哥的思路不同。我依旧使用了中序遍历。</p>\n<ol>\n<li>中序遍历得到结果<code>path</code></li>\n<li>查找中序遍历中<code>p</code>与<code>q</code>的位置，与<code>root</code>进行判断<ul>\n<li>如果<code>root</code>在<code>p</code>和<code>q</code>的左（右）侧，<code>root</code>则需要向右（左）节点移动</li>\n<li>如果<code>root</code>在<code>p</code>和<code>q</code>之间（或<code>root</code>是<code>p</code>或<code>q</code>），返回即可，具体可以看下方视频</li>\n</ul>\n</li>\n</ol>\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day20/二叉树公共祖先.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">lowestCommonAncestor</span><span class=\"hljs-params\">(root, p, q *TreeNode)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\tgetInorderPath(root, &amp;path)<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tindex := <span class=\"hljs-number\">0</span><br>\t\tindexP := <span class=\"hljs-number\">0</span><br>\t\tindexQ := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-comment\">// 找到当前根结点</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(path); i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> root.Val == path[i] &#123;<br>\t\t\t\tindex = i<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> p.Val == path[i] &#123;<br>\t\t\t\tindexP = i<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> q.Val == path[i] &#123;<br>\t\t\t\tindexQ = i<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> indexP == index &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> p<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> indexQ == index &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> q<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// p,q 分散在中序遍历的根结点两侧</span><br>\t\t<span class=\"hljs-keyword\">if</span> indexP &lt; index &amp;&amp; index &lt; indexQ || indexQ &lt; index &amp;&amp; index &lt; indexP &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> root<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// p,q 在根节点左侧</span><br>\t\t<span class=\"hljs-keyword\">if</span> indexP &lt; index &amp;&amp; indexQ &lt; index &#123;<br>\t\t\troot = root.Left<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// p,q 在根节点右侧</span><br>\t\t<span class=\"hljs-keyword\">if</span> index &lt; indexP &amp;&amp; index &lt; indexQ &#123;<br>\t\t\troot = root.Right<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br><br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getInorderPath</span><span class=\"hljs-params\">(root *TreeNode, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tgetInorderPath(root.Left, path)<br>\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\tgetInorderPath(root.Right, path)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点","abbrlink":"1b36a0ee","date":"2023-10-14T14:31:50.000Z","_content":"\n# 代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点\n\n## 235.二叉搜索树的最近公共祖先\n\n>   \n\n### 思路\n\n同上一天的最后一道题：“236.二叉树的最近公共祖先”\n\n[链接跳转](https://promisewang.github.io/post/80a9e5fb.html#236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88)\n\n## 701.二叉搜索树中的插入操作\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/insert-into-a-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0701.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.html)\n>\n>   视频讲解：[原来这么简单？ | LeetCode：701.二叉搜索树中的插入操作](https://www.bilibili.com/video/BV1Et4y1c78Y?share_source=copy_web)\n>\n>   状态：AC\n\n## 思路\n\n1.   寻找应该插入的位置，和当前的根节点比较\n2.   找到插入\n\n### 代码\n\n``` go\nfunc insertIntoBST(root *TreeNode, val int) *TreeNode {\n\tif root == nil {\n\t\treturn &TreeNode{\n\t\t\tVal:   val,\n\t\t\tLeft:  nil,\n\t\t\tRight: nil,\n\t\t}\n\t}\n\n\tif root.Val < val {\n\t\troot.Right = insertIntoBST(root.Right, val)\n\t} else {\n\t\troot.Left = insertIntoBST(root.Left, val)\n\t}\n\treturn root\n}\n```\n\n## 450. 删除二叉搜索树中的节点\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/delete-node-in-a-bst/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html)\n>\n>   视频讲解：[调整二叉树的结构最难！| LeetCode：450.删除二叉搜索树中的节点](https://www.bilibili.com/video/BV1tP41177us?share_source=copy_web)\n>\n>   状态：AC\n\n### 思路\n\n思路大体上还算好想，其中一种情况困扰了好久，还是看了看题解。在树中查找应该删除的节点\n\n-   1.   当前递归到空节点，说明没找到\n\n-   如果找到\n\n2.   如果是叶子节点，直接删`return nil`\n\n3.   如果左空右不空，右节点直接上位\n\n4.   如果左不空有空，左节点直接上位\n\n5.   如果左右都不空，需要将左子树找到新家\n\n第五点删除过程在下方视频中展示\n\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day21/二叉排序树删除元素.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n### 代码\n\n``` go\nfunc deleteNode(root *TreeNode, key int) *TreeNode {\n\t// 1. 没找到删除节点\n\tif root == nil {\n\t\treturn root\n\t}\n\tif root.Val == key {\n\t\t// 2. 该节点是叶子节点: 直接删除\n\t\tif root.Left == nil && root.Right == nil {\n\t\t\treturn nil\n\t\t}\n\t\t// 3. 左空右不空: 右节点补位\n\t\tif root.Left == nil && root.Right != nil {\n\t\t\tnode := root.Right\n\t\t\treturn node\n\t\t}\n\t\t// 4. 左不空右空: 左节点补位\n\t\tif root.Left != nil && root.Right == nil {\n\t\t\tnode := root.Left\n\t\t\treturn node\n\t\t}\n\t\t// 5. 都不空: 则将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为新的根节点。\n\t\tif root.Left != nil && root.Right != nil {\n\t\t\tnode := root.Right\n\t\t\tfor node.Left != nil {\n\t\t\t\tnode = node.Left\n\t\t\t}\n\t\t\tnode.Left = root.Left\n\t\t\troot = root.Right\n\t\t\treturn root\n\t\t}\n\t}\n\tif root.Val < key {\n\t\troot.Right = deleteNode(root.Right, key)\n\t}\n\tif root.Val > key {\n\t\troot.Left = deleteNode(root.Left, key)\n\t}\n\treturn root\n}\n```\n\n","source":"_posts/day21.md","raw":"---\ntitle: 代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 二叉树\ncategories: 刷题\nabbrlink: 1b36a0ee\ndate: 2023-10-14 22:31:50\n---\n\n# 代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点\n\n## 235.二叉搜索树的最近公共祖先\n\n>   \n\n### 思路\n\n同上一天的最后一道题：“236.二叉树的最近公共祖先”\n\n[链接跳转](https://promisewang.github.io/post/80a9e5fb.html#236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88)\n\n## 701.二叉搜索树中的插入操作\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/insert-into-a-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0701.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.html)\n>\n>   视频讲解：[原来这么简单？ | LeetCode：701.二叉搜索树中的插入操作](https://www.bilibili.com/video/BV1Et4y1c78Y?share_source=copy_web)\n>\n>   状态：AC\n\n## 思路\n\n1.   寻找应该插入的位置，和当前的根节点比较\n2.   找到插入\n\n### 代码\n\n``` go\nfunc insertIntoBST(root *TreeNode, val int) *TreeNode {\n\tif root == nil {\n\t\treturn &TreeNode{\n\t\t\tVal:   val,\n\t\t\tLeft:  nil,\n\t\t\tRight: nil,\n\t\t}\n\t}\n\n\tif root.Val < val {\n\t\troot.Right = insertIntoBST(root.Right, val)\n\t} else {\n\t\troot.Left = insertIntoBST(root.Left, val)\n\t}\n\treturn root\n}\n```\n\n## 450. 删除二叉搜索树中的节点\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/delete-node-in-a-bst/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html)\n>\n>   视频讲解：[调整二叉树的结构最难！| LeetCode：450.删除二叉搜索树中的节点](https://www.bilibili.com/video/BV1tP41177us?share_source=copy_web)\n>\n>   状态：AC\n\n### 思路\n\n思路大体上还算好想，其中一种情况困扰了好久，还是看了看题解。在树中查找应该删除的节点\n\n-   1.   当前递归到空节点，说明没找到\n\n-   如果找到\n\n2.   如果是叶子节点，直接删`return nil`\n\n3.   如果左空右不空，右节点直接上位\n\n4.   如果左不空有空，左节点直接上位\n\n5.   如果左右都不空，需要将左子树找到新家\n\n第五点删除过程在下方视频中展示\n\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day21/二叉排序树删除元素.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n### 代码\n\n``` go\nfunc deleteNode(root *TreeNode, key int) *TreeNode {\n\t// 1. 没找到删除节点\n\tif root == nil {\n\t\treturn root\n\t}\n\tif root.Val == key {\n\t\t// 2. 该节点是叶子节点: 直接删除\n\t\tif root.Left == nil && root.Right == nil {\n\t\t\treturn nil\n\t\t}\n\t\t// 3. 左空右不空: 右节点补位\n\t\tif root.Left == nil && root.Right != nil {\n\t\t\tnode := root.Right\n\t\t\treturn node\n\t\t}\n\t\t// 4. 左不空右空: 左节点补位\n\t\tif root.Left != nil && root.Right == nil {\n\t\t\tnode := root.Left\n\t\t\treturn node\n\t\t}\n\t\t// 5. 都不空: 则将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为新的根节点。\n\t\tif root.Left != nil && root.Right != nil {\n\t\t\tnode := root.Right\n\t\t\tfor node.Left != nil {\n\t\t\t\tnode = node.Left\n\t\t\t}\n\t\t\tnode.Left = root.Left\n\t\t\troot = root.Right\n\t\t\treturn root\n\t\t}\n\t}\n\tif root.Val < key {\n\t\troot.Right = deleteNode(root.Right, key)\n\t}\n\tif root.Val > key {\n\t\troot.Left = deleteNode(root.Left, key)\n\t}\n\treturn root\n}\n```\n\n","slug":"day21","published":1,"updated":"2023-10-24T19:35:34.380Z","_id":"clnq6ni1u0000nyz8f4xpd4cu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二十一天-235-二叉搜索树的最近公共祖先、701-二叉搜索树中的插入操作、450-删除二叉搜索树中的节点\"><a href=\"#代码随想录算法训练营第二十一天-235-二叉搜索树的最近公共祖先、701-二叉搜索树中的插入操作、450-删除二叉搜索树中的节点\" class=\"headerlink\" title=\"代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点\"></a>代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点</h1><h2 id=\"235-二叉搜索树的最近公共祖先\"><a href=\"#235-二叉搜索树的最近公共祖先\" class=\"headerlink\" title=\"235.二叉搜索树的最近公共祖先\"></a>235.二叉搜索树的最近公共祖先</h2><blockquote>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>同上一天的最后一道题：“236.二叉树的最近公共祖先”</p>\n<p><a href=\"https://promisewang.github.io/post/80a9e5fb.html#236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88\">链接跳转</a></p>\n<h2 id=\"701-二叉搜索树中的插入操作\"><a href=\"#701-二叉搜索树中的插入操作\" class=\"headerlink\" title=\"701.二叉搜索树中的插入操作\"></a>701.二叉搜索树中的插入操作</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/insert-into-a-binary-search-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0701.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Et4y1c78Y?share_source=copy_web\">原来这么简单？ | LeetCode：701.二叉搜索树中的插入操作</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>寻找应该插入的位置，和当前的根节点比较</li>\n<li>找到插入</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">insertIntoBST</span><span class=\"hljs-params\">(root *TreeNode, val <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> &amp;TreeNode&#123;<br>\t\t\tVal:   val,<br>\t\t\tLeft:  <span class=\"hljs-literal\">nil</span>,<br>\t\t\tRight: <span class=\"hljs-literal\">nil</span>,<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> root.Val &lt; val &#123;<br>\t\troot.Right = insertIntoBST(root.Right, val)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\troot.Left = insertIntoBST(root.Left, val)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"450-删除二叉搜索树中的节点\"><a href=\"#450-删除二叉搜索树中的节点\" class=\"headerlink\" title=\"450. 删除二叉搜索树中的节点\"></a>450. 删除二叉搜索树中的节点</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/delete-node-in-a-bst/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1tP41177us?share_source=copy_web\">调整二叉树的结构最难！| LeetCode：450.删除二叉搜索树中的节点</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>思路大体上还算好想，其中一种情况困扰了好久，还是看了看题解。在树中查找应该删除的节点</p>\n<ul>\n<li><ol>\n<li>当前递归到空节点，说明没找到</li>\n</ol>\n</li>\n<li><p>如果找到</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>如果是叶子节点，直接删<code>return nil</code></p>\n</li>\n<li><p>如果左空右不空，右节点直接上位</p>\n</li>\n<li><p>如果左不空有空，左节点直接上位</p>\n</li>\n<li><p>如果左右都不空，需要将左子树找到新家</p>\n</li>\n</ol>\n<p>第五点删除过程在下方视频中展示</p>\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day21/二叉排序树删除元素.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">deleteNode</span><span class=\"hljs-params\">(root *TreeNode, key <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-comment\">// 1. 没找到删除节点</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Val == key &#123;<br>\t\t<span class=\"hljs-comment\">// 2. 该节点是叶子节点: 直接删除</span><br>\t\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// 3. 左空右不空: 右节点补位</span><br>\t\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tnode := root.Right<br>\t\t\t<span class=\"hljs-keyword\">return</span> node<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// 4. 左不空右空: 左节点补位</span><br>\t\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tnode := root.Left<br>\t\t\t<span class=\"hljs-keyword\">return</span> node<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// 5. 都不空: 则将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为新的根节点。</span><br>\t\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tnode := root.Right<br>\t\t\t<span class=\"hljs-keyword\">for</span> node.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tnode = node.Left<br>\t\t\t&#125;<br>\t\t\tnode.Left = root.Left<br>\t\t\troot = root.Right<br>\t\t\t<span class=\"hljs-keyword\">return</span> root<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Val &lt; key &#123;<br>\t\troot.Right = deleteNode(root.Right, key)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Val &gt; key &#123;<br>\t\troot.Left = deleteNode(root.Left, key)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二十一天-235-二叉搜索树的最近公共祖先、701-二叉搜索树中的插入操作、450-删除二叉搜索树中的节点\"><a href=\"#代码随想录算法训练营第二十一天-235-二叉搜索树的最近公共祖先、701-二叉搜索树中的插入操作、450-删除二叉搜索树中的节点\" class=\"headerlink\" title=\"代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点\"></a>代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点</h1><h2 id=\"235-二叉搜索树的最近公共祖先\"><a href=\"#235-二叉搜索树的最近公共祖先\" class=\"headerlink\" title=\"235.二叉搜索树的最近公共祖先\"></a>235.二叉搜索树的最近公共祖先</h2><blockquote>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>同上一天的最后一道题：“236.二叉树的最近公共祖先”</p>\n<p><a href=\"https://promisewang.github.io/post/80a9e5fb.html#236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88\">链接跳转</a></p>\n<h2 id=\"701-二叉搜索树中的插入操作\"><a href=\"#701-二叉搜索树中的插入操作\" class=\"headerlink\" title=\"701.二叉搜索树中的插入操作\"></a>701.二叉搜索树中的插入操作</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/insert-into-a-binary-search-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0701.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Et4y1c78Y?share_source=copy_web\">原来这么简单？ | LeetCode：701.二叉搜索树中的插入操作</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>寻找应该插入的位置，和当前的根节点比较</li>\n<li>找到插入</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">insertIntoBST</span><span class=\"hljs-params\">(root *TreeNode, val <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> &amp;TreeNode&#123;<br>\t\t\tVal:   val,<br>\t\t\tLeft:  <span class=\"hljs-literal\">nil</span>,<br>\t\t\tRight: <span class=\"hljs-literal\">nil</span>,<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> root.Val &lt; val &#123;<br>\t\troot.Right = insertIntoBST(root.Right, val)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\troot.Left = insertIntoBST(root.Left, val)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"450-删除二叉搜索树中的节点\"><a href=\"#450-删除二叉搜索树中的节点\" class=\"headerlink\" title=\"450. 删除二叉搜索树中的节点\"></a>450. 删除二叉搜索树中的节点</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/delete-node-in-a-bst/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1tP41177us?share_source=copy_web\">调整二叉树的结构最难！| LeetCode：450.删除二叉搜索树中的节点</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>思路大体上还算好想，其中一种情况困扰了好久，还是看了看题解。在树中查找应该删除的节点</p>\n<ul>\n<li><ol>\n<li>当前递归到空节点，说明没找到</li>\n</ol>\n</li>\n<li><p>如果找到</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>如果是叶子节点，直接删<code>return nil</code></p>\n</li>\n<li><p>如果左空右不空，右节点直接上位</p>\n</li>\n<li><p>如果左不空有空，左节点直接上位</p>\n</li>\n<li><p>如果左右都不空，需要将左子树找到新家</p>\n</li>\n</ol>\n<p>第五点删除过程在下方视频中展示</p>\n<div style=\"position: relative; width: 100%; height: 0;padding-bottom: 100%;\"><iframe \nsrc=\"../images/day21/二叉排序树删除元素.mp4\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">deleteNode</span><span class=\"hljs-params\">(root *TreeNode, key <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-comment\">// 1. 没找到删除节点</span><br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> root<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Val == key &#123;<br>\t\t<span class=\"hljs-comment\">// 2. 该节点是叶子节点: 直接删除</span><br>\t\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// 3. 左空右不空: 右节点补位</span><br>\t\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tnode := root.Right<br>\t\t\t<span class=\"hljs-keyword\">return</span> node<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// 4. 左不空右空: 左节点补位</span><br>\t\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tnode := root.Left<br>\t\t\t<span class=\"hljs-keyword\">return</span> node<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// 5. 都不空: 则将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为新的根节点。</span><br>\t\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> &amp;&amp; root.Right != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tnode := root.Right<br>\t\t\t<span class=\"hljs-keyword\">for</span> node.Left != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tnode = node.Left<br>\t\t\t&#125;<br>\t\t\tnode.Left = root.Left<br>\t\t\troot = root.Right<br>\t\t\t<span class=\"hljs-keyword\">return</span> root<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Val &lt; key &#123;<br>\t\troot.Right = deleteNode(root.Right, key)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> root.Val &gt; key &#123;<br>\t\troot.Left = deleteNode(root.Left, key)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树","abbrlink":"b6e45431","date":"2023-10-15T12:53:48.000Z","_content":"\n# 代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树\n\n## 669.修建二叉搜索树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/trim-a-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0669.%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html)\n>\n>   视频讲解：[你修剪的方式不对，我来给你纠正一下！| LeetCode：669. 修剪二叉搜索树](https://www.bilibili.com/video/BV17P41177ud?share_source=copy_web)\n>\n>   状态：AC\n\n### 思路\n\n与昨天最后一道题类似，昨天最后一道题要求删除一个节点，这道题则为批量删除节点，多加一个判断条件即可\n\n[链接跳转](https://promisewang.github.io/post/1b36a0ee.html#450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9)\n\n先使用前序遍历得到树的所有节点，再以此判断改节点是否应该删除\n\n### 代码\n\n``` go\nfunc trimBST(root *TreeNode, low int, high int) *TreeNode {\n\tpath := []int{}\n\tpre(root, &path)\n\tfor _, v := range path {\n\t\tif !(low <= v && v <= high) {\n\t\t\troot = deleteNode(root, v)\n\t\t}\n\t}\n\treturn root\n}\n\nfunc pre(root *TreeNode, path *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\t*path = append(*path, root.Val)\n\tpre(root.Left, path)\n\tpre(root.Right, path)\n}\n```\n\n## 108.将有序数组转化为二叉搜索树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html)\n>\n>   视频讲解：[构造平衡二叉搜索树！| LeetCode：108.将有序数组转换为二叉搜索树](https://www.bilibili.com/video/BV1uR4y1X7qL?share_source=copy_web)\n>\n>   状态：AC\n\n### 思路\n\n根据二叉搜索树的定义，比根节点小的值在根节点左侧，比根节点大的值在根节点右侧。而且还要建立平衡搜索树，那么根节点应该为数组最中间的那个值。切割数组，然后递归\n\n### 代码\n\n``` go\nfunc sortedArrayToBST(nums []int) *TreeNode {\n\tif len(nums) == 0 {\n\t\treturn nil\n\t}\n\troot := backTracking(nums, 0, len(nums)-1)\n\treturn root\n}\n\nfunc backTracking(nums []int, left, right int) *TreeNode {\n\tif left > right {\n\t\treturn nil\n\t}\n\tmid := (left + right) / 2\n\troot := &TreeNode{\n\t\tVal:   nums[mid],\n\t\tLeft:  backTracking(nums, left, mid-1),\n\t\tRight: backTracking(nums, mid+1, right),\n\t}\n\treturn root\n}\n```\n\n## 538.把二叉搜索树转化为累加树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/convert-bst-to-greater-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0538.%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91.html)\n>\n>   视频讲解：[普大喜奔！二叉树章节已全部更完啦！| LeetCode：538.把二叉搜索树转换为累加树](https://www.bilibili.com/video/BV1d44y1f7wP?share_source=copy_web)\n>\n>   状态：AC\n\n### 思路\n\n看到树的构建过程，实际上是对树进行“右根左”的遍历。使用双指针，一个指向当前节点，另一个指向过去的节点。当前结点的新的值要加上过去节点的值。总体思路与530题思路一样。[跳转链接](https://promisewang.github.io/post/80a9e5fb.html#530-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE)\n\n### 代码\n\n``` go\nfunc convertBST(root *TreeNode) *TreeNode {\n\tvar pre *TreeNode\n\tvar function func(cur *TreeNode)\n\tfunction = func(cur *TreeNode) {\n\t\tif cur == nil {\n\t\t\treturn\n\t\t}\n\t\tfunction(cur.Right)\n\t\tif pre != nil {\n\t\t\tcur.Val += pre.Val\n\t\t}\n\t\tpre = cur\n\t\tfunction(cur.Left)\n\t}\n\tfunction(root)\n\treturn root\n}\n```\n\n\n\n","source":"_posts/day22.md","raw":"---\ntitle: 代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 二叉树\ncategories: 刷题\nabbrlink: b6e45431\ndate: 2023-10-15 20:53:48\n---\n\n# 代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树\n\n## 669.修建二叉搜索树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/trim-a-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0669.%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html)\n>\n>   视频讲解：[你修剪的方式不对，我来给你纠正一下！| LeetCode：669. 修剪二叉搜索树](https://www.bilibili.com/video/BV17P41177ud?share_source=copy_web)\n>\n>   状态：AC\n\n### 思路\n\n与昨天最后一道题类似，昨天最后一道题要求删除一个节点，这道题则为批量删除节点，多加一个判断条件即可\n\n[链接跳转](https://promisewang.github.io/post/1b36a0ee.html#450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9)\n\n先使用前序遍历得到树的所有节点，再以此判断改节点是否应该删除\n\n### 代码\n\n``` go\nfunc trimBST(root *TreeNode, low int, high int) *TreeNode {\n\tpath := []int{}\n\tpre(root, &path)\n\tfor _, v := range path {\n\t\tif !(low <= v && v <= high) {\n\t\t\troot = deleteNode(root, v)\n\t\t}\n\t}\n\treturn root\n}\n\nfunc pre(root *TreeNode, path *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\t*path = append(*path, root.Val)\n\tpre(root.Left, path)\n\tpre(root.Right, path)\n}\n```\n\n## 108.将有序数组转化为二叉搜索树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html)\n>\n>   视频讲解：[构造平衡二叉搜索树！| LeetCode：108.将有序数组转换为二叉搜索树](https://www.bilibili.com/video/BV1uR4y1X7qL?share_source=copy_web)\n>\n>   状态：AC\n\n### 思路\n\n根据二叉搜索树的定义，比根节点小的值在根节点左侧，比根节点大的值在根节点右侧。而且还要建立平衡搜索树，那么根节点应该为数组最中间的那个值。切割数组，然后递归\n\n### 代码\n\n``` go\nfunc sortedArrayToBST(nums []int) *TreeNode {\n\tif len(nums) == 0 {\n\t\treturn nil\n\t}\n\troot := backTracking(nums, 0, len(nums)-1)\n\treturn root\n}\n\nfunc backTracking(nums []int, left, right int) *TreeNode {\n\tif left > right {\n\t\treturn nil\n\t}\n\tmid := (left + right) / 2\n\troot := &TreeNode{\n\t\tVal:   nums[mid],\n\t\tLeft:  backTracking(nums, left, mid-1),\n\t\tRight: backTracking(nums, mid+1, right),\n\t}\n\treturn root\n}\n```\n\n## 538.把二叉搜索树转化为累加树\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/convert-bst-to-greater-tree/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0538.%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91.html)\n>\n>   视频讲解：[普大喜奔！二叉树章节已全部更完啦！| LeetCode：538.把二叉搜索树转换为累加树](https://www.bilibili.com/video/BV1d44y1f7wP?share_source=copy_web)\n>\n>   状态：AC\n\n### 思路\n\n看到树的构建过程，实际上是对树进行“右根左”的遍历。使用双指针，一个指向当前节点，另一个指向过去的节点。当前结点的新的值要加上过去节点的值。总体思路与530题思路一样。[跳转链接](https://promisewang.github.io/post/80a9e5fb.html#530-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE)\n\n### 代码\n\n``` go\nfunc convertBST(root *TreeNode) *TreeNode {\n\tvar pre *TreeNode\n\tvar function func(cur *TreeNode)\n\tfunction = func(cur *TreeNode) {\n\t\tif cur == nil {\n\t\t\treturn\n\t\t}\n\t\tfunction(cur.Right)\n\t\tif pre != nil {\n\t\t\tcur.Val += pre.Val\n\t\t}\n\t\tpre = cur\n\t\tfunction(cur.Left)\n\t}\n\tfunction(root)\n\treturn root\n}\n```\n\n\n\n","slug":"day22","published":1,"updated":"2023-10-24T19:35:38.852Z","_id":"clnrhjw4f0000lvz81rfb1wjl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二十二天-669-修建二叉搜索树、108-将有序数组转化为二叉搜索树、538-把二叉搜索树转化为累加树\"><a href=\"#代码随想录算法训练营第二十二天-669-修建二叉搜索树、108-将有序数组转化为二叉搜索树、538-把二叉搜索树转化为累加树\" class=\"headerlink\" title=\"代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树\"></a>代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树</h1><h2 id=\"669-修建二叉搜索树\"><a href=\"#669-修建二叉搜索树\" class=\"headerlink\" title=\"669.修建二叉搜索树\"></a>669.修建二叉搜索树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/trim-a-binary-search-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0669.%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV17P41177ud?share_source=copy_web\">你修剪的方式不对，我来给你纠正一下！| LeetCode：669. 修剪二叉搜索树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>与昨天最后一道题类似，昨天最后一道题要求删除一个节点，这道题则为批量删除节点，多加一个判断条件即可</p>\n<p><a href=\"https://promisewang.github.io/post/1b36a0ee.html#450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9\">链接跳转</a></p>\n<p>先使用前序遍历得到树的所有节点，再以此判断改节点是否应该删除</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">trimBST</span><span class=\"hljs-params\">(root *TreeNode, low <span class=\"hljs-type\">int</span>, high <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\tpath := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tpre(root, &amp;path)<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> path &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !(low &lt;= v &amp;&amp; v &lt;= high) &#123;<br>\t\t\troot = deleteNode(root, v)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">pre</span><span class=\"hljs-params\">(root *TreeNode, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\tpre(root.Left, path)<br>\tpre(root.Right, path)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"108-将有序数组转化为二叉搜索树\"><a href=\"#108-将有序数组转化为二叉搜索树\" class=\"headerlink\" title=\"108.将有序数组转化为二叉搜索树\"></a>108.将有序数组转化为二叉搜索树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1uR4y1X7qL?share_source=copy_web\">构造平衡二叉搜索树！| LeetCode：108.将有序数组转换为二叉搜索树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>根据二叉搜索树的定义，比根节点小的值在根节点左侧，比根节点大的值在根节点右侧。而且还要建立平衡搜索树，那么根节点应该为数组最中间的那个值。切割数组，然后递归</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sortedArrayToBST</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\troot := backTracking(nums, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-1</span>)<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, left, right <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> left &gt; right &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\tmid := (left + right) / <span class=\"hljs-number\">2</span><br>\troot := &amp;TreeNode&#123;<br>\t\tVal:   nums[mid],<br>\t\tLeft:  backTracking(nums, left, mid<span class=\"hljs-number\">-1</span>),<br>\t\tRight: backTracking(nums, mid+<span class=\"hljs-number\">1</span>, right),<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"538-把二叉搜索树转化为累加树\"><a href=\"#538-把二叉搜索树转化为累加树\" class=\"headerlink\" title=\"538.把二叉搜索树转化为累加树\"></a>538.把二叉搜索树转化为累加树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/convert-bst-to-greater-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0538.%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1d44y1f7wP?share_source=copy_web\">普大喜奔！二叉树章节已全部更完啦！| LeetCode：538.把二叉搜索树转换为累加树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>看到树的构建过程，实际上是对树进行“右根左”的遍历。使用双指针，一个指向当前节点，另一个指向过去的节点。当前结点的新的值要加上过去节点的值。总体思路与530题思路一样。<a href=\"https://promisewang.github.io/post/80a9e5fb.html#530-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE\">跳转链接</a></p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">convertBST</span><span class=\"hljs-params\">(root *TreeNode)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">var</span> pre *TreeNode<br>\t<span class=\"hljs-keyword\">var</span> function <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span><br>\tfunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> cur == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\tfunction(cur.Right)<br>\t\t<span class=\"hljs-keyword\">if</span> pre != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tcur.Val += pre.Val<br>\t\t&#125;<br>\t\tpre = cur<br>\t\tfunction(cur.Left)<br>\t&#125;<br>\tfunction(root)<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二十二天-669-修建二叉搜索树、108-将有序数组转化为二叉搜索树、538-把二叉搜索树转化为累加树\"><a href=\"#代码随想录算法训练营第二十二天-669-修建二叉搜索树、108-将有序数组转化为二叉搜索树、538-把二叉搜索树转化为累加树\" class=\"headerlink\" title=\"代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树\"></a>代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树</h1><h2 id=\"669-修建二叉搜索树\"><a href=\"#669-修建二叉搜索树\" class=\"headerlink\" title=\"669.修建二叉搜索树\"></a>669.修建二叉搜索树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/trim-a-binary-search-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0669.%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV17P41177ud?share_source=copy_web\">你修剪的方式不对，我来给你纠正一下！| LeetCode：669. 修剪二叉搜索树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>与昨天最后一道题类似，昨天最后一道题要求删除一个节点，这道题则为批量删除节点，多加一个判断条件即可</p>\n<p><a href=\"https://promisewang.github.io/post/1b36a0ee.html#450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9\">链接跳转</a></p>\n<p>先使用前序遍历得到树的所有节点，再以此判断改节点是否应该删除</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">trimBST</span><span class=\"hljs-params\">(root *TreeNode, low <span class=\"hljs-type\">int</span>, high <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\tpath := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tpre(root, &amp;path)<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> path &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !(low &lt;= v &amp;&amp; v &lt;= high) &#123;<br>\t\t\troot = deleteNode(root, v)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">pre</span><span class=\"hljs-params\">(root *TreeNode, path *[]<span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t*path = <span class=\"hljs-built_in\">append</span>(*path, root.Val)<br>\tpre(root.Left, path)<br>\tpre(root.Right, path)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"108-将有序数组转化为二叉搜索树\"><a href=\"#108-将有序数组转化为二叉搜索树\" class=\"headerlink\" title=\"108.将有序数组转化为二叉搜索树\"></a>108.将有序数组转化为二叉搜索树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1uR4y1X7qL?share_source=copy_web\">构造平衡二叉搜索树！| LeetCode：108.将有序数组转换为二叉搜索树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>根据二叉搜索树的定义，比根节点小的值在根节点左侧，比根节点大的值在根节点右侧。而且还要建立平衡搜索树，那么根节点应该为数组最中间的那个值。切割数组，然后递归</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sortedArrayToBST</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\troot := backTracking(nums, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-1</span>)<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, left, right <span class=\"hljs-type\">int</span>)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> left &gt; right &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\tmid := (left + right) / <span class=\"hljs-number\">2</span><br>\troot := &amp;TreeNode&#123;<br>\t\tVal:   nums[mid],<br>\t\tLeft:  backTracking(nums, left, mid<span class=\"hljs-number\">-1</span>),<br>\t\tRight: backTracking(nums, mid+<span class=\"hljs-number\">1</span>, right),<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"538-把二叉搜索树转化为累加树\"><a href=\"#538-把二叉搜索树转化为累加树\" class=\"headerlink\" title=\"538.把二叉搜索树转化为累加树\"></a>538.把二叉搜索树转化为累加树</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/convert-bst-to-greater-tree/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0538.%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1d44y1f7wP?share_source=copy_web\">普大喜奔！二叉树章节已全部更完啦！| LeetCode：538.把二叉搜索树转换为累加树</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>看到树的构建过程，实际上是对树进行“右根左”的遍历。使用双指针，一个指向当前节点，另一个指向过去的节点。当前结点的新的值要加上过去节点的值。总体思路与530题思路一样。<a href=\"https://promisewang.github.io/post/80a9e5fb.html#530-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE\">跳转链接</a></p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">convertBST</span><span class=\"hljs-params\">(root *TreeNode)</span></span> *TreeNode &#123;<br>\t<span class=\"hljs-keyword\">var</span> pre *TreeNode<br>\t<span class=\"hljs-keyword\">var</span> function <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span><br>\tfunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(cur *TreeNode)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> cur == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\tfunction(cur.Right)<br>\t\t<span class=\"hljs-keyword\">if</span> pre != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tcur.Val += pre.Val<br>\t\t&#125;<br>\t\tpre = cur<br>\t\tfunction(cur.Left)<br>\t&#125;<br>\tfunction(root)<br>\t<span class=\"hljs-keyword\">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"代码随想录算法训练营第二十四天  77.组合","abbrlink":"9a97e05d","date":"2023-10-16T03:26:54.000Z","_content":"\n# 代码随想录算法训练营第二十四天  77.组合\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/combinations/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html#)\n>\n>   视频讲解：\n>   - [带你学透回溯算法-组合问题（对应力扣题目：77.组合）](https://www.bilibili.com/video/BV1ti4y1L7cv)\n>   - [组合问题的剪枝操作](https://www.bilibili.com/video/BV1wi4y157er)\n>\n>   状态：AC\n\n### 思路\n\n这是一道经典的回溯算法的题目，开始做的时候没有考虑到剪枝的情况。直接请出回溯三步：\n\n1.   确立函数和参数：需要参数`n, k, index`分别表示范围、k个数、当前位置\n2.   确定终止条件：路径`path`长度为`k`时，将`path`追加到`append`\n3.   单次逻辑：从`index`开始逐渐向`path`追加之后的元素；递归调用；删除刚追加的元素\n\n### 代码\n\n``` go\nfunc combine(n int, k int) [][]int {\n\tpath := []int{}\n\tresult := [][]int{}\n\tvar backTracking func(n, k, index int)\n\tbackTracking = func(n, k, index int) {\n\t\tif len(path) == k {\n\t\t\ttemp := make([]int, len(path))\n\t\t\tcopy(temp, path)\n\t\t\tresult = append(result, temp)\n\t\t\treturn\n\t\t}\n\t\tfor i := index; i <= n; i++ {\n\t\t\tpath = append(path, i)\n\t\t\tbackTracking(n, k, i+1)\n\t\t\tpath = path[:len(path)-1]\n\t\t}\n\t}\n\tbackTracking(n, k, 1)\n\treturn result\n}\n```\n\n### 剪枝\n\n来举一个例子，`n = 4, k = 4`，那么第一层for循环的时候，从元素2开始的遍历都没有意义了。 在第二层for循环，从元素3开始的遍历都没有意义了。那么在第一层遍历时候，对`i`的判断应该更改：`i <= n - (k - len(path) + 1)`\n\n``` go\nfunc combine(n int, k int) [][]int {\n\tpath := []int{}\n\tresult := [][]int{}\n\tvar backTracking func(n, k, index int)\n\tbackTracking = func(n, k, index int) {\n\t\tif len(path) == k {\n\t\t\ttemp := make([]int, len(path))\n\t\t\tcopy(temp, path)\n\t\t\tresult = append(result, temp)\n\t\t\treturn\n\t\t}\n\t\tfor i := index; i <= n-(k-len(path))+1; i++ {\n\t\t\tpath = append(path, i)\n\t\t\tbackTracking(n, k, i+1)\n\t\t\tpath = path[:len(path)-1]\n\t\t}\n\t}\n\tbackTracking(n, k, 1)\n\treturn result\n}\n```\n\n","source":"_posts/day24.md","raw":"---\ntitle: 代码随想录算法训练营第二十四天  77.组合\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 回溯算法\ncategories: 刷题\nabbrlink: 9a97e05d\ndate: 2023-10-16 11:26:54\n---\n\n# 代码随想录算法训练营第二十四天  77.组合\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/combinations/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html#)\n>\n>   视频讲解：\n>   - [带你学透回溯算法-组合问题（对应力扣题目：77.组合）](https://www.bilibili.com/video/BV1ti4y1L7cv)\n>   - [组合问题的剪枝操作](https://www.bilibili.com/video/BV1wi4y157er)\n>\n>   状态：AC\n\n### 思路\n\n这是一道经典的回溯算法的题目，开始做的时候没有考虑到剪枝的情况。直接请出回溯三步：\n\n1.   确立函数和参数：需要参数`n, k, index`分别表示范围、k个数、当前位置\n2.   确定终止条件：路径`path`长度为`k`时，将`path`追加到`append`\n3.   单次逻辑：从`index`开始逐渐向`path`追加之后的元素；递归调用；删除刚追加的元素\n\n### 代码\n\n``` go\nfunc combine(n int, k int) [][]int {\n\tpath := []int{}\n\tresult := [][]int{}\n\tvar backTracking func(n, k, index int)\n\tbackTracking = func(n, k, index int) {\n\t\tif len(path) == k {\n\t\t\ttemp := make([]int, len(path))\n\t\t\tcopy(temp, path)\n\t\t\tresult = append(result, temp)\n\t\t\treturn\n\t\t}\n\t\tfor i := index; i <= n; i++ {\n\t\t\tpath = append(path, i)\n\t\t\tbackTracking(n, k, i+1)\n\t\t\tpath = path[:len(path)-1]\n\t\t}\n\t}\n\tbackTracking(n, k, 1)\n\treturn result\n}\n```\n\n### 剪枝\n\n来举一个例子，`n = 4, k = 4`，那么第一层for循环的时候，从元素2开始的遍历都没有意义了。 在第二层for循环，从元素3开始的遍历都没有意义了。那么在第一层遍历时候，对`i`的判断应该更改：`i <= n - (k - len(path) + 1)`\n\n``` go\nfunc combine(n int, k int) [][]int {\n\tpath := []int{}\n\tresult := [][]int{}\n\tvar backTracking func(n, k, index int)\n\tbackTracking = func(n, k, index int) {\n\t\tif len(path) == k {\n\t\t\ttemp := make([]int, len(path))\n\t\t\tcopy(temp, path)\n\t\t\tresult = append(result, temp)\n\t\t\treturn\n\t\t}\n\t\tfor i := index; i <= n-(k-len(path))+1; i++ {\n\t\t\tpath = append(path, i)\n\t\t\tbackTracking(n, k, i+1)\n\t\t\tpath = path[:len(path)-1]\n\t\t}\n\t}\n\tbackTracking(n, k, 1)\n\treturn result\n}\n```\n\n","slug":"day24","published":1,"updated":"2023-10-24T19:35:47.559Z","_id":"clnscnbxg0000ksz81rnjc7d2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二十四天-77-组合\"><a href=\"#代码随想录算法训练营第二十四天-77-组合\" class=\"headerlink\" title=\"代码随想录算法训练营第二十四天  77.组合\"></a>代码随想录算法训练营第二十四天  77.组合</h1><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/combinations/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html#\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1ti4y1L7cv\">带你学透回溯算法-组合问题（对应力扣题目：77.组合）</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1wi4y157er\">组合问题的剪枝操作</a></li>\n</ul>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这是一道经典的回溯算法的题目，开始做的时候没有考虑到剪枝的情况。直接请出回溯三步：</p>\n<ol>\n<li>确立函数和参数：需要参数<code>n, k, index</code>分别表示范围、k个数、当前位置</li>\n<li>确定终止条件：路径<code>path</code>长度为<code>k</code>时，将<code>path</code>追加到<code>append</code></li>\n<li>单次逻辑：从<code>index</code>开始逐渐向<code>path</code>追加之后的元素；递归调用；删除刚追加的元素</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">combine</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\tpath := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tresult := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">var</span> backTracking <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(n, k, index <span class=\"hljs-type\">int</span>)</span></span><br>\tbackTracking = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(n, k, index <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(path) == k &#123;<br>\t\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(path))<br>\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, path)<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := index; i &lt;= n; i++ &#123;<br>\t\t\tpath = <span class=\"hljs-built_in\">append</span>(path, i)<br>\t\t\tbackTracking(n, k, i+<span class=\"hljs-number\">1</span>)<br>\t\t\tpath = path[:<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t&#125;<br>\tbackTracking(n, k, <span class=\"hljs-number\">1</span>)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"剪枝\"><a href=\"#剪枝\" class=\"headerlink\" title=\"剪枝\"></a>剪枝</h3><p>来举一个例子，<code>n = 4, k = 4</code>，那么第一层for循环的时候，从元素2开始的遍历都没有意义了。 在第二层for循环，从元素3开始的遍历都没有意义了。那么在第一层遍历时候，对<code>i</code>的判断应该更改：<code>i &lt;= n - (k - len(path) + 1)</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">combine</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\tpath := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tresult := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">var</span> backTracking <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(n, k, index <span class=\"hljs-type\">int</span>)</span></span><br>\tbackTracking = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(n, k, index <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(path) == k &#123;<br>\t\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(path))<br>\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, path)<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := index; i &lt;= n-(k-<span class=\"hljs-built_in\">len</span>(path))+<span class=\"hljs-number\">1</span>; i++ &#123;<br>\t\t\tpath = <span class=\"hljs-built_in\">append</span>(path, i)<br>\t\t\tbackTracking(n, k, i+<span class=\"hljs-number\">1</span>)<br>\t\t\tpath = path[:<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t&#125;<br>\tbackTracking(n, k, <span class=\"hljs-number\">1</span>)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二十四天-77-组合\"><a href=\"#代码随想录算法训练营第二十四天-77-组合\" class=\"headerlink\" title=\"代码随想录算法训练营第二十四天  77.组合\"></a>代码随想录算法训练营第二十四天  77.组合</h1><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/combinations/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html#\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1ti4y1L7cv\">带你学透回溯算法-组合问题（对应力扣题目：77.组合）</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1wi4y157er\">组合问题的剪枝操作</a></li>\n</ul>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这是一道经典的回溯算法的题目，开始做的时候没有考虑到剪枝的情况。直接请出回溯三步：</p>\n<ol>\n<li>确立函数和参数：需要参数<code>n, k, index</code>分别表示范围、k个数、当前位置</li>\n<li>确定终止条件：路径<code>path</code>长度为<code>k</code>时，将<code>path</code>追加到<code>append</code></li>\n<li>单次逻辑：从<code>index</code>开始逐渐向<code>path</code>追加之后的元素；递归调用；删除刚追加的元素</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">combine</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\tpath := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tresult := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">var</span> backTracking <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(n, k, index <span class=\"hljs-type\">int</span>)</span></span><br>\tbackTracking = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(n, k, index <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(path) == k &#123;<br>\t\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(path))<br>\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, path)<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := index; i &lt;= n; i++ &#123;<br>\t\t\tpath = <span class=\"hljs-built_in\">append</span>(path, i)<br>\t\t\tbackTracking(n, k, i+<span class=\"hljs-number\">1</span>)<br>\t\t\tpath = path[:<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t&#125;<br>\tbackTracking(n, k, <span class=\"hljs-number\">1</span>)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"剪枝\"><a href=\"#剪枝\" class=\"headerlink\" title=\"剪枝\"></a>剪枝</h3><p>来举一个例子，<code>n = 4, k = 4</code>，那么第一层for循环的时候，从元素2开始的遍历都没有意义了。 在第二层for循环，从元素3开始的遍历都没有意义了。那么在第一层遍历时候，对<code>i</code>的判断应该更改：<code>i &lt;= n - (k - len(path) + 1)</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">combine</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>, k <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\tpath := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>\tresult := [][]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">var</span> backTracking <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(n, k, index <span class=\"hljs-type\">int</span>)</span></span><br>\tbackTracking = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(n, k, index <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(path) == k &#123;<br>\t\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(path))<br>\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, path)<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := index; i &lt;= n-(k-<span class=\"hljs-built_in\">len</span>(path))+<span class=\"hljs-number\">1</span>; i++ &#123;<br>\t\t\tpath = <span class=\"hljs-built_in\">append</span>(path, i)<br>\t\t\tbackTracking(n, k, i+<span class=\"hljs-number\">1</span>)<br>\t\t\tpath = path[:<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t&#125;<br>\tbackTracking(n, k, <span class=\"hljs-number\">1</span>)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合","abbrlink":"5d63641c","date":"2023-10-17T04:59:15.000Z","_content":"\n# 代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合\n\n## 216.组合总和III\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/combination-sum-iii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html)\n>\n>   视频讲解：[和组合问题有啥区别？回溯算法如何剪枝？| LeetCode：216.组合总和III](https://www.bilibili.com/video/BV1wg411873x)\n>\n>   状态：AC\n\n### 思路\n\n定义`result`存放总结果，`path`存放单次结果。递归层数由`k`决定\n\n1.   递归函数构造：\n     -   无返回值类型\n     -   需要传参`k`确定递归次数\n     -   传参`n`用于比较和\n     -   传参`index`确定当前递归索引\n     -   传参`sum`为当前和\n\n2.   递归结束条件：当`path`长度等于`k`说明打到了需求长度，并且`sum == n`的时候，说明为想要的答案，将`path`添加到`result`当中。并且`return`\n3.   单次递归和剪枝：从`index`开始，到9结束。如果`sum + i > n`则`return`。每层先添加到`path`，再向下`index+1`\n\n### 代码\n\n``` go\nfunc combinationSum3(k int, n int) [][]int {\n\tvar result [][]int\n\tvar path []int\n\tvar backTracking func(k, n, index, sum int)\n\tbackTracking = func(k, n, index, sum int) {\n\t\tif len(path) == k {\n\t\t\tif sum == n {\n\t\t\t\ttemp := make([]int, k)\n\t\t\t\tcopy(temp, path)\n\t\t\t\tresult = append(result, temp)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tfor i := index; i <= 9; i++ {\n\t\t\tif sum+i > n {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tpath = append(path, i)\n\t\t\tsum += i\n\t\t\tbackTracking(k, n, i+1, sum)\n\t\t\tsum -= path[len(path)-1]\n\t\t\tpath = path[:len(path)-1]\n\t\t}\n\t}\n\tbackTracking(k, n, 1, 0)\n\treturn result\n}\n```\n\n## 17. 电话号码的字母组合\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/letter-combinations-of-a-phone-number/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0017.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html)\n>\n>   视频讲解：[还得用回溯算法！| LeetCode：17.电话号码的字母组合](https://www.bilibili.com/video/BV1yV4y1V7Ug)\n>\n>   状态：AC\n\n### 思路\n\n首先先保存各个数字对应了哪些字母，这里使用了字符类型，例如2对应了`'a', 'b', 'c'`，使用二维数组保存。假设输入字符串是`\"234\"`\n\n<img src=\"../images/day25/说明.png\" alt=\"说明\" style=\"zoom:50%;\" />\n\n1.   递归函数的构造：无返回值类型；每次要传参应该遍历哪一个`index`（`words`哪一行）。判断第几行使用`words[int(digits[i] - '0')]`\n2.   递归终止条件：`path`的长度和字符串`digits`长度相等，并且不等于0\n3.   单层递归逻辑：两重循环内，每次`index+1`\n\n### 代码\n\n``` go\nfunc letterCombinations(digits string) []string {\n\tvar result []string\n\tvar path string\n\twords := [][]string{\n\t\t{\"a\", \"b\", \"c\"},\n\t\t{\"d\", \"e\", \"f\"},\n\t\t{\"g\", \"h\", \"i\"},\n\t\t{\"j\", \"k\", \"l\"},\n\t\t{\"m\", \"n\", \"o\"},\n\t\t{\"p\", \"q\", \"r\", \"s\"},\n\t\t{\"t\", \"u\", \"v\"},\n\t\t{\"w\", \"x\", \"y\", \"z\"},\n\t}\n\tvar backTracking func(index int)\n\tbackTracking = func(index int) {\n\t\tif len(path) == len(digits) && len(path) != 0 {\n\t\t\tresult = append(result, path)\n\t\t\treturn\n\t\t}\n\t\tfor i1 := index; i1 < len(digits); i1++ {\n\t\t\tfor i2 := 0; i2 < len(words[int(digits[i1]-50)]); i2++ {\n\t\t\t\tpath += words[int(digits[i1]-50)][i2]\n\t\t\t\tbackTracking(i1 + 1)\n\t\t\t\tpath = path[:len(path)-1]\n\t\t\t}\n\t\t}\n\t}\n\tbackTracking(0)\n\treturn result\n}\n```\n\n","source":"_posts/day25.md","raw":"---\ntitle: 代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 回溯算法\ncategories: 刷题\nabbrlink: 5d63641c\ndate: 2023-10-17 12:59:15\n---\n\n# 代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合\n\n## 216.组合总和III\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/combination-sum-iii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html)\n>\n>   视频讲解：[和组合问题有啥区别？回溯算法如何剪枝？| LeetCode：216.组合总和III](https://www.bilibili.com/video/BV1wg411873x)\n>\n>   状态：AC\n\n### 思路\n\n定义`result`存放总结果，`path`存放单次结果。递归层数由`k`决定\n\n1.   递归函数构造：\n     -   无返回值类型\n     -   需要传参`k`确定递归次数\n     -   传参`n`用于比较和\n     -   传参`index`确定当前递归索引\n     -   传参`sum`为当前和\n\n2.   递归结束条件：当`path`长度等于`k`说明打到了需求长度，并且`sum == n`的时候，说明为想要的答案，将`path`添加到`result`当中。并且`return`\n3.   单次递归和剪枝：从`index`开始，到9结束。如果`sum + i > n`则`return`。每层先添加到`path`，再向下`index+1`\n\n### 代码\n\n``` go\nfunc combinationSum3(k int, n int) [][]int {\n\tvar result [][]int\n\tvar path []int\n\tvar backTracking func(k, n, index, sum int)\n\tbackTracking = func(k, n, index, sum int) {\n\t\tif len(path) == k {\n\t\t\tif sum == n {\n\t\t\t\ttemp := make([]int, k)\n\t\t\t\tcopy(temp, path)\n\t\t\t\tresult = append(result, temp)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tfor i := index; i <= 9; i++ {\n\t\t\tif sum+i > n {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tpath = append(path, i)\n\t\t\tsum += i\n\t\t\tbackTracking(k, n, i+1, sum)\n\t\t\tsum -= path[len(path)-1]\n\t\t\tpath = path[:len(path)-1]\n\t\t}\n\t}\n\tbackTracking(k, n, 1, 0)\n\treturn result\n}\n```\n\n## 17. 电话号码的字母组合\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/letter-combinations-of-a-phone-number/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0017.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html)\n>\n>   视频讲解：[还得用回溯算法！| LeetCode：17.电话号码的字母组合](https://www.bilibili.com/video/BV1yV4y1V7Ug)\n>\n>   状态：AC\n\n### 思路\n\n首先先保存各个数字对应了哪些字母，这里使用了字符类型，例如2对应了`'a', 'b', 'c'`，使用二维数组保存。假设输入字符串是`\"234\"`\n\n<img src=\"../images/day25/说明.png\" alt=\"说明\" style=\"zoom:50%;\" />\n\n1.   递归函数的构造：无返回值类型；每次要传参应该遍历哪一个`index`（`words`哪一行）。判断第几行使用`words[int(digits[i] - '0')]`\n2.   递归终止条件：`path`的长度和字符串`digits`长度相等，并且不等于0\n3.   单层递归逻辑：两重循环内，每次`index+1`\n\n### 代码\n\n``` go\nfunc letterCombinations(digits string) []string {\n\tvar result []string\n\tvar path string\n\twords := [][]string{\n\t\t{\"a\", \"b\", \"c\"},\n\t\t{\"d\", \"e\", \"f\"},\n\t\t{\"g\", \"h\", \"i\"},\n\t\t{\"j\", \"k\", \"l\"},\n\t\t{\"m\", \"n\", \"o\"},\n\t\t{\"p\", \"q\", \"r\", \"s\"},\n\t\t{\"t\", \"u\", \"v\"},\n\t\t{\"w\", \"x\", \"y\", \"z\"},\n\t}\n\tvar backTracking func(index int)\n\tbackTracking = func(index int) {\n\t\tif len(path) == len(digits) && len(path) != 0 {\n\t\t\tresult = append(result, path)\n\t\t\treturn\n\t\t}\n\t\tfor i1 := index; i1 < len(digits); i1++ {\n\t\t\tfor i2 := 0; i2 < len(words[int(digits[i1]-50)]); i2++ {\n\t\t\t\tpath += words[int(digits[i1]-50)][i2]\n\t\t\t\tbackTracking(i1 + 1)\n\t\t\t\tpath = path[:len(path)-1]\n\t\t\t}\n\t\t}\n\t}\n\tbackTracking(0)\n\treturn result\n}\n```\n\n","slug":"day25","published":1,"updated":"2023-10-24T19:35:51.331Z","_id":"clntw9j8r0000t7z8dehhd0d0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二十五天-216-组合总和III、17-电话号码的字母组合\"><a href=\"#代码随想录算法训练营第二十五天-216-组合总和III、17-电话号码的字母组合\" class=\"headerlink\" title=\"代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合\"></a>代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合</h1><h2 id=\"216-组合总和III\"><a href=\"#216-组合总和III\" class=\"headerlink\" title=\"216.组合总和III\"></a>216.组合总和III</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/combination-sum-iii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1wg411873x\">和组合问题有啥区别？回溯算法如何剪枝？| LeetCode：216.组合总和III</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>定义<code>result</code>存放总结果，<code>path</code>存放单次结果。递归层数由<code>k</code>决定</p>\n<ol>\n<li><p>递归函数构造：</p>\n<ul>\n<li>无返回值类型</li>\n<li>需要传参<code>k</code>确定递归次数</li>\n<li>传参<code>n</code>用于比较和</li>\n<li>传参<code>index</code>确定当前递归索引</li>\n<li>传参<code>sum</code>为当前和</li>\n</ul>\n</li>\n<li><p>递归结束条件：当<code>path</code>长度等于<code>k</code>说明打到了需求长度，并且<code>sum == n</code>的时候，说明为想要的答案，将<code>path</code>添加到<code>result</code>当中。并且<code>return</code></p>\n</li>\n<li><p>单次递归和剪枝：从<code>index</code>开始，到9结束。如果<code>sum + i &gt; n</code>则<code>return</code>。每层先添加到<code>path</code>，再向下<code>index+1</code></p>\n</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">combinationSum3</span><span class=\"hljs-params\">(k <span class=\"hljs-type\">int</span>, n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> backTracking <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(k, n, index, sum <span class=\"hljs-type\">int</span>)</span></span><br>\tbackTracking = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(k, n, index, sum <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(path) == k &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> sum == n &#123;<br>\t\t\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, k)<br>\t\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, path)<br>\t\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := index; i &lt;= <span class=\"hljs-number\">9</span>; i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> sum+i &gt; n &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\tpath = <span class=\"hljs-built_in\">append</span>(path, i)<br>\t\t\tsum += i<br>\t\t\tbackTracking(k, n, i+<span class=\"hljs-number\">1</span>, sum)<br>\t\t\tsum -= path[<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t\tpath = path[:<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t&#125;<br>\tbackTracking(k, n, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"17-电话号码的字母组合\"><a href=\"#17-电话号码的字母组合\" class=\"headerlink\" title=\"17. 电话号码的字母组合\"></a>17. 电话号码的字母组合</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0017.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1yV4y1V7Ug\">还得用回溯算法！| LeetCode：17.电话号码的字母组合</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>首先先保存各个数字对应了哪些字母，这里使用了字符类型，例如2对应了<code>&#39;a&#39;, &#39;b&#39;, &#39;c&#39;</code>，使用二维数组保存。假设输入字符串是<code>&quot;234&quot;</code></p>\n<img src=\"../images/day25/说明.png\" alt=\"说明\" style=\"zoom:50%;\" />\n\n<ol>\n<li>递归函数的构造：无返回值类型；每次要传参应该遍历哪一个<code>index</code>（<code>words</code>哪一行）。判断第几行使用<code>words[int(digits[i] - &#39;0&#39;)]</code></li>\n<li>递归终止条件：<code>path</code>的长度和字符串<code>digits</code>长度相等，并且不等于0</li>\n<li>单层递归逻辑：两重循环内，每次<code>index+1</code></li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">letterCombinations</span><span class=\"hljs-params\">(digits <span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">var</span> path <span class=\"hljs-type\">string</span><br>\twords := [][]<span class=\"hljs-type\">string</span>&#123;<br>\t\t&#123;<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;g&quot;</span>, <span class=\"hljs-string\">&quot;h&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;j&quot;</span>, <span class=\"hljs-string\">&quot;k&quot;</span>, <span class=\"hljs-string\">&quot;l&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;m&quot;</span>, <span class=\"hljs-string\">&quot;n&quot;</span>, <span class=\"hljs-string\">&quot;o&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-string\">&quot;q&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>, <span class=\"hljs-string\">&quot;s&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;t&quot;</span>, <span class=\"hljs-string\">&quot;u&quot;</span>, <span class=\"hljs-string\">&quot;v&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;w&quot;</span>, <span class=\"hljs-string\">&quot;x&quot;</span>, <span class=\"hljs-string\">&quot;y&quot;</span>, <span class=\"hljs-string\">&quot;z&quot;</span>&#125;,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> backTracking <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(index <span class=\"hljs-type\">int</span>)</span></span><br>\tbackTracking = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(index <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(path) == <span class=\"hljs-built_in\">len</span>(digits) &amp;&amp; <span class=\"hljs-built_in\">len</span>(path) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, path)<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i1 := index; i1 &lt; <span class=\"hljs-built_in\">len</span>(digits); i1++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> i2 := <span class=\"hljs-number\">0</span>; i2 &lt; <span class=\"hljs-built_in\">len</span>(words[<span class=\"hljs-type\">int</span>(digits[i1]<span class=\"hljs-number\">-50</span>)]); i2++ &#123;<br>\t\t\t\tpath += words[<span class=\"hljs-type\">int</span>(digits[i1]<span class=\"hljs-number\">-50</span>)][i2]<br>\t\t\t\tbackTracking(i1 + <span class=\"hljs-number\">1</span>)<br>\t\t\t\tpath = path[:<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\tbackTracking(<span class=\"hljs-number\">0</span>)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二十五天-216-组合总和III、17-电话号码的字母组合\"><a href=\"#代码随想录算法训练营第二十五天-216-组合总和III、17-电话号码的字母组合\" class=\"headerlink\" title=\"代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合\"></a>代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合</h1><h2 id=\"216-组合总和III\"><a href=\"#216-组合总和III\" class=\"headerlink\" title=\"216.组合总和III\"></a>216.组合总和III</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/combination-sum-iii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1wg411873x\">和组合问题有啥区别？回溯算法如何剪枝？| LeetCode：216.组合总和III</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>定义<code>result</code>存放总结果，<code>path</code>存放单次结果。递归层数由<code>k</code>决定</p>\n<ol>\n<li><p>递归函数构造：</p>\n<ul>\n<li>无返回值类型</li>\n<li>需要传参<code>k</code>确定递归次数</li>\n<li>传参<code>n</code>用于比较和</li>\n<li>传参<code>index</code>确定当前递归索引</li>\n<li>传参<code>sum</code>为当前和</li>\n</ul>\n</li>\n<li><p>递归结束条件：当<code>path</code>长度等于<code>k</code>说明打到了需求长度，并且<code>sum == n</code>的时候，说明为想要的答案，将<code>path</code>添加到<code>result</code>当中。并且<code>return</code></p>\n</li>\n<li><p>单次递归和剪枝：从<code>index</code>开始，到9结束。如果<code>sum + i &gt; n</code>则<code>return</code>。每层先添加到<code>path</code>，再向下<code>index+1</code></p>\n</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">combinationSum3</span><span class=\"hljs-params\">(k <span class=\"hljs-type\">int</span>, n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> backTracking <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(k, n, index, sum <span class=\"hljs-type\">int</span>)</span></span><br>\tbackTracking = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(k, n, index, sum <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(path) == k &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> sum == n &#123;<br>\t\t\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, k)<br>\t\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, path)<br>\t\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := index; i &lt;= <span class=\"hljs-number\">9</span>; i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> sum+i &gt; n &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\tpath = <span class=\"hljs-built_in\">append</span>(path, i)<br>\t\t\tsum += i<br>\t\t\tbackTracking(k, n, i+<span class=\"hljs-number\">1</span>, sum)<br>\t\t\tsum -= path[<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t\tpath = path[:<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t&#125;<br>\t&#125;<br>\tbackTracking(k, n, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"17-电话号码的字母组合\"><a href=\"#17-电话号码的字母组合\" class=\"headerlink\" title=\"17. 电话号码的字母组合\"></a>17. 电话号码的字母组合</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0017.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1yV4y1V7Ug\">还得用回溯算法！| LeetCode：17.电话号码的字母组合</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>首先先保存各个数字对应了哪些字母，这里使用了字符类型，例如2对应了<code>&#39;a&#39;, &#39;b&#39;, &#39;c&#39;</code>，使用二维数组保存。假设输入字符串是<code>&quot;234&quot;</code></p>\n<img src=\"../images/day25/说明.png\" alt=\"说明\" style=\"zoom:50%;\" />\n\n<ol>\n<li>递归函数的构造：无返回值类型；每次要传参应该遍历哪一个<code>index</code>（<code>words</code>哪一行）。判断第几行使用<code>words[int(digits[i] - &#39;0&#39;)]</code></li>\n<li>递归终止条件：<code>path</code>的长度和字符串<code>digits</code>长度相等，并且不等于0</li>\n<li>单层递归逻辑：两重循环内，每次<code>index+1</code></li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">letterCombinations</span><span class=\"hljs-params\">(digits <span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">string</span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">string</span><br>\t<span class=\"hljs-keyword\">var</span> path <span class=\"hljs-type\">string</span><br>\twords := [][]<span class=\"hljs-type\">string</span>&#123;<br>\t\t&#123;<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;g&quot;</span>, <span class=\"hljs-string\">&quot;h&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;j&quot;</span>, <span class=\"hljs-string\">&quot;k&quot;</span>, <span class=\"hljs-string\">&quot;l&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;m&quot;</span>, <span class=\"hljs-string\">&quot;n&quot;</span>, <span class=\"hljs-string\">&quot;o&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-string\">&quot;q&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>, <span class=\"hljs-string\">&quot;s&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;t&quot;</span>, <span class=\"hljs-string\">&quot;u&quot;</span>, <span class=\"hljs-string\">&quot;v&quot;</span>&#125;,<br>\t\t&#123;<span class=\"hljs-string\">&quot;w&quot;</span>, <span class=\"hljs-string\">&quot;x&quot;</span>, <span class=\"hljs-string\">&quot;y&quot;</span>, <span class=\"hljs-string\">&quot;z&quot;</span>&#125;,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> backTracking <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(index <span class=\"hljs-type\">int</span>)</span></span><br>\tbackTracking = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(index <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(path) == <span class=\"hljs-built_in\">len</span>(digits) &amp;&amp; <span class=\"hljs-built_in\">len</span>(path) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, path)<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i1 := index; i1 &lt; <span class=\"hljs-built_in\">len</span>(digits); i1++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> i2 := <span class=\"hljs-number\">0</span>; i2 &lt; <span class=\"hljs-built_in\">len</span>(words[<span class=\"hljs-type\">int</span>(digits[i1]<span class=\"hljs-number\">-50</span>)]); i2++ &#123;<br>\t\t\t\tpath += words[<span class=\"hljs-type\">int</span>(digits[i1]<span class=\"hljs-number\">-50</span>)][i2]<br>\t\t\t\tbackTracking(i1 + <span class=\"hljs-number\">1</span>)<br>\t\t\t\tpath = path[:<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\tbackTracking(<span class=\"hljs-number\">0</span>)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串","abbrlink":"36f15375","date":"2023-10-19T15:23:02.000Z","_content":"\n# 代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串\n\n## 39.组合总和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/combination-sum/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0039.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html)\n>\n>   视频讲解：[Leetcode:39. 组合总和讲解](https://www.bilibili.com/video/BV1KT4y1M7HJ)\n>\n>   状态：AC\n\n### 思路\n\n这道题还比较简单，先进行排序，然后开始递归。排序是为了确定当前几个数的和大于了`target`说明后面就不存在结果了。\n\n#### 递归三部曲\n\n1.   确定函数参数：\n     -   数组\n     -   当前递归位置\n     -   总和\n     -   目标和\n2.   递归终止条件：如果目标和等于总和，那么把所有元素放入`result`\n3.   单次递归：总和大于`target`，剪枝，`return`。否则进行下一次递归\n\n### 代码\n\n``` go\nfunc combinationSum(candidates []int, target int) [][]int {\n\tsort.Ints(candidates)\n\tvar result [][]int\n\tvar path []int\n\tvar backTracking func(candidates []int, index, sum, target int)\n\tbackTracking = func(candidates []int, index, sum, target int) {\n\t\tif sum == target {\n\t\t\ttemp := make([]int, len(path))\n\t\t\tcopy(temp, path)\n\t\t\tresult = append(result, temp)\n\t\t\treturn\n\t\t}\n\t\tif sum > target {\n\t\t\treturn\n\t\t}\n\t\tfor i := index; i < len(candidates); i++ {\n\t\t\tif sum+candidates[i] > target {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tpath = append(path, candidates[i])\n\t\t\tsum += candidates[i]\n\t\t\tbackTracking(candidates, i, sum, target)\n\t\t\tpath = path[:len(path)-1]\n\t\t\tsum -= candidates[i]\n\t\t}\n\t}\n\tbackTracking(candidates, 0, 0, target)\n\treturn result\n}\n```\n\n## 40. 组合总和II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/combination-sum-ii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html)\n>\n>   视频讲解：[回溯算法中的去重，树层去重树枝去重，你弄清楚了没？| LeetCode:40.组合总和II](https://www.bilibili.com/video/BV12V4y1V73A)\n>\n>   状态：TLE\n\n### 思路\n\n<font color=\"red\">从这道题开始换C++写算法了，Go写算法有点难受。最初用Go写算法只是想多练练Go的语法。但是到刷LeetCode还是不太适合。</font>\n\n这道题去重一直想不出来，试了几种方法，要么超时、要么思路错了：\n\n-   将结果放入到一个集合中。由于Go语言没有集合，那么新建一个`maps := map[interface{}]bool{}`。`key`则是每一个结果。但是`key`不能是切片类型。所以不能使用。\n-   由于不能使用切片，那么使用一个“曲线救题”的方式，把结果转成字符串（加入结果为[1, 2, 3]，那么就变成“123”）这样就可以存入`key`中。超出了时间限制。该测试用例如下`candidates = [1, 1, ..., 1]（100个）`，`target=30`。去重了但没剪枝。\n\n<font color=\"green\">这题投降</font>\n\n#### 卡哥讲解\n\n对于我来讲想明白了一下两点我的代码就写出来了，假设`candidates = [1, 2(1), 2(2), 2(3), 5]`，括号为了区分是哪个`2`：\n\n-   假如递归到`[1, 2(1), 2(2), 2(3)]`，那么再以后递归时候`2(1)`为第一个元素，那么`[2(1), 2(2), 2(3)]`的情况再刚刚已经出现了，则不需要再递归了。也是剪枝操作。\n-   为了防止重复递归，引入一个布尔类型的`used`数组。`used[i]`代表`candidates[i]`在当前递归的树枝上是否使用。那么当`candidates[i] != candidates[i - 1] && used[i] == false`时，才不会重复递归。\n\n#### 递归三部曲\n\n1.   确立递归函数参数\n     -   当前递归的和\n     -   目标和\n     -   当前位置索引\n     -   `used`数组，是否使用\n     -   `candidates`\n2.   递归终止条件：`sum == target`时，将`path`加入到`result`中\n3.   单次递归：\n     -   先剪枝：当`i > 0 && candidates[i] == candidates[i - 1] && !used[i - 1]`，说明已经递归过了，应该<font color=\"red\">`continue`</font>而不应该`return`。\n     -   当前和加上下一个数\n     -   下一个数放入到路径`path`中\n     -   下一个数标记为`true`，示意已被使用。\n     -   下层递归\n     -   反向上述操作\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(int sum, int target, int index, vector<bool> &used, vector<int> &candidates) {\n        if (sum == target) {\n            result.push_back(path);\n            return;\n        }\n        for (int i = index; i < candidates.size() && sum + candidates[i] <= target; i++) {\n            if (i > 0 && candidates[i] == candidates[i - 1] && !used[i - 1]) {\n                continue;\n            }\n            sum += candidates[i];\n            path.push_back(candidates[i]);\n            used[i] = true;\n            backTracking(sum, target, i + 1, used, candidates);\n            sum -= candidates[i];\n            path.pop_back();\n            used[i] = false;\n        }\n    }\n\npublic:\n    vector<vector<int>> combinationSum2(vector<int> &candidates, int target) {\n        sort(candidates.begin(), candidates.end());\n        path.clear();\n        result.clear();\n        vector<bool> used(candidates.size(), false);\n        backTracking(0, target, 0, used, candidates);\n        return result;\n    }\n};\n```\n\n## 131. 分割回文串\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/palindrome-partitioning/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.html)\n>\n>   视频讲解：[131.分割回文串](https://www.bilibili.com/video/BV1c54y1e7k6)\n>\n>   状态：AC\n\n### 思路\n\n我这个思路明显是有点绕弯的，不是最好的。头已经大了，已经想不下去最优解了，明天再看。\n\n这道题真的想了一下午。最开始没理解题意，我以为是判断每个子串，如果是回文则输出。写了好久的代码之后发现并不能通过测试用例，重新好好理解下题，然后明白了。是如果一个字符串同时分割出一些子串，如果他们满足则是答案。例如“aaba”，一共有这些种分割方式：\n\n|  分割情况  | 是否满足 |\n| :--------: | :------: |\n| a\\|a\\|b\\|a |    ✅     |\n|  aa\\|b\\|a  |    ✅     |\n|  a\\|ab\\|a  |    ❌     |\n|  a\\|a\\|ba  |    ❌     |\n|  aa\\|b\\|a  |    ✅     |\n|   a\\|aba   |    ✅     |\n|   aa\\|ba   |    ❌     |\n|   aab\\|a   |    ❌     |\n\n那么只需要知道分割位置即可，变成了从1开始的数组到最后各种组合情况。判断每一种情况是不是回文串\n\n#### 递归三部曲\n\n`vector<vector<string>> result`存放最终结果\n\n`vector<int> path`存放切割位置\n\n`vector<string> pathString`存放切割后的字符串，如果均为回文串，则加入到`result`。\n\n1.   确立函数和参数：\n     -   字符串`s`\n     -   当前递归位置`index`\n2.   递归终止条件：当`index > s.size()`时。将`s`按照`path`存放的数字位置切割，判断切割后每一个串是否均为回文串。如果是加入到`result`，否则清空`pathString`\n3.   单次递归：\n     -   递归范围[index, s.size()]\n     -   `path`添加当前位置\n     -   下一层递归\n     -   反向操作\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<string>> result;\n    vector<int> path;\n    vector<string> pathString;\n    string temp = \"\";\n\n    bool judge(string s) {\n        if (s.size() == 0) {\n            return false;\n        }\n        if (s.size() == 1) {\n            return true;\n        }\n        for (int i = 0; i < s.size() / 2; i++) {\n            if (s[i] != s[s.size() - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    void backTracking(const string &s, int index) {\n        if (index > s.size()) {\n            int left = 0;\n            int flag = true;\n            for (int right = 0; right < path.size(); right++) {\n                string temp = s.substr(left, path[right] - left);\n                pathString.push_back(temp);\n                if (!judge(temp)) {\n                    flag = false;\n                    pathString.clear();\n                    return;\n                }\n                left = path[right];\n            }\n            if (flag) {\n                result.push_back(pathString);\n                pathString.clear();\n            }\n            return;\n        }\n        for (int i = index; i <= s.size(); ++i) {\n            path.push_back(i);\n            backTracking(s, i + 1);\n            path.pop_back();\n        }\n    }\n\npublic:\n    vector<vector<string>> partition(string s) {\n        backTracking(s, 1);\n        for (auto i: path) {\n            cout << i << endl;\n        }\n        return result;\n    }\n};\n```\n\n","source":"_posts/day26.md","raw":"---\ntitle: 代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 回溯算法\ncategories: 刷题\nabbrlink: 36f15375\ndate: 2023-10-19 23:23:02\n---\n\n# 代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串\n\n## 39.组合总和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/combination-sum/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0039.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html)\n>\n>   视频讲解：[Leetcode:39. 组合总和讲解](https://www.bilibili.com/video/BV1KT4y1M7HJ)\n>\n>   状态：AC\n\n### 思路\n\n这道题还比较简单，先进行排序，然后开始递归。排序是为了确定当前几个数的和大于了`target`说明后面就不存在结果了。\n\n#### 递归三部曲\n\n1.   确定函数参数：\n     -   数组\n     -   当前递归位置\n     -   总和\n     -   目标和\n2.   递归终止条件：如果目标和等于总和，那么把所有元素放入`result`\n3.   单次递归：总和大于`target`，剪枝，`return`。否则进行下一次递归\n\n### 代码\n\n``` go\nfunc combinationSum(candidates []int, target int) [][]int {\n\tsort.Ints(candidates)\n\tvar result [][]int\n\tvar path []int\n\tvar backTracking func(candidates []int, index, sum, target int)\n\tbackTracking = func(candidates []int, index, sum, target int) {\n\t\tif sum == target {\n\t\t\ttemp := make([]int, len(path))\n\t\t\tcopy(temp, path)\n\t\t\tresult = append(result, temp)\n\t\t\treturn\n\t\t}\n\t\tif sum > target {\n\t\t\treturn\n\t\t}\n\t\tfor i := index; i < len(candidates); i++ {\n\t\t\tif sum+candidates[i] > target {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tpath = append(path, candidates[i])\n\t\t\tsum += candidates[i]\n\t\t\tbackTracking(candidates, i, sum, target)\n\t\t\tpath = path[:len(path)-1]\n\t\t\tsum -= candidates[i]\n\t\t}\n\t}\n\tbackTracking(candidates, 0, 0, target)\n\treturn result\n}\n```\n\n## 40. 组合总和II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/combination-sum-ii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html)\n>\n>   视频讲解：[回溯算法中的去重，树层去重树枝去重，你弄清楚了没？| LeetCode:40.组合总和II](https://www.bilibili.com/video/BV12V4y1V73A)\n>\n>   状态：TLE\n\n### 思路\n\n<font color=\"red\">从这道题开始换C++写算法了，Go写算法有点难受。最初用Go写算法只是想多练练Go的语法。但是到刷LeetCode还是不太适合。</font>\n\n这道题去重一直想不出来，试了几种方法，要么超时、要么思路错了：\n\n-   将结果放入到一个集合中。由于Go语言没有集合，那么新建一个`maps := map[interface{}]bool{}`。`key`则是每一个结果。但是`key`不能是切片类型。所以不能使用。\n-   由于不能使用切片，那么使用一个“曲线救题”的方式，把结果转成字符串（加入结果为[1, 2, 3]，那么就变成“123”）这样就可以存入`key`中。超出了时间限制。该测试用例如下`candidates = [1, 1, ..., 1]（100个）`，`target=30`。去重了但没剪枝。\n\n<font color=\"green\">这题投降</font>\n\n#### 卡哥讲解\n\n对于我来讲想明白了一下两点我的代码就写出来了，假设`candidates = [1, 2(1), 2(2), 2(3), 5]`，括号为了区分是哪个`2`：\n\n-   假如递归到`[1, 2(1), 2(2), 2(3)]`，那么再以后递归时候`2(1)`为第一个元素，那么`[2(1), 2(2), 2(3)]`的情况再刚刚已经出现了，则不需要再递归了。也是剪枝操作。\n-   为了防止重复递归，引入一个布尔类型的`used`数组。`used[i]`代表`candidates[i]`在当前递归的树枝上是否使用。那么当`candidates[i] != candidates[i - 1] && used[i] == false`时，才不会重复递归。\n\n#### 递归三部曲\n\n1.   确立递归函数参数\n     -   当前递归的和\n     -   目标和\n     -   当前位置索引\n     -   `used`数组，是否使用\n     -   `candidates`\n2.   递归终止条件：`sum == target`时，将`path`加入到`result`中\n3.   单次递归：\n     -   先剪枝：当`i > 0 && candidates[i] == candidates[i - 1] && !used[i - 1]`，说明已经递归过了，应该<font color=\"red\">`continue`</font>而不应该`return`。\n     -   当前和加上下一个数\n     -   下一个数放入到路径`path`中\n     -   下一个数标记为`true`，示意已被使用。\n     -   下层递归\n     -   反向上述操作\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(int sum, int target, int index, vector<bool> &used, vector<int> &candidates) {\n        if (sum == target) {\n            result.push_back(path);\n            return;\n        }\n        for (int i = index; i < candidates.size() && sum + candidates[i] <= target; i++) {\n            if (i > 0 && candidates[i] == candidates[i - 1] && !used[i - 1]) {\n                continue;\n            }\n            sum += candidates[i];\n            path.push_back(candidates[i]);\n            used[i] = true;\n            backTracking(sum, target, i + 1, used, candidates);\n            sum -= candidates[i];\n            path.pop_back();\n            used[i] = false;\n        }\n    }\n\npublic:\n    vector<vector<int>> combinationSum2(vector<int> &candidates, int target) {\n        sort(candidates.begin(), candidates.end());\n        path.clear();\n        result.clear();\n        vector<bool> used(candidates.size(), false);\n        backTracking(0, target, 0, used, candidates);\n        return result;\n    }\n};\n```\n\n## 131. 分割回文串\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/palindrome-partitioning/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.html)\n>\n>   视频讲解：[131.分割回文串](https://www.bilibili.com/video/BV1c54y1e7k6)\n>\n>   状态：AC\n\n### 思路\n\n我这个思路明显是有点绕弯的，不是最好的。头已经大了，已经想不下去最优解了，明天再看。\n\n这道题真的想了一下午。最开始没理解题意，我以为是判断每个子串，如果是回文则输出。写了好久的代码之后发现并不能通过测试用例，重新好好理解下题，然后明白了。是如果一个字符串同时分割出一些子串，如果他们满足则是答案。例如“aaba”，一共有这些种分割方式：\n\n|  分割情况  | 是否满足 |\n| :--------: | :------: |\n| a\\|a\\|b\\|a |    ✅     |\n|  aa\\|b\\|a  |    ✅     |\n|  a\\|ab\\|a  |    ❌     |\n|  a\\|a\\|ba  |    ❌     |\n|  aa\\|b\\|a  |    ✅     |\n|   a\\|aba   |    ✅     |\n|   aa\\|ba   |    ❌     |\n|   aab\\|a   |    ❌     |\n\n那么只需要知道分割位置即可，变成了从1开始的数组到最后各种组合情况。判断每一种情况是不是回文串\n\n#### 递归三部曲\n\n`vector<vector<string>> result`存放最终结果\n\n`vector<int> path`存放切割位置\n\n`vector<string> pathString`存放切割后的字符串，如果均为回文串，则加入到`result`。\n\n1.   确立函数和参数：\n     -   字符串`s`\n     -   当前递归位置`index`\n2.   递归终止条件：当`index > s.size()`时。将`s`按照`path`存放的数字位置切割，判断切割后每一个串是否均为回文串。如果是加入到`result`，否则清空`pathString`\n3.   单次递归：\n     -   递归范围[index, s.size()]\n     -   `path`添加当前位置\n     -   下一层递归\n     -   反向操作\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<string>> result;\n    vector<int> path;\n    vector<string> pathString;\n    string temp = \"\";\n\n    bool judge(string s) {\n        if (s.size() == 0) {\n            return false;\n        }\n        if (s.size() == 1) {\n            return true;\n        }\n        for (int i = 0; i < s.size() / 2; i++) {\n            if (s[i] != s[s.size() - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    void backTracking(const string &s, int index) {\n        if (index > s.size()) {\n            int left = 0;\n            int flag = true;\n            for (int right = 0; right < path.size(); right++) {\n                string temp = s.substr(left, path[right] - left);\n                pathString.push_back(temp);\n                if (!judge(temp)) {\n                    flag = false;\n                    pathString.clear();\n                    return;\n                }\n                left = path[right];\n            }\n            if (flag) {\n                result.push_back(pathString);\n                pathString.clear();\n            }\n            return;\n        }\n        for (int i = index; i <= s.size(); ++i) {\n            path.push_back(i);\n            backTracking(s, i + 1);\n            path.pop_back();\n        }\n    }\n\npublic:\n    vector<vector<string>> partition(string s) {\n        backTracking(s, 1);\n        for (auto i: path) {\n            cout << i << endl;\n        }\n        return result;\n    }\n};\n```\n\n","slug":"day26","published":1,"updated":"2023-10-24T19:35:54.423Z","_id":"clnxfhpy00000hxz81t4mc9iy","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二十六天-39-组合总和、40-组合总和II、131-分割回文串\"><a href=\"#代码随想录算法训练营第二十六天-39-组合总和、40-组合总和II、131-分割回文串\" class=\"headerlink\" title=\"代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串\"></a>代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串</h1><h2 id=\"39-组合总和\"><a href=\"#39-组合总和\" class=\"headerlink\" title=\"39.组合总和\"></a>39.组合总和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/combination-sum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0039.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1KT4y1M7HJ\">Leetcode:39. 组合总和讲解</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题还比较简单，先进行排序，然后开始递归。排序是为了确定当前几个数的和大于了<code>target</code>说明后面就不存在结果了。</p>\n<h4 id=\"递归三部曲\"><a href=\"#递归三部曲\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><ol>\n<li>确定函数参数：<ul>\n<li>数组</li>\n<li>当前递归位置</li>\n<li>总和</li>\n<li>目标和</li>\n</ul>\n</li>\n<li>递归终止条件：如果目标和等于总和，那么把所有元素放入<code>result</code></li>\n<li>单次递归：总和大于<code>target</code>，剪枝，<code>return</code>。否则进行下一次递归</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">combinationSum</span><span class=\"hljs-params\">(candidates []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\tsort.Ints(candidates)<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> backTracking <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(candidates []<span class=\"hljs-type\">int</span>, index, sum, target <span class=\"hljs-type\">int</span>)</span></span><br>\tbackTracking = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(candidates []<span class=\"hljs-type\">int</span>, index, sum, target <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> sum == target &#123;<br>\t\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(path))<br>\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, path)<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> sum &gt; target &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := index; i &lt; <span class=\"hljs-built_in\">len</span>(candidates); i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> sum+candidates[i] &gt; target &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\tpath = <span class=\"hljs-built_in\">append</span>(path, candidates[i])<br>\t\t\tsum += candidates[i]<br>\t\t\tbackTracking(candidates, i, sum, target)<br>\t\t\tpath = path[:<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t\tsum -= candidates[i]<br>\t\t&#125;<br>\t&#125;<br>\tbackTracking(candidates, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, target)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"40-组合总和II\"><a href=\"#40-组合总和II\" class=\"headerlink\" title=\"40. 组合总和II\"></a>40. 组合总和II</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/combination-sum-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV12V4y1V73A\">回溯算法中的去重，树层去重树枝去重，你弄清楚了没？| LeetCode:40.组合总和II</a></p>\n<p>  状态：TLE</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><font color=\"red\">从这道题开始换C++写算法了，Go写算法有点难受。最初用Go写算法只是想多练练Go的语法。但是到刷LeetCode还是不太适合。</font></p>\n<p>这道题去重一直想不出来，试了几种方法，要么超时、要么思路错了：</p>\n<ul>\n<li>将结果放入到一个集合中。由于Go语言没有集合，那么新建一个<code>maps := map[interface&#123;&#125;]bool&#123;&#125;</code>。<code>key</code>则是每一个结果。但是<code>key</code>不能是切片类型。所以不能使用。</li>\n<li>由于不能使用切片，那么使用一个“曲线救题”的方式，把结果转成字符串（加入结果为[1, 2, 3]，那么就变成“123”）这样就可以存入<code>key</code>中。超出了时间限制。该测试用例如下<code>candidates = [1, 1, ..., 1]（100个）</code>，<code>target=30</code>。去重了但没剪枝。</li>\n</ul>\n<p><font color=\"green\">这题投降</font></p>\n<h4 id=\"卡哥讲解\"><a href=\"#卡哥讲解\" class=\"headerlink\" title=\"卡哥讲解\"></a>卡哥讲解</h4><p>对于我来讲想明白了一下两点我的代码就写出来了，假设<code>candidates = [1, 2(1), 2(2), 2(3), 5]</code>，括号为了区分是哪个<code>2</code>：</p>\n<ul>\n<li>假如递归到<code>[1, 2(1), 2(2), 2(3)]</code>，那么再以后递归时候<code>2(1)</code>为第一个元素，那么<code>[2(1), 2(2), 2(3)]</code>的情况再刚刚已经出现了，则不需要再递归了。也是剪枝操作。</li>\n<li>为了防止重复递归，引入一个布尔类型的<code>used</code>数组。<code>used[i]</code>代表<code>candidates[i]</code>在当前递归的树枝上是否使用。那么当<code>candidates[i] != candidates[i - 1] &amp;&amp; used[i] == false</code>时，才不会重复递归。</li>\n</ul>\n<h4 id=\"递归三部曲-1\"><a href=\"#递归三部曲-1\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><ol>\n<li>确立递归函数参数<ul>\n<li>当前递归的和</li>\n<li>目标和</li>\n<li>当前位置索引</li>\n<li><code>used</code>数组，是否使用</li>\n<li><code>candidates</code></li>\n</ul>\n</li>\n<li>递归终止条件：<code>sum == target</code>时，将<code>path</code>加入到<code>result</code>中</li>\n<li>单次递归：<ul>\n<li>先剪枝：当<code>i &gt; 0 &amp;&amp; candidates[i] == candidates[i - 1] &amp;&amp; !used[i - 1]</code>，说明已经递归过了，应该<font color=\"red\"><code>continue</code></font>而不应该<code>return</code>。</li>\n<li>当前和加上下一个数</li>\n<li>下一个数放入到路径<code>path</code>中</li>\n<li>下一个数标记为<code>true</code>，示意已被使用。</li>\n<li>下层递归</li>\n<li>反向上述操作</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sum, <span class=\"hljs-type\">int</span> target, <span class=\"hljs-type\">int</span> index, vector&lt;<span class=\"hljs-type\">bool</span>&gt; &amp;used, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;candidates)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (sum == target) &#123;<br>            result.<span class=\"hljs-built_in\">push_back</span>(path);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt; candidates.<span class=\"hljs-built_in\">size</span>() &amp;&amp; sum + candidates[i] &lt;= target; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; candidates[i] == candidates[i - <span class=\"hljs-number\">1</span>] &amp;&amp; !used[i - <span class=\"hljs-number\">1</span>]) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            sum += candidates[i];<br>            path.<span class=\"hljs-built_in\">push_back</span>(candidates[i]);<br>            used[i] = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-built_in\">backTracking</span>(sum, target, i + <span class=\"hljs-number\">1</span>, used, candidates);<br>            sum -= candidates[i];<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>            used[i] = <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">combinationSum2</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;candidates, <span class=\"hljs-type\">int</span> target) &#123;<br>        <span class=\"hljs-built_in\">sort</span>(candidates.<span class=\"hljs-built_in\">begin</span>(), candidates.<span class=\"hljs-built_in\">end</span>());<br>        path.<span class=\"hljs-built_in\">clear</span>();<br>        result.<span class=\"hljs-built_in\">clear</span>();<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">used</span><span class=\"hljs-params\">(candidates.size(), <span class=\"hljs-literal\">false</span>)</span></span>;<br>        <span class=\"hljs-built_in\">backTracking</span>(<span class=\"hljs-number\">0</span>, target, <span class=\"hljs-number\">0</span>, used, candidates);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"131-分割回文串\"><a href=\"#131-分割回文串\" class=\"headerlink\" title=\"131. 分割回文串\"></a>131. 分割回文串</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/palindrome-partitioning/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1c54y1e7k6\">131.分割回文串</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>我这个思路明显是有点绕弯的，不是最好的。头已经大了，已经想不下去最优解了，明天再看。</p>\n<p>这道题真的想了一下午。最开始没理解题意，我以为是判断每个子串，如果是回文则输出。写了好久的代码之后发现并不能通过测试用例，重新好好理解下题，然后明白了。是如果一个字符串同时分割出一些子串，如果他们满足则是答案。例如“aaba”，一共有这些种分割方式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">分割情况</th>\n<th align=\"center\">是否满足</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a|a|b|a</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">aa|b|a</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">a|ab|a</td>\n<td align=\"center\">❌</td>\n</tr>\n<tr>\n<td align=\"center\">a|a|ba</td>\n<td align=\"center\">❌</td>\n</tr>\n<tr>\n<td align=\"center\">aa|b|a</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">a|aba</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">aa|ba</td>\n<td align=\"center\">❌</td>\n</tr>\n<tr>\n<td align=\"center\">aab|a</td>\n<td align=\"center\">❌</td>\n</tr>\n</tbody></table>\n<p>那么只需要知道分割位置即可，变成了从1开始的数组到最后各种组合情况。判断每一种情况是不是回文串</p>\n<h4 id=\"递归三部曲-2\"><a href=\"#递归三部曲-2\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><p><code>vector&lt;vector&lt;string&gt;&gt; result</code>存放最终结果</p>\n<p><code>vector&lt;int&gt; path</code>存放切割位置</p>\n<p><code>vector&lt;string&gt; pathString</code>存放切割后的字符串，如果均为回文串，则加入到<code>result</code>。</p>\n<ol>\n<li>确立函数和参数：<ul>\n<li>字符串<code>s</code></li>\n<li>当前递归位置<code>index</code></li>\n</ul>\n</li>\n<li>递归终止条件：当<code>index &gt; s.size()</code>时。将<code>s</code>按照<code>path</code>存放的数字位置切割，判断切割后每一个串是否均为回文串。如果是加入到<code>result</code>，否则清空<code>pathString</code></li>\n<li>单次递归：<ul>\n<li>递归范围[index, s.size()]</li>\n<li><code>path</code>添加当前位置</li>\n<li>下一层递归</li>\n<li>反向操作</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;string&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br>    vector&lt;string&gt; pathString;<br>    string temp = <span class=\"hljs-string\">&quot;&quot;</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">judge</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">1</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.<span class=\"hljs-built_in\">size</span>() / <span class=\"hljs-number\">2</span>; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (s[i] != s[s.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span> - i]) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> string &amp;s, <span class=\"hljs-type\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (index &gt; s.<span class=\"hljs-built_in\">size</span>()) &#123;<br>            <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">int</span> flag = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> right = <span class=\"hljs-number\">0</span>; right &lt; path.<span class=\"hljs-built_in\">size</span>(); right++) &#123;<br>                string temp = s.<span class=\"hljs-built_in\">substr</span>(left, path[right] - left);<br>                pathString.<span class=\"hljs-built_in\">push_back</span>(temp);<br>                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">judge</span>(temp)) &#123;<br>                    flag = <span class=\"hljs-literal\">false</span>;<br>                    pathString.<span class=\"hljs-built_in\">clear</span>();<br>                    <span class=\"hljs-keyword\">return</span>;<br>                &#125;<br>                left = path[right];<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (flag) &#123;<br>                result.<span class=\"hljs-built_in\">push_back</span>(pathString);<br>                pathString.<span class=\"hljs-built_in\">clear</span>();<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt;= s.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            path.<span class=\"hljs-built_in\">push_back</span>(i);<br>            <span class=\"hljs-built_in\">backTracking</span>(s, i + <span class=\"hljs-number\">1</span>);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class=\"hljs-built_in\">partition</span>(string s) &#123;<br>        <span class=\"hljs-built_in\">backTracking</span>(s, <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> i: path) &#123;<br>            cout &lt;&lt; i &lt;&lt; endl;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二十六天-39-组合总和、40-组合总和II、131-分割回文串\"><a href=\"#代码随想录算法训练营第二十六天-39-组合总和、40-组合总和II、131-分割回文串\" class=\"headerlink\" title=\"代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串\"></a>代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串</h1><h2 id=\"39-组合总和\"><a href=\"#39-组合总和\" class=\"headerlink\" title=\"39.组合总和\"></a>39.组合总和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/combination-sum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0039.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1KT4y1M7HJ\">Leetcode:39. 组合总和讲解</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题还比较简单，先进行排序，然后开始递归。排序是为了确定当前几个数的和大于了<code>target</code>说明后面就不存在结果了。</p>\n<h4 id=\"递归三部曲\"><a href=\"#递归三部曲\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><ol>\n<li>确定函数参数：<ul>\n<li>数组</li>\n<li>当前递归位置</li>\n<li>总和</li>\n<li>目标和</li>\n</ul>\n</li>\n<li>递归终止条件：如果目标和等于总和，那么把所有元素放入<code>result</code></li>\n<li>单次递归：总和大于<code>target</code>，剪枝，<code>return</code>。否则进行下一次递归</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">combinationSum</span><span class=\"hljs-params\">(candidates []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\tsort.Ints(candidates)<br>\t<span class=\"hljs-keyword\">var</span> result [][]<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> path []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">var</span> backTracking <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(candidates []<span class=\"hljs-type\">int</span>, index, sum, target <span class=\"hljs-type\">int</span>)</span></span><br>\tbackTracking = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(candidates []<span class=\"hljs-type\">int</span>, index, sum, target <span class=\"hljs-type\">int</span>)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> sum == target &#123;<br>\t\t\ttemp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(path))<br>\t\t\t<span class=\"hljs-built_in\">copy</span>(temp, path)<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> sum &gt; target &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> i := index; i &lt; <span class=\"hljs-built_in\">len</span>(candidates); i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> sum+candidates[i] &gt; target &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t\tpath = <span class=\"hljs-built_in\">append</span>(path, candidates[i])<br>\t\t\tsum += candidates[i]<br>\t\t\tbackTracking(candidates, i, sum, target)<br>\t\t\tpath = path[:<span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>]<br>\t\t\tsum -= candidates[i]<br>\t\t&#125;<br>\t&#125;<br>\tbackTracking(candidates, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, target)<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"40-组合总和II\"><a href=\"#40-组合总和II\" class=\"headerlink\" title=\"40. 组合总和II\"></a>40. 组合总和II</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/combination-sum-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV12V4y1V73A\">回溯算法中的去重，树层去重树枝去重，你弄清楚了没？| LeetCode:40.组合总和II</a></p>\n<p>  状态：TLE</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><font color=\"red\">从这道题开始换C++写算法了，Go写算法有点难受。最初用Go写算法只是想多练练Go的语法。但是到刷LeetCode还是不太适合。</font></p>\n<p>这道题去重一直想不出来，试了几种方法，要么超时、要么思路错了：</p>\n<ul>\n<li>将结果放入到一个集合中。由于Go语言没有集合，那么新建一个<code>maps := map[interface&#123;&#125;]bool&#123;&#125;</code>。<code>key</code>则是每一个结果。但是<code>key</code>不能是切片类型。所以不能使用。</li>\n<li>由于不能使用切片，那么使用一个“曲线救题”的方式，把结果转成字符串（加入结果为[1, 2, 3]，那么就变成“123”）这样就可以存入<code>key</code>中。超出了时间限制。该测试用例如下<code>candidates = [1, 1, ..., 1]（100个）</code>，<code>target=30</code>。去重了但没剪枝。</li>\n</ul>\n<p><font color=\"green\">这题投降</font></p>\n<h4 id=\"卡哥讲解\"><a href=\"#卡哥讲解\" class=\"headerlink\" title=\"卡哥讲解\"></a>卡哥讲解</h4><p>对于我来讲想明白了一下两点我的代码就写出来了，假设<code>candidates = [1, 2(1), 2(2), 2(3), 5]</code>，括号为了区分是哪个<code>2</code>：</p>\n<ul>\n<li>假如递归到<code>[1, 2(1), 2(2), 2(3)]</code>，那么再以后递归时候<code>2(1)</code>为第一个元素，那么<code>[2(1), 2(2), 2(3)]</code>的情况再刚刚已经出现了，则不需要再递归了。也是剪枝操作。</li>\n<li>为了防止重复递归，引入一个布尔类型的<code>used</code>数组。<code>used[i]</code>代表<code>candidates[i]</code>在当前递归的树枝上是否使用。那么当<code>candidates[i] != candidates[i - 1] &amp;&amp; used[i] == false</code>时，才不会重复递归。</li>\n</ul>\n<h4 id=\"递归三部曲-1\"><a href=\"#递归三部曲-1\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><ol>\n<li>确立递归函数参数<ul>\n<li>当前递归的和</li>\n<li>目标和</li>\n<li>当前位置索引</li>\n<li><code>used</code>数组，是否使用</li>\n<li><code>candidates</code></li>\n</ul>\n</li>\n<li>递归终止条件：<code>sum == target</code>时，将<code>path</code>加入到<code>result</code>中</li>\n<li>单次递归：<ul>\n<li>先剪枝：当<code>i &gt; 0 &amp;&amp; candidates[i] == candidates[i - 1] &amp;&amp; !used[i - 1]</code>，说明已经递归过了，应该<font color=\"red\"><code>continue</code></font>而不应该<code>return</code>。</li>\n<li>当前和加上下一个数</li>\n<li>下一个数放入到路径<code>path</code>中</li>\n<li>下一个数标记为<code>true</code>，示意已被使用。</li>\n<li>下层递归</li>\n<li>反向上述操作</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sum, <span class=\"hljs-type\">int</span> target, <span class=\"hljs-type\">int</span> index, vector&lt;<span class=\"hljs-type\">bool</span>&gt; &amp;used, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;candidates)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (sum == target) &#123;<br>            result.<span class=\"hljs-built_in\">push_back</span>(path);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt; candidates.<span class=\"hljs-built_in\">size</span>() &amp;&amp; sum + candidates[i] &lt;= target; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; candidates[i] == candidates[i - <span class=\"hljs-number\">1</span>] &amp;&amp; !used[i - <span class=\"hljs-number\">1</span>]) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            sum += candidates[i];<br>            path.<span class=\"hljs-built_in\">push_back</span>(candidates[i]);<br>            used[i] = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-built_in\">backTracking</span>(sum, target, i + <span class=\"hljs-number\">1</span>, used, candidates);<br>            sum -= candidates[i];<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>            used[i] = <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">combinationSum2</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;candidates, <span class=\"hljs-type\">int</span> target) &#123;<br>        <span class=\"hljs-built_in\">sort</span>(candidates.<span class=\"hljs-built_in\">begin</span>(), candidates.<span class=\"hljs-built_in\">end</span>());<br>        path.<span class=\"hljs-built_in\">clear</span>();<br>        result.<span class=\"hljs-built_in\">clear</span>();<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">used</span><span class=\"hljs-params\">(candidates.size(), <span class=\"hljs-literal\">false</span>)</span></span>;<br>        <span class=\"hljs-built_in\">backTracking</span>(<span class=\"hljs-number\">0</span>, target, <span class=\"hljs-number\">0</span>, used, candidates);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"131-分割回文串\"><a href=\"#131-分割回文串\" class=\"headerlink\" title=\"131. 分割回文串\"></a>131. 分割回文串</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/palindrome-partitioning/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1c54y1e7k6\">131.分割回文串</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>我这个思路明显是有点绕弯的，不是最好的。头已经大了，已经想不下去最优解了，明天再看。</p>\n<p>这道题真的想了一下午。最开始没理解题意，我以为是判断每个子串，如果是回文则输出。写了好久的代码之后发现并不能通过测试用例，重新好好理解下题，然后明白了。是如果一个字符串同时分割出一些子串，如果他们满足则是答案。例如“aaba”，一共有这些种分割方式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">分割情况</th>\n<th align=\"center\">是否满足</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a|a|b|a</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">aa|b|a</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">a|ab|a</td>\n<td align=\"center\">❌</td>\n</tr>\n<tr>\n<td align=\"center\">a|a|ba</td>\n<td align=\"center\">❌</td>\n</tr>\n<tr>\n<td align=\"center\">aa|b|a</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">a|aba</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">aa|ba</td>\n<td align=\"center\">❌</td>\n</tr>\n<tr>\n<td align=\"center\">aab|a</td>\n<td align=\"center\">❌</td>\n</tr>\n</tbody></table>\n<p>那么只需要知道分割位置即可，变成了从1开始的数组到最后各种组合情况。判断每一种情况是不是回文串</p>\n<h4 id=\"递归三部曲-2\"><a href=\"#递归三部曲-2\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><p><code>vector&lt;vector&lt;string&gt;&gt; result</code>存放最终结果</p>\n<p><code>vector&lt;int&gt; path</code>存放切割位置</p>\n<p><code>vector&lt;string&gt; pathString</code>存放切割后的字符串，如果均为回文串，则加入到<code>result</code>。</p>\n<ol>\n<li>确立函数和参数：<ul>\n<li>字符串<code>s</code></li>\n<li>当前递归位置<code>index</code></li>\n</ul>\n</li>\n<li>递归终止条件：当<code>index &gt; s.size()</code>时。将<code>s</code>按照<code>path</code>存放的数字位置切割，判断切割后每一个串是否均为回文串。如果是加入到<code>result</code>，否则清空<code>pathString</code></li>\n<li>单次递归：<ul>\n<li>递归范围[index, s.size()]</li>\n<li><code>path</code>添加当前位置</li>\n<li>下一层递归</li>\n<li>反向操作</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;string&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br>    vector&lt;string&gt; pathString;<br>    string temp = <span class=\"hljs-string\">&quot;&quot;</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">judge</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">1</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.<span class=\"hljs-built_in\">size</span>() / <span class=\"hljs-number\">2</span>; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (s[i] != s[s.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span> - i]) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> string &amp;s, <span class=\"hljs-type\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (index &gt; s.<span class=\"hljs-built_in\">size</span>()) &#123;<br>            <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">int</span> flag = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> right = <span class=\"hljs-number\">0</span>; right &lt; path.<span class=\"hljs-built_in\">size</span>(); right++) &#123;<br>                string temp = s.<span class=\"hljs-built_in\">substr</span>(left, path[right] - left);<br>                pathString.<span class=\"hljs-built_in\">push_back</span>(temp);<br>                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">judge</span>(temp)) &#123;<br>                    flag = <span class=\"hljs-literal\">false</span>;<br>                    pathString.<span class=\"hljs-built_in\">clear</span>();<br>                    <span class=\"hljs-keyword\">return</span>;<br>                &#125;<br>                left = path[right];<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (flag) &#123;<br>                result.<span class=\"hljs-built_in\">push_back</span>(pathString);<br>                pathString.<span class=\"hljs-built_in\">clear</span>();<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt;= s.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            path.<span class=\"hljs-built_in\">push_back</span>(i);<br>            <span class=\"hljs-built_in\">backTracking</span>(s, i + <span class=\"hljs-number\">1</span>);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class=\"hljs-built_in\">partition</span>(string s) &#123;<br>        <span class=\"hljs-built_in\">backTracking</span>(s, <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> i: path) &#123;<br>            cout &lt;&lt; i &lt;&lt; endl;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II","abbrlink":"ff1e328","date":"2023-10-19T18:43:48.000Z","_content":"\n# 代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II\n\n## 93.复原IP地址\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/restore-ip-addresses/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0093.%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.html)\n>\n>   视频讲解：[回溯算法如何分割字符串并判断是合法IP？| LeetCode：93.复原IP地址](https://www.bilibili.com/video/BV1XP4y1U73i/)\n>\n>   状态：AC\n\n### 思路\n\n因为IP地址有一定的局限性（在0\\~255范围内），这道题我采用了两种方法，一种直接暴力算法，三重循环。另一种使用回溯。题目中给定字符串`s`为潜在的IP地址，其长度在[1, 20]。那么他的合法长度在[4, 12]之间，可以先做一些判定。无论是**暴力算法**还是**回溯算法**，查找的均为字符串的分割处。\n\n#### 1. 暴力算法\n\n<font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font>\n\n<font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font>\n\n<font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font>\n\n-   第一层范围[1, 3]，使用指针`i`\n    -   分割出字符串`s1 = s[0: i]`，判断是否有前导0，判断转换成数字`n1`后是否在[0, 255]之间\n-   第二层范围[`i`+1, 6]，使用指针`j`\n    -   分割出字符串`s2 = s[i: j]`，判断是否有前导0，判断长度是否大于3，判断转换成数字`n2`后是否在[0, 255]之间\n-   第三层范围[`j`+1, 9]，使用指针`k`\n    -   分割出字符串`s3 = s[j: k]`，判断是否有前导0，判断长度是否大于3，判断转换成数字`n3`后是否在[0, 255]之间\n    -   分割出字符串`s4 = s[k:]`，判断是否有前导0，判断长度是否大于3，判断转换成数字`n4`后是否在[0, 255]之间\n\n均合法，则拼接IP地址`n1 + \".\" + n2 + \".\" + n3 + \".\" + n4`\n\n#### 代码\n\n``` c++\n\nclass Solution {\nprivate:\n    vector<string> result;\n    string path;\n\n    void backTracking(string s, int index, int count) {\n        if (count > 3) {\n            return;\n        }\n    }\n\n    int getNum(string s) {\n        int num = 0;\n        if (s == \"0\") {\n            return 0;\n        }\n        if (s[0] - '0' == 0 && s.size() > 1 || s.size() == 0) {\n            return -1;\n        }\n        for (char i : s) {\n            num *= 10;\n            num += (i - '0');\n        }\n\n        return num;\n    }\n\npublic:\n    vector<string> restoreIpAddresses(string s) {\n        if (s.size() < 4) {\n            return result;\n        }\n        int n1, n2, n3, n4;\n        for (int i = 1; i <= 3; ++i) {\n            n1 = getNum(s.substr(0, i));\n            if (0 <= n1 && n1 <= 255) {\n                for (int j = i + 1; j <= 6 || j < s.size() - 1; ++j) {\n                    if (j - i > 3) {\n                        break;\n                    }\n                    n2 = getNum(s.substr(i, j - i));\n                    if (0 <= n2 && n2 <= 255) {\n                        for (int k = j + 1; k <= 9 || k < s.size(); ++k) {\n                            if (k - j > 3) {\n                                break;\n                            }\n                            if (s.size() - k > 3) {\n                                continue;\n                            }\n                            n3 = getNum(s.substr(j, k - j));\n                            if (0 <= n3 && n3 <= 255) {\n                                n4 = getNum(s.substr(k));\n                                if (0 <= n4 && n4 <= 255) {\n                                    result.push_back(to_string(n1) + \".\" + to_string(n2) + \".\" + to_string(n3) + \".\" +\n                                                     to_string(n4));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n};\n```\n\n**这代码真是又臭又长啊。**\n\n\n\n#### 2. 回溯算法\n\n##### 递归三部曲\n\n`vector<string> result`存放最终结果\n\n`vector<int> path`存放待切割的位置\n\n1.   确立函数和返回值：\n     -   字符串`s`\n     -   当前位置`index`\n2.   递归终止条件：\n     -   当`path`长度为3，意味着可以切割四块，开始切割操作，切割后判断合法性，均合法加入`result`中\n     -   当`path`长度大于3，`return`\n3.   单次递归：\n     -   `path`添加切割位置\n     -   下一层递归，切割位置加一\n     -   反向操作\n\n#### 代码\n\n``` c++\n\nclass Solution {\nprivate:\n    vector<string> result;\n    vector<int> path;\n\n    void backTracking(string s, int index) {\n        if (path.size() == 3) {\n            string s1 = s.substr(0, path[0]);\n            if (s1.size() > 3) {\n                return;\n            }\n            string s2 = s.substr(path[0], path[1] - path[0]);\n            if (s2.size() > 3) {\n                return;\n            }\n            string s3 = s.substr(path[1], path[2] - path[1]);\n            if (s3.size() > 3) {\n                return;\n            }\n            string s4 = s.substr(path[2]);\n            if (s4.size() > 3) {\n                return;\n            }\n            int n1 = getNum(s1);\n            int n2 = getNum(s2);\n            int n3 = getNum(s3);\n            int n4 = getNum(s4);\n            if (0 <= n1 && n1 <= 255 &&\n                0 <= n2 && n2 <= 255 &&\n                0 <= n3 && n3 <= 255 &&\n                0 <= n4 && n4 <= 255) {\n                result.push_back(s1 + \".\" + s2 + \".\" + s3 + \".\" + s4);\n            }\n            return;\n        }\n        for (int i = index; i <= s.size(); ++i) {\n            path.push_back(i);\n            backTracking(s, i + 1);\n            path.pop_back();\n        }\n    }\n\n    int getNum(string s) {\n        int num = 0;\n        if (s == \"0\") {\n            return 0;\n        }\n        if (s[0] - '0' == 0 && s.size() > 1 || s.size() == 0) {\n            return -1;\n        }\n        for (char i: s) {\n            num *= 10;\n            num += (i - '0');\n        }\n\n        return num;\n    }\n\npublic:\n\n    vector<string> restoreIpAddresses(string s) {\n        if (s.size() < 4) {\n            return result;\n        }\n        backTracking(s, 1);\n        return result;\n    }\n};\n```\n\n结构清晰了很多，可读性很好。\n\n## 78. 子集\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/subsets/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0078.%E5%AD%90%E9%9B%86.html)\n>\n>   视频讲解：[回溯算法解决子集问题，树上节点都是目标集和！ | LeetCode：78.子集](https://www.bilibili.com/video/BV1U84y1q7Ci)\n>\n>   状态：AC\n\n### 思路\n\n组合问题，这道题的每个元素不重复，做起来很简单，求出所有情况。\n\n#### 递归三部曲\n\n`vector<vector<int>> result`存放最终结果\n\n`vector<int> path`存放单次集合\n\n1.   确定函数和参数：\n     -   数组`nums`\n     -   当前位置`index`\n2.   确定终止条件：第一层的递归结束（或无）\n3.   单次递归：\n     -   单次集合加入到最终结果中\n     -   单次集合加入新的元素\n     -   下一层递归\n     -   反向操作\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(vector<int> &nums, int index) {\n        result.push_back(path);\n        for (int i = index; i < nums.size(); ++i) {\n            path.push_back(nums[i]);\n            backTracking(nums, i + 1);\n            path.pop_back();\n        }\n    }\n\npublic:\n    vector<vector<int>> subsets(vector<int> &nums) {\n        backTracking(nums, 0);\n        return result;\n    }\n};\n```\n\n\n\n## 90. 子集II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/subsets-ii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0090.%E5%AD%90%E9%9B%86II.html)\n>\n>   视频讲解：[回溯算法解决子集问题，如何去重？| LeetCode：90.子集II](https://www.bilibili.com/video/BV1vm4y1F71J/)\n>\n>   状态：AC\n\n### 思路\n\n基本同上一题，但是增加了可重复元素，需要去重。去重在我的博客[40. 组合总和II](https://promisewang.github.io/post/36f15375.html#40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII)\n\n这道题做之前要先排序\n\n`vector<vector<int>> result`：存放最终结果\n\n`vector<int> path`：存放单次集合\n\n#### 递归三部曲\n\n1.   确定函数和参数\n     -   数组`nums`\n     -   当前索引`index`\n     -   判断元素是否使用过的`used`\n2.   递归终止条件：无\n3.   单次递归：\n     -   单次集合加入最终结果\n     -   当`i > 0 && nums[i] == nums[i - 1] && used[i - 1] == false`说明之前已经遍历过，`continue`\n     -   `path`加入下个元素\n     -   `used[i] == true`下个元素标记被使用过\n     -   下一层递归\n     -   反向操作\n\n\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(vector<int> &nums, int index, vector<bool> &used) {\n        result.push_back(path);\n        for (int i = index; i < nums.size(); ++i) {\n            if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {\n                continue;\n            }\n            path.push_back(nums[i]);\n            used[i] = true;\n            backTracking(nums, i + 1, used);\n            path.pop_back();\n            used[i] = false;\n        }\n    }\n\npublic:\n    vector<vector<int>> subsetsWithDup(vector<int> &nums) {\n        sort(nums.begin(), nums.end());\n        vector<bool> used(nums.size(), false);\n        backTracking(nums, 0, used);\n        return result;\n    }\n};\n```\n\n","source":"_posts/day27.md","raw":"---\ntitle: 代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 回溯算法\ncategories: 刷题\nabbrlink: ff1e328\ndate: 2023-10-20 02:43:48\n---\n\n# 代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II\n\n## 93.复原IP地址\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/restore-ip-addresses/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0093.%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.html)\n>\n>   视频讲解：[回溯算法如何分割字符串并判断是合法IP？| LeetCode：93.复原IP地址](https://www.bilibili.com/video/BV1XP4y1U73i/)\n>\n>   状态：AC\n\n### 思路\n\n因为IP地址有一定的局限性（在0\\~255范围内），这道题我采用了两种方法，一种直接暴力算法，三重循环。另一种使用回溯。题目中给定字符串`s`为潜在的IP地址，其长度在[1, 20]。那么他的合法长度在[4, 12]之间，可以先做一些判定。无论是**暴力算法**还是**回溯算法**，查找的均为字符串的分割处。\n\n#### 1. 暴力算法\n\n<font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font>\n\n<font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font>\n\n<font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font>\n\n-   第一层范围[1, 3]，使用指针`i`\n    -   分割出字符串`s1 = s[0: i]`，判断是否有前导0，判断转换成数字`n1`后是否在[0, 255]之间\n-   第二层范围[`i`+1, 6]，使用指针`j`\n    -   分割出字符串`s2 = s[i: j]`，判断是否有前导0，判断长度是否大于3，判断转换成数字`n2`后是否在[0, 255]之间\n-   第三层范围[`j`+1, 9]，使用指针`k`\n    -   分割出字符串`s3 = s[j: k]`，判断是否有前导0，判断长度是否大于3，判断转换成数字`n3`后是否在[0, 255]之间\n    -   分割出字符串`s4 = s[k:]`，判断是否有前导0，判断长度是否大于3，判断转换成数字`n4`后是否在[0, 255]之间\n\n均合法，则拼接IP地址`n1 + \".\" + n2 + \".\" + n3 + \".\" + n4`\n\n#### 代码\n\n``` c++\n\nclass Solution {\nprivate:\n    vector<string> result;\n    string path;\n\n    void backTracking(string s, int index, int count) {\n        if (count > 3) {\n            return;\n        }\n    }\n\n    int getNum(string s) {\n        int num = 0;\n        if (s == \"0\") {\n            return 0;\n        }\n        if (s[0] - '0' == 0 && s.size() > 1 || s.size() == 0) {\n            return -1;\n        }\n        for (char i : s) {\n            num *= 10;\n            num += (i - '0');\n        }\n\n        return num;\n    }\n\npublic:\n    vector<string> restoreIpAddresses(string s) {\n        if (s.size() < 4) {\n            return result;\n        }\n        int n1, n2, n3, n4;\n        for (int i = 1; i <= 3; ++i) {\n            n1 = getNum(s.substr(0, i));\n            if (0 <= n1 && n1 <= 255) {\n                for (int j = i + 1; j <= 6 || j < s.size() - 1; ++j) {\n                    if (j - i > 3) {\n                        break;\n                    }\n                    n2 = getNum(s.substr(i, j - i));\n                    if (0 <= n2 && n2 <= 255) {\n                        for (int k = j + 1; k <= 9 || k < s.size(); ++k) {\n                            if (k - j > 3) {\n                                break;\n                            }\n                            if (s.size() - k > 3) {\n                                continue;\n                            }\n                            n3 = getNum(s.substr(j, k - j));\n                            if (0 <= n3 && n3 <= 255) {\n                                n4 = getNum(s.substr(k));\n                                if (0 <= n4 && n4 <= 255) {\n                                    result.push_back(to_string(n1) + \".\" + to_string(n2) + \".\" + to_string(n3) + \".\" +\n                                                     to_string(n4));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n};\n```\n\n**这代码真是又臭又长啊。**\n\n\n\n#### 2. 回溯算法\n\n##### 递归三部曲\n\n`vector<string> result`存放最终结果\n\n`vector<int> path`存放待切割的位置\n\n1.   确立函数和返回值：\n     -   字符串`s`\n     -   当前位置`index`\n2.   递归终止条件：\n     -   当`path`长度为3，意味着可以切割四块，开始切割操作，切割后判断合法性，均合法加入`result`中\n     -   当`path`长度大于3，`return`\n3.   单次递归：\n     -   `path`添加切割位置\n     -   下一层递归，切割位置加一\n     -   反向操作\n\n#### 代码\n\n``` c++\n\nclass Solution {\nprivate:\n    vector<string> result;\n    vector<int> path;\n\n    void backTracking(string s, int index) {\n        if (path.size() == 3) {\n            string s1 = s.substr(0, path[0]);\n            if (s1.size() > 3) {\n                return;\n            }\n            string s2 = s.substr(path[0], path[1] - path[0]);\n            if (s2.size() > 3) {\n                return;\n            }\n            string s3 = s.substr(path[1], path[2] - path[1]);\n            if (s3.size() > 3) {\n                return;\n            }\n            string s4 = s.substr(path[2]);\n            if (s4.size() > 3) {\n                return;\n            }\n            int n1 = getNum(s1);\n            int n2 = getNum(s2);\n            int n3 = getNum(s3);\n            int n4 = getNum(s4);\n            if (0 <= n1 && n1 <= 255 &&\n                0 <= n2 && n2 <= 255 &&\n                0 <= n3 && n3 <= 255 &&\n                0 <= n4 && n4 <= 255) {\n                result.push_back(s1 + \".\" + s2 + \".\" + s3 + \".\" + s4);\n            }\n            return;\n        }\n        for (int i = index; i <= s.size(); ++i) {\n            path.push_back(i);\n            backTracking(s, i + 1);\n            path.pop_back();\n        }\n    }\n\n    int getNum(string s) {\n        int num = 0;\n        if (s == \"0\") {\n            return 0;\n        }\n        if (s[0] - '0' == 0 && s.size() > 1 || s.size() == 0) {\n            return -1;\n        }\n        for (char i: s) {\n            num *= 10;\n            num += (i - '0');\n        }\n\n        return num;\n    }\n\npublic:\n\n    vector<string> restoreIpAddresses(string s) {\n        if (s.size() < 4) {\n            return result;\n        }\n        backTracking(s, 1);\n        return result;\n    }\n};\n```\n\n结构清晰了很多，可读性很好。\n\n## 78. 子集\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/subsets/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0078.%E5%AD%90%E9%9B%86.html)\n>\n>   视频讲解：[回溯算法解决子集问题，树上节点都是目标集和！ | LeetCode：78.子集](https://www.bilibili.com/video/BV1U84y1q7Ci)\n>\n>   状态：AC\n\n### 思路\n\n组合问题，这道题的每个元素不重复，做起来很简单，求出所有情况。\n\n#### 递归三部曲\n\n`vector<vector<int>> result`存放最终结果\n\n`vector<int> path`存放单次集合\n\n1.   确定函数和参数：\n     -   数组`nums`\n     -   当前位置`index`\n2.   确定终止条件：第一层的递归结束（或无）\n3.   单次递归：\n     -   单次集合加入到最终结果中\n     -   单次集合加入新的元素\n     -   下一层递归\n     -   反向操作\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(vector<int> &nums, int index) {\n        result.push_back(path);\n        for (int i = index; i < nums.size(); ++i) {\n            path.push_back(nums[i]);\n            backTracking(nums, i + 1);\n            path.pop_back();\n        }\n    }\n\npublic:\n    vector<vector<int>> subsets(vector<int> &nums) {\n        backTracking(nums, 0);\n        return result;\n    }\n};\n```\n\n\n\n## 90. 子集II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/subsets-ii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0090.%E5%AD%90%E9%9B%86II.html)\n>\n>   视频讲解：[回溯算法解决子集问题，如何去重？| LeetCode：90.子集II](https://www.bilibili.com/video/BV1vm4y1F71J/)\n>\n>   状态：AC\n\n### 思路\n\n基本同上一题，但是增加了可重复元素，需要去重。去重在我的博客[40. 组合总和II](https://promisewang.github.io/post/36f15375.html#40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII)\n\n这道题做之前要先排序\n\n`vector<vector<int>> result`：存放最终结果\n\n`vector<int> path`：存放单次集合\n\n#### 递归三部曲\n\n1.   确定函数和参数\n     -   数组`nums`\n     -   当前索引`index`\n     -   判断元素是否使用过的`used`\n2.   递归终止条件：无\n3.   单次递归：\n     -   单次集合加入最终结果\n     -   当`i > 0 && nums[i] == nums[i - 1] && used[i - 1] == false`说明之前已经遍历过，`continue`\n     -   `path`加入下个元素\n     -   `used[i] == true`下个元素标记被使用过\n     -   下一层递归\n     -   反向操作\n\n\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(vector<int> &nums, int index, vector<bool> &used) {\n        result.push_back(path);\n        for (int i = index; i < nums.size(); ++i) {\n            if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {\n                continue;\n            }\n            path.push_back(nums[i]);\n            used[i] = true;\n            backTracking(nums, i + 1, used);\n            path.pop_back();\n            used[i] = false;\n        }\n    }\n\npublic:\n    vector<vector<int>> subsetsWithDup(vector<int> &nums) {\n        sort(nums.begin(), nums.end());\n        vector<bool> used(nums.size(), false);\n        backTracking(nums, 0, used);\n        return result;\n    }\n};\n```\n\n","slug":"day27","published":1,"updated":"2023-10-24T19:35:59.671Z","_id":"clnxk984d0000v4z86fi4cgu5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二十七天-93-复原IP地址、78-子集、90-子集II\"><a href=\"#代码随想录算法训练营第二十七天-93-复原IP地址、78-子集、90-子集II\" class=\"headerlink\" title=\"代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II\"></a>代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II</h1><h2 id=\"93-复原IP地址\"><a href=\"#93-复原IP地址\" class=\"headerlink\" title=\"93.复原IP地址\"></a>93.复原IP地址</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/restore-ip-addresses/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0093.%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1XP4y1U73i/\">回溯算法如何分割字符串并判断是合法IP？| LeetCode：93.复原IP地址</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>因为IP地址有一定的局限性（在0~255范围内），这道题我采用了两种方法，一种直接暴力算法，三重循环。另一种使用回溯。题目中给定字符串<code>s</code>为潜在的IP地址，其长度在[1, 20]。那么他的合法长度在[4, 12]之间，可以先做一些判定。无论是<strong>暴力算法</strong>还是<strong>回溯算法</strong>，查找的均为字符串的分割处。</p>\n<h4 id=\"1-暴力算法\"><a href=\"#1-暴力算法\" class=\"headerlink\" title=\"1. 暴力算法\"></a>1. 暴力算法</h4><p><font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font></p>\n<p><font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font></p>\n<p><font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font></p>\n<ul>\n<li>第一层范围[1, 3]，使用指针<code>i</code><ul>\n<li>分割出字符串<code>s1 = s[0: i]</code>，判断是否有前导0，判断转换成数字<code>n1</code>后是否在[0, 255]之间</li>\n</ul>\n</li>\n<li>第二层范围[<code>i</code>+1, 6]，使用指针<code>j</code><ul>\n<li>分割出字符串<code>s2 = s[i: j]</code>，判断是否有前导0，判断长度是否大于3，判断转换成数字<code>n2</code>后是否在[0, 255]之间</li>\n</ul>\n</li>\n<li>第三层范围[<code>j</code>+1, 9]，使用指针<code>k</code><ul>\n<li>分割出字符串<code>s3 = s[j: k]</code>，判断是否有前导0，判断长度是否大于3，判断转换成数字<code>n3</code>后是否在[0, 255]之间</li>\n<li>分割出字符串<code>s4 = s[k:]</code>，判断是否有前导0，判断长度是否大于3，判断转换成数字<code>n4</code>后是否在[0, 255]之间</li>\n</ul>\n</li>\n</ul>\n<p>均合法，则拼接IP地址<code>n1 + &quot;.&quot; + n2 + &quot;.&quot; + n3 + &quot;.&quot; + n4</code></p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;string&gt; result;<br>    string path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(string s, <span class=\"hljs-type\">int</span> index, <span class=\"hljs-type\">int</span> count)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (count &gt; <span class=\"hljs-number\">3</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getNum</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> num = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;0&quot;</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-string\">&#x27;0&#x27;</span> == <span class=\"hljs-number\">0</span> &amp;&amp; s.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> || s.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> i : s) &#123;<br>            num *= <span class=\"hljs-number\">10</span>;<br>            num += (i - <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> num;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\">vector&lt;string&gt; <span class=\"hljs-title\">restoreIpAddresses</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">4</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> result;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> n1, n2, n3, n4;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">3</span>; ++i) &#123;<br>            n1 = <span class=\"hljs-built_in\">getNum</span>(s.<span class=\"hljs-built_in\">substr</span>(<span class=\"hljs-number\">0</span>, i));<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt;= n1 &amp;&amp; n1 &lt;= <span class=\"hljs-number\">255</span>) &#123;<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt;= <span class=\"hljs-number\">6</span> || j &lt; s.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; ++j) &#123;<br>                    <span class=\"hljs-keyword\">if</span> (j - i &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                        <span class=\"hljs-keyword\">break</span>;<br>                    &#125;<br>                    n2 = <span class=\"hljs-built_in\">getNum</span>(s.<span class=\"hljs-built_in\">substr</span>(i, j - i));<br>                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt;= n2 &amp;&amp; n2 &lt;= <span class=\"hljs-number\">255</span>) &#123;<br>                        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = j + <span class=\"hljs-number\">1</span>; k &lt;= <span class=\"hljs-number\">9</span> || k &lt; s.<span class=\"hljs-built_in\">size</span>(); ++k) &#123;<br>                            <span class=\"hljs-keyword\">if</span> (k - j &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            &#125;<br>                            <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">size</span>() - k &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                                <span class=\"hljs-keyword\">continue</span>;<br>                            &#125;<br>                            n3 = <span class=\"hljs-built_in\">getNum</span>(s.<span class=\"hljs-built_in\">substr</span>(j, k - j));<br>                            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt;= n3 &amp;&amp; n3 &lt;= <span class=\"hljs-number\">255</span>) &#123;<br>                                n4 = <span class=\"hljs-built_in\">getNum</span>(s.<span class=\"hljs-built_in\">substr</span>(k));<br>                                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt;= n4 &amp;&amp; n4 &lt;= <span class=\"hljs-number\">255</span>) &#123;<br>                                    result.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">to_string</span>(n1) + <span class=\"hljs-string\">&quot;.&quot;</span> + <span class=\"hljs-built_in\">to_string</span>(n2) + <span class=\"hljs-string\">&quot;.&quot;</span> + <span class=\"hljs-built_in\">to_string</span>(n3) + <span class=\"hljs-string\">&quot;.&quot;</span> +<br>                                                     <span class=\"hljs-built_in\">to_string</span>(n4));<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p><strong>这代码真是又臭又长啊。</strong></p>\n<h4 id=\"2-回溯算法\"><a href=\"#2-回溯算法\" class=\"headerlink\" title=\"2. 回溯算法\"></a>2. 回溯算法</h4><h5 id=\"递归三部曲\"><a href=\"#递归三部曲\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h5><p><code>vector&lt;string&gt; result</code>存放最终结果</p>\n<p><code>vector&lt;int&gt; path</code>存放待切割的位置</p>\n<ol>\n<li>确立函数和返回值：<ul>\n<li>字符串<code>s</code></li>\n<li>当前位置<code>index</code></li>\n</ul>\n</li>\n<li>递归终止条件：<ul>\n<li>当<code>path</code>长度为3，意味着可以切割四块，开始切割操作，切割后判断合法性，均合法加入<code>result</code>中</li>\n<li>当<code>path</code>长度大于3，<code>return</code></li>\n</ul>\n</li>\n<li>单次递归：<ul>\n<li><code>path</code>添加切割位置</li>\n<li>下一层递归，切割位置加一</li>\n<li>反向操作</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;string&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(string s, <span class=\"hljs-type\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (path.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">3</span>) &#123;<br>            string s1 = s.<span class=\"hljs-built_in\">substr</span>(<span class=\"hljs-number\">0</span>, path[<span class=\"hljs-number\">0</span>]);<br>            <span class=\"hljs-keyword\">if</span> (s1.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            string s2 = s.<span class=\"hljs-built_in\">substr</span>(path[<span class=\"hljs-number\">0</span>], path[<span class=\"hljs-number\">1</span>] - path[<span class=\"hljs-number\">0</span>]);<br>            <span class=\"hljs-keyword\">if</span> (s2.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            string s3 = s.<span class=\"hljs-built_in\">substr</span>(path[<span class=\"hljs-number\">1</span>], path[<span class=\"hljs-number\">2</span>] - path[<span class=\"hljs-number\">1</span>]);<br>            <span class=\"hljs-keyword\">if</span> (s3.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            string s4 = s.<span class=\"hljs-built_in\">substr</span>(path[<span class=\"hljs-number\">2</span>]);<br>            <span class=\"hljs-keyword\">if</span> (s4.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            <span class=\"hljs-type\">int</span> n1 = <span class=\"hljs-built_in\">getNum</span>(s1);<br>            <span class=\"hljs-type\">int</span> n2 = <span class=\"hljs-built_in\">getNum</span>(s2);<br>            <span class=\"hljs-type\">int</span> n3 = <span class=\"hljs-built_in\">getNum</span>(s3);<br>            <span class=\"hljs-type\">int</span> n4 = <span class=\"hljs-built_in\">getNum</span>(s4);<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt;= n1 &amp;&amp; n1 &lt;= <span class=\"hljs-number\">255</span> &amp;&amp;<br>                <span class=\"hljs-number\">0</span> &lt;= n2 &amp;&amp; n2 &lt;= <span class=\"hljs-number\">255</span> &amp;&amp;<br>                <span class=\"hljs-number\">0</span> &lt;= n3 &amp;&amp; n3 &lt;= <span class=\"hljs-number\">255</span> &amp;&amp;<br>                <span class=\"hljs-number\">0</span> &lt;= n4 &amp;&amp; n4 &lt;= <span class=\"hljs-number\">255</span>) &#123;<br>                result.<span class=\"hljs-built_in\">push_back</span>(s1 + <span class=\"hljs-string\">&quot;.&quot;</span> + s2 + <span class=\"hljs-string\">&quot;.&quot;</span> + s3 + <span class=\"hljs-string\">&quot;.&quot;</span> + s4);<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt;= s.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            path.<span class=\"hljs-built_in\">push_back</span>(i);<br>            <span class=\"hljs-built_in\">backTracking</span>(s, i + <span class=\"hljs-number\">1</span>);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getNum</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> num = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;0&quot;</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-string\">&#x27;0&#x27;</span> == <span class=\"hljs-number\">0</span> &amp;&amp; s.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> || s.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> i: s) &#123;<br>            num *= <span class=\"hljs-number\">10</span>;<br>            num += (i - <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> num;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br><br>    <span class=\"hljs-function\">vector&lt;string&gt; <span class=\"hljs-title\">restoreIpAddresses</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">4</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> result;<br>        &#125;<br>        <span class=\"hljs-built_in\">backTracking</span>(s, <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>结构清晰了很多，可读性很好。</p>\n<h2 id=\"78-子集\"><a href=\"#78-子集\" class=\"headerlink\" title=\"78. 子集\"></a>78. 子集</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/subsets/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0078.%E5%AD%90%E9%9B%86.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1U84y1q7Ci\">回溯算法解决子集问题，树上节点都是目标集和！ | LeetCode：78.子集</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>组合问题，这道题的每个元素不重复，做起来很简单，求出所有情况。</p>\n<h4 id=\"递归三部曲-1\"><a href=\"#递归三部曲-1\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><p><code>vector&lt;vector&lt;int&gt;&gt; result</code>存放最终结果</p>\n<p><code>vector&lt;int&gt; path</code>存放单次集合</p>\n<ol>\n<li>确定函数和参数：<ul>\n<li>数组<code>nums</code></li>\n<li>当前位置<code>index</code></li>\n</ul>\n</li>\n<li>确定终止条件：第一层的递归结束（或无）</li>\n<li>单次递归：<ul>\n<li>单次集合加入到最终结果中</li>\n<li>单次集合加入新的元素</li>\n<li>下一层递归</li>\n<li>反向操作</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, <span class=\"hljs-type\">int</span> index)</span> </span>&#123;<br>        result.<span class=\"hljs-built_in\">push_back</span>(path);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            path.<span class=\"hljs-built_in\">push_back</span>(nums[i]);<br>            <span class=\"hljs-built_in\">backTracking</span>(nums, i + <span class=\"hljs-number\">1</span>);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">subsets</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums) &#123;<br>        <span class=\"hljs-built_in\">backTracking</span>(nums, <span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"90-子集II\"><a href=\"#90-子集II\" class=\"headerlink\" title=\"90. 子集II\"></a>90. 子集II</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/subsets-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0090.%E5%AD%90%E9%9B%86II.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1vm4y1F71J/\">回溯算法解决子集问题，如何去重？| LeetCode：90.子集II</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>基本同上一题，但是增加了可重复元素，需要去重。去重在我的博客<a href=\"https://promisewang.github.io/post/36f15375.html#40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII\">40. 组合总和II</a></p>\n<p>这道题做之前要先排序</p>\n<p><code>vector&lt;vector&lt;int&gt;&gt; result</code>：存放最终结果</p>\n<p><code>vector&lt;int&gt; path</code>：存放单次集合</p>\n<h4 id=\"递归三部曲-2\"><a href=\"#递归三部曲-2\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><ol>\n<li>确定函数和参数<ul>\n<li>数组<code>nums</code></li>\n<li>当前索引<code>index</code></li>\n<li>判断元素是否使用过的<code>used</code></li>\n</ul>\n</li>\n<li>递归终止条件：无</li>\n<li>单次递归：<ul>\n<li>单次集合加入最终结果</li>\n<li>当<code>i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false</code>说明之前已经遍历过，<code>continue</code></li>\n<li><code>path</code>加入下个元素</li>\n<li><code>used[i] == true</code>下个元素标记被使用过</li>\n<li>下一层递归</li>\n<li>反向操作</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, <span class=\"hljs-type\">int</span> index, vector&lt;<span class=\"hljs-type\">bool</span>&gt; &amp;used)</span> </span>&#123;<br>        result.<span class=\"hljs-built_in\">push_back</span>(path);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"hljs-number\">1</span>] &amp;&amp; !used[i - <span class=\"hljs-number\">1</span>]) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            path.<span class=\"hljs-built_in\">push_back</span>(nums[i]);<br>            used[i] = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-built_in\">backTracking</span>(nums, i + <span class=\"hljs-number\">1</span>, used);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>            used[i] = <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">subsetsWithDup</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums) &#123;<br>        <span class=\"hljs-built_in\">sort</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">used</span><span class=\"hljs-params\">(nums.size(), <span class=\"hljs-literal\">false</span>)</span></span>;<br>        <span class=\"hljs-built_in\">backTracking</span>(nums, <span class=\"hljs-number\">0</span>, used);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二十七天-93-复原IP地址、78-子集、90-子集II\"><a href=\"#代码随想录算法训练营第二十七天-93-复原IP地址、78-子集、90-子集II\" class=\"headerlink\" title=\"代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II\"></a>代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II</h1><h2 id=\"93-复原IP地址\"><a href=\"#93-复原IP地址\" class=\"headerlink\" title=\"93.复原IP地址\"></a>93.复原IP地址</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/restore-ip-addresses/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0093.%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1XP4y1U73i/\">回溯算法如何分割字符串并判断是合法IP？| LeetCode：93.复原IP地址</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>因为IP地址有一定的局限性（在0~255范围内），这道题我采用了两种方法，一种直接暴力算法，三重循环。另一种使用回溯。题目中给定字符串<code>s</code>为潜在的IP地址，其长度在[1, 20]。那么他的合法长度在[4, 12]之间，可以先做一些判定。无论是<strong>暴力算法</strong>还是<strong>回溯算法</strong>，查找的均为字符串的分割处。</p>\n<h4 id=\"1-暴力算法\"><a href=\"#1-暴力算法\" class=\"headerlink\" title=\"1. 暴力算法\"></a>1. 暴力算法</h4><p><font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font></p>\n<p><font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font></p>\n<p><font color=\"red\">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font></p>\n<ul>\n<li>第一层范围[1, 3]，使用指针<code>i</code><ul>\n<li>分割出字符串<code>s1 = s[0: i]</code>，判断是否有前导0，判断转换成数字<code>n1</code>后是否在[0, 255]之间</li>\n</ul>\n</li>\n<li>第二层范围[<code>i</code>+1, 6]，使用指针<code>j</code><ul>\n<li>分割出字符串<code>s2 = s[i: j]</code>，判断是否有前导0，判断长度是否大于3，判断转换成数字<code>n2</code>后是否在[0, 255]之间</li>\n</ul>\n</li>\n<li>第三层范围[<code>j</code>+1, 9]，使用指针<code>k</code><ul>\n<li>分割出字符串<code>s3 = s[j: k]</code>，判断是否有前导0，判断长度是否大于3，判断转换成数字<code>n3</code>后是否在[0, 255]之间</li>\n<li>分割出字符串<code>s4 = s[k:]</code>，判断是否有前导0，判断长度是否大于3，判断转换成数字<code>n4</code>后是否在[0, 255]之间</li>\n</ul>\n</li>\n</ul>\n<p>均合法，则拼接IP地址<code>n1 + &quot;.&quot; + n2 + &quot;.&quot; + n3 + &quot;.&quot; + n4</code></p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;string&gt; result;<br>    string path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(string s, <span class=\"hljs-type\">int</span> index, <span class=\"hljs-type\">int</span> count)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (count &gt; <span class=\"hljs-number\">3</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getNum</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> num = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;0&quot;</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-string\">&#x27;0&#x27;</span> == <span class=\"hljs-number\">0</span> &amp;&amp; s.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> || s.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> i : s) &#123;<br>            num *= <span class=\"hljs-number\">10</span>;<br>            num += (i - <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> num;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\">vector&lt;string&gt; <span class=\"hljs-title\">restoreIpAddresses</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">4</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> result;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> n1, n2, n3, n4;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">3</span>; ++i) &#123;<br>            n1 = <span class=\"hljs-built_in\">getNum</span>(s.<span class=\"hljs-built_in\">substr</span>(<span class=\"hljs-number\">0</span>, i));<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt;= n1 &amp;&amp; n1 &lt;= <span class=\"hljs-number\">255</span>) &#123;<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt;= <span class=\"hljs-number\">6</span> || j &lt; s.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; ++j) &#123;<br>                    <span class=\"hljs-keyword\">if</span> (j - i &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                        <span class=\"hljs-keyword\">break</span>;<br>                    &#125;<br>                    n2 = <span class=\"hljs-built_in\">getNum</span>(s.<span class=\"hljs-built_in\">substr</span>(i, j - i));<br>                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt;= n2 &amp;&amp; n2 &lt;= <span class=\"hljs-number\">255</span>) &#123;<br>                        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = j + <span class=\"hljs-number\">1</span>; k &lt;= <span class=\"hljs-number\">9</span> || k &lt; s.<span class=\"hljs-built_in\">size</span>(); ++k) &#123;<br>                            <span class=\"hljs-keyword\">if</span> (k - j &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                                <span class=\"hljs-keyword\">break</span>;<br>                            &#125;<br>                            <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">size</span>() - k &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                                <span class=\"hljs-keyword\">continue</span>;<br>                            &#125;<br>                            n3 = <span class=\"hljs-built_in\">getNum</span>(s.<span class=\"hljs-built_in\">substr</span>(j, k - j));<br>                            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt;= n3 &amp;&amp; n3 &lt;= <span class=\"hljs-number\">255</span>) &#123;<br>                                n4 = <span class=\"hljs-built_in\">getNum</span>(s.<span class=\"hljs-built_in\">substr</span>(k));<br>                                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt;= n4 &amp;&amp; n4 &lt;= <span class=\"hljs-number\">255</span>) &#123;<br>                                    result.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">to_string</span>(n1) + <span class=\"hljs-string\">&quot;.&quot;</span> + <span class=\"hljs-built_in\">to_string</span>(n2) + <span class=\"hljs-string\">&quot;.&quot;</span> + <span class=\"hljs-built_in\">to_string</span>(n3) + <span class=\"hljs-string\">&quot;.&quot;</span> +<br>                                                     <span class=\"hljs-built_in\">to_string</span>(n4));<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p><strong>这代码真是又臭又长啊。</strong></p>\n<h4 id=\"2-回溯算法\"><a href=\"#2-回溯算法\" class=\"headerlink\" title=\"2. 回溯算法\"></a>2. 回溯算法</h4><h5 id=\"递归三部曲\"><a href=\"#递归三部曲\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h5><p><code>vector&lt;string&gt; result</code>存放最终结果</p>\n<p><code>vector&lt;int&gt; path</code>存放待切割的位置</p>\n<ol>\n<li>确立函数和返回值：<ul>\n<li>字符串<code>s</code></li>\n<li>当前位置<code>index</code></li>\n</ul>\n</li>\n<li>递归终止条件：<ul>\n<li>当<code>path</code>长度为3，意味着可以切割四块，开始切割操作，切割后判断合法性，均合法加入<code>result</code>中</li>\n<li>当<code>path</code>长度大于3，<code>return</code></li>\n</ul>\n</li>\n<li>单次递归：<ul>\n<li><code>path</code>添加切割位置</li>\n<li>下一层递归，切割位置加一</li>\n<li>反向操作</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;string&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(string s, <span class=\"hljs-type\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (path.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">3</span>) &#123;<br>            string s1 = s.<span class=\"hljs-built_in\">substr</span>(<span class=\"hljs-number\">0</span>, path[<span class=\"hljs-number\">0</span>]);<br>            <span class=\"hljs-keyword\">if</span> (s1.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            string s2 = s.<span class=\"hljs-built_in\">substr</span>(path[<span class=\"hljs-number\">0</span>], path[<span class=\"hljs-number\">1</span>] - path[<span class=\"hljs-number\">0</span>]);<br>            <span class=\"hljs-keyword\">if</span> (s2.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            string s3 = s.<span class=\"hljs-built_in\">substr</span>(path[<span class=\"hljs-number\">1</span>], path[<span class=\"hljs-number\">2</span>] - path[<span class=\"hljs-number\">1</span>]);<br>            <span class=\"hljs-keyword\">if</span> (s3.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            string s4 = s.<span class=\"hljs-built_in\">substr</span>(path[<span class=\"hljs-number\">2</span>]);<br>            <span class=\"hljs-keyword\">if</span> (s4.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">3</span>) &#123;<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            <span class=\"hljs-type\">int</span> n1 = <span class=\"hljs-built_in\">getNum</span>(s1);<br>            <span class=\"hljs-type\">int</span> n2 = <span class=\"hljs-built_in\">getNum</span>(s2);<br>            <span class=\"hljs-type\">int</span> n3 = <span class=\"hljs-built_in\">getNum</span>(s3);<br>            <span class=\"hljs-type\">int</span> n4 = <span class=\"hljs-built_in\">getNum</span>(s4);<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt;= n1 &amp;&amp; n1 &lt;= <span class=\"hljs-number\">255</span> &amp;&amp;<br>                <span class=\"hljs-number\">0</span> &lt;= n2 &amp;&amp; n2 &lt;= <span class=\"hljs-number\">255</span> &amp;&amp;<br>                <span class=\"hljs-number\">0</span> &lt;= n3 &amp;&amp; n3 &lt;= <span class=\"hljs-number\">255</span> &amp;&amp;<br>                <span class=\"hljs-number\">0</span> &lt;= n4 &amp;&amp; n4 &lt;= <span class=\"hljs-number\">255</span>) &#123;<br>                result.<span class=\"hljs-built_in\">push_back</span>(s1 + <span class=\"hljs-string\">&quot;.&quot;</span> + s2 + <span class=\"hljs-string\">&quot;.&quot;</span> + s3 + <span class=\"hljs-string\">&quot;.&quot;</span> + s4);<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt;= s.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            path.<span class=\"hljs-built_in\">push_back</span>(i);<br>            <span class=\"hljs-built_in\">backTracking</span>(s, i + <span class=\"hljs-number\">1</span>);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getNum</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> num = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;0&quot;</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-string\">&#x27;0&#x27;</span> == <span class=\"hljs-number\">0</span> &amp;&amp; s.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> || s.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> i: s) &#123;<br>            num *= <span class=\"hljs-number\">10</span>;<br>            num += (i - <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> num;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br><br>    <span class=\"hljs-function\">vector&lt;string&gt; <span class=\"hljs-title\">restoreIpAddresses</span><span class=\"hljs-params\">(string s)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">4</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> result;<br>        &#125;<br>        <span class=\"hljs-built_in\">backTracking</span>(s, <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>结构清晰了很多，可读性很好。</p>\n<h2 id=\"78-子集\"><a href=\"#78-子集\" class=\"headerlink\" title=\"78. 子集\"></a>78. 子集</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/subsets/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0078.%E5%AD%90%E9%9B%86.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1U84y1q7Ci\">回溯算法解决子集问题，树上节点都是目标集和！ | LeetCode：78.子集</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>组合问题，这道题的每个元素不重复，做起来很简单，求出所有情况。</p>\n<h4 id=\"递归三部曲-1\"><a href=\"#递归三部曲-1\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><p><code>vector&lt;vector&lt;int&gt;&gt; result</code>存放最终结果</p>\n<p><code>vector&lt;int&gt; path</code>存放单次集合</p>\n<ol>\n<li>确定函数和参数：<ul>\n<li>数组<code>nums</code></li>\n<li>当前位置<code>index</code></li>\n</ul>\n</li>\n<li>确定终止条件：第一层的递归结束（或无）</li>\n<li>单次递归：<ul>\n<li>单次集合加入到最终结果中</li>\n<li>单次集合加入新的元素</li>\n<li>下一层递归</li>\n<li>反向操作</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, <span class=\"hljs-type\">int</span> index)</span> </span>&#123;<br>        result.<span class=\"hljs-built_in\">push_back</span>(path);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            path.<span class=\"hljs-built_in\">push_back</span>(nums[i]);<br>            <span class=\"hljs-built_in\">backTracking</span>(nums, i + <span class=\"hljs-number\">1</span>);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">subsets</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums) &#123;<br>        <span class=\"hljs-built_in\">backTracking</span>(nums, <span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"90-子集II\"><a href=\"#90-子集II\" class=\"headerlink\" title=\"90. 子集II\"></a>90. 子集II</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/subsets-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0090.%E5%AD%90%E9%9B%86II.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1vm4y1F71J/\">回溯算法解决子集问题，如何去重？| LeetCode：90.子集II</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>基本同上一题，但是增加了可重复元素，需要去重。去重在我的博客<a href=\"https://promisewang.github.io/post/36f15375.html#40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII\">40. 组合总和II</a></p>\n<p>这道题做之前要先排序</p>\n<p><code>vector&lt;vector&lt;int&gt;&gt; result</code>：存放最终结果</p>\n<p><code>vector&lt;int&gt; path</code>：存放单次集合</p>\n<h4 id=\"递归三部曲-2\"><a href=\"#递归三部曲-2\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><ol>\n<li>确定函数和参数<ul>\n<li>数组<code>nums</code></li>\n<li>当前索引<code>index</code></li>\n<li>判断元素是否使用过的<code>used</code></li>\n</ul>\n</li>\n<li>递归终止条件：无</li>\n<li>单次递归：<ul>\n<li>单次集合加入最终结果</li>\n<li>当<code>i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false</code>说明之前已经遍历过，<code>continue</code></li>\n<li><code>path</code>加入下个元素</li>\n<li><code>used[i] == true</code>下个元素标记被使用过</li>\n<li>下一层递归</li>\n<li>反向操作</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, <span class=\"hljs-type\">int</span> index, vector&lt;<span class=\"hljs-type\">bool</span>&gt; &amp;used)</span> </span>&#123;<br>        result.<span class=\"hljs-built_in\">push_back</span>(path);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"hljs-number\">1</span>] &amp;&amp; !used[i - <span class=\"hljs-number\">1</span>]) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            path.<span class=\"hljs-built_in\">push_back</span>(nums[i]);<br>            used[i] = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-built_in\">backTracking</span>(nums, i + <span class=\"hljs-number\">1</span>, used);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>            used[i] = <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">subsetsWithDup</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums) &#123;<br>        <span class=\"hljs-built_in\">sort</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">used</span><span class=\"hljs-params\">(nums.size(), <span class=\"hljs-literal\">false</span>)</span></span>;<br>        <span class=\"hljs-built_in\">backTracking</span>(nums, <span class=\"hljs-number\">0</span>, used);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II","abbrlink":"70a8aaa7","date":"2023-10-20T15:59:09.000Z","_content":"\n# 代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II\n\n## 491.递增子序列\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/non-decreasing-subsequences/)\n>\n> 文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0491.%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.html)\n>\n> 视频讲解：[回溯算法精讲，树层去重与树枝去重 | LeetCode：491.递增子序列](https://www.bilibili.com/video/BV1EG4y1h78v/)\n>\n> 状态：AC\n\n### 思路\n\n先查找递增子序列，其次要去重。难点还是在于去重。\n\n查找递增时候，每次需要判断当前的`nums[i]`是否大于`path[-1]`。\n\n去重和之前的还不大一样，因为这里不可以进行排序。应该判断每层的情况\n\n![去重图](https://code-thinking-1253855093.file.myqcloud.com/pics/20201124200229824.png)\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(vector<int> &nums, int index) {\n        if (path.size() > 1) {\n            result.push_back(path);\n        }\n        unordered_set<int> sets;\n        for (int i = index; i < nums.size(); ++i) {\n            if ((!path.empty() && path.back() > nums[i]) || sets.find(nums[i]) != sets.end()) {\n                continue;\n            }\n            path.push_back(nums[i]);\n            sets.insert(nums[i]);\n            backTracking(nums, i + 1);\n            path.pop_back();\n        }\n    }\n\npublic:\n    vector<vector<int>> findSubsequences(vector<int> &nums) {\n        backTracking(nums, 0);\n        return result;\n    }\n};\n```\n\n## 46. 全排列\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/permutations/)\n>\n> 文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0046.%E5%85%A8%E6%8E%92%E5%88%97.html)\n>\n> 视频讲解：[组合与排列的区别，回溯算法求解的时候，有何不同？| LeetCode：46.全排列](https://www.bilibili.com/video/BV19v4y1S79W/)\n>\n> 状态：AC\n\n### 思路\n\n#### 递归三部曲\n\n保存使用过的数，这里保存的实际上是该数的位置。用的二进制来节省空间。例如，使用了第0个数，括号里指的是该数为二进制，`used=1(2)`。使用了第0、2个数，那么则是`used=101(2)`，使用了第0、1、3、6个数，`used=1001011(2)`。即使用了第i个数，`used += 1 << i`。判断第i个数是否使用过：`1 >> i & used`\n\n1. 确立函数和返回值\n    - `nums`\n    - `used`，使用二进制保存\n2. 递归终止条件：`path`长度等于 `nums`长度\n3. 单次递归：如果当前的数没被使用过，加入`path`\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(vector<int> &nums, int used) {\n        if (nums.size() == path.size()) {\n            result.push_back(path);\n            return;\n        }\n        for (int i = 0; i < nums.size(); ++i) {\n            if (used >> i & 1) {\n                continue;\n            }\n            path.push_back(nums[i]);\n            used += 1 << i;\n            backTracking(nums, used);\n            path.pop_back();\n            used -= 1 << i;\n        }\n    }\n\npublic:\n    vector<vector<int>> permute(vector<int> &nums) {\n        int used = 0;\n        backTracking(nums, used);\n        return result;\n    }\n};\n```\n\n## 47. 全排列II\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/permutations-ii/)\n>\n> 文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0047.%E5%85%A8%E6%8E%92%E5%88%97II.html)\n>\n> 视频讲解：[回溯算法求解全排列，如何去重？| LeetCode：47.全排列 II](https://www.bilibili.com/video/BV1R84y1i7Tm/)\n>\n> 状态：AC\n\n### 思路\n\n力扣40题[个人博客跳转](https://promisewang.github.io/post/36f15375.html#40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII) + 上一题。used还是使用数组表示。\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(vector<int> &nums, vector<bool> used2) {\n        if (nums.size() == path.size()) {\n            result.push_back(path);\n        }\n        for (int i = 0; i < nums.size(); ++i) {\n\n            if (i > 0 && nums[i - 1] == nums[i] && !used2[i - 1]) {\n                continue;\n            }\n            if (!used2[i]) {\n                used2[i] = true;\n                path.push_back(nums[i]);\n                backTracking(nums, used2);\n                path.pop_back();\n                used2[i] = false;\n            }\n        }\n    }\n\npublic:\n    vector<vector<int>> permuteUnique(vector<int> &nums) {\n        sort(nums.begin(), nums.end());\n        vector<bool> used2(nums.size(), false);\n        backTracking(nums, used2);\n        return result;\n    }\n};\n```\n\n","source":"_posts/day28.md","raw":"---\ntitle: 代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 回溯算法\ncategories: 刷题\nabbrlink: 70a8aaa7\ndate: 2023-10-20 23:59:09\n---\n\n# 代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II\n\n## 491.递增子序列\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/non-decreasing-subsequences/)\n>\n> 文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0491.%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.html)\n>\n> 视频讲解：[回溯算法精讲，树层去重与树枝去重 | LeetCode：491.递增子序列](https://www.bilibili.com/video/BV1EG4y1h78v/)\n>\n> 状态：AC\n\n### 思路\n\n先查找递增子序列，其次要去重。难点还是在于去重。\n\n查找递增时候，每次需要判断当前的`nums[i]`是否大于`path[-1]`。\n\n去重和之前的还不大一样，因为这里不可以进行排序。应该判断每层的情况\n\n![去重图](https://code-thinking-1253855093.file.myqcloud.com/pics/20201124200229824.png)\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(vector<int> &nums, int index) {\n        if (path.size() > 1) {\n            result.push_back(path);\n        }\n        unordered_set<int> sets;\n        for (int i = index; i < nums.size(); ++i) {\n            if ((!path.empty() && path.back() > nums[i]) || sets.find(nums[i]) != sets.end()) {\n                continue;\n            }\n            path.push_back(nums[i]);\n            sets.insert(nums[i]);\n            backTracking(nums, i + 1);\n            path.pop_back();\n        }\n    }\n\npublic:\n    vector<vector<int>> findSubsequences(vector<int> &nums) {\n        backTracking(nums, 0);\n        return result;\n    }\n};\n```\n\n## 46. 全排列\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/permutations/)\n>\n> 文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0046.%E5%85%A8%E6%8E%92%E5%88%97.html)\n>\n> 视频讲解：[组合与排列的区别，回溯算法求解的时候，有何不同？| LeetCode：46.全排列](https://www.bilibili.com/video/BV19v4y1S79W/)\n>\n> 状态：AC\n\n### 思路\n\n#### 递归三部曲\n\n保存使用过的数，这里保存的实际上是该数的位置。用的二进制来节省空间。例如，使用了第0个数，括号里指的是该数为二进制，`used=1(2)`。使用了第0、2个数，那么则是`used=101(2)`，使用了第0、1、3、6个数，`used=1001011(2)`。即使用了第i个数，`used += 1 << i`。判断第i个数是否使用过：`1 >> i & used`\n\n1. 确立函数和返回值\n    - `nums`\n    - `used`，使用二进制保存\n2. 递归终止条件：`path`长度等于 `nums`长度\n3. 单次递归：如果当前的数没被使用过，加入`path`\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(vector<int> &nums, int used) {\n        if (nums.size() == path.size()) {\n            result.push_back(path);\n            return;\n        }\n        for (int i = 0; i < nums.size(); ++i) {\n            if (used >> i & 1) {\n                continue;\n            }\n            path.push_back(nums[i]);\n            used += 1 << i;\n            backTracking(nums, used);\n            path.pop_back();\n            used -= 1 << i;\n        }\n    }\n\npublic:\n    vector<vector<int>> permute(vector<int> &nums) {\n        int used = 0;\n        backTracking(nums, used);\n        return result;\n    }\n};\n```\n\n## 47. 全排列II\n\n> 题目链接：[力扣题目链接](https://leetcode.cn/problems/permutations-ii/)\n>\n> 文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0047.%E5%85%A8%E6%8E%92%E5%88%97II.html)\n>\n> 视频讲解：[回溯算法求解全排列，如何去重？| LeetCode：47.全排列 II](https://www.bilibili.com/video/BV1R84y1i7Tm/)\n>\n> 状态：AC\n\n### 思路\n\n力扣40题[个人博客跳转](https://promisewang.github.io/post/36f15375.html#40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII) + 上一题。used还是使用数组表示。\n\n### 代码\n\n``` c++\nclass Solution {\nprivate:\n    vector<vector<int>> result;\n    vector<int> path;\n\n    void backTracking(vector<int> &nums, vector<bool> used2) {\n        if (nums.size() == path.size()) {\n            result.push_back(path);\n        }\n        for (int i = 0; i < nums.size(); ++i) {\n\n            if (i > 0 && nums[i - 1] == nums[i] && !used2[i - 1]) {\n                continue;\n            }\n            if (!used2[i]) {\n                used2[i] = true;\n                path.push_back(nums[i]);\n                backTracking(nums, used2);\n                path.pop_back();\n                used2[i] = false;\n            }\n        }\n    }\n\npublic:\n    vector<vector<int>> permuteUnique(vector<int> &nums) {\n        sort(nums.begin(), nums.end());\n        vector<bool> used2(nums.size(), false);\n        backTracking(nums, used2);\n        return result;\n    }\n};\n```\n\n","slug":"day28","published":1,"updated":"2023-10-24T19:36:02.732Z","_id":"clnyuudme00008wwhhoi0a742","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二十八天-491-递增子序列、46-全排列、47-全排列II\"><a href=\"#代码随想录算法训练营第二十八天-491-递增子序列、46-全排列、47-全排列II\" class=\"headerlink\" title=\"代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II\"></a>代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II</h1><h2 id=\"491-递增子序列\"><a href=\"#491-递增子序列\" class=\"headerlink\" title=\"491.递增子序列\"></a>491.递增子序列</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/non-decreasing-subsequences/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0491.%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1EG4y1h78v/\">回溯算法精讲，树层去重与树枝去重 | LeetCode：491.递增子序列</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>先查找递增子序列，其次要去重。难点还是在于去重。</p>\n<p>查找递增时候，每次需要判断当前的<code>nums[i]</code>是否大于<code>path[-1]</code>。</p>\n<p>去重和之前的还不大一样，因为这里不可以进行排序。应该判断每层的情况</p>\n<p><img src=\"https://code-thinking-1253855093.file.myqcloud.com/pics/20201124200229824.png\" alt=\"去重图\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, <span class=\"hljs-type\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (path.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span>) &#123;<br>            result.<span class=\"hljs-built_in\">push_back</span>(path);<br>        &#125;<br>        unordered_set&lt;<span class=\"hljs-type\">int</span>&gt; sets;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> ((!path.<span class=\"hljs-built_in\">empty</span>() &amp;&amp; path.<span class=\"hljs-built_in\">back</span>() &gt; nums[i]) || sets.<span class=\"hljs-built_in\">find</span>(nums[i]) != sets.<span class=\"hljs-built_in\">end</span>()) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            path.<span class=\"hljs-built_in\">push_back</span>(nums[i]);<br>            sets.<span class=\"hljs-built_in\">insert</span>(nums[i]);<br>            <span class=\"hljs-built_in\">backTracking</span>(nums, i + <span class=\"hljs-number\">1</span>);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">findSubsequences</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums) &#123;<br>        <span class=\"hljs-built_in\">backTracking</span>(nums, <span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"46-全排列\"><a href=\"#46-全排列\" class=\"headerlink\" title=\"46. 全排列\"></a>46. 全排列</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/permutations/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0046.%E5%85%A8%E6%8E%92%E5%88%97.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV19v4y1S79W/\">组合与排列的区别，回溯算法求解的时候，有何不同？| LeetCode：46.全排列</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"递归三部曲\"><a href=\"#递归三部曲\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><p>保存使用过的数，这里保存的实际上是该数的位置。用的二进制来节省空间。例如，使用了第0个数，括号里指的是该数为二进制，<code>used=1(2)</code>。使用了第0、2个数，那么则是<code>used=101(2)</code>，使用了第0、1、3、6个数，<code>used=1001011(2)</code>。即使用了第i个数，<code>used += 1 &lt;&lt; i</code>。判断第i个数是否使用过：<code>1 &gt;&gt; i &amp; used</code></p>\n<ol>\n<li>确立函数和返回值<ul>\n<li><code>nums</code></li>\n<li><code>used</code>，使用二进制保存</li>\n</ul>\n</li>\n<li>递归终止条件：<code>path</code>长度等于 <code>nums</code>长度</li>\n<li>单次递归：如果当前的数没被使用过，加入<code>path</code></li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, <span class=\"hljs-type\">int</span> used)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() == path.<span class=\"hljs-built_in\">size</span>()) &#123;<br>            result.<span class=\"hljs-built_in\">push_back</span>(path);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (used &gt;&gt; i &amp; <span class=\"hljs-number\">1</span>) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            path.<span class=\"hljs-built_in\">push_back</span>(nums[i]);<br>            used += <span class=\"hljs-number\">1</span> &lt;&lt; i;<br>            <span class=\"hljs-built_in\">backTracking</span>(nums, used);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>            used -= <span class=\"hljs-number\">1</span> &lt;&lt; i;<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">permute</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums) &#123;<br>        <span class=\"hljs-type\">int</span> used = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">backTracking</span>(nums, used);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"47-全排列II\"><a href=\"#47-全排列II\" class=\"headerlink\" title=\"47. 全排列II\"></a>47. 全排列II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/permutations-ii/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0047.%E5%85%A8%E6%8E%92%E5%88%97II.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1R84y1i7Tm/\">回溯算法求解全排列，如何去重？| LeetCode：47.全排列 II</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>力扣40题<a href=\"https://promisewang.github.io/post/36f15375.html#40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII\">个人博客跳转</a> + 上一题。used还是使用数组表示。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, vector&lt;<span class=\"hljs-type\">bool</span>&gt; used2)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() == path.<span class=\"hljs-built_in\">size</span>()) &#123;<br>            result.<span class=\"hljs-built_in\">push_back</span>(path);<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br><br>            <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i - <span class=\"hljs-number\">1</span>] == nums[i] &amp;&amp; !used2[i - <span class=\"hljs-number\">1</span>]) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (!used2[i]) &#123;<br>                used2[i] = <span class=\"hljs-literal\">true</span>;<br>                path.<span class=\"hljs-built_in\">push_back</span>(nums[i]);<br>                <span class=\"hljs-built_in\">backTracking</span>(nums, used2);<br>                path.<span class=\"hljs-built_in\">pop_back</span>();<br>                used2[i] = <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">permuteUnique</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums) &#123;<br>        <span class=\"hljs-built_in\">sort</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">used2</span><span class=\"hljs-params\">(nums.size(), <span class=\"hljs-literal\">false</span>)</span></span>;<br>        <span class=\"hljs-built_in\">backTracking</span>(nums, used2);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二十八天-491-递增子序列、46-全排列、47-全排列II\"><a href=\"#代码随想录算法训练营第二十八天-491-递增子序列、46-全排列、47-全排列II\" class=\"headerlink\" title=\"代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II\"></a>代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II</h1><h2 id=\"491-递增子序列\"><a href=\"#491-递增子序列\" class=\"headerlink\" title=\"491.递增子序列\"></a>491.递增子序列</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/non-decreasing-subsequences/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0491.%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1EG4y1h78v/\">回溯算法精讲，树层去重与树枝去重 | LeetCode：491.递增子序列</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>先查找递增子序列，其次要去重。难点还是在于去重。</p>\n<p>查找递增时候，每次需要判断当前的<code>nums[i]</code>是否大于<code>path[-1]</code>。</p>\n<p>去重和之前的还不大一样，因为这里不可以进行排序。应该判断每层的情况</p>\n<p><img src=\"https://code-thinking-1253855093.file.myqcloud.com/pics/20201124200229824.png\" alt=\"去重图\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, <span class=\"hljs-type\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (path.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span>) &#123;<br>            result.<span class=\"hljs-built_in\">push_back</span>(path);<br>        &#125;<br>        unordered_set&lt;<span class=\"hljs-type\">int</span>&gt; sets;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = index; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> ((!path.<span class=\"hljs-built_in\">empty</span>() &amp;&amp; path.<span class=\"hljs-built_in\">back</span>() &gt; nums[i]) || sets.<span class=\"hljs-built_in\">find</span>(nums[i]) != sets.<span class=\"hljs-built_in\">end</span>()) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            path.<span class=\"hljs-built_in\">push_back</span>(nums[i]);<br>            sets.<span class=\"hljs-built_in\">insert</span>(nums[i]);<br>            <span class=\"hljs-built_in\">backTracking</span>(nums, i + <span class=\"hljs-number\">1</span>);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">findSubsequences</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums) &#123;<br>        <span class=\"hljs-built_in\">backTracking</span>(nums, <span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"46-全排列\"><a href=\"#46-全排列\" class=\"headerlink\" title=\"46. 全排列\"></a>46. 全排列</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/permutations/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0046.%E5%85%A8%E6%8E%92%E5%88%97.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV19v4y1S79W/\">组合与排列的区别，回溯算法求解的时候，有何不同？| LeetCode：46.全排列</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"递归三部曲\"><a href=\"#递归三部曲\" class=\"headerlink\" title=\"递归三部曲\"></a>递归三部曲</h4><p>保存使用过的数，这里保存的实际上是该数的位置。用的二进制来节省空间。例如，使用了第0个数，括号里指的是该数为二进制，<code>used=1(2)</code>。使用了第0、2个数，那么则是<code>used=101(2)</code>，使用了第0、1、3、6个数，<code>used=1001011(2)</code>。即使用了第i个数，<code>used += 1 &lt;&lt; i</code>。判断第i个数是否使用过：<code>1 &gt;&gt; i &amp; used</code></p>\n<ol>\n<li>确立函数和返回值<ul>\n<li><code>nums</code></li>\n<li><code>used</code>，使用二进制保存</li>\n</ul>\n</li>\n<li>递归终止条件：<code>path</code>长度等于 <code>nums</code>长度</li>\n<li>单次递归：如果当前的数没被使用过，加入<code>path</code></li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, <span class=\"hljs-type\">int</span> used)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() == path.<span class=\"hljs-built_in\">size</span>()) &#123;<br>            result.<span class=\"hljs-built_in\">push_back</span>(path);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (used &gt;&gt; i &amp; <span class=\"hljs-number\">1</span>) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            path.<span class=\"hljs-built_in\">push_back</span>(nums[i]);<br>            used += <span class=\"hljs-number\">1</span> &lt;&lt; i;<br>            <span class=\"hljs-built_in\">backTracking</span>(nums, used);<br>            path.<span class=\"hljs-built_in\">pop_back</span>();<br>            used -= <span class=\"hljs-number\">1</span> &lt;&lt; i;<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">permute</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums) &#123;<br>        <span class=\"hljs-type\">int</span> used = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">backTracking</span>(nums, used);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"47-全排列II\"><a href=\"#47-全排列II\" class=\"headerlink\" title=\"47. 全排列II\"></a>47. 全排列II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/permutations-ii/\">力扣题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0047.%E5%85%A8%E6%8E%92%E5%88%97II.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1R84y1i7Tm/\">回溯算法求解全排列，如何去重？| LeetCode：47.全排列 II</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>力扣40题<a href=\"https://promisewang.github.io/post/36f15375.html#40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII\">个人博客跳转</a> + 上一题。used还是使用数组表示。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; path;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backTracking</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, vector&lt;<span class=\"hljs-type\">bool</span>&gt; used2)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() == path.<span class=\"hljs-built_in\">size</span>()) &#123;<br>            result.<span class=\"hljs-built_in\">push_back</span>(path);<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br><br>            <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[i - <span class=\"hljs-number\">1</span>] == nums[i] &amp;&amp; !used2[i - <span class=\"hljs-number\">1</span>]) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (!used2[i]) &#123;<br>                used2[i] = <span class=\"hljs-literal\">true</span>;<br>                path.<span class=\"hljs-built_in\">push_back</span>(nums[i]);<br>                <span class=\"hljs-built_in\">backTracking</span>(nums, used2);<br>                path.<span class=\"hljs-built_in\">pop_back</span>();<br>                used2[i] = <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">permuteUnique</span>(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums) &#123;<br>        <span class=\"hljs-built_in\">sort</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">used2</span><span class=\"hljs-params\">(nums.size(), <span class=\"hljs-literal\">false</span>)</span></span>;<br>        <span class=\"hljs-built_in\">backTracking</span>(nums, used2);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"【debug】记一次失败的爬虫经历","date":"2023-10-24T16:46:14.416Z","abbrlink":"94786f20","_content":"\n# 【debug】记一次失败的爬虫经历\n\n\n\n今天我的室友需要在一个网站上批量下载一些数据，但是他并不会代码，我尝试帮他处理一下\n\nURL:`http://dc2.cistrome.org/#/`\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/网页截图.png\" alt=\"网页截图\" style=\"zoom:67%;\" />\n\n网站上需要点击这些选项，`Factors`需要每个点击，可能有些因素并没有数据。\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/网页截图2.png\" alt=\"网页截图2\" style=\"zoom:67%;\" />\n\n先选中第一行，然后才会出现下方的`Inspector`部分，再点击`Putative Targets`进入下载页面\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/下载页面.png\" alt=\"下载页面\" style=\"zoom:80%;\" />\n\n下载页面输入验证码点击下载即可。\n\n## 1. 分析、抓包\n\n抓包使用了Fiddler这个软件。设置好URL进行筛选\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/Fildder1.png\" alt=\"Fildder1\" style=\"zoom:80%;\" />\n\n先正常的操作一遍，让Fiddler记录这个过程。\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n依次查看每一行：\n\n-   19\\~21：选择第一张图的一些条件，一共要选三次，出现了三条数据，分析其中参数很简单。需要查找factors的列表\n-   22：加载第二张图的Inspector部分，需要查找id\n-   23：在第二张图最下面还有一部分，我没有截出来，这里是获取到一张图片\n-   24：向URL请求，此处的URL里面都是冒号，返回的是301，重定向将冒号替换为`%3A`的URL编码\n-   26：重定向，返回的是验证码的那个页面\n-   27：请求验证码的图片\n-   28：提交验证码\n-   29：下载链接（返回txt文件）\n\n## 2. 获取每个部分的关键数据\n\n### 导入相关的包\n\n``` python\nimport json\nimport time\n\nimport requests\nfrom bs4 import BeautifulSoup\n```\n\n### 获取每个factors\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/获取factors.png\" alt=\"image-20231025010850092\" style=\"zoom:50%;\" />\n\n根据上面分析，使用第20行的URL即可得到所有的factors，然后替换其中的`factors=all`，将`all`替换为每一个`factors`即可。\n\n``` python\nurl1 = \"http://dc2.cistrome.org/api/main_filter_ng?allqc=false&cellinfos=ti_Breast&completed=false&curated=false&factors=all&keyword=&page=1&peakqc=false&run=false&species=Homo+sapiens\"  # 21行URL\n\nheaders = {\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n    \"Accept-Encoding\": \"gzip, deflate\",\n    \"Origin\": \"http://dc2.cistrome.org\",\n    \"Accept-Language\": \"zh-Hans-CN,zh-Hans;q=0.8,en-US;q=0.5,en;q=0.3\",\n    \"Host\": \"dc2.cistrome.org\",\n    \"User-Agent\": \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Tablet PC 2.0; wbx 1.0.0; wbxapp 1.0.0; Zoom 3.6.0)\",\n}\n\nsession = requests.session()\n\nresponse = session.get(url, headers=headers)\njson_list = response.json()[\"factors\"]\n```\n\n\n\n## 3. 获取inspector中的id值\n\n为了方便书写，就以第一个factors作为演示\n\n\n\n继续刚刚请求，将新的`factors`替换，查看response的结果\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/获取id.png\" alt=\"获取id\" style=\"zoom:67%;\" />\n\n有可能Inspector中会出现多栏，经过查阅后去第1个id就好\n\n``` python\nurl2 = f\"http://dc2.cistrome.org/api/main_filter_ng?allqc=false&cellinfos=ti_Breast&completed=false&curated=false&factors=AHO1&keyword=&page=1&peakqc=false&run=false&species=Homo+sapiens\"\nresponse = session.get(url2, headers=headers)\nid = response.json()[\"datasets\"][0][\"id\"]\n```\n\n## 4. 跳转至验证码页面\n\n根据Fiddler中的URL显示：`http://dc2.cistrome.org/api/downloads/eyJpZCI6IjQ4NjEwIn0%3A1qvKhR%3AxwR7aSlYncCHoao44VSfL3o22igp`\n\n需要查看最后面一串字符是什么或从哪里来。我们查看22行的请求\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/哪个表达基因.png\" alt=\"哪个表达基因\" style=\"zoom:67%;\" />\n\n进入22行的请求发现就是`sign`这一项，并且将冒号替换为`%3A`即可。\n\n``` python\ndownload_url = f\"http://dc2.cistrome.org/api/inspector?id={id}\"\nresponse_url = session.get(download_url, headers=headers)\nsign = response_url.json()[\"sign\"]\nsign = sign.replace(\":\", \"%3A\")\n```\n\n## 5. 输入验证码\n\n这一步之前，发送了两个请求，一个是获取HTML，一个是获取验证码。分析27行的数据，能发现最后与刚刚的`sign`值完全不同，查看27行最后一串是什么。\n\n分析获取到的HTML，能看到如下内容\n\n![分析HTML](../images/【debug】记一次失败的爬虫经历/分析HTML.png)\n\n红色是为27行的URL最后的部分，绿色则是要提交的表单，将验证码下载到本地手动数据数据再提交上去。\n\n``` python\nsoup = BeautifulSoup(response.content, \"html.parser\")\nimg_tag = soup.find(\"img\")[\"src\"]\nimg_id = img_tag.split(\"/\")[-2]\nimg_url = \"http://dc2.cistrome.org\" + img_tag\nimage = session.get(img_url, headers=headers)\nwith open(\"test.png\", \"wb\") as f:\n    f.write(image.content)\n    captcha = int(input(\"输入test.png的验证码\"))\n    data = {\n        \"csrfmiddlewaretoken\": session.cookies[\"csrftoken\"],\n        \"captcha_0\": img_id,\n        \"captcha_1\": captcha\n    }\n```\n\n## 6. 问题出现\n\n分析28行请求\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n![POST](../images/【debug】记一次失败的爬虫经历/POST.png)\n\n看起来只需要POST以下三个数据就好，之后再`get`29行操作，但是始终拿不到正确的数据\n\n``` python\nresponse = session.post(url=download_url, headers=headers, data=data)\ndownload = session.get(f\"http://dc2.cistrome.org/api/files/{sign}/\", headers=headers)\nwith open(\"test.txt\", \"w\") as file:\n    file.write(download.text)\n```\n\n![Wrong](../images/【debug】记一次失败的爬虫经历/Wrong.png)\n\n无论如何都是错误的参数，看了好多次都没有找到哪里请求有问题。\n\n尝试改了`session.post(data)`参数，改成`json`也不对。改了`data`中的`captcha_1`的类型也不对。传输字符串的形式也不对`session.post(data=f\"csrfmiddlewaretoken={session.cookies['csrftoken']}&captcha_0={img_id}&captcha_1={captcha}\")`。\n\n但是我在网页先进行输入验证码操作，拿到可以下载的“权限”之后，再去fiddler中模拟29行get请求却可以正常下载。想了好久也没找到什么好的办法。\n\n## 7. 验证码其他的失败的想法\n\n1.   最开始认为验证码如果人为输入会比较慢，应该让AI去识别，识别到字符串之后使用python中的`eval()`语句获得到结果。后来测试两个发现识别的非常不准。因为运算符不是常规角度，有可能会被识别为字母。最后放弃了这个方法。\n2.   `captcha_0`和`captcha_1`这两个参数一个是验证码的`id`，应该为后台数据库存储的名字，一个是计算结果。尝试了始终使用一组正确的不断的请求骗过服务器验证。还是因为卡在了上一步始终为参数错误，再过了一会就显示`Time Out!`。我觉得如果参数正确可以尝试一下这个方法。\n3.   尝试SQL注入，使用语句`' or 1=1 --`还是失败。\n","source":"_posts/【Dubug】记一次失败的爬虫经历.md","raw":"---\ntitle: 【debug】记一次失败的爬虫经历\ndate: '2023-10-25 00:45:35 - Debug - Python - 爬虫 - Fiddler'\ncategories: Debug\nabbrlink: 94786f20\n---\n\n# 【debug】记一次失败的爬虫经历\n\n\n\n今天我的室友需要在一个网站上批量下载一些数据，但是他并不会代码，我尝试帮他处理一下\n\nURL:`http://dc2.cistrome.org/#/`\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/网页截图.png\" alt=\"网页截图\" style=\"zoom:67%;\" />\n\n网站上需要点击这些选项，`Factors`需要每个点击，可能有些因素并没有数据。\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/网页截图2.png\" alt=\"网页截图2\" style=\"zoom:67%;\" />\n\n先选中第一行，然后才会出现下方的`Inspector`部分，再点击`Putative Targets`进入下载页面\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/下载页面.png\" alt=\"下载页面\" style=\"zoom:80%;\" />\n\n下载页面输入验证码点击下载即可。\n\n## 1. 分析、抓包\n\n抓包使用了Fiddler这个软件。设置好URL进行筛选\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/Fildder1.png\" alt=\"Fildder1\" style=\"zoom:80%;\" />\n\n先正常的操作一遍，让Fiddler记录这个过程。\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n依次查看每一行：\n\n-   19\\~21：选择第一张图的一些条件，一共要选三次，出现了三条数据，分析其中参数很简单。需要查找factors的列表\n-   22：加载第二张图的Inspector部分，需要查找id\n-   23：在第二张图最下面还有一部分，我没有截出来，这里是获取到一张图片\n-   24：向URL请求，此处的URL里面都是冒号，返回的是301，重定向将冒号替换为`%3A`的URL编码\n-   26：重定向，返回的是验证码的那个页面\n-   27：请求验证码的图片\n-   28：提交验证码\n-   29：下载链接（返回txt文件）\n\n## 2. 获取每个部分的关键数据\n\n### 导入相关的包\n\n``` python\nimport json\nimport time\n\nimport requests\nfrom bs4 import BeautifulSoup\n```\n\n### 获取每个factors\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/获取factors.png\" alt=\"image-20231025010850092\" style=\"zoom:50%;\" />\n\n根据上面分析，使用第20行的URL即可得到所有的factors，然后替换其中的`factors=all`，将`all`替换为每一个`factors`即可。\n\n``` python\nurl1 = \"http://dc2.cistrome.org/api/main_filter_ng?allqc=false&cellinfos=ti_Breast&completed=false&curated=false&factors=all&keyword=&page=1&peakqc=false&run=false&species=Homo+sapiens\"  # 21行URL\n\nheaders = {\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n    \"Accept-Encoding\": \"gzip, deflate\",\n    \"Origin\": \"http://dc2.cistrome.org\",\n    \"Accept-Language\": \"zh-Hans-CN,zh-Hans;q=0.8,en-US;q=0.5,en;q=0.3\",\n    \"Host\": \"dc2.cistrome.org\",\n    \"User-Agent\": \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Tablet PC 2.0; wbx 1.0.0; wbxapp 1.0.0; Zoom 3.6.0)\",\n}\n\nsession = requests.session()\n\nresponse = session.get(url, headers=headers)\njson_list = response.json()[\"factors\"]\n```\n\n\n\n## 3. 获取inspector中的id值\n\n为了方便书写，就以第一个factors作为演示\n\n\n\n继续刚刚请求，将新的`factors`替换，查看response的结果\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/获取id.png\" alt=\"获取id\" style=\"zoom:67%;\" />\n\n有可能Inspector中会出现多栏，经过查阅后去第1个id就好\n\n``` python\nurl2 = f\"http://dc2.cistrome.org/api/main_filter_ng?allqc=false&cellinfos=ti_Breast&completed=false&curated=false&factors=AHO1&keyword=&page=1&peakqc=false&run=false&species=Homo+sapiens\"\nresponse = session.get(url2, headers=headers)\nid = response.json()[\"datasets\"][0][\"id\"]\n```\n\n## 4. 跳转至验证码页面\n\n根据Fiddler中的URL显示：`http://dc2.cistrome.org/api/downloads/eyJpZCI6IjQ4NjEwIn0%3A1qvKhR%3AxwR7aSlYncCHoao44VSfL3o22igp`\n\n需要查看最后面一串字符是什么或从哪里来。我们查看22行的请求\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/哪个表达基因.png\" alt=\"哪个表达基因\" style=\"zoom:67%;\" />\n\n进入22行的请求发现就是`sign`这一项，并且将冒号替换为`%3A`即可。\n\n``` python\ndownload_url = f\"http://dc2.cistrome.org/api/inspector?id={id}\"\nresponse_url = session.get(download_url, headers=headers)\nsign = response_url.json()[\"sign\"]\nsign = sign.replace(\":\", \"%3A\")\n```\n\n## 5. 输入验证码\n\n这一步之前，发送了两个请求，一个是获取HTML，一个是获取验证码。分析27行的数据，能发现最后与刚刚的`sign`值完全不同，查看27行最后一串是什么。\n\n分析获取到的HTML，能看到如下内容\n\n![分析HTML](../images/【debug】记一次失败的爬虫经历/分析HTML.png)\n\n红色是为27行的URL最后的部分，绿色则是要提交的表单，将验证码下载到本地手动数据数据再提交上去。\n\n``` python\nsoup = BeautifulSoup(response.content, \"html.parser\")\nimg_tag = soup.find(\"img\")[\"src\"]\nimg_id = img_tag.split(\"/\")[-2]\nimg_url = \"http://dc2.cistrome.org\" + img_tag\nimage = session.get(img_url, headers=headers)\nwith open(\"test.png\", \"wb\") as f:\n    f.write(image.content)\n    captcha = int(input(\"输入test.png的验证码\"))\n    data = {\n        \"csrfmiddlewaretoken\": session.cookies[\"csrftoken\"],\n        \"captcha_0\": img_id,\n        \"captcha_1\": captcha\n    }\n```\n\n## 6. 问题出现\n\n分析28行请求\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n![POST](../images/【debug】记一次失败的爬虫经历/POST.png)\n\n看起来只需要POST以下三个数据就好，之后再`get`29行操作，但是始终拿不到正确的数据\n\n``` python\nresponse = session.post(url=download_url, headers=headers, data=data)\ndownload = session.get(f\"http://dc2.cistrome.org/api/files/{sign}/\", headers=headers)\nwith open(\"test.txt\", \"w\") as file:\n    file.write(download.text)\n```\n\n![Wrong](../images/【debug】记一次失败的爬虫经历/Wrong.png)\n\n无论如何都是错误的参数，看了好多次都没有找到哪里请求有问题。\n\n尝试改了`session.post(data)`参数，改成`json`也不对。改了`data`中的`captcha_1`的类型也不对。传输字符串的形式也不对`session.post(data=f\"csrfmiddlewaretoken={session.cookies['csrftoken']}&captcha_0={img_id}&captcha_1={captcha}\")`。\n\n但是我在网页先进行输入验证码操作，拿到可以下载的“权限”之后，再去fiddler中模拟29行get请求却可以正常下载。想了好久也没找到什么好的办法。\n\n## 7. 验证码其他的失败的想法\n\n1.   最开始认为验证码如果人为输入会比较慢，应该让AI去识别，识别到字符串之后使用python中的`eval()`语句获得到结果。后来测试两个发现识别的非常不准。因为运算符不是常规角度，有可能会被识别为字母。最后放弃了这个方法。\n2.   `captcha_0`和`captcha_1`这两个参数一个是验证码的`id`，应该为后台数据库存储的名字，一个是计算结果。尝试了始终使用一组正确的不断的请求骗过服务器验证。还是因为卡在了上一步始终为参数错误，再过了一会就显示`Time Out!`。我觉得如果参数正确可以尝试一下这个方法。\n3.   尝试SQL注入，使用语句`' or 1=1 --`还是失败。\n","slug":"【Dubug】记一次失败的爬虫经历","published":1,"updated":"2023-10-24T17:43:21.142Z","_id":"clo4m6k3d0001swz8ah7gcw60","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【debug】记一次失败的爬虫经历\"><a href=\"#【debug】记一次失败的爬虫经历\" class=\"headerlink\" title=\"【debug】记一次失败的爬虫经历\"></a>【debug】记一次失败的爬虫经历</h1><p>今天我的室友需要在一个网站上批量下载一些数据，但是他并不会代码，我尝试帮他处理一下</p>\n<p>URL:<code>http://dc2.cistrome.org/#/</code></p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/网页截图.png\" alt=\"网页截图\" style=\"zoom:67%;\" />\n\n<p>网站上需要点击这些选项，<code>Factors</code>需要每个点击，可能有些因素并没有数据。</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/网页截图2.png\" alt=\"网页截图2\" style=\"zoom:67%;\" />\n\n<p>先选中第一行，然后才会出现下方的<code>Inspector</code>部分，再点击<code>Putative Targets</code>进入下载页面</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/下载页面.png\" alt=\"下载页面\" style=\"zoom:80%;\" />\n\n<p>下载页面输入验证码点击下载即可。</p>\n<h2 id=\"1-分析、抓包\"><a href=\"#1-分析、抓包\" class=\"headerlink\" title=\"1. 分析、抓包\"></a>1. 分析、抓包</h2><p>抓包使用了Fiddler这个软件。设置好URL进行筛选</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/Fildder1.png\" alt=\"Fildder1\" style=\"zoom:80%;\" />\n\n<p>先正常的操作一遍，让Fiddler记录这个过程。</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n<p>依次查看每一行：</p>\n<ul>\n<li>19~21：选择第一张图的一些条件，一共要选三次，出现了三条数据，分析其中参数很简单。需要查找factors的列表</li>\n<li>22：加载第二张图的Inspector部分，需要查找id</li>\n<li>23：在第二张图最下面还有一部分，我没有截出来，这里是获取到一张图片</li>\n<li>24：向URL请求，此处的URL里面都是冒号，返回的是301，重定向将冒号替换为<code>%3A</code>的URL编码</li>\n<li>26：重定向，返回的是验证码的那个页面</li>\n<li>27：请求验证码的图片</li>\n<li>28：提交验证码</li>\n<li>29：下载链接（返回txt文件）</li>\n</ul>\n<h2 id=\"2-获取每个部分的关键数据\"><a href=\"#2-获取每个部分的关键数据\" class=\"headerlink\" title=\"2. 获取每个部分的关键数据\"></a>2. 获取每个部分的关键数据</h2><h3 id=\"导入相关的包\"><a href=\"#导入相关的包\" class=\"headerlink\" title=\"导入相关的包\"></a>导入相关的包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取每个factors\"><a href=\"#获取每个factors\" class=\"headerlink\" title=\"获取每个factors\"></a>获取每个factors</h3><img src=\"../images/【debug】记一次失败的爬虫经历/获取factors.png\" alt=\"image-20231025010850092\" style=\"zoom:50%;\" />\n\n<p>根据上面分析，使用第20行的URL即可得到所有的factors，然后替换其中的<code>factors=all</code>，将<code>all</code>替换为每一个<code>factors</code>即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">url1 = <span class=\"hljs-string\">&quot;http://dc2.cistrome.org/api/main_filter_ng?allqc=false&amp;cellinfos=ti_Breast&amp;completed=false&amp;curated=false&amp;factors=all&amp;keyword=&amp;page=1&amp;peakqc=false&amp;run=false&amp;species=Homo+sapiens&quot;</span>  <span class=\"hljs-comment\"># 21行URL</span><br><br>headers = &#123;<br>    <span class=\"hljs-string\">&quot;Accept&quot;</span>: <span class=\"hljs-string\">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;</span>,<br>    <span class=\"hljs-string\">&quot;Accept-Encoding&quot;</span>: <span class=\"hljs-string\">&quot;gzip, deflate&quot;</span>,<br>    <span class=\"hljs-string\">&quot;Origin&quot;</span>: <span class=\"hljs-string\">&quot;http://dc2.cistrome.org&quot;</span>,<br>    <span class=\"hljs-string\">&quot;Accept-Language&quot;</span>: <span class=\"hljs-string\">&quot;zh-Hans-CN,zh-Hans;q=0.8,en-US;q=0.5,en;q=0.3&quot;</span>,<br>    <span class=\"hljs-string\">&quot;Host&quot;</span>: <span class=\"hljs-string\">&quot;dc2.cistrome.org&quot;</span>,<br>    <span class=\"hljs-string\">&quot;User-Agent&quot;</span>: <span class=\"hljs-string\">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Tablet PC 2.0; wbx 1.0.0; wbxapp 1.0.0; Zoom 3.6.0)&quot;</span>,<br>&#125;<br><br>session = requests.session()<br><br>response = session.get(url, headers=headers)<br>json_list = response.json()[<span class=\"hljs-string\">&quot;factors&quot;</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-获取inspector中的id值\"><a href=\"#3-获取inspector中的id值\" class=\"headerlink\" title=\"3. 获取inspector中的id值\"></a>3. 获取inspector中的id值</h2><p>为了方便书写，就以第一个factors作为演示</p>\n<p>继续刚刚请求，将新的<code>factors</code>替换，查看response的结果</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/获取id.png\" alt=\"获取id\" style=\"zoom:67%;\" />\n\n<p>有可能Inspector中会出现多栏，经过查阅后去第1个id就好</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">url2 = <span class=\"hljs-string\">f&quot;http://dc2.cistrome.org/api/main_filter_ng?allqc=false&amp;cellinfos=ti_Breast&amp;completed=false&amp;curated=false&amp;factors=AHO1&amp;keyword=&amp;page=1&amp;peakqc=false&amp;run=false&amp;species=Homo+sapiens&quot;</span><br>response = session.get(url2, headers=headers)<br><span class=\"hljs-built_in\">id</span> = response.json()[<span class=\"hljs-string\">&quot;datasets&quot;</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&quot;id&quot;</span>]<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-跳转至验证码页面\"><a href=\"#4-跳转至验证码页面\" class=\"headerlink\" title=\"4. 跳转至验证码页面\"></a>4. 跳转至验证码页面</h2><p>根据Fiddler中的URL显示：<code>http://dc2.cistrome.org/api/downloads/eyJpZCI6IjQ4NjEwIn0%3A1qvKhR%3AxwR7aSlYncCHoao44VSfL3o22igp</code></p>\n<p>需要查看最后面一串字符是什么或从哪里来。我们查看22行的请求</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/哪个表达基因.png\" alt=\"哪个表达基因\" style=\"zoom:67%;\" />\n\n<p>进入22行的请求发现就是<code>sign</code>这一项，并且将冒号替换为<code>%3A</code>即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">download_url = <span class=\"hljs-string\">f&quot;http://dc2.cistrome.org/api/inspector?id=<span class=\"hljs-subst\">&#123;<span class=\"hljs-built_in\">id</span>&#125;</span>&quot;</span><br>response_url = session.get(download_url, headers=headers)<br>sign = response_url.json()[<span class=\"hljs-string\">&quot;sign&quot;</span>]<br>sign = sign.replace(<span class=\"hljs-string\">&quot;:&quot;</span>, <span class=\"hljs-string\">&quot;%3A&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-输入验证码\"><a href=\"#5-输入验证码\" class=\"headerlink\" title=\"5. 输入验证码\"></a>5. 输入验证码</h2><p>这一步之前，发送了两个请求，一个是获取HTML，一个是获取验证码。分析27行的数据，能发现最后与刚刚的<code>sign</code>值完全不同，查看27行最后一串是什么。</p>\n<p>分析获取到的HTML，能看到如下内容</p>\n<p><img src=\"/../images/%E3%80%90debug%E3%80%91%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86/%E5%88%86%E6%9E%90HTML.png\" alt=\"分析HTML\"></p>\n<p>红色是为27行的URL最后的部分，绿色则是要提交的表单，将验证码下载到本地手动数据数据再提交上去。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">soup = BeautifulSoup(response.content, <span class=\"hljs-string\">&quot;html.parser&quot;</span>)<br>img_tag = soup.find(<span class=\"hljs-string\">&quot;img&quot;</span>)[<span class=\"hljs-string\">&quot;src&quot;</span>]<br>img_id = img_tag.split(<span class=\"hljs-string\">&quot;/&quot;</span>)[-<span class=\"hljs-number\">2</span>]<br>img_url = <span class=\"hljs-string\">&quot;http://dc2.cistrome.org&quot;</span> + img_tag<br>image = session.get(img_url, headers=headers)<br><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;test.png&quot;</span>, <span class=\"hljs-string\">&quot;wb&quot;</span>) <span class=\"hljs-keyword\">as</span> f:<br>    f.write(image.content)<br>    captcha = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;输入test.png的验证码&quot;</span>))<br>    data = &#123;<br>        <span class=\"hljs-string\">&quot;csrfmiddlewaretoken&quot;</span>: session.cookies[<span class=\"hljs-string\">&quot;csrftoken&quot;</span>],<br>        <span class=\"hljs-string\">&quot;captcha_0&quot;</span>: img_id,<br>        <span class=\"hljs-string\">&quot;captcha_1&quot;</span>: captcha<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-问题出现\"><a href=\"#6-问题出现\" class=\"headerlink\" title=\"6. 问题出现\"></a>6. 问题出现</h2><p>分析28行请求</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n<p><img src=\"/../images/%E3%80%90debug%E3%80%91%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86/POST.png\" alt=\"POST\"></p>\n<p>看起来只需要POST以下三个数据就好，之后再<code>get</code>29行操作，但是始终拿不到正确的数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">response = session.post(url=download_url, headers=headers, data=data)<br>download = session.get(<span class=\"hljs-string\">f&quot;http://dc2.cistrome.org/api/files/<span class=\"hljs-subst\">&#123;sign&#125;</span>/&quot;</span>, headers=headers)<br><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;test.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> file:<br>    file.write(download.text)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/%E3%80%90debug%E3%80%91%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86/Wrong.png\" alt=\"Wrong\"></p>\n<p>无论如何都是错误的参数，看了好多次都没有找到哪里请求有问题。</p>\n<p>尝试改了<code>session.post(data)</code>参数，改成<code>json</code>也不对。改了<code>data</code>中的<code>captcha_1</code>的类型也不对。传输字符串的形式也不对<code>session.post(data=f&quot;csrfmiddlewaretoken=&#123;session.cookies[&#39;csrftoken&#39;]&#125;&amp;captcha_0=&#123;img_id&#125;&amp;captcha_1=&#123;captcha&#125;&quot;)</code>。</p>\n<p>但是我在网页先进行输入验证码操作，拿到可以下载的“权限”之后，再去fiddler中模拟29行get请求却可以正常下载。想了好久也没找到什么好的办法。</p>\n<h2 id=\"7-验证码其他的失败的想法\"><a href=\"#7-验证码其他的失败的想法\" class=\"headerlink\" title=\"7. 验证码其他的失败的想法\"></a>7. 验证码其他的失败的想法</h2><ol>\n<li>最开始认为验证码如果人为输入会比较慢，应该让AI去识别，识别到字符串之后使用python中的<code>eval()</code>语句获得到结果。后来测试两个发现识别的非常不准。因为运算符不是常规角度，有可能会被识别为字母。最后放弃了这个方法。</li>\n<li><code>captcha_0</code>和<code>captcha_1</code>这两个参数一个是验证码的<code>id</code>，应该为后台数据库存储的名字，一个是计算结果。尝试了始终使用一组正确的不断的请求骗过服务器验证。还是因为卡在了上一步始终为参数错误，再过了一会就显示<code>Time Out!</code>。我觉得如果参数正确可以尝试一下这个方法。</li>\n<li>尝试SQL注入，使用语句<code>&#39; or 1=1 --</code>还是失败。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【debug】记一次失败的爬虫经历\"><a href=\"#【debug】记一次失败的爬虫经历\" class=\"headerlink\" title=\"【debug】记一次失败的爬虫经历\"></a>【debug】记一次失败的爬虫经历</h1><p>今天我的室友需要在一个网站上批量下载一些数据，但是他并不会代码，我尝试帮他处理一下</p>\n<p>URL:<code>http://dc2.cistrome.org/#/</code></p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/网页截图.png\" alt=\"网页截图\" style=\"zoom:67%;\" />\n\n<p>网站上需要点击这些选项，<code>Factors</code>需要每个点击，可能有些因素并没有数据。</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/网页截图2.png\" alt=\"网页截图2\" style=\"zoom:67%;\" />\n\n<p>先选中第一行，然后才会出现下方的<code>Inspector</code>部分，再点击<code>Putative Targets</code>进入下载页面</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/下载页面.png\" alt=\"下载页面\" style=\"zoom:80%;\" />\n\n<p>下载页面输入验证码点击下载即可。</p>\n<h2 id=\"1-分析、抓包\"><a href=\"#1-分析、抓包\" class=\"headerlink\" title=\"1. 分析、抓包\"></a>1. 分析、抓包</h2><p>抓包使用了Fiddler这个软件。设置好URL进行筛选</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/Fildder1.png\" alt=\"Fildder1\" style=\"zoom:80%;\" />\n\n<p>先正常的操作一遍，让Fiddler记录这个过程。</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n<p>依次查看每一行：</p>\n<ul>\n<li>19~21：选择第一张图的一些条件，一共要选三次，出现了三条数据，分析其中参数很简单。需要查找factors的列表</li>\n<li>22：加载第二张图的Inspector部分，需要查找id</li>\n<li>23：在第二张图最下面还有一部分，我没有截出来，这里是获取到一张图片</li>\n<li>24：向URL请求，此处的URL里面都是冒号，返回的是301，重定向将冒号替换为<code>%3A</code>的URL编码</li>\n<li>26：重定向，返回的是验证码的那个页面</li>\n<li>27：请求验证码的图片</li>\n<li>28：提交验证码</li>\n<li>29：下载链接（返回txt文件）</li>\n</ul>\n<h2 id=\"2-获取每个部分的关键数据\"><a href=\"#2-获取每个部分的关键数据\" class=\"headerlink\" title=\"2. 获取每个部分的关键数据\"></a>2. 获取每个部分的关键数据</h2><h3 id=\"导入相关的包\"><a href=\"#导入相关的包\" class=\"headerlink\" title=\"导入相关的包\"></a>导入相关的包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取每个factors\"><a href=\"#获取每个factors\" class=\"headerlink\" title=\"获取每个factors\"></a>获取每个factors</h3><img src=\"../images/【debug】记一次失败的爬虫经历/获取factors.png\" alt=\"image-20231025010850092\" style=\"zoom:50%;\" />\n\n<p>根据上面分析，使用第20行的URL即可得到所有的factors，然后替换其中的<code>factors=all</code>，将<code>all</code>替换为每一个<code>factors</code>即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">url1 = <span class=\"hljs-string\">&quot;http://dc2.cistrome.org/api/main_filter_ng?allqc=false&amp;cellinfos=ti_Breast&amp;completed=false&amp;curated=false&amp;factors=all&amp;keyword=&amp;page=1&amp;peakqc=false&amp;run=false&amp;species=Homo+sapiens&quot;</span>  <span class=\"hljs-comment\"># 21行URL</span><br><br>headers = &#123;<br>    <span class=\"hljs-string\">&quot;Accept&quot;</span>: <span class=\"hljs-string\">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;</span>,<br>    <span class=\"hljs-string\">&quot;Accept-Encoding&quot;</span>: <span class=\"hljs-string\">&quot;gzip, deflate&quot;</span>,<br>    <span class=\"hljs-string\">&quot;Origin&quot;</span>: <span class=\"hljs-string\">&quot;http://dc2.cistrome.org&quot;</span>,<br>    <span class=\"hljs-string\">&quot;Accept-Language&quot;</span>: <span class=\"hljs-string\">&quot;zh-Hans-CN,zh-Hans;q=0.8,en-US;q=0.5,en;q=0.3&quot;</span>,<br>    <span class=\"hljs-string\">&quot;Host&quot;</span>: <span class=\"hljs-string\">&quot;dc2.cistrome.org&quot;</span>,<br>    <span class=\"hljs-string\">&quot;User-Agent&quot;</span>: <span class=\"hljs-string\">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Tablet PC 2.0; wbx 1.0.0; wbxapp 1.0.0; Zoom 3.6.0)&quot;</span>,<br>&#125;<br><br>session = requests.session()<br><br>response = session.get(url, headers=headers)<br>json_list = response.json()[<span class=\"hljs-string\">&quot;factors&quot;</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-获取inspector中的id值\"><a href=\"#3-获取inspector中的id值\" class=\"headerlink\" title=\"3. 获取inspector中的id值\"></a>3. 获取inspector中的id值</h2><p>为了方便书写，就以第一个factors作为演示</p>\n<p>继续刚刚请求，将新的<code>factors</code>替换，查看response的结果</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/获取id.png\" alt=\"获取id\" style=\"zoom:67%;\" />\n\n<p>有可能Inspector中会出现多栏，经过查阅后去第1个id就好</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">url2 = <span class=\"hljs-string\">f&quot;http://dc2.cistrome.org/api/main_filter_ng?allqc=false&amp;cellinfos=ti_Breast&amp;completed=false&amp;curated=false&amp;factors=AHO1&amp;keyword=&amp;page=1&amp;peakqc=false&amp;run=false&amp;species=Homo+sapiens&quot;</span><br>response = session.get(url2, headers=headers)<br><span class=\"hljs-built_in\">id</span> = response.json()[<span class=\"hljs-string\">&quot;datasets&quot;</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&quot;id&quot;</span>]<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-跳转至验证码页面\"><a href=\"#4-跳转至验证码页面\" class=\"headerlink\" title=\"4. 跳转至验证码页面\"></a>4. 跳转至验证码页面</h2><p>根据Fiddler中的URL显示：<code>http://dc2.cistrome.org/api/downloads/eyJpZCI6IjQ4NjEwIn0%3A1qvKhR%3AxwR7aSlYncCHoao44VSfL3o22igp</code></p>\n<p>需要查看最后面一串字符是什么或从哪里来。我们查看22行的请求</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n<img src=\"../images/【debug】记一次失败的爬虫经历/哪个表达基因.png\" alt=\"哪个表达基因\" style=\"zoom:67%;\" />\n\n<p>进入22行的请求发现就是<code>sign</code>这一项，并且将冒号替换为<code>%3A</code>即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">download_url = <span class=\"hljs-string\">f&quot;http://dc2.cistrome.org/api/inspector?id=<span class=\"hljs-subst\">&#123;<span class=\"hljs-built_in\">id</span>&#125;</span>&quot;</span><br>response_url = session.get(download_url, headers=headers)<br>sign = response_url.json()[<span class=\"hljs-string\">&quot;sign&quot;</span>]<br>sign = sign.replace(<span class=\"hljs-string\">&quot;:&quot;</span>, <span class=\"hljs-string\">&quot;%3A&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-输入验证码\"><a href=\"#5-输入验证码\" class=\"headerlink\" title=\"5. 输入验证码\"></a>5. 输入验证码</h2><p>这一步之前，发送了两个请求，一个是获取HTML，一个是获取验证码。分析27行的数据，能发现最后与刚刚的<code>sign</code>值完全不同，查看27行最后一串是什么。</p>\n<p>分析获取到的HTML，能看到如下内容</p>\n<p><img src=\"/../images/%E3%80%90debug%E3%80%91%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86/%E5%88%86%E6%9E%90HTML.png\" alt=\"分析HTML\"></p>\n<p>红色是为27行的URL最后的部分，绿色则是要提交的表单，将验证码下载到本地手动数据数据再提交上去。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">soup = BeautifulSoup(response.content, <span class=\"hljs-string\">&quot;html.parser&quot;</span>)<br>img_tag = soup.find(<span class=\"hljs-string\">&quot;img&quot;</span>)[<span class=\"hljs-string\">&quot;src&quot;</span>]<br>img_id = img_tag.split(<span class=\"hljs-string\">&quot;/&quot;</span>)[-<span class=\"hljs-number\">2</span>]<br>img_url = <span class=\"hljs-string\">&quot;http://dc2.cistrome.org&quot;</span> + img_tag<br>image = session.get(img_url, headers=headers)<br><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;test.png&quot;</span>, <span class=\"hljs-string\">&quot;wb&quot;</span>) <span class=\"hljs-keyword\">as</span> f:<br>    f.write(image.content)<br>    captcha = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;输入test.png的验证码&quot;</span>))<br>    data = &#123;<br>        <span class=\"hljs-string\">&quot;csrfmiddlewaretoken&quot;</span>: session.cookies[<span class=\"hljs-string\">&quot;csrftoken&quot;</span>],<br>        <span class=\"hljs-string\">&quot;captcha_0&quot;</span>: img_id,<br>        <span class=\"hljs-string\">&quot;captcha_1&quot;</span>: captcha<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-问题出现\"><a href=\"#6-问题出现\" class=\"headerlink\" title=\"6. 问题出现\"></a>6. 问题出现</h2><p>分析28行请求</p>\n<img src=\"../images/【debug】记一次失败的爬虫经历/正常操作抓包.png\" alt=\"正常操作抓包\" style=\"zoom:67%;\" />\n\n<p><img src=\"/../images/%E3%80%90debug%E3%80%91%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86/POST.png\" alt=\"POST\"></p>\n<p>看起来只需要POST以下三个数据就好，之后再<code>get</code>29行操作，但是始终拿不到正确的数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">response = session.post(url=download_url, headers=headers, data=data)<br>download = session.get(<span class=\"hljs-string\">f&quot;http://dc2.cistrome.org/api/files/<span class=\"hljs-subst\">&#123;sign&#125;</span>/&quot;</span>, headers=headers)<br><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;test.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> file:<br>    file.write(download.text)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/%E3%80%90debug%E3%80%91%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86/Wrong.png\" alt=\"Wrong\"></p>\n<p>无论如何都是错误的参数，看了好多次都没有找到哪里请求有问题。</p>\n<p>尝试改了<code>session.post(data)</code>参数，改成<code>json</code>也不对。改了<code>data</code>中的<code>captcha_1</code>的类型也不对。传输字符串的形式也不对<code>session.post(data=f&quot;csrfmiddlewaretoken=&#123;session.cookies[&#39;csrftoken&#39;]&#125;&amp;captcha_0=&#123;img_id&#125;&amp;captcha_1=&#123;captcha&#125;&quot;)</code>。</p>\n<p>但是我在网页先进行输入验证码操作，拿到可以下载的“权限”之后，再去fiddler中模拟29行get请求却可以正常下载。想了好久也没找到什么好的办法。</p>\n<h2 id=\"7-验证码其他的失败的想法\"><a href=\"#7-验证码其他的失败的想法\" class=\"headerlink\" title=\"7. 验证码其他的失败的想法\"></a>7. 验证码其他的失败的想法</h2><ol>\n<li>最开始认为验证码如果人为输入会比较慢，应该让AI去识别，识别到字符串之后使用python中的<code>eval()</code>语句获得到结果。后来测试两个发现识别的非常不准。因为运算符不是常规角度，有可能会被识别为字母。最后放弃了这个方法。</li>\n<li><code>captcha_0</code>和<code>captcha_1</code>这两个参数一个是验证码的<code>id</code>，应该为后台数据库存储的名字，一个是计算结果。尝试了始终使用一组正确的不断的请求骗过服务器验证。还是因为卡在了上一步始终为参数错误，再过了一会就显示<code>Time Out!</code>。我觉得如果参数正确可以尝试一下这个方法。</li>\n<li>尝试SQL注入，使用语句<code>&#39; or 1=1 --</code>还是失败。</li>\n</ol>\n"},{"title":"代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和","abbrlink":"5aa98f1b","date":"2023-10-24T19:12:41.000Z","_content":"\n# 代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和\n\n## 455. 分发饼干\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/assign-cookies/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0455.%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2.html)\n>\n>   视频讲解：[贪心算法，你想先喂哪个小孩？| LeetCode：455.分发饼干](https://www.bilibili.com/video/BV1MM411b7cq)\n>\n>   状态：AC\n\n### 思路\n\n先将两个数组进行排序。先遍历胃口`g`，再遍历`s`，如果`g[i] <= s[j]`时，那么可以将`s[j]`喂给`g[i]`，记录此时`s`的位置放到`index`，下次`s`从`index`开始循环。\n\n#### 贪心思路\n\n充分利用饼干喂饱当前的孩子。\n\n### 代码\n\n``` c++\nclass Solution {\npublic:\n    int findContentChildren(vector<int> &g, vector<int> &s) {\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end());\n        int index = 0;\n        if (s.empty()) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 0; i < g.size() && index < s.size(); ++i) {\n            for (int j = index; j < s.size(); ++j) {\n                if (s[j] >= g[i]) {\n                    index = j + 1;\n                    count++;\n                    break;\n                }\n            }\n        }\n        return count;\n    }\n};\n```\n\n看了题解之后发现从后向前遍历写起来更简单一些，而且只需要一层循环即可。\n\n## 376.摆动序列\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/wiggle-subsequence/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html)\n>\n>   视频讲解：[贪心算法，寻找摆动有细节！| LeetCode：376.摆动序列](https://www.bilibili.com/video/BV17M411b7NS)\n>\n>   状态：无\n\n### 思路\n\n<font color=\"red\">错误：这道题一直想的只是当前位置和前后数字进行比较，如果高于或低于旁边的两个数字判定为摆动。但是并没有思考到上一次的振幅改变不在旁边的情况，所以不能只和身边的两个数进行比较</font>\n\n定义两个差：当前差`cur`和上次的差`pre`。上次差意味着出现了连续递增或递减，比较两次差是否摆动\n\n#### 贪心思路\n\n递增或递减时贪最远的情况\n\n### 代码\n\n``` c++\nclass Solution {\npublic:\n    int wiggleMaxLength(vector<int> &nums) {\n        if (nums.size() < 2) {\n            return nums.size();\n        }\n        int cur = 0;\n        int pre = 0;\n        int count = 1;\n        for (int i = 0; i < nums.size() - 1; ++i) {\n            cur = nums[i + 1] - nums[i];\n            if ((pre <= 0 && cur > 0) || (pre >= 0 && cur < 0)) {\n                count++;\n                pre = cur;\n            }\n        }\n        return count;\n    }\n};\n```\n\n## 53.最大子数组和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/maximum-subarray/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0053.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.html)\n>\n>   视频讲解：[贪心算法的巧妙需要慢慢体会！LeetCode：53. 最大子序和](https://www.bilibili.com/video/BV1aY4y1Z7ya)\n>\n>   状态：AC\n\n### 思路\n\n贪心算法没太想懂，使用动态规划还是很简单的。\n\n#### 动态规划：\n\n定义`dp`数组，`dp[i]`代表前`i`个元素最大和，如果前n项和小于0，重新开始，否则累加。`dp[i] = max(dp[i-1] + nums[i], nums[i])`\n\n#### 代码\n\n``` c++\nclass Solution {\npublic:\n    int maxSubArray(vector<int> &nums) {\n        if (nums.size() < 2) {\n            return nums[0];\n        }\n        vector<int> dp(nums.size(), 0);\n        dp[0] = nums[0];\n        int maxSum = dp[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            dp[i] = max(dp[i - 1] + nums[i], nums[i]);\n            if (dp[i] > maxSum) {\n                maxSum = dp[i];\n            }\n        }\n        return maxSum;\n    }\n};\n```\n\n#### 贪心算法\n\n看了卡哥的讲解：如果连续和小于0，那么重新开始（因为负数相加会越来越小）。否则继续累加。\n\n``` c++\nclass Solution {\npublic:\n    int maxSubArray(vector<int> &nums) {\n        if (nums.size() < 2) {\n            return nums[0];\n        }\n        int sum = 0;\n        int max = INT32_MIN;\n        for (int i = 0; i < nums.size(); ++i) {\n            sum += nums[i];\n            if (sum > max) {\n                max = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return max;\n    }\n};\n```\n\n","source":"_posts/day31.md","raw":"---\ntitle: 代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 贪心算法\ncategories: 刷题\nabbrlink: 5aa98f1b\ndate: 2023-10-25 03:12:41\n---\n\n# 代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和\n\n## 455. 分发饼干\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/assign-cookies/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0455.%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2.html)\n>\n>   视频讲解：[贪心算法，你想先喂哪个小孩？| LeetCode：455.分发饼干](https://www.bilibili.com/video/BV1MM411b7cq)\n>\n>   状态：AC\n\n### 思路\n\n先将两个数组进行排序。先遍历胃口`g`，再遍历`s`，如果`g[i] <= s[j]`时，那么可以将`s[j]`喂给`g[i]`，记录此时`s`的位置放到`index`，下次`s`从`index`开始循环。\n\n#### 贪心思路\n\n充分利用饼干喂饱当前的孩子。\n\n### 代码\n\n``` c++\nclass Solution {\npublic:\n    int findContentChildren(vector<int> &g, vector<int> &s) {\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end());\n        int index = 0;\n        if (s.empty()) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 0; i < g.size() && index < s.size(); ++i) {\n            for (int j = index; j < s.size(); ++j) {\n                if (s[j] >= g[i]) {\n                    index = j + 1;\n                    count++;\n                    break;\n                }\n            }\n        }\n        return count;\n    }\n};\n```\n\n看了题解之后发现从后向前遍历写起来更简单一些，而且只需要一层循环即可。\n\n## 376.摆动序列\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/wiggle-subsequence/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html)\n>\n>   视频讲解：[贪心算法，寻找摆动有细节！| LeetCode：376.摆动序列](https://www.bilibili.com/video/BV17M411b7NS)\n>\n>   状态：无\n\n### 思路\n\n<font color=\"red\">错误：这道题一直想的只是当前位置和前后数字进行比较，如果高于或低于旁边的两个数字判定为摆动。但是并没有思考到上一次的振幅改变不在旁边的情况，所以不能只和身边的两个数进行比较</font>\n\n定义两个差：当前差`cur`和上次的差`pre`。上次差意味着出现了连续递增或递减，比较两次差是否摆动\n\n#### 贪心思路\n\n递增或递减时贪最远的情况\n\n### 代码\n\n``` c++\nclass Solution {\npublic:\n    int wiggleMaxLength(vector<int> &nums) {\n        if (nums.size() < 2) {\n            return nums.size();\n        }\n        int cur = 0;\n        int pre = 0;\n        int count = 1;\n        for (int i = 0; i < nums.size() - 1; ++i) {\n            cur = nums[i + 1] - nums[i];\n            if ((pre <= 0 && cur > 0) || (pre >= 0 && cur < 0)) {\n                count++;\n                pre = cur;\n            }\n        }\n        return count;\n    }\n};\n```\n\n## 53.最大子数组和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/maximum-subarray/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0053.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.html)\n>\n>   视频讲解：[贪心算法的巧妙需要慢慢体会！LeetCode：53. 最大子序和](https://www.bilibili.com/video/BV1aY4y1Z7ya)\n>\n>   状态：AC\n\n### 思路\n\n贪心算法没太想懂，使用动态规划还是很简单的。\n\n#### 动态规划：\n\n定义`dp`数组，`dp[i]`代表前`i`个元素最大和，如果前n项和小于0，重新开始，否则累加。`dp[i] = max(dp[i-1] + nums[i], nums[i])`\n\n#### 代码\n\n``` c++\nclass Solution {\npublic:\n    int maxSubArray(vector<int> &nums) {\n        if (nums.size() < 2) {\n            return nums[0];\n        }\n        vector<int> dp(nums.size(), 0);\n        dp[0] = nums[0];\n        int maxSum = dp[0];\n        for (int i = 1; i < nums.size(); ++i) {\n            dp[i] = max(dp[i - 1] + nums[i], nums[i]);\n            if (dp[i] > maxSum) {\n                maxSum = dp[i];\n            }\n        }\n        return maxSum;\n    }\n};\n```\n\n#### 贪心算法\n\n看了卡哥的讲解：如果连续和小于0，那么重新开始（因为负数相加会越来越小）。否则继续累加。\n\n``` c++\nclass Solution {\npublic:\n    int maxSubArray(vector<int> &nums) {\n        if (nums.size() < 2) {\n            return nums[0];\n        }\n        int sum = 0;\n        int max = INT32_MIN;\n        for (int i = 0; i < nums.size(); ++i) {\n            sum += nums[i];\n            if (sum > max) {\n                max = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return max;\n    }\n};\n```\n\n","slug":"day31","published":1,"updated":"2023-10-24T19:47:08.269Z","_id":"clo4qi78k000l1cz8awixge04","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第三十一天-455-分发饼干、376-摆动序列、53-最大子数组和\"><a href=\"#代码随想录算法训练营第三十一天-455-分发饼干、376-摆动序列、53-最大子数组和\" class=\"headerlink\" title=\"代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和\"></a>代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和</h1><h2 id=\"455-分发饼干\"><a href=\"#455-分发饼干\" class=\"headerlink\" title=\"455. 分发饼干\"></a>455. 分发饼干</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/assign-cookies/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0455.%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1MM411b7cq\">贪心算法，你想先喂哪个小孩？| LeetCode：455.分发饼干</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>先将两个数组进行排序。先遍历胃口<code>g</code>，再遍历<code>s</code>，如果<code>g[i] &lt;= s[j]</code>时，那么可以将<code>s[j]</code>喂给<code>g[i]</code>，记录此时<code>s</code>的位置放到<code>index</code>，下次<code>s</code>从<code>index</code>开始循环。</p>\n<h4 id=\"贪心思路\"><a href=\"#贪心思路\" class=\"headerlink\" title=\"贪心思路\"></a>贪心思路</h4><p>充分利用饼干喂饱当前的孩子。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findContentChildren</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;g, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;s)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">sort</span>(g.<span class=\"hljs-built_in\">begin</span>(), g.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-built_in\">sort</span>(s.<span class=\"hljs-built_in\">begin</span>(), s.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">empty</span>()) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; g.<span class=\"hljs-built_in\">size</span>() &amp;&amp; index &lt; s.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = index; j &lt; s.<span class=\"hljs-built_in\">size</span>(); ++j) &#123;<br>                <span class=\"hljs-keyword\">if</span> (s[j] &gt;= g[i]) &#123;<br>                    index = j + <span class=\"hljs-number\">1</span>;<br>                    count++;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>看了题解之后发现从后向前遍历写起来更简单一些，而且只需要一层循环即可。</p>\n<h2 id=\"376-摆动序列\"><a href=\"#376-摆动序列\" class=\"headerlink\" title=\"376.摆动序列\"></a>376.摆动序列</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/wiggle-subsequence/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV17M411b7NS\">贪心算法，寻找摆动有细节！| LeetCode：376.摆动序列</a></p>\n<p>  状态：无</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><font color=\"red\">错误：这道题一直想的只是当前位置和前后数字进行比较，如果高于或低于旁边的两个数字判定为摆动。但是并没有思考到上一次的振幅改变不在旁边的情况，所以不能只和身边的两个数进行比较</font></p>\n<p>定义两个差：当前差<code>cur</code>和上次的差<code>pre</code>。上次差意味着出现了连续递增或递减，比较两次差是否摆动</p>\n<h4 id=\"贪心思路-1\"><a href=\"#贪心思路-1\" class=\"headerlink\" title=\"贪心思路\"></a>贪心思路</h4><p>递增或递减时贪最远的情况</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">wiggleMaxLength</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> nums.<span class=\"hljs-built_in\">size</span>();<br>        &#125;<br>        <span class=\"hljs-type\">int</span> cur = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> pre = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; ++i) &#123;<br>            cur = nums[i + <span class=\"hljs-number\">1</span>] - nums[i];<br>            <span class=\"hljs-keyword\">if</span> ((pre &lt;= <span class=\"hljs-number\">0</span> &amp;&amp; cur &gt; <span class=\"hljs-number\">0</span>) || (pre &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; cur &lt; <span class=\"hljs-number\">0</span>)) &#123;<br>                count++;<br>                pre = cur;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"53-最大子数组和\"><a href=\"#53-最大子数组和\" class=\"headerlink\" title=\"53.最大子数组和\"></a>53.最大子数组和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/maximum-subarray/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0053.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1aY4y1Z7ya\">贪心算法的巧妙需要慢慢体会！LeetCode：53. 最大子序和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>贪心算法没太想懂，使用动态规划还是很简单的。</p>\n<h4 id=\"动态规划：\"><a href=\"#动态规划：\" class=\"headerlink\" title=\"动态规划：\"></a>动态规划：</h4><p>定义<code>dp</code>数组，<code>dp[i]</code>代表前<code>i</code>个元素最大和，如果前n项和小于0，重新开始，否则累加。<code>dp[i] = max(dp[i-1] + nums[i], nums[i])</code></p>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxSubArray</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> nums[<span class=\"hljs-number\">0</span>];<br>        &#125;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(nums.size(), <span class=\"hljs-number\">0</span>)</span></span>;<br>        dp[<span class=\"hljs-number\">0</span>] = nums[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-type\">int</span> maxSum = dp[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            dp[i] = <span class=\"hljs-built_in\">max</span>(dp[i - <span class=\"hljs-number\">1</span>] + nums[i], nums[i]);<br>            <span class=\"hljs-keyword\">if</span> (dp[i] &gt; maxSum) &#123;<br>                maxSum = dp[i];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> maxSum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><p>看了卡哥的讲解：如果连续和小于0，那么重新开始（因为负数相加会越来越小）。否则继续累加。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxSubArray</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> nums[<span class=\"hljs-number\">0</span>];<br>        &#125;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> max = INT32_MIN;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            sum += nums[i];<br>            <span class=\"hljs-keyword\">if</span> (sum &gt; max) &#123;<br>                max = sum;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (sum &lt; <span class=\"hljs-number\">0</span>) &#123;<br>                sum = <span class=\"hljs-number\">0</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> max;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第三十一天-455-分发饼干、376-摆动序列、53-最大子数组和\"><a href=\"#代码随想录算法训练营第三十一天-455-分发饼干、376-摆动序列、53-最大子数组和\" class=\"headerlink\" title=\"代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和\"></a>代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和</h1><h2 id=\"455-分发饼干\"><a href=\"#455-分发饼干\" class=\"headerlink\" title=\"455. 分发饼干\"></a>455. 分发饼干</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/assign-cookies/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0455.%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1MM411b7cq\">贪心算法，你想先喂哪个小孩？| LeetCode：455.分发饼干</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>先将两个数组进行排序。先遍历胃口<code>g</code>，再遍历<code>s</code>，如果<code>g[i] &lt;= s[j]</code>时，那么可以将<code>s[j]</code>喂给<code>g[i]</code>，记录此时<code>s</code>的位置放到<code>index</code>，下次<code>s</code>从<code>index</code>开始循环。</p>\n<h4 id=\"贪心思路\"><a href=\"#贪心思路\" class=\"headerlink\" title=\"贪心思路\"></a>贪心思路</h4><p>充分利用饼干喂饱当前的孩子。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findContentChildren</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;g, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;s)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">sort</span>(g.<span class=\"hljs-built_in\">begin</span>(), g.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-built_in\">sort</span>(s.<span class=\"hljs-built_in\">begin</span>(), s.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-built_in\">empty</span>()) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; g.<span class=\"hljs-built_in\">size</span>() &amp;&amp; index &lt; s.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = index; j &lt; s.<span class=\"hljs-built_in\">size</span>(); ++j) &#123;<br>                <span class=\"hljs-keyword\">if</span> (s[j] &gt;= g[i]) &#123;<br>                    index = j + <span class=\"hljs-number\">1</span>;<br>                    count++;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>看了题解之后发现从后向前遍历写起来更简单一些，而且只需要一层循环即可。</p>\n<h2 id=\"376-摆动序列\"><a href=\"#376-摆动序列\" class=\"headerlink\" title=\"376.摆动序列\"></a>376.摆动序列</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/wiggle-subsequence/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV17M411b7NS\">贪心算法，寻找摆动有细节！| LeetCode：376.摆动序列</a></p>\n<p>  状态：无</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><font color=\"red\">错误：这道题一直想的只是当前位置和前后数字进行比较，如果高于或低于旁边的两个数字判定为摆动。但是并没有思考到上一次的振幅改变不在旁边的情况，所以不能只和身边的两个数进行比较</font></p>\n<p>定义两个差：当前差<code>cur</code>和上次的差<code>pre</code>。上次差意味着出现了连续递增或递减，比较两次差是否摆动</p>\n<h4 id=\"贪心思路-1\"><a href=\"#贪心思路-1\" class=\"headerlink\" title=\"贪心思路\"></a>贪心思路</h4><p>递增或递减时贪最远的情况</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">wiggleMaxLength</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> nums.<span class=\"hljs-built_in\">size</span>();<br>        &#125;<br>        <span class=\"hljs-type\">int</span> cur = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> pre = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; ++i) &#123;<br>            cur = nums[i + <span class=\"hljs-number\">1</span>] - nums[i];<br>            <span class=\"hljs-keyword\">if</span> ((pre &lt;= <span class=\"hljs-number\">0</span> &amp;&amp; cur &gt; <span class=\"hljs-number\">0</span>) || (pre &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; cur &lt; <span class=\"hljs-number\">0</span>)) &#123;<br>                count++;<br>                pre = cur;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"53-最大子数组和\"><a href=\"#53-最大子数组和\" class=\"headerlink\" title=\"53.最大子数组和\"></a>53.最大子数组和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/maximum-subarray/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0053.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1aY4y1Z7ya\">贪心算法的巧妙需要慢慢体会！LeetCode：53. 最大子序和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>贪心算法没太想懂，使用动态规划还是很简单的。</p>\n<h4 id=\"动态规划：\"><a href=\"#动态规划：\" class=\"headerlink\" title=\"动态规划：\"></a>动态规划：</h4><p>定义<code>dp</code>数组，<code>dp[i]</code>代表前<code>i</code>个元素最大和，如果前n项和小于0，重新开始，否则累加。<code>dp[i] = max(dp[i-1] + nums[i], nums[i])</code></p>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxSubArray</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> nums[<span class=\"hljs-number\">0</span>];<br>        &#125;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(nums.size(), <span class=\"hljs-number\">0</span>)</span></span>;<br>        dp[<span class=\"hljs-number\">0</span>] = nums[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-type\">int</span> maxSum = dp[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            dp[i] = <span class=\"hljs-built_in\">max</span>(dp[i - <span class=\"hljs-number\">1</span>] + nums[i], nums[i]);<br>            <span class=\"hljs-keyword\">if</span> (dp[i] &gt; maxSum) &#123;<br>                maxSum = dp[i];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> maxSum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><p>看了卡哥的讲解：如果连续和小于0，那么重新开始（因为负数相加会越来越小）。否则继续累加。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxSubArray</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> nums[<span class=\"hljs-number\">0</span>];<br>        &#125;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> max = INT32_MIN;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            sum += nums[i];<br>            <span class=\"hljs-keyword\">if</span> (sum &gt; max) &#123;<br>                max = sum;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (sum &lt; <span class=\"hljs-number\">0</span>) &#123;<br>                sum = <span class=\"hljs-number\">0</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> max;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II","abbrlink":"4486d5e0","date":"2023-10-24T19:45:55.000Z","_content":"\n# 代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII.html)\n>\n>   视频讲解：[贪心算法也能解决股票问题！LeetCode：122.买卖股票最佳时机 II](https://www.bilibili.com/video/BV1ev4y1C7na)\n>\n>   状态：AC\n\n### 思路\n\n这道题已经给出了一定的提示\n\n>   输入：prices = [7,1,5,3,6,4]\n输出：7\n解释：\n   \n   在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。\n   \n   随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。  \n   \n   总利润为 4 + 3 = 7 。\n\n利润是可以叠加计算的。\n\n#### 贪心算法\n\n假设每一天都买股票，第二天都卖股票，计算出第二天的利润，将所有正利润加和即可。\n\n### 代码\n\n``` c++\nclass Solution {\npublic:\n    int maxProfit(vector<int> &prices) {\n        vector<int> profit(prices.size(), 0);\n        int result = 0;\n        for (int i = 1; i < prices.size(); ++i) {\n            if (prices[i] - prices[i - 1] > 0) {\n                result += prices[i] - prices[i - 1];\n            }\n        }\n        return result;\n    }\n};\n```\n\n## 55. 跳跃游戏\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/jump-game/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0055.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F.html)\n>\n>   视频讲解：[贪心算法，怎么跳跃不重要，关键在覆盖范围 | LeetCode：55.跳跃游戏](https://www.bilibili.com/video/BV1VG4y1X7kB)\n>\n>   状态：AC\n\n### 思路\n\n定义距离`dis`，每一格都走最远的路，和`dis`做比较，如果更远更新`dis`，最后比较`dis`能否到`nums.size()-1`\n\n#### 贪心算法\n\n每一格都贪最远的路\n\n### 代码\n\n``` cpp\nclass Solution {\npublic:\n    bool canJump(vector<int> &nums) {\n        int dis = 0;\n        if (nums.size() == 1) {\n            return true;\n        }\n        for (int i = 0; i <= dis; ++i) {\n            dis = max(nums[i] + i, dis);\n            if (dis >= nums.size() - 1) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n```\n\n## 45. 跳跃游戏II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/jump-game-ii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0045.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII.html)\n>\n>   视频讲解：[贪心算法，最少跳几步还得看覆盖范围 | LeetCode： 45.跳跃游戏 II](https://www.bilibili.com/video/BV1Y24y1r7XZ)\n>\n>   状态：投降\n\n### 思路\n\n这道题最终没有做出来。看了题解。\n\n先尽量远走，如果达不到则向下走一步再向远走。需要两个变量分别记录当前最远距离位置`curDis`和下一次的最远距离位置`nextDis`。\n\n如果`curDis`为当前的位置，则更新成`nextDis`\n\n### 代码\n\n``` cpp\nclass Solution {\npublic:\n    int jump(vector<int> &nums) {\n        vector<int> dp(nums.size(), 0);\n        if (nums.size() == 1) {\n            return 0;\n        }\n        int count = 0;\n        int curDis = 0;\n        int nextDis = 0;\n        for (int i = 0; i < nums.size(); ++i) {\n            nextDis = max(i + nums[i], nextDis);\n            if (i == curDis) {\n                curDis = nextDis;\n                count++;\n                if (nextDis >= nums.size() - 1) {\n                    break;\n                }\n            }\n        }\n        return count;\n    }\n};\n```\n\n<font color=\"red\">这道题值得反复思考，暂时想通了，可能睡一觉起来又忘了</font>\n","source":"_posts/day32.md","raw":"---\ntitle: 代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 贪心算法\nabbrlink: 4486d5e0\ndate: 2023-10-25 03:45:55\n---\n\n# 代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII.html)\n>\n>   视频讲解：[贪心算法也能解决股票问题！LeetCode：122.买卖股票最佳时机 II](https://www.bilibili.com/video/BV1ev4y1C7na)\n>\n>   状态：AC\n\n### 思路\n\n这道题已经给出了一定的提示\n\n>   输入：prices = [7,1,5,3,6,4]\n输出：7\n解释：\n   \n   在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。\n   \n   随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。  \n   \n   总利润为 4 + 3 = 7 。\n\n利润是可以叠加计算的。\n\n#### 贪心算法\n\n假设每一天都买股票，第二天都卖股票，计算出第二天的利润，将所有正利润加和即可。\n\n### 代码\n\n``` c++\nclass Solution {\npublic:\n    int maxProfit(vector<int> &prices) {\n        vector<int> profit(prices.size(), 0);\n        int result = 0;\n        for (int i = 1; i < prices.size(); ++i) {\n            if (prices[i] - prices[i - 1] > 0) {\n                result += prices[i] - prices[i - 1];\n            }\n        }\n        return result;\n    }\n};\n```\n\n## 55. 跳跃游戏\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/jump-game/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0055.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F.html)\n>\n>   视频讲解：[贪心算法，怎么跳跃不重要，关键在覆盖范围 | LeetCode：55.跳跃游戏](https://www.bilibili.com/video/BV1VG4y1X7kB)\n>\n>   状态：AC\n\n### 思路\n\n定义距离`dis`，每一格都走最远的路，和`dis`做比较，如果更远更新`dis`，最后比较`dis`能否到`nums.size()-1`\n\n#### 贪心算法\n\n每一格都贪最远的路\n\n### 代码\n\n``` cpp\nclass Solution {\npublic:\n    bool canJump(vector<int> &nums) {\n        int dis = 0;\n        if (nums.size() == 1) {\n            return true;\n        }\n        for (int i = 0; i <= dis; ++i) {\n            dis = max(nums[i] + i, dis);\n            if (dis >= nums.size() - 1) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n```\n\n## 45. 跳跃游戏II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/jump-game-ii/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0045.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII.html)\n>\n>   视频讲解：[贪心算法，最少跳几步还得看覆盖范围 | LeetCode： 45.跳跃游戏 II](https://www.bilibili.com/video/BV1Y24y1r7XZ)\n>\n>   状态：投降\n\n### 思路\n\n这道题最终没有做出来。看了题解。\n\n先尽量远走，如果达不到则向下走一步再向远走。需要两个变量分别记录当前最远距离位置`curDis`和下一次的最远距离位置`nextDis`。\n\n如果`curDis`为当前的位置，则更新成`nextDis`\n\n### 代码\n\n``` cpp\nclass Solution {\npublic:\n    int jump(vector<int> &nums) {\n        vector<int> dp(nums.size(), 0);\n        if (nums.size() == 1) {\n            return 0;\n        }\n        int count = 0;\n        int curDis = 0;\n        int nextDis = 0;\n        for (int i = 0; i < nums.size(); ++i) {\n            nextDis = max(i + nums[i], nextDis);\n            if (i == curDis) {\n                curDis = nextDis;\n                count++;\n                if (nextDis >= nums.size() - 1) {\n                    break;\n                }\n            }\n        }\n        return count;\n    }\n};\n```\n\n<font color=\"red\">这道题值得反复思考，暂时想通了，可能睡一觉起来又忘了</font>\n","slug":"day32","published":1,"updated":"2023-10-24T20:59:54.262Z","_id":"clo4t8jjw000189z8a0pv23hy","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第三十二天-122-买卖股票的最佳时机II、55-跳跃游戏、45-跳跃游戏II\"><a href=\"#代码随想录算法训练营第三十二天-122-买卖股票的最佳时机II、55-跳跃游戏、45-跳跃游戏II\" class=\"headerlink\" title=\"代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II\"></a>代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II</h1><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1ev4y1C7na\">贪心算法也能解决股票问题！LeetCode：122.买卖股票最佳时机 II</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题已经给出了一定的提示</p>\n<blockquote>\n<p>  输入：prices &#x3D; [7,1,5,3,6,4]<br>输出：7<br>解释：</p>\n</blockquote>\n<p>   在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5 - 1 &#x3D; 4 。</p>\n<p>   随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6 - 3 &#x3D; 3 。  </p>\n<p>   总利润为 4 + 3 &#x3D; 7 。</p>\n<p>利润是可以叠加计算的。</p>\n<h4 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><p>假设每一天都买股票，第二天都卖股票，计算出第二天的利润，将所有正利润加和即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxProfit</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;prices)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">profit</span><span class=\"hljs-params\">(prices.size(), <span class=\"hljs-number\">0</span>)</span></span>;<br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; prices.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (prices[i] - prices[i - <span class=\"hljs-number\">1</span>] &gt; <span class=\"hljs-number\">0</span>) &#123;<br>                result += prices[i] - prices[i - <span class=\"hljs-number\">1</span>];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"55-跳跃游戏\"><a href=\"#55-跳跃游戏\" class=\"headerlink\" title=\"55. 跳跃游戏\"></a>55. 跳跃游戏</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/jump-game/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0055.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1VG4y1X7kB\">贪心算法，怎么跳跃不重要，关键在覆盖范围 | LeetCode：55.跳跃游戏</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>定义距离<code>dis</code>，每一格都走最远的路，和<code>dis</code>做比较，如果更远更新<code>dis</code>，最后比较<code>dis</code>能否到<code>nums.size()-1</code></p>\n<h4 id=\"贪心算法-1\"><a href=\"#贪心算法-1\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><p>每一格都贪最远的路</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">canJump</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> dis = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">1</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= dis; ++i) &#123;<br>            dis = <span class=\"hljs-built_in\">max</span>(nums[i] + i, dis);<br>            <span class=\"hljs-keyword\">if</span> (dis &gt;= nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"45-跳跃游戏II\"><a href=\"#45-跳跃游戏II\" class=\"headerlink\" title=\"45. 跳跃游戏II\"></a>45. 跳跃游戏II</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/jump-game-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0045.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Y24y1r7XZ\">贪心算法，最少跳几步还得看覆盖范围 | LeetCode： 45.跳跃游戏 II</a></p>\n<p>  状态：投降</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题最终没有做出来。看了题解。</p>\n<p>先尽量远走，如果达不到则向下走一步再向远走。需要两个变量分别记录当前最远距离位置<code>curDis</code>和下一次的最远距离位置<code>nextDis</code>。</p>\n<p>如果<code>curDis</code>为当前的位置，则更新成<code>nextDis</code></p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">jump</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(nums.size(), <span class=\"hljs-number\">0</span>)</span></span>;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">1</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> curDis = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> nextDis = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            nextDis = <span class=\"hljs-built_in\">max</span>(i + nums[i], nextDis);<br>            <span class=\"hljs-keyword\">if</span> (i == curDis) &#123;<br>                curDis = nextDis;<br>                count++;<br>                <span class=\"hljs-keyword\">if</span> (nextDis &gt;= nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>) &#123;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p><font color=\"red\">这道题值得反复思考，暂时想通了，可能睡一觉起来又忘了</font></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第三十二天-122-买卖股票的最佳时机II、55-跳跃游戏、45-跳跃游戏II\"><a href=\"#代码随想录算法训练营第三十二天-122-买卖股票的最佳时机II、55-跳跃游戏、45-跳跃游戏II\" class=\"headerlink\" title=\"代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II\"></a>代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II</h1><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1ev4y1C7na\">贪心算法也能解决股票问题！LeetCode：122.买卖股票最佳时机 II</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题已经给出了一定的提示</p>\n<blockquote>\n<p>  输入：prices &#x3D; [7,1,5,3,6,4]<br>输出：7<br>解释：</p>\n</blockquote>\n<p>   在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5 - 1 &#x3D; 4 。</p>\n<p>   随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6 - 3 &#x3D; 3 。  </p>\n<p>   总利润为 4 + 3 &#x3D; 7 。</p>\n<p>利润是可以叠加计算的。</p>\n<h4 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><p>假设每一天都买股票，第二天都卖股票，计算出第二天的利润，将所有正利润加和即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxProfit</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;prices)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">profit</span><span class=\"hljs-params\">(prices.size(), <span class=\"hljs-number\">0</span>)</span></span>;<br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; prices.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (prices[i] - prices[i - <span class=\"hljs-number\">1</span>] &gt; <span class=\"hljs-number\">0</span>) &#123;<br>                result += prices[i] - prices[i - <span class=\"hljs-number\">1</span>];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"55-跳跃游戏\"><a href=\"#55-跳跃游戏\" class=\"headerlink\" title=\"55. 跳跃游戏\"></a>55. 跳跃游戏</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/jump-game/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0055.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1VG4y1X7kB\">贪心算法，怎么跳跃不重要，关键在覆盖范围 | LeetCode：55.跳跃游戏</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>定义距离<code>dis</code>，每一格都走最远的路，和<code>dis</code>做比较，如果更远更新<code>dis</code>，最后比较<code>dis</code>能否到<code>nums.size()-1</code></p>\n<h4 id=\"贪心算法-1\"><a href=\"#贪心算法-1\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><p>每一格都贪最远的路</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">canJump</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> dis = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">1</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= dis; ++i) &#123;<br>            dis = <span class=\"hljs-built_in\">max</span>(nums[i] + i, dis);<br>            <span class=\"hljs-keyword\">if</span> (dis &gt;= nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"45-跳跃游戏II\"><a href=\"#45-跳跃游戏II\" class=\"headerlink\" title=\"45. 跳跃游戏II\"></a>45. 跳跃游戏II</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/jump-game-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0045.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1Y24y1r7XZ\">贪心算法，最少跳几步还得看覆盖范围 | LeetCode： 45.跳跃游戏 II</a></p>\n<p>  状态：投降</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题最终没有做出来。看了题解。</p>\n<p>先尽量远走，如果达不到则向下走一步再向远走。需要两个变量分别记录当前最远距离位置<code>curDis</code>和下一次的最远距离位置<code>nextDis</code>。</p>\n<p>如果<code>curDis</code>为当前的位置，则更新成<code>nextDis</code></p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">jump</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(nums.size(), <span class=\"hljs-number\">0</span>)</span></span>;<br>        <span class=\"hljs-keyword\">if</span> (nums.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">1</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> curDis = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> nextDis = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            nextDis = <span class=\"hljs-built_in\">max</span>(i + nums[i], nextDis);<br>            <span class=\"hljs-keyword\">if</span> (i == curDis) &#123;<br>                curDis = nextDis;<br>                count++;<br>                <span class=\"hljs-keyword\">if</span> (nextDis &gt;= nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>) &#123;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p><font color=\"red\">这道题值得反复思考，暂时想通了，可能睡一觉起来又忘了</font></p>\n"},{"title":"代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果","abbrlink":"af9e53d4","date":"2023-10-25T09:14:53.000Z","_content":"\n# 代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果\n\n## 1005.K次取反后最大化的数组和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/1005.K%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C.html)\n>\n>   视频讲解：[贪心算法，这不就是常识？还能叫贪心？LeetCode：1005.K次取反后最大化的数组和](https://www.bilibili.com/video/BV138411G7LY)\n>\n>   状态：AC\n\n### 思路\n\n1.   对数组排序，统计负数个数`count`，遍历时再记录绝对值最小的数。\n2.   如果`count >= k`，那么前k个数全都取反\n3.   如果`count < k`，说明将负数全都取反后，还有额外的操作次数，判断该次数`k - count`是奇数还是偶数，如果是偶数不用操作，如果是奇数，翻转绝对值最小的数\n\n#### 贪心算法\n\n贪尽可能多的正数\n\n### 代码\n\n``` cpp\nclass Solution {\npublic:\n    int largestSumAfterKNegations(vector<int> &nums, int k) {\n        sort(nums.begin(), nums.end());\n        int count = 0;  // 负数个数\n        int minIndex = 0;\n        for (int i = 0; i < nums.size(); ++i) {\n            if (nums[i] < 0) {\n                count++;\n            }\n            if (abs(nums[i]) < abs(nums[minIndex])) {\n                minIndex = i;\n            }\n        }\n        // count >= k 前k个负数全都翻\n        if (count >= k) {\n            for (int i = 0; i < k; ++i) {\n                nums[i] = -nums[i];\n            }\n        } else {\n            // count < k\n            //   1. 所有负数都翻转\n            //   2.1 if (k - count) % 2 == 0 输出\n            //   2.2 else 翻转绝对值最小的数\n            for (int i = 0; i < count; ++i) {\n                nums[i] = -nums[i];\n            }\n            if ((k - count) % 2 == 1) {\n                nums[minIndex] = -nums[minIndex];\n            }\n        }\n        int sum = 0;\n        for (auto i: nums) {\n            sum += i;\n        }\n        return sum;\n    }\n};\n```\n\n## 134. 加油站\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/gas-station/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0134.%E5%8A%A0%E6%B2%B9%E7%AB%99.html)\n>\n>   视频讲解：[贪心算法，得这么加油才能跑完全程！LeetCode ：134.加油站](https://www.bilibili.com/video/BV1jA411r7WX)\n>\n>   状态：AC\n\n### 思路\n\n1.   将环路展开成直线的路，即将`gas`数组向后拼接一个自己，`cost`向后拼接一个自己，但是去掉一位。\n2.   外层遍历`gas`，范围从0到`gas.size()/2`，索引为`i`。内层遍历`cost`，范围从`i`到`i+gas.sise()/2`\n3.   定义当前的油量`cur`，如果`cur + gas[j] >= cost[j]`，那么下一次的剩余油量则为`cur += gas[j] - cost[j]`。否则从`i`开始的路不能走一圈，继续向下遍历\n\n#### 贪心算法\n\n从一点出发贪最远的路\n\n### 代码\n\n``` cpp\nclass Solution {\npublic:\n    int canCompleteCircuit(vector<int> &gas, vector<int> &cost) {\n        gas.insert(gas.end(), gas.begin(), gas.end());\n        cost.insert(cost.end(), cost.begin(), cost.end() - 1);\n        for (int i = 0; i < gas.size() / 2; ++i) {\n            int cur = 0;\n            bool flag = true;\n            for (int j = i; j < i + gas.size() / 2; ++j) {\n                if (cur + gas[j] >= cost[j]) {\n                    cur += gas[j] - cost[j];\n                } else {\n                    flag = false;\n                    i = j;\n                    break;\n                }\n            }\n            if (flag) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n```\n\n## 135. 分发糖果\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/candy/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0135.%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C.html)\n>\n>   视频讲解：[贪心算法，两者兼顾很容易顾此失彼！LeetCode：135.分发糖果](https://www.bilibili.com/video/BV1ev4y1r7wN)\n>\n>   状态：AC\n\n### 思路\n\n这道题没有想明白，看了题解后懂了。前后两次遍历评分数组。每个人糖果初始化为1。\n\n前向遍历时如果后一项大于前一项，那么后一项的糖果值为前一项加1。\n\n反向遍历时，如果前一项大于后一项时，并且前一项糖果也不超过后一项时，那么前一项糖果等于后一项加1。\n\n### 代码\n\n``` cpp\nclass Solution {\npublic:\n    int candy(vector<int> &ratings) {\n        vector<int> result(ratings.size(), 1);\n        for (int i = 1; i < ratings.size(); ++i) {\n            if (ratings[i] > ratings[i - 1]) {\n                result[i] = result[i - 1] + 1;\n            }\n        }\n        for (int i = ratings.size() - 1; i >= 1; --i) {\n            if (ratings[i - 1] > ratings[i] && result[i - 1] <= result[i]) {\n                result[i - 1] = result[i] + 1;\n            }\n        }\n        int sum = 0;\n        for (auto i: result) {\n            sum += i;\n        }\n        return sum;\n    }\n};\n```\n\n","source":"_posts/day33.md","raw":"---\ntitle: 代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\n  - 贪心算法\nabbrlink: af9e53d4\ndate: 2023-10-25 17:14:53\n---\n\n# 代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果\n\n## 1005.K次取反后最大化的数组和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/1005.K%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C.html)\n>\n>   视频讲解：[贪心算法，这不就是常识？还能叫贪心？LeetCode：1005.K次取反后最大化的数组和](https://www.bilibili.com/video/BV138411G7LY)\n>\n>   状态：AC\n\n### 思路\n\n1.   对数组排序，统计负数个数`count`，遍历时再记录绝对值最小的数。\n2.   如果`count >= k`，那么前k个数全都取反\n3.   如果`count < k`，说明将负数全都取反后，还有额外的操作次数，判断该次数`k - count`是奇数还是偶数，如果是偶数不用操作，如果是奇数，翻转绝对值最小的数\n\n#### 贪心算法\n\n贪尽可能多的正数\n\n### 代码\n\n``` cpp\nclass Solution {\npublic:\n    int largestSumAfterKNegations(vector<int> &nums, int k) {\n        sort(nums.begin(), nums.end());\n        int count = 0;  // 负数个数\n        int minIndex = 0;\n        for (int i = 0; i < nums.size(); ++i) {\n            if (nums[i] < 0) {\n                count++;\n            }\n            if (abs(nums[i]) < abs(nums[minIndex])) {\n                minIndex = i;\n            }\n        }\n        // count >= k 前k个负数全都翻\n        if (count >= k) {\n            for (int i = 0; i < k; ++i) {\n                nums[i] = -nums[i];\n            }\n        } else {\n            // count < k\n            //   1. 所有负数都翻转\n            //   2.1 if (k - count) % 2 == 0 输出\n            //   2.2 else 翻转绝对值最小的数\n            for (int i = 0; i < count; ++i) {\n                nums[i] = -nums[i];\n            }\n            if ((k - count) % 2 == 1) {\n                nums[minIndex] = -nums[minIndex];\n            }\n        }\n        int sum = 0;\n        for (auto i: nums) {\n            sum += i;\n        }\n        return sum;\n    }\n};\n```\n\n## 134. 加油站\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/gas-station/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0134.%E5%8A%A0%E6%B2%B9%E7%AB%99.html)\n>\n>   视频讲解：[贪心算法，得这么加油才能跑完全程！LeetCode ：134.加油站](https://www.bilibili.com/video/BV1jA411r7WX)\n>\n>   状态：AC\n\n### 思路\n\n1.   将环路展开成直线的路，即将`gas`数组向后拼接一个自己，`cost`向后拼接一个自己，但是去掉一位。\n2.   外层遍历`gas`，范围从0到`gas.size()/2`，索引为`i`。内层遍历`cost`，范围从`i`到`i+gas.sise()/2`\n3.   定义当前的油量`cur`，如果`cur + gas[j] >= cost[j]`，那么下一次的剩余油量则为`cur += gas[j] - cost[j]`。否则从`i`开始的路不能走一圈，继续向下遍历\n\n#### 贪心算法\n\n从一点出发贪最远的路\n\n### 代码\n\n``` cpp\nclass Solution {\npublic:\n    int canCompleteCircuit(vector<int> &gas, vector<int> &cost) {\n        gas.insert(gas.end(), gas.begin(), gas.end());\n        cost.insert(cost.end(), cost.begin(), cost.end() - 1);\n        for (int i = 0; i < gas.size() / 2; ++i) {\n            int cur = 0;\n            bool flag = true;\n            for (int j = i; j < i + gas.size() / 2; ++j) {\n                if (cur + gas[j] >= cost[j]) {\n                    cur += gas[j] - cost[j];\n                } else {\n                    flag = false;\n                    i = j;\n                    break;\n                }\n            }\n            if (flag) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n```\n\n## 135. 分发糖果\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/candy/)\n>\n>   文章讲解：[代码随想录(https://programmercarl.com)](https://programmercarl.com/0135.%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C.html)\n>\n>   视频讲解：[贪心算法，两者兼顾很容易顾此失彼！LeetCode：135.分发糖果](https://www.bilibili.com/video/BV1ev4y1r7wN)\n>\n>   状态：AC\n\n### 思路\n\n这道题没有想明白，看了题解后懂了。前后两次遍历评分数组。每个人糖果初始化为1。\n\n前向遍历时如果后一项大于前一项，那么后一项的糖果值为前一项加1。\n\n反向遍历时，如果前一项大于后一项时，并且前一项糖果也不超过后一项时，那么前一项糖果等于后一项加1。\n\n### 代码\n\n``` cpp\nclass Solution {\npublic:\n    int candy(vector<int> &ratings) {\n        vector<int> result(ratings.size(), 1);\n        for (int i = 1; i < ratings.size(); ++i) {\n            if (ratings[i] > ratings[i - 1]) {\n                result[i] = result[i - 1] + 1;\n            }\n        }\n        for (int i = ratings.size() - 1; i >= 1; --i) {\n            if (ratings[i - 1] > ratings[i] && result[i - 1] <= result[i]) {\n                result[i - 1] = result[i] + 1;\n            }\n        }\n        int sum = 0;\n        for (auto i: result) {\n            sum += i;\n        }\n        return sum;\n    }\n};\n```\n\n","slug":"day33","published":1,"updated":"2023-10-25T09:38:20.343Z","_id":"clo5kbw9o000044z8en9fc3to","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第三十三天-1005-K次取反后最大化的数组和、134-加油站、135-分发糖果\"><a href=\"#代码随想录算法训练营第三十三天-1005-K次取反后最大化的数组和、134-加油站、135-分发糖果\" class=\"headerlink\" title=\"代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果\"></a>代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果</h1><h2 id=\"1005-K次取反后最大化的数组和\"><a href=\"#1005-K次取反后最大化的数组和\" class=\"headerlink\" title=\"1005.K次取反后最大化的数组和\"></a>1005.K次取反后最大化的数组和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/1005.K%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV138411G7LY\">贪心算法，这不就是常识？还能叫贪心？LeetCode：1005.K次取反后最大化的数组和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>对数组排序，统计负数个数<code>count</code>，遍历时再记录绝对值最小的数。</li>\n<li>如果<code>count &gt;= k</code>，那么前k个数全都取反</li>\n<li>如果<code>count &lt; k</code>，说明将负数全都取反后，还有额外的操作次数，判断该次数<code>k - count</code>是奇数还是偶数，如果是偶数不用操作，如果是奇数，翻转绝对值最小的数</li>\n</ol>\n<h4 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><p>贪尽可能多的正数</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">largestSumAfterKNegations</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, <span class=\"hljs-type\">int</span> k)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">sort</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// 负数个数</span><br>        <span class=\"hljs-type\">int</span> minIndex = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (nums[i] &lt; <span class=\"hljs-number\">0</span>) &#123;<br>                count++;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">abs</span>(nums[i]) &lt; <span class=\"hljs-built_in\">abs</span>(nums[minIndex])) &#123;<br>                minIndex = i;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">// count &gt;= k 前k个负数全都翻</span><br>        <span class=\"hljs-keyword\">if</span> (count &gt;= k) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; k; ++i) &#123;<br>                nums[i] = -nums[i];<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// count &lt; k</span><br>            <span class=\"hljs-comment\">//   1. 所有负数都翻转</span><br>            <span class=\"hljs-comment\">//   2.1 if (k - count) % 2 == 0 输出</span><br>            <span class=\"hljs-comment\">//   2.2 else 翻转绝对值最小的数</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; count; ++i) &#123;<br>                nums[i] = -nums[i];<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> ((k - count) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) &#123;<br>                nums[minIndex] = -nums[minIndex];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> i: nums) &#123;<br>            sum += i;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"134-加油站\"><a href=\"#134-加油站\" class=\"headerlink\" title=\"134. 加油站\"></a>134. 加油站</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/gas-station/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0134.%E5%8A%A0%E6%B2%B9%E7%AB%99.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1jA411r7WX\">贪心算法，得这么加油才能跑完全程！LeetCode ：134.加油站</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>将环路展开成直线的路，即将<code>gas</code>数组向后拼接一个自己，<code>cost</code>向后拼接一个自己，但是去掉一位。</li>\n<li>外层遍历<code>gas</code>，范围从0到<code>gas.size()/2</code>，索引为<code>i</code>。内层遍历<code>cost</code>，范围从<code>i</code>到<code>i+gas.sise()/2</code></li>\n<li>定义当前的油量<code>cur</code>，如果<code>cur + gas[j] &gt;= cost[j]</code>，那么下一次的剩余油量则为<code>cur += gas[j] - cost[j]</code>。否则从<code>i</code>开始的路不能走一圈，继续向下遍历</li>\n</ol>\n<h4 id=\"贪心算法-1\"><a href=\"#贪心算法-1\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><p>从一点出发贪最远的路</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">canCompleteCircuit</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;gas, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;cost)</span> </span>&#123;<br>        gas.<span class=\"hljs-built_in\">insert</span>(gas.<span class=\"hljs-built_in\">end</span>(), gas.<span class=\"hljs-built_in\">begin</span>(), gas.<span class=\"hljs-built_in\">end</span>());<br>        cost.<span class=\"hljs-built_in\">insert</span>(cost.<span class=\"hljs-built_in\">end</span>(), cost.<span class=\"hljs-built_in\">begin</span>(), cost.<span class=\"hljs-built_in\">end</span>() - <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; gas.<span class=\"hljs-built_in\">size</span>() / <span class=\"hljs-number\">2</span>; ++i) &#123;<br>            <span class=\"hljs-type\">int</span> cur = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i; j &lt; i + gas.<span class=\"hljs-built_in\">size</span>() / <span class=\"hljs-number\">2</span>; ++j) &#123;<br>                <span class=\"hljs-keyword\">if</span> (cur + gas[j] &gt;= cost[j]) &#123;<br>                    cur += gas[j] - cost[j];<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    flag = <span class=\"hljs-literal\">false</span>;<br>                    i = j;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (flag) &#123;<br>                <span class=\"hljs-keyword\">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"135-分发糖果\"><a href=\"#135-分发糖果\" class=\"headerlink\" title=\"135. 分发糖果\"></a>135. 分发糖果</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/candy/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0135.%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1ev4y1r7wN\">贪心算法，两者兼顾很容易顾此失彼！LeetCode：135.分发糖果</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题没有想明白，看了题解后懂了。前后两次遍历评分数组。每个人糖果初始化为1。</p>\n<p>前向遍历时如果后一项大于前一项，那么后一项的糖果值为前一项加1。</p>\n<p>反向遍历时，如果前一项大于后一项时，并且前一项糖果也不超过后一项时，那么前一项糖果等于后一项加1。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">candy</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;ratings)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(ratings.size(), <span class=\"hljs-number\">1</span>)</span></span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; ratings.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (ratings[i] &gt; ratings[i - <span class=\"hljs-number\">1</span>]) &#123;<br>                result[i] = result[i - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = ratings.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">1</span>; --i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (ratings[i - <span class=\"hljs-number\">1</span>] &gt; ratings[i] &amp;&amp; result[i - <span class=\"hljs-number\">1</span>] &lt;= result[i]) &#123;<br>                result[i - <span class=\"hljs-number\">1</span>] = result[i] + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> i: result) &#123;<br>            sum += i;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第三十三天-1005-K次取反后最大化的数组和、134-加油站、135-分发糖果\"><a href=\"#代码随想录算法训练营第三十三天-1005-K次取反后最大化的数组和、134-加油站、135-分发糖果\" class=\"headerlink\" title=\"代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果\"></a>代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果</h1><h2 id=\"1005-K次取反后最大化的数组和\"><a href=\"#1005-K次取反后最大化的数组和\" class=\"headerlink\" title=\"1005.K次取反后最大化的数组和\"></a>1005.K次取反后最大化的数组和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/1005.K%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV138411G7LY\">贪心算法，这不就是常识？还能叫贪心？LeetCode：1005.K次取反后最大化的数组和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>对数组排序，统计负数个数<code>count</code>，遍历时再记录绝对值最小的数。</li>\n<li>如果<code>count &gt;= k</code>，那么前k个数全都取反</li>\n<li>如果<code>count &lt; k</code>，说明将负数全都取反后，还有额外的操作次数，判断该次数<code>k - count</code>是奇数还是偶数，如果是偶数不用操作，如果是奇数，翻转绝对值最小的数</li>\n</ol>\n<h4 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><p>贪尽可能多的正数</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">largestSumAfterKNegations</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;nums, <span class=\"hljs-type\">int</span> k)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">sort</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// 负数个数</span><br>        <span class=\"hljs-type\">int</span> minIndex = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (nums[i] &lt; <span class=\"hljs-number\">0</span>) &#123;<br>                count++;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">abs</span>(nums[i]) &lt; <span class=\"hljs-built_in\">abs</span>(nums[minIndex])) &#123;<br>                minIndex = i;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">// count &gt;= k 前k个负数全都翻</span><br>        <span class=\"hljs-keyword\">if</span> (count &gt;= k) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; k; ++i) &#123;<br>                nums[i] = -nums[i];<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// count &lt; k</span><br>            <span class=\"hljs-comment\">//   1. 所有负数都翻转</span><br>            <span class=\"hljs-comment\">//   2.1 if (k - count) % 2 == 0 输出</span><br>            <span class=\"hljs-comment\">//   2.2 else 翻转绝对值最小的数</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; count; ++i) &#123;<br>                nums[i] = -nums[i];<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> ((k - count) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) &#123;<br>                nums[minIndex] = -nums[minIndex];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> i: nums) &#123;<br>            sum += i;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"134-加油站\"><a href=\"#134-加油站\" class=\"headerlink\" title=\"134. 加油站\"></a>134. 加油站</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/gas-station/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0134.%E5%8A%A0%E6%B2%B9%E7%AB%99.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1jA411r7WX\">贪心算法，得这么加油才能跑完全程！LeetCode ：134.加油站</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>将环路展开成直线的路，即将<code>gas</code>数组向后拼接一个自己，<code>cost</code>向后拼接一个自己，但是去掉一位。</li>\n<li>外层遍历<code>gas</code>，范围从0到<code>gas.size()/2</code>，索引为<code>i</code>。内层遍历<code>cost</code>，范围从<code>i</code>到<code>i+gas.sise()/2</code></li>\n<li>定义当前的油量<code>cur</code>，如果<code>cur + gas[j] &gt;= cost[j]</code>，那么下一次的剩余油量则为<code>cur += gas[j] - cost[j]</code>。否则从<code>i</code>开始的路不能走一圈，继续向下遍历</li>\n</ol>\n<h4 id=\"贪心算法-1\"><a href=\"#贪心算法-1\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h4><p>从一点出发贪最远的路</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">canCompleteCircuit</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;gas, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;cost)</span> </span>&#123;<br>        gas.<span class=\"hljs-built_in\">insert</span>(gas.<span class=\"hljs-built_in\">end</span>(), gas.<span class=\"hljs-built_in\">begin</span>(), gas.<span class=\"hljs-built_in\">end</span>());<br>        cost.<span class=\"hljs-built_in\">insert</span>(cost.<span class=\"hljs-built_in\">end</span>(), cost.<span class=\"hljs-built_in\">begin</span>(), cost.<span class=\"hljs-built_in\">end</span>() - <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; gas.<span class=\"hljs-built_in\">size</span>() / <span class=\"hljs-number\">2</span>; ++i) &#123;<br>            <span class=\"hljs-type\">int</span> cur = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i; j &lt; i + gas.<span class=\"hljs-built_in\">size</span>() / <span class=\"hljs-number\">2</span>; ++j) &#123;<br>                <span class=\"hljs-keyword\">if</span> (cur + gas[j] &gt;= cost[j]) &#123;<br>                    cur += gas[j] - cost[j];<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    flag = <span class=\"hljs-literal\">false</span>;<br>                    i = j;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (flag) &#123;<br>                <span class=\"hljs-keyword\">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"135-分发糖果\"><a href=\"#135-分发糖果\" class=\"headerlink\" title=\"135. 分发糖果\"></a>135. 分发糖果</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/candy/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0135.%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C.html\">代码随想录(https://programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1ev4y1r7wN\">贪心算法，两者兼顾很容易顾此失彼！LeetCode：135.分发糖果</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题没有想明白，看了题解后懂了。前后两次遍历评分数组。每个人糖果初始化为1。</p>\n<p>前向遍历时如果后一项大于前一项，那么后一项的糖果值为前一项加1。</p>\n<p>反向遍历时，如果前一项大于后一项时，并且前一项糖果也不超过后一项时，那么前一项糖果等于后一项加1。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">candy</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;ratings)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(ratings.size(), <span class=\"hljs-number\">1</span>)</span></span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; ratings.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (ratings[i] &gt; ratings[i - <span class=\"hljs-number\">1</span>]) &#123;<br>                result[i] = result[i - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = ratings.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">1</span>; --i) &#123;<br>            <span class=\"hljs-keyword\">if</span> (ratings[i - <span class=\"hljs-number\">1</span>] &gt; ratings[i] &amp;&amp; result[i - <span class=\"hljs-number\">1</span>] &lt;= result[i]) &#123;<br>                result[i - <span class=\"hljs-number\">1</span>] = result[i] + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> i: result) &#123;<br>            sum += i;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"【Study】Go语言动手写Web框架-Gee第一天","abbrlink":"9ac00b9a","date":"2024-01-14T15:04:59.000Z","_content":"\n# 【Study】Go语言动手写Web框架-Gee第一天\n\n项目来源: [7天用Go动手写/从零实现系列](https://github.com/geektutu/7days-golang)\n\n\n\n## 第一天\n\n### 1. net/http的简易demo\n\n#### 代码和一些说明\n\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", indexHandler)\n\thttp.HandleFunc(\"/hello\", helloHandler)\n\tlog.Fatal(http.ListenAndServe(\":9999\", nil))\n\n}\n\nfunc indexHandler(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"URL.Path = %q\\n\", req.URL.Path)\n}\n\nfunc helloHandler(w http.ResponseWriter, req *http.Request) {\n\tfor k, v := range req.Header {\n\t\tfmt.Fprintf(w, \"Header[%q] = %q\\n\", k, v)\n\t}\n}\n\n```\n\n使用Go语言内置的`net/http`库, 简单写个demo\n\n> 第10、11行：设置两个路由，分别是`/`和`/hello`，并且分别绑定了两个函数（第16、20行）`indexHandler`和`helloHandler`\n>\n> 处理`indexHandler`，返回的是URL；处理`helloHandler`，返回的是请求头内的信息\n>\n> 第12行：设置端口为9999，表示在9999端口进行监听。第二个参数为处理所有http请求实例，`nil`代表使用标准库中的实例处理。\n>\n> `http.ListenAndServe`底层源码：\n>\n> ```go\n> // ListenAndServe listens on the TCP network address addr and then calls\n> // Serve with handler to handle requests on incoming connections.\n> // Accepted connections are configured to enable TCP keep-alives.\n> //\n> // The handler is typically nil, in which case the DefaultServeMux is used.\n> //\n> // ListenAndServe always returns a non-nil error.\n> \n> func ListenAndServe(addr string, handler Handler) error {\n> \tserver := &Server{Addr: addr, Handler: handler}\n> \treturn server.ListenAndServe()\n> }\n> ```\n>\n> `Handler`底层源码：\n>\n> ```go\n> // A Handler responds to an HTTP request.\n> //\n> // ServeHTTP should write reply headers and data to the ResponseWriter\n> // and then return. Returning signals that the request is finished; it\n> // is not valid to use the ResponseWriter or read from the\n> // Request.Body after or concurrently with the completion of the\n> // ServeHTTP call.\n> //\n> // Depending on the HTTP client software, HTTP protocol version, and\n> // any intermediaries between the client and the Go server, it may not\n> // be possible to read from the Request.Body after writing to the\n> // ResponseWriter. Cautious handlers should read the Request.Body\n> // first, and then reply.\n> //\n> // Except for reading the body, handlers should not modify the\n> // provided Request.\n> //\n> // If ServeHTTP panics, the server (the caller of ServeHTTP) assumes\n> // that the effect of the panic was isolated to the active request.\n> // It recovers the panic, logs a stack trace to the server error log,\n> // and either closes the network connection or sends an HTTP/2\n> // RST_STREAM, depending on the HTTP protocol. To abort a handler so\n> // the client sees an interrupted response but the server doesn't log\n> // an error, panic with the value ErrAbortHandler.\n> type Handler interface {\n>     ServeHTTP(ResponseWriter, *Request)\n> }\n> ```\n>\n> `http.ListenAndServe()`的第二个参数类型可以看到是一个接口，需要实现`ServeHTTP`方法，也就是说所有HTTP请求都交给它来处理（第二节实现）\n>\n> `log.Fatal()`: 进入源码我们可以看到这样的注释`Fatal is equivalent to Print() followed by a call to os.Exit(1).`\n>\n> 可以得知，当程序报错之后打印日志并会立即退出，defer函数也不会执行，而不同于`panic()`\n>\n> `panic()`: \n>\n> 1. 函数立刻停止执行 (注意是函数本身，不是应用程序停止)\n> 2. defer函数被执行\n> 3. 返回给调用者(caller)\n> 4. 调用者函数假装也收到了一个panic函数，从而\n>     4.1 立即停止执行当前函数\n>     4.2 它defer函数被执行\n>     4.3 返回给它的调用者(caller)\n> 5. ...(递归重复上述步骤，直到最上层函数)\n>     应用程序停止。\n\n#### 一些运行结果\n\n<img src=\"..\\images\\Gee1\\url_path.png\" style=\"zoom:50%;\" />\n\n<img src=\"..\\images\\Gee1\\helloHandler.png\" style=\"zoom:50%;\" />\n\n当然也可以使用curl工具\n\n<img src=\"..\\images\\Gee1\\curl.png\" style=\"zoom:50%;\" />\n\n### 2. 实现http.Handler接口\n\n需要构造一个对象，并且实现`ServeHTTP`方法\n\n``` go\ntype Engine struct {}\n\n\nfunc (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tswitch req.URL.Path {\n\tcase \"/\":\n\t\tfmt.Fprintf(w, \"URL.Path = %q\\n\", req.URL.Path)\n\tcase \"/hello\":\n\t\tfor k, v := range req.Header {\n\t\t\tfmt.Fprintf(w, \"header[%q] = %q\\n\", k, v)\n\t\t}\n\tdefault:\n\t\tfmt.Fprintf(w, \"404 NOT FOUND: %s\\n\", req.URL)\n\t}\n}\n\nfunc main() {\n    engine := new(Engine)\n    log.Fatal(http.ListenAndServe(\":9999\", engine))\n}\n```\n\n\n\n>   定义`Engine`对象，并且实现其中的函数`ServeHTTP(http.ResponseWriter, *http.Request)`，对URL处理只有`/`个`/hello`，处理的逻辑同上。函数中的两个参数分别为：针对第二个参数请求的响应，请求的信息。\n\n### 3. 重新组织代码结构，实现核心功能，准备被调用\n\n使用`New()`创建 gee 的实例，使用 `GET()`方法添加路由，最后使用`Run()`启动Web服务。\n\n```\ngee/\n  |--gee.go\n  |--go.mod\nmain.go\ngo.mod\n```\n\n``` go\n// go.mod\nmodule example\n\ngo 1.21\n\nrequire (\n\tgee v0.0.0\n)\n\nreplace (\n\tgee => ./gee\n)\n```\n\n``` go\n// gee.go\npackage gee\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\ntype HandlerFunc func(http.ResponseWriter, *http.Request)\n\ntype Engine struct {\n\trouter map[string]HandlerFunc\n}\n\nfunc New() *Engine {\n\treturn &Engine{router: make(map[string]HandlerFunc)}\n}\n\nfunc (engine *Engine) addRoute(method string, pattern string, handler HandlerFunc) {\n\tkey := method + \"-\" + pattern\n\tengine.router[key] = handler\n}\n\nfunc (engine *Engine) GET(pattern string, handler HandlerFunc) {\n\tengine.addRoute(\"GET\", pattern, handler)\n}\n\nfunc (engine *Engine) POST(pattern string, handler HandlerFunc) {\n\tengine.addRoute(\"POST\", pattern, handler)\n}\n\nfunc (engine *Engine) Run(addr string) (err error) {\n\treturn http.ListenAndServe(addr, engine)\n}\n\nfunc (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tkey := req.Method + \"-\" + req.URL.Path\n\tif handler, ok := engine.router[key]; ok {\n\t\thandler(w, req)\n\t} else {\n\t\t_, err := fmt.Fprintf(w, \"404 NOT FOUND: %s\\n\", req.URL)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n}\n\n```\n\n``` go\n// main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"gee\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gee.New()\n\tr.GET(\"/\", func(writer http.ResponseWriter, request *http.Request) {\n\t\t_, err := fmt.Fprintf(writer, \"URL.Path = %q\\n\", request.URL.Path)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t})\n\n\tr.GET(\"/hello\", func(writer http.ResponseWriter, request *http.Request) {\n\t\tfor k, v := range request.Header {\n\t\t\t_, err := fmt.Fprintf(writer, \"Header[%q] = %q\\n\", k, v)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t})\n\n\terr := r.Run(\":9999\")\n\tif err != nil {\n\t\treturn\n\t}\n}\n\n```\n\n#### 代码和一些说明\n\n1.   执行`main()`函数，首先进行实例化了`gee`，`main.go`中的12行开始执行，调用`GET()`方法时，会到`gee.go`中`addRoute()`添加路由和映射\n\n     >   例如：r.GET(\"/\", handler)，则会在映射表中添加{\"GET-/\": handler}\n\n2.   `main.go`中，两个路由`/`和`/hello`添加完毕开始执行`r.Run()`，运行服务。\n\n3.   `Run()`中的`ListenAndServe(addr, handler)`函数，又会去执行`handler`中的接口，也就是`ServeHTTP()`，由于我们在`gee.go`文件中已经实现了该方法，会进行调用。\n\n4.   `gee.go`文件中，实现了实例化的过程`New()`函数\n\n#### 一些运行结果\n\n<img src=\"../images/Gee1/curl2.png\" style=\"zoom:50%;\" />\n","source":"_posts/【Study】Go语言动手写Web框架-Gee第一天.md","raw":"---\ntitle: 【Study】Go语言动手写Web框架-Gee第一天\ntags:\n  - Study\n  - Go\nabbrlink: 9ac00b9a\ndate: 2024-01-14 23:04:59\n---\n\n# 【Study】Go语言动手写Web框架-Gee第一天\n\n项目来源: [7天用Go动手写/从零实现系列](https://github.com/geektutu/7days-golang)\n\n\n\n## 第一天\n\n### 1. net/http的简易demo\n\n#### 代码和一些说明\n\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", indexHandler)\n\thttp.HandleFunc(\"/hello\", helloHandler)\n\tlog.Fatal(http.ListenAndServe(\":9999\", nil))\n\n}\n\nfunc indexHandler(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"URL.Path = %q\\n\", req.URL.Path)\n}\n\nfunc helloHandler(w http.ResponseWriter, req *http.Request) {\n\tfor k, v := range req.Header {\n\t\tfmt.Fprintf(w, \"Header[%q] = %q\\n\", k, v)\n\t}\n}\n\n```\n\n使用Go语言内置的`net/http`库, 简单写个demo\n\n> 第10、11行：设置两个路由，分别是`/`和`/hello`，并且分别绑定了两个函数（第16、20行）`indexHandler`和`helloHandler`\n>\n> 处理`indexHandler`，返回的是URL；处理`helloHandler`，返回的是请求头内的信息\n>\n> 第12行：设置端口为9999，表示在9999端口进行监听。第二个参数为处理所有http请求实例，`nil`代表使用标准库中的实例处理。\n>\n> `http.ListenAndServe`底层源码：\n>\n> ```go\n> // ListenAndServe listens on the TCP network address addr and then calls\n> // Serve with handler to handle requests on incoming connections.\n> // Accepted connections are configured to enable TCP keep-alives.\n> //\n> // The handler is typically nil, in which case the DefaultServeMux is used.\n> //\n> // ListenAndServe always returns a non-nil error.\n> \n> func ListenAndServe(addr string, handler Handler) error {\n> \tserver := &Server{Addr: addr, Handler: handler}\n> \treturn server.ListenAndServe()\n> }\n> ```\n>\n> `Handler`底层源码：\n>\n> ```go\n> // A Handler responds to an HTTP request.\n> //\n> // ServeHTTP should write reply headers and data to the ResponseWriter\n> // and then return. Returning signals that the request is finished; it\n> // is not valid to use the ResponseWriter or read from the\n> // Request.Body after or concurrently with the completion of the\n> // ServeHTTP call.\n> //\n> // Depending on the HTTP client software, HTTP protocol version, and\n> // any intermediaries between the client and the Go server, it may not\n> // be possible to read from the Request.Body after writing to the\n> // ResponseWriter. Cautious handlers should read the Request.Body\n> // first, and then reply.\n> //\n> // Except for reading the body, handlers should not modify the\n> // provided Request.\n> //\n> // If ServeHTTP panics, the server (the caller of ServeHTTP) assumes\n> // that the effect of the panic was isolated to the active request.\n> // It recovers the panic, logs a stack trace to the server error log,\n> // and either closes the network connection or sends an HTTP/2\n> // RST_STREAM, depending on the HTTP protocol. To abort a handler so\n> // the client sees an interrupted response but the server doesn't log\n> // an error, panic with the value ErrAbortHandler.\n> type Handler interface {\n>     ServeHTTP(ResponseWriter, *Request)\n> }\n> ```\n>\n> `http.ListenAndServe()`的第二个参数类型可以看到是一个接口，需要实现`ServeHTTP`方法，也就是说所有HTTP请求都交给它来处理（第二节实现）\n>\n> `log.Fatal()`: 进入源码我们可以看到这样的注释`Fatal is equivalent to Print() followed by a call to os.Exit(1).`\n>\n> 可以得知，当程序报错之后打印日志并会立即退出，defer函数也不会执行，而不同于`panic()`\n>\n> `panic()`: \n>\n> 1. 函数立刻停止执行 (注意是函数本身，不是应用程序停止)\n> 2. defer函数被执行\n> 3. 返回给调用者(caller)\n> 4. 调用者函数假装也收到了一个panic函数，从而\n>     4.1 立即停止执行当前函数\n>     4.2 它defer函数被执行\n>     4.3 返回给它的调用者(caller)\n> 5. ...(递归重复上述步骤，直到最上层函数)\n>     应用程序停止。\n\n#### 一些运行结果\n\n<img src=\"..\\images\\Gee1\\url_path.png\" style=\"zoom:50%;\" />\n\n<img src=\"..\\images\\Gee1\\helloHandler.png\" style=\"zoom:50%;\" />\n\n当然也可以使用curl工具\n\n<img src=\"..\\images\\Gee1\\curl.png\" style=\"zoom:50%;\" />\n\n### 2. 实现http.Handler接口\n\n需要构造一个对象，并且实现`ServeHTTP`方法\n\n``` go\ntype Engine struct {}\n\n\nfunc (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tswitch req.URL.Path {\n\tcase \"/\":\n\t\tfmt.Fprintf(w, \"URL.Path = %q\\n\", req.URL.Path)\n\tcase \"/hello\":\n\t\tfor k, v := range req.Header {\n\t\t\tfmt.Fprintf(w, \"header[%q] = %q\\n\", k, v)\n\t\t}\n\tdefault:\n\t\tfmt.Fprintf(w, \"404 NOT FOUND: %s\\n\", req.URL)\n\t}\n}\n\nfunc main() {\n    engine := new(Engine)\n    log.Fatal(http.ListenAndServe(\":9999\", engine))\n}\n```\n\n\n\n>   定义`Engine`对象，并且实现其中的函数`ServeHTTP(http.ResponseWriter, *http.Request)`，对URL处理只有`/`个`/hello`，处理的逻辑同上。函数中的两个参数分别为：针对第二个参数请求的响应，请求的信息。\n\n### 3. 重新组织代码结构，实现核心功能，准备被调用\n\n使用`New()`创建 gee 的实例，使用 `GET()`方法添加路由，最后使用`Run()`启动Web服务。\n\n```\ngee/\n  |--gee.go\n  |--go.mod\nmain.go\ngo.mod\n```\n\n``` go\n// go.mod\nmodule example\n\ngo 1.21\n\nrequire (\n\tgee v0.0.0\n)\n\nreplace (\n\tgee => ./gee\n)\n```\n\n``` go\n// gee.go\npackage gee\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\ntype HandlerFunc func(http.ResponseWriter, *http.Request)\n\ntype Engine struct {\n\trouter map[string]HandlerFunc\n}\n\nfunc New() *Engine {\n\treturn &Engine{router: make(map[string]HandlerFunc)}\n}\n\nfunc (engine *Engine) addRoute(method string, pattern string, handler HandlerFunc) {\n\tkey := method + \"-\" + pattern\n\tengine.router[key] = handler\n}\n\nfunc (engine *Engine) GET(pattern string, handler HandlerFunc) {\n\tengine.addRoute(\"GET\", pattern, handler)\n}\n\nfunc (engine *Engine) POST(pattern string, handler HandlerFunc) {\n\tengine.addRoute(\"POST\", pattern, handler)\n}\n\nfunc (engine *Engine) Run(addr string) (err error) {\n\treturn http.ListenAndServe(addr, engine)\n}\n\nfunc (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tkey := req.Method + \"-\" + req.URL.Path\n\tif handler, ok := engine.router[key]; ok {\n\t\thandler(w, req)\n\t} else {\n\t\t_, err := fmt.Fprintf(w, \"404 NOT FOUND: %s\\n\", req.URL)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n}\n\n```\n\n``` go\n// main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"gee\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gee.New()\n\tr.GET(\"/\", func(writer http.ResponseWriter, request *http.Request) {\n\t\t_, err := fmt.Fprintf(writer, \"URL.Path = %q\\n\", request.URL.Path)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t})\n\n\tr.GET(\"/hello\", func(writer http.ResponseWriter, request *http.Request) {\n\t\tfor k, v := range request.Header {\n\t\t\t_, err := fmt.Fprintf(writer, \"Header[%q] = %q\\n\", k, v)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t})\n\n\terr := r.Run(\":9999\")\n\tif err != nil {\n\t\treturn\n\t}\n}\n\n```\n\n#### 代码和一些说明\n\n1.   执行`main()`函数，首先进行实例化了`gee`，`main.go`中的12行开始执行，调用`GET()`方法时，会到`gee.go`中`addRoute()`添加路由和映射\n\n     >   例如：r.GET(\"/\", handler)，则会在映射表中添加{\"GET-/\": handler}\n\n2.   `main.go`中，两个路由`/`和`/hello`添加完毕开始执行`r.Run()`，运行服务。\n\n3.   `Run()`中的`ListenAndServe(addr, handler)`函数，又会去执行`handler`中的接口，也就是`ServeHTTP()`，由于我们在`gee.go`文件中已经实现了该方法，会进行调用。\n\n4.   `gee.go`文件中，实现了实例化的过程`New()`函数\n\n#### 一些运行结果\n\n<img src=\"../images/Gee1/curl2.png\" style=\"zoom:50%;\" />\n","slug":"【Study】Go语言动手写Web框架-Gee第一天","published":1,"updated":"2024-01-15T11:36:28.301Z","_id":"clrdpfmta00002gwhbm6l3wwz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【Study】Go语言动手写Web框架-Gee第一天\"><a href=\"#【Study】Go语言动手写Web框架-Gee第一天\" class=\"headerlink\" title=\"【Study】Go语言动手写Web框架-Gee第一天\"></a>【Study】Go语言动手写Web框架-Gee第一天</h1><p>项目来源: <a href=\"https://github.com/geektutu/7days-golang\">7天用Go动手写&#x2F;从零实现系列</a></p>\n<h2 id=\"第一天\"><a href=\"#第一天\" class=\"headerlink\" title=\"第一天\"></a>第一天</h2><h3 id=\"1-net-http的简易demo\"><a href=\"#1-net-http的简易demo\" class=\"headerlink\" title=\"1. net&#x2F;http的简易demo\"></a>1. net&#x2F;http的简易demo</h3><h4 id=\"代码和一些说明\"><a href=\"#代码和一些说明\" class=\"headerlink\" title=\"代码和一些说明\"></a>代码和一些说明</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/&quot;</span>, indexHandler)<br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/hello&quot;</span>, helloHandler)<br>\tlog.Fatal(http.ListenAndServe(<span class=\"hljs-string\">&quot;:9999&quot;</span>, <span class=\"hljs-literal\">nil</span>))<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">indexHandler</span><span class=\"hljs-params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;<br>\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;URL.Path = %q\\n&quot;</span>, req.URL.Path)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">helloHandler</span><span class=\"hljs-params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> req.Header &#123;<br>\t\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;Header[%q] = %q\\n&quot;</span>, k, v)<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>使用Go语言内置的<code>net/http</code>库, 简单写个demo</p>\n<blockquote>\n<p>第10、11行：设置两个路由，分别是<code>/</code>和<code>/hello</code>，并且分别绑定了两个函数（第16、20行）<code>indexHandler</code>和<code>helloHandler</code></p>\n<p>处理<code>indexHandler</code>，返回的是URL；处理<code>helloHandler</code>，返回的是请求头内的信息</p>\n<p>第12行：设置端口为9999，表示在9999端口进行监听。第二个参数为处理所有http请求实例，<code>nil</code>代表使用标准库中的实例处理。</p>\n<p><code>http.ListenAndServe</code>底层源码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// ListenAndServe listens on the TCP network address addr and then calls</span><br><span class=\"hljs-comment\">// Serve with handler to handle requests on incoming connections.</span><br><span class=\"hljs-comment\">// Accepted connections are configured to enable TCP keep-alives.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// The handler is typically nil, in which case the DefaultServeMux is used.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// ListenAndServe always returns a non-nil error.</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ListenAndServe</span><span class=\"hljs-params\">(addr <span class=\"hljs-type\">string</span>, handler Handler)</span></span> <span class=\"hljs-type\">error</span> &#123;<br>\tserver := &amp;Server&#123;Addr: addr, Handler: handler&#125;<br>\t<span class=\"hljs-keyword\">return</span> server.ListenAndServe()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>Handler</code>底层源码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// A Handler responds to an HTTP request.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// ServeHTTP should write reply headers and data to the ResponseWriter</span><br><span class=\"hljs-comment\">// and then return. Returning signals that the request is finished; it</span><br><span class=\"hljs-comment\">// is not valid to use the ResponseWriter or read from the</span><br><span class=\"hljs-comment\">// Request.Body after or concurrently with the completion of the</span><br><span class=\"hljs-comment\">// ServeHTTP call.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// Depending on the HTTP client software, HTTP protocol version, and</span><br><span class=\"hljs-comment\">// any intermediaries between the client and the Go server, it may not</span><br><span class=\"hljs-comment\">// be possible to read from the Request.Body after writing to the</span><br><span class=\"hljs-comment\">// ResponseWriter. Cautious handlers should read the Request.Body</span><br><span class=\"hljs-comment\">// first, and then reply.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// Except for reading the body, handlers should not modify the</span><br><span class=\"hljs-comment\">// provided Request.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// If ServeHTTP panics, the server (the caller of ServeHTTP) assumes</span><br><span class=\"hljs-comment\">// that the effect of the panic was isolated to the active request.</span><br><span class=\"hljs-comment\">// It recovers the panic, logs a stack trace to the server error log,</span><br><span class=\"hljs-comment\">// and either closes the network connection or sends an HTTP/2</span><br><span class=\"hljs-comment\">// RST_STREAM, depending on the HTTP protocol. To abort a handler so</span><br><span class=\"hljs-comment\">// the client sees an interrupted response but the server doesn&#x27;t log</span><br><span class=\"hljs-comment\">// an error, panic with the value ErrAbortHandler.</span><br><span class=\"hljs-keyword\">type</span> Handler <span class=\"hljs-keyword\">interface</span> &#123;<br>    ServeHTTP(ResponseWriter, *Request)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>http.ListenAndServe()</code>的第二个参数类型可以看到是一个接口，需要实现<code>ServeHTTP</code>方法，也就是说所有HTTP请求都交给它来处理（第二节实现）</p>\n<p><code>log.Fatal()</code>: 进入源码我们可以看到这样的注释<code>Fatal is equivalent to Print() followed by a call to os.Exit(1).</code></p>\n<p>可以得知，当程序报错之后打印日志并会立即退出，defer函数也不会执行，而不同于<code>panic()</code></p>\n<p><code>panic()</code>: </p>\n<ol>\n<li>函数立刻停止执行 (注意是函数本身，不是应用程序停止)</li>\n<li>defer函数被执行</li>\n<li>返回给调用者(caller)</li>\n<li>调用者函数假装也收到了一个panic函数，从而<br> 4.1 立即停止执行当前函数<br> 4.2 它defer函数被执行<br> 4.3 返回给它的调用者(caller)</li>\n<li>…(递归重复上述步骤，直到最上层函数)<br> 应用程序停止。</li>\n</ol>\n</blockquote>\n<h4 id=\"一些运行结果\"><a href=\"#一些运行结果\" class=\"headerlink\" title=\"一些运行结果\"></a>一些运行结果</h4><img src=\"..\\images\\Gee1\\url_path.png\" style=\"zoom:50%;\" />\n\n<img src=\"..\\images\\Gee1\\helloHandler.png\" style=\"zoom:50%;\" />\n\n<p>当然也可以使用curl工具</p>\n<img src=\"..\\images\\Gee1\\curl.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"2-实现http-Handler接口\"><a href=\"#2-实现http-Handler接口\" class=\"headerlink\" title=\"2. 实现http.Handler接口\"></a>2. 实现http.Handler接口</h3><p>需要构造一个对象，并且实现<code>ServeHTTP</code>方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Engine <span class=\"hljs-keyword\">struct</span> &#123;&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;<br>\t<span class=\"hljs-keyword\">switch</span> req.URL.Path &#123;<br>\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;/&quot;</span>:<br>\t\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;URL.Path = %q\\n&quot;</span>, req.URL.Path)<br>\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;/hello&quot;</span>:<br>\t\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> req.Header &#123;<br>\t\t\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;header[%q] = %q\\n&quot;</span>, k, v)<br>\t\t&#125;<br>\t<span class=\"hljs-keyword\">default</span>:<br>\t\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;404 NOT FOUND: %s\\n&quot;</span>, req.URL)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>    engine := <span class=\"hljs-built_in\">new</span>(Engine)<br>    log.Fatal(http.ListenAndServe(<span class=\"hljs-string\">&quot;:9999&quot;</span>, engine))<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>  定义<code>Engine</code>对象，并且实现其中的函数<code>ServeHTTP(http.ResponseWriter, *http.Request)</code>，对URL处理只有<code>/</code>个<code>/hello</code>，处理的逻辑同上。函数中的两个参数分别为：针对第二个参数请求的响应，请求的信息。</p>\n</blockquote>\n<h3 id=\"3-重新组织代码结构，实现核心功能，准备被调用\"><a href=\"#3-重新组织代码结构，实现核心功能，准备被调用\" class=\"headerlink\" title=\"3. 重新组织代码结构，实现核心功能，准备被调用\"></a>3. 重新组织代码结构，实现核心功能，准备被调用</h3><p>使用<code>New()</code>创建 gee 的实例，使用 <code>GET()</code>方法添加路由，最后使用<code>Run()</code>启动Web服务。</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">gee/<br>  |--gee.<span class=\"hljs-built_in\">go</span><br>  |--<span class=\"hljs-built_in\">go</span>.<span class=\"hljs-built_in\">mod</span><br>main.<span class=\"hljs-built_in\">go</span><br><span class=\"hljs-built_in\">go</span>.<span class=\"hljs-built_in\">mod</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// go.mod</span><br>module example<br><br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-number\">1.21</span><br><br>require (<br>\tgee v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><br>)<br><br>replace (<br>\tgee =&gt; ./gee<br>)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// gee.go</span><br><span class=\"hljs-keyword\">package</span> gee<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> HandlerFunc <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(http.ResponseWriter, *http.Request)</span></span><br><br><span class=\"hljs-keyword\">type</span> Engine <span class=\"hljs-keyword\">struct</span> &#123;<br>\trouter <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]HandlerFunc<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">New</span><span class=\"hljs-params\">()</span></span> *Engine &#123;<br>\t<span class=\"hljs-keyword\">return</span> &amp;Engine&#123;router: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]HandlerFunc)&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> addRoute(method <span class=\"hljs-type\">string</span>, pattern <span class=\"hljs-type\">string</span>, handler HandlerFunc) &#123;<br>\tkey := method + <span class=\"hljs-string\">&quot;-&quot;</span> + pattern<br>\tengine.router[key] = handler<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> GET(pattern <span class=\"hljs-type\">string</span>, handler HandlerFunc) &#123;<br>\tengine.addRoute(<span class=\"hljs-string\">&quot;GET&quot;</span>, pattern, handler)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> POST(pattern <span class=\"hljs-type\">string</span>, handler HandlerFunc) &#123;<br>\tengine.addRoute(<span class=\"hljs-string\">&quot;POST&quot;</span>, pattern, handler)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> Run(addr <span class=\"hljs-type\">string</span>) (err <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> http.ListenAndServe(addr, engine)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;<br>\tkey := req.Method + <span class=\"hljs-string\">&quot;-&quot;</span> + req.URL.Path<br>\t<span class=\"hljs-keyword\">if</span> handler, ok := engine.router[key]; ok &#123;<br>\t\thandler(w, req)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t_, err := fmt.Fprintf(w, <span class=\"hljs-string\">&quot;404 NOT FOUND: %s\\n&quot;</span>, req.URL)<br>\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// main.go</span><br><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;gee&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tr := gee.New()<br>\tr.GET(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;<br>\t\t_, err := fmt.Fprintf(writer, <span class=\"hljs-string\">&quot;URL.Path = %q\\n&quot;</span>, request.URL.Path)<br>\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t&#125;)<br><br>\tr.GET(<span class=\"hljs-string\">&quot;/hello&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> request.Header &#123;<br>\t\t\t_, err := fmt.Fprintf(writer, <span class=\"hljs-string\">&quot;Header[%q] = %q\\n&quot;</span>, k, v)<br>\t\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;)<br><br>\terr := r.Run(<span class=\"hljs-string\">&quot;:9999&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码和一些说明-1\"><a href=\"#代码和一些说明-1\" class=\"headerlink\" title=\"代码和一些说明\"></a>代码和一些说明</h4><ol>\n<li><p>执行<code>main()</code>函数，首先进行实例化了<code>gee</code>，<code>main.go</code>中的12行开始执行，调用<code>GET()</code>方法时，会到<code>gee.go</code>中<code>addRoute()</code>添加路由和映射</p>\n<blockquote>\n<p>  例如：r.GET(“&#x2F;“, handler)，则会在映射表中添加{“GET-&#x2F;“: handler}</p>\n</blockquote>\n</li>\n<li><p><code>main.go</code>中，两个路由<code>/</code>和<code>/hello</code>添加完毕开始执行<code>r.Run()</code>，运行服务。</p>\n</li>\n<li><p><code>Run()</code>中的<code>ListenAndServe(addr, handler)</code>函数，又会去执行<code>handler</code>中的接口，也就是<code>ServeHTTP()</code>，由于我们在<code>gee.go</code>文件中已经实现了该方法，会进行调用。</p>\n</li>\n<li><p><code>gee.go</code>文件中，实现了实例化的过程<code>New()</code>函数</p>\n</li>\n</ol>\n<h4 id=\"一些运行结果-1\"><a href=\"#一些运行结果-1\" class=\"headerlink\" title=\"一些运行结果\"></a>一些运行结果</h4><img src=\"../images/Gee1/curl2.png\" style=\"zoom:50%;\" />\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【Study】Go语言动手写Web框架-Gee第一天\"><a href=\"#【Study】Go语言动手写Web框架-Gee第一天\" class=\"headerlink\" title=\"【Study】Go语言动手写Web框架-Gee第一天\"></a>【Study】Go语言动手写Web框架-Gee第一天</h1><p>项目来源: <a href=\"https://github.com/geektutu/7days-golang\">7天用Go动手写&#x2F;从零实现系列</a></p>\n<h2 id=\"第一天\"><a href=\"#第一天\" class=\"headerlink\" title=\"第一天\"></a>第一天</h2><h3 id=\"1-net-http的简易demo\"><a href=\"#1-net-http的简易demo\" class=\"headerlink\" title=\"1. net&#x2F;http的简易demo\"></a>1. net&#x2F;http的简易demo</h3><h4 id=\"代码和一些说明\"><a href=\"#代码和一些说明\" class=\"headerlink\" title=\"代码和一些说明\"></a>代码和一些说明</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/&quot;</span>, indexHandler)<br>\thttp.HandleFunc(<span class=\"hljs-string\">&quot;/hello&quot;</span>, helloHandler)<br>\tlog.Fatal(http.ListenAndServe(<span class=\"hljs-string\">&quot;:9999&quot;</span>, <span class=\"hljs-literal\">nil</span>))<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">indexHandler</span><span class=\"hljs-params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;<br>\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;URL.Path = %q\\n&quot;</span>, req.URL.Path)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">helloHandler</span><span class=\"hljs-params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> req.Header &#123;<br>\t\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;Header[%q] = %q\\n&quot;</span>, k, v)<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>使用Go语言内置的<code>net/http</code>库, 简单写个demo</p>\n<blockquote>\n<p>第10、11行：设置两个路由，分别是<code>/</code>和<code>/hello</code>，并且分别绑定了两个函数（第16、20行）<code>indexHandler</code>和<code>helloHandler</code></p>\n<p>处理<code>indexHandler</code>，返回的是URL；处理<code>helloHandler</code>，返回的是请求头内的信息</p>\n<p>第12行：设置端口为9999，表示在9999端口进行监听。第二个参数为处理所有http请求实例，<code>nil</code>代表使用标准库中的实例处理。</p>\n<p><code>http.ListenAndServe</code>底层源码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// ListenAndServe listens on the TCP network address addr and then calls</span><br><span class=\"hljs-comment\">// Serve with handler to handle requests on incoming connections.</span><br><span class=\"hljs-comment\">// Accepted connections are configured to enable TCP keep-alives.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// The handler is typically nil, in which case the DefaultServeMux is used.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// ListenAndServe always returns a non-nil error.</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ListenAndServe</span><span class=\"hljs-params\">(addr <span class=\"hljs-type\">string</span>, handler Handler)</span></span> <span class=\"hljs-type\">error</span> &#123;<br>\tserver := &amp;Server&#123;Addr: addr, Handler: handler&#125;<br>\t<span class=\"hljs-keyword\">return</span> server.ListenAndServe()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>Handler</code>底层源码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// A Handler responds to an HTTP request.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// ServeHTTP should write reply headers and data to the ResponseWriter</span><br><span class=\"hljs-comment\">// and then return. Returning signals that the request is finished; it</span><br><span class=\"hljs-comment\">// is not valid to use the ResponseWriter or read from the</span><br><span class=\"hljs-comment\">// Request.Body after or concurrently with the completion of the</span><br><span class=\"hljs-comment\">// ServeHTTP call.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// Depending on the HTTP client software, HTTP protocol version, and</span><br><span class=\"hljs-comment\">// any intermediaries between the client and the Go server, it may not</span><br><span class=\"hljs-comment\">// be possible to read from the Request.Body after writing to the</span><br><span class=\"hljs-comment\">// ResponseWriter. Cautious handlers should read the Request.Body</span><br><span class=\"hljs-comment\">// first, and then reply.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// Except for reading the body, handlers should not modify the</span><br><span class=\"hljs-comment\">// provided Request.</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// If ServeHTTP panics, the server (the caller of ServeHTTP) assumes</span><br><span class=\"hljs-comment\">// that the effect of the panic was isolated to the active request.</span><br><span class=\"hljs-comment\">// It recovers the panic, logs a stack trace to the server error log,</span><br><span class=\"hljs-comment\">// and either closes the network connection or sends an HTTP/2</span><br><span class=\"hljs-comment\">// RST_STREAM, depending on the HTTP protocol. To abort a handler so</span><br><span class=\"hljs-comment\">// the client sees an interrupted response but the server doesn&#x27;t log</span><br><span class=\"hljs-comment\">// an error, panic with the value ErrAbortHandler.</span><br><span class=\"hljs-keyword\">type</span> Handler <span class=\"hljs-keyword\">interface</span> &#123;<br>    ServeHTTP(ResponseWriter, *Request)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>http.ListenAndServe()</code>的第二个参数类型可以看到是一个接口，需要实现<code>ServeHTTP</code>方法，也就是说所有HTTP请求都交给它来处理（第二节实现）</p>\n<p><code>log.Fatal()</code>: 进入源码我们可以看到这样的注释<code>Fatal is equivalent to Print() followed by a call to os.Exit(1).</code></p>\n<p>可以得知，当程序报错之后打印日志并会立即退出，defer函数也不会执行，而不同于<code>panic()</code></p>\n<p><code>panic()</code>: </p>\n<ol>\n<li>函数立刻停止执行 (注意是函数本身，不是应用程序停止)</li>\n<li>defer函数被执行</li>\n<li>返回给调用者(caller)</li>\n<li>调用者函数假装也收到了一个panic函数，从而<br> 4.1 立即停止执行当前函数<br> 4.2 它defer函数被执行<br> 4.3 返回给它的调用者(caller)</li>\n<li>…(递归重复上述步骤，直到最上层函数)<br> 应用程序停止。</li>\n</ol>\n</blockquote>\n<h4 id=\"一些运行结果\"><a href=\"#一些运行结果\" class=\"headerlink\" title=\"一些运行结果\"></a>一些运行结果</h4><img src=\"..\\images\\Gee1\\url_path.png\" style=\"zoom:50%;\" />\n\n<img src=\"..\\images\\Gee1\\helloHandler.png\" style=\"zoom:50%;\" />\n\n<p>当然也可以使用curl工具</p>\n<img src=\"..\\images\\Gee1\\curl.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"2-实现http-Handler接口\"><a href=\"#2-实现http-Handler接口\" class=\"headerlink\" title=\"2. 实现http.Handler接口\"></a>2. 实现http.Handler接口</h3><p>需要构造一个对象，并且实现<code>ServeHTTP</code>方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Engine <span class=\"hljs-keyword\">struct</span> &#123;&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;<br>\t<span class=\"hljs-keyword\">switch</span> req.URL.Path &#123;<br>\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;/&quot;</span>:<br>\t\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;URL.Path = %q\\n&quot;</span>, req.URL.Path)<br>\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;/hello&quot;</span>:<br>\t\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> req.Header &#123;<br>\t\t\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;header[%q] = %q\\n&quot;</span>, k, v)<br>\t\t&#125;<br>\t<span class=\"hljs-keyword\">default</span>:<br>\t\tfmt.Fprintf(w, <span class=\"hljs-string\">&quot;404 NOT FOUND: %s\\n&quot;</span>, req.URL)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>    engine := <span class=\"hljs-built_in\">new</span>(Engine)<br>    log.Fatal(http.ListenAndServe(<span class=\"hljs-string\">&quot;:9999&quot;</span>, engine))<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>  定义<code>Engine</code>对象，并且实现其中的函数<code>ServeHTTP(http.ResponseWriter, *http.Request)</code>，对URL处理只有<code>/</code>个<code>/hello</code>，处理的逻辑同上。函数中的两个参数分别为：针对第二个参数请求的响应，请求的信息。</p>\n</blockquote>\n<h3 id=\"3-重新组织代码结构，实现核心功能，准备被调用\"><a href=\"#3-重新组织代码结构，实现核心功能，准备被调用\" class=\"headerlink\" title=\"3. 重新组织代码结构，实现核心功能，准备被调用\"></a>3. 重新组织代码结构，实现核心功能，准备被调用</h3><p>使用<code>New()</code>创建 gee 的实例，使用 <code>GET()</code>方法添加路由，最后使用<code>Run()</code>启动Web服务。</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">gee/<br>  |--gee.<span class=\"hljs-built_in\">go</span><br>  |--<span class=\"hljs-built_in\">go</span>.<span class=\"hljs-built_in\">mod</span><br>main.<span class=\"hljs-built_in\">go</span><br><span class=\"hljs-built_in\">go</span>.<span class=\"hljs-built_in\">mod</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// go.mod</span><br>module example<br><br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-number\">1.21</span><br><br>require (<br>\tgee v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><br>)<br><br>replace (<br>\tgee =&gt; ./gee<br>)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// gee.go</span><br><span class=\"hljs-keyword\">package</span> gee<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> HandlerFunc <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(http.ResponseWriter, *http.Request)</span></span><br><br><span class=\"hljs-keyword\">type</span> Engine <span class=\"hljs-keyword\">struct</span> &#123;<br>\trouter <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]HandlerFunc<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">New</span><span class=\"hljs-params\">()</span></span> *Engine &#123;<br>\t<span class=\"hljs-keyword\">return</span> &amp;Engine&#123;router: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]HandlerFunc)&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> addRoute(method <span class=\"hljs-type\">string</span>, pattern <span class=\"hljs-type\">string</span>, handler HandlerFunc) &#123;<br>\tkey := method + <span class=\"hljs-string\">&quot;-&quot;</span> + pattern<br>\tengine.router[key] = handler<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> GET(pattern <span class=\"hljs-type\">string</span>, handler HandlerFunc) &#123;<br>\tengine.addRoute(<span class=\"hljs-string\">&quot;GET&quot;</span>, pattern, handler)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> POST(pattern <span class=\"hljs-type\">string</span>, handler HandlerFunc) &#123;<br>\tengine.addRoute(<span class=\"hljs-string\">&quot;POST&quot;</span>, pattern, handler)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> Run(addr <span class=\"hljs-type\">string</span>) (err <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> http.ListenAndServe(addr, engine)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;<br>\tkey := req.Method + <span class=\"hljs-string\">&quot;-&quot;</span> + req.URL.Path<br>\t<span class=\"hljs-keyword\">if</span> handler, ok := engine.router[key]; ok &#123;<br>\t\thandler(w, req)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t_, err := fmt.Fprintf(w, <span class=\"hljs-string\">&quot;404 NOT FOUND: %s\\n&quot;</span>, req.URL)<br>\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// main.go</span><br><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;gee&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tr := gee.New()<br>\tr.GET(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;<br>\t\t_, err := fmt.Fprintf(writer, <span class=\"hljs-string\">&quot;URL.Path = %q\\n&quot;</span>, request.URL.Path)<br>\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t&#125;)<br><br>\tr.GET(<span class=\"hljs-string\">&quot;/hello&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> request.Header &#123;<br>\t\t\t_, err := fmt.Fprintf(writer, <span class=\"hljs-string\">&quot;Header[%q] = %q\\n&quot;</span>, k, v)<br>\t\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;)<br><br>\terr := r.Run(<span class=\"hljs-string\">&quot;:9999&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码和一些说明-1\"><a href=\"#代码和一些说明-1\" class=\"headerlink\" title=\"代码和一些说明\"></a>代码和一些说明</h4><ol>\n<li><p>执行<code>main()</code>函数，首先进行实例化了<code>gee</code>，<code>main.go</code>中的12行开始执行，调用<code>GET()</code>方法时，会到<code>gee.go</code>中<code>addRoute()</code>添加路由和映射</p>\n<blockquote>\n<p>  例如：r.GET(“&#x2F;“, handler)，则会在映射表中添加{“GET-&#x2F;“: handler}</p>\n</blockquote>\n</li>\n<li><p><code>main.go</code>中，两个路由<code>/</code>和<code>/hello</code>添加完毕开始执行<code>r.Run()</code>，运行服务。</p>\n</li>\n<li><p><code>Run()</code>中的<code>ListenAndServe(addr, handler)</code>函数，又会去执行<code>handler</code>中的接口，也就是<code>ServeHTTP()</code>，由于我们在<code>gee.go</code>文件中已经实现了该方法，会进行调用。</p>\n</li>\n<li><p><code>gee.go</code>文件中，实现了实例化的过程<code>New()</code>函数</p>\n</li>\n</ol>\n<h4 id=\"一些运行结果-1\"><a href=\"#一些运行结果-1\" class=\"headerlink\" title=\"一些运行结果\"></a>一些运行结果</h4><img src=\"../images/Gee1/curl2.png\" style=\"zoom:50%;\" />\n"},{"title":"【study】Spring学习part01","abbrlink":"2c7b6666","date":"2024-01-28T02:57:22.000Z","_content":"\n# 【study】Spring学习part01\n\n- 传统JavaWeb开发的困惑\n- IoC、DI和AOP思想提出\n- Spring框架诞生\n\n## 传统JavaWeb开发的困惑以及解决方案\n\n``` java\n// 用户账户信息修改业务方法\npublic void updateUserInfo(User user) {\n    try {\n        // 开启事务\n        DaoUtils.openTransaction();\n        // 获得UserDao执行插入User数据到数据库操作\n        UserDao userDao = new UserDaoImpl();\n        userDao.updateUserInfo(user);\n        // 修改成功后, 向用户行为日志表中插入一条数据, 内容: 修改时间等信息\n        UserLog userLog = new UserLogImpl();\n        UserLog.recodeUserUpdate(user);\n        // 提交事务\n        DaoUtils.commit();\n    } catch(Exception e) {\n        // 回滚事务\n        DaoUtils.rollback();\n        // 向异常日志表中插入数据\n        ExceptionLog exceptionLog = new ExceptionLogImpl();\n        exceptionLog.recodeException(this, e);\n    }\n}\n```\n\n``` java\n// 用户注册业务方法\npublic void regist(User user) {\n    try {\n        // 开启事务\n        DaoUtils.openTransaction();\n        // 获得UserDao执行插入User数据到数据库操作\n        UserDao userDao = new UserDaoImpl();\n        userDao.addUser(user);\n        // 修改成功后, 向用户行为日志表中插入一条数据, 内容: 时间, 用户, 注册行为\n        UserLog userLog = new UserLogImpl();\n        UserLog.recodeUserRegist(user);\n        // 注册成功后, 向用户邮箱发送一封激活邮件\n        CommonUtils.sendEmail(user);\n        // 提交事务\n        DaoUtils.commit();\n    } catch(Exception e) {\n        // 回滚事务\n        DaoUtils.rollback();\n        // 向异常日志表中插入数据\n        ExceptionLog exceptionLog = new ExceptionLogImpl();\n        exceptionLog.recodeException(this, e);\n    }\n}\n```\n\n代码是两个业务层的代码, 主业务均为第7\\~8行\n\n现在存在一些问题: 以`updateUserInfo()`方法举例\n\n``` java\nUserDao userDao = new UserDaoImpl();\nUserLog userLog = new UserLogImpl();\nExceptionLog exceptionLog = new ExceptionLogImpl();\n```\n\n这里面耦合度很高:\n\n- 层与层之间紧密耦合在了一起, 接口与具体实现紧密耦合在一起\n\n    > 解决思路: 程序代码中不要动手new对象，第三方根据要求为程序提供需要的Bean对象\n\n- 通用的事务功能耦合在业务代码中，通用的日志功能耦合在业务代码中\n\n    > 程序代码中不要动手new对象，第三方根据要求为程序提供需要的Bean对象的代理对象\n\n### IoC思想\n\nInversion of Control，控制反转，强调的是原来在程序中创建Bean的权利反转给第三方\n\n### DI思想\n\nDependency Injection，依赖注入，强调的Bean之间关系，这种关系第三方负责去设置\n\n### AOP思想\n\nAspect Oriented Programming，面向切面编程，功能的横向抽取，主要的实现方式是Proxy\n\n## 基于XML管理Bean\n\nIDE中新建Java项目，并且新建子模块`day01`, 父模块中的`pom.xml`引入一些依赖\n\n==jdk版本: 21.0.2==\n\n``` xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>6.1.2</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.junit.jupiter</groupId>\n        <artifactId>junit-jupiter-api</artifactId>\n        <version>5.8.2</version>\n    </dependency>\n</dependencies>\n```\n\n建立一些简单的文件\n\n在`day01.src.main.java.org.example`文件夹下\n\n``` java\n// service.UserService.Java\npackage org.example.service;\n\npublic interface UserService {\n    void add();\n}\n\n```\n\n``` java\n// service.impl.UserSerivceImpl\npackage org.example.service.impl;\n\nimport org.example.service.UserService;\n\npublic class UserServiceImpl implements UserService {\n\tpublic void add() {\n        System.out.println(\"add......\");\n    }\n}\n\n```\n\n`day01/src/main/resources/`文件夹内添加xml配置文件, 文件名没有要求，这里叫做`beans.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.service.impl.UserServiceImpl\" id=\"userService\">\n\n    </bean>\n</beans>\n```\n\n`bean`标签中，class指定要创建对象的类，id是唯一标识\n\n\n\n``` java\n// test.TestUserService\npublic class TestUserService {\n    @Test\n    public void testUserService() {\n        // 加载Spring配置文件, 对象创建\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\n\n        // 获取创建的对象\n        // context.getBean(\"userService\")的返回值为Object类型, 需要强制类型转换\n        UserService userService = (UserService) context.getBean(\"userService\");\n        System.out.println(userService);\n\n        // 使用对象调用方法进行调试\n        userService.add();\n    }\n\n}\n\n```\n\n\n\n创建的对象会执行其构造函数。\n\n创建好的对象会被放入到`Map<String, BeanDefinition> beanDefinitionMap`\n\nkey是唯一标识符，`beans.xml`中的id\n\nvalue是类的定义（描述）信息\n\n\n\n\n\n## Log4j2日志框架\n\n### 日志信息优先级（由低到高）\n\n-   TRACE：追踪，是最低的日志级别，相当于追踪程序的执行\n-   DEBUG：调试一般在开发中，都将其设置为最低的日志级别\n-   INFO：信息，输出重要的信息，使用较多\n-   WARN：警告，输出警告的信息\n-   ERROR：错误，输出错误信息\n-   FATAL：严重错误\n\n ### 引入log4j2依赖\n\n``` xml\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>2.20.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-slf4j2-impl</artifactId>\n    <version>2.20.0</version>\n</dependency>\n```\n\n配置log4j2，在`day01.src.main.resources`下新建`log4j2.xml`\n\n``` xml\n<!--日志信息配置-->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<configuration>\n    <loggers>\n        <root level=\"DEBUG\">\n            <appender-ref ref=\"spring6log\" />\n            <appender-ref ref=\"RollingFile\"/>\n            <appender-ref ref=\"log\"/>\n        </root>\n    </loggers>\n    <appenders>\n        <!--输入日志信息到控制台-->\n        <console name=\"spring6log\" target=\"SYSTEM_OUT\">\n            <!--控制日志输出的格式-->\n            <PatternLayout pattern=\"%d{yyyy-MM-dd HH:mm:ss SSS} [%t] %-3level %logger{1024} - %msg%n\"/>\n        </console>\n\n        <!--文件会打印输出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试调用-->\n        <File name=\"log\" fileName=\"/Users/promise/Promise Code/Java/FinalWork/SpringStudy/day01/test.log\" append=\"false\">\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n\" />\n        </File>\n\n        <!--\n        这个会打印所有的信息\n        每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面进行压缩，作为存档\n        -->\n        <RollingFile name=\"RollingFile\" fileName=\"/Users/promise/Promise Code/Java/FinalWork/SpringStudy/day01/app.log\"\n                     filePattern=\"log/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz\">\n            <PatternLayout pattern=\"%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n\"/>\n            <SizeBasedTriggeringPolicy size=\"50MB\"/>\n            <!--DefaultRolloverStrategy 属性不设置，则默认为最多同一文件夹下7个文件，这里设置了20-->\n            <DefaultRolloverStrategy max=\"20\"/>\n        </RollingFile>\n    </appenders>\n</configuration>\n```\n\n### 使用logger\n\n在`org/example/test/TestUserService.java`文件，自定义logger\n\n``` java\npackage org.example.test;\n\n\nimport org.example.service.UserService;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class TestUserService {\n    // 创建Logger对象\n    private Logger logger = LoggerFactory.getLogger(TestUserService.class);\n    @Test\n    public void testUserService() {\n        // 加载Spring配置文件, 对象创建\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\n\n        // 获取创建的对象\n        // context.getBean(\"userService\")的返回值为Object类型, 需要强制类型转换\n        UserService userService = (UserService) context.getBean(\"userService\");\n        System.out.println(userService);\n\n        // 使用对象调用方法进行调试\n        userService.add();\n\n        //手动写日志\n        logger.info(\"执行调用成功**************\");\n    }\n\n}\n\n```\n\n![自定义日志输出](../images/springDay01/logger自定义输出@2x.png)\n\n","source":"_posts/【study】Spring学习part01.md","raw":"---\ntitle: 【study】Spring学习part01\ntags:\n  - Study\n  - Java\n  - Spring框架\nabbrlink: 2c7b6666\ndate: 2024-01-28 10:57:22\n---\n\n# 【study】Spring学习part01\n\n- 传统JavaWeb开发的困惑\n- IoC、DI和AOP思想提出\n- Spring框架诞生\n\n## 传统JavaWeb开发的困惑以及解决方案\n\n``` java\n// 用户账户信息修改业务方法\npublic void updateUserInfo(User user) {\n    try {\n        // 开启事务\n        DaoUtils.openTransaction();\n        // 获得UserDao执行插入User数据到数据库操作\n        UserDao userDao = new UserDaoImpl();\n        userDao.updateUserInfo(user);\n        // 修改成功后, 向用户行为日志表中插入一条数据, 内容: 修改时间等信息\n        UserLog userLog = new UserLogImpl();\n        UserLog.recodeUserUpdate(user);\n        // 提交事务\n        DaoUtils.commit();\n    } catch(Exception e) {\n        // 回滚事务\n        DaoUtils.rollback();\n        // 向异常日志表中插入数据\n        ExceptionLog exceptionLog = new ExceptionLogImpl();\n        exceptionLog.recodeException(this, e);\n    }\n}\n```\n\n``` java\n// 用户注册业务方法\npublic void regist(User user) {\n    try {\n        // 开启事务\n        DaoUtils.openTransaction();\n        // 获得UserDao执行插入User数据到数据库操作\n        UserDao userDao = new UserDaoImpl();\n        userDao.addUser(user);\n        // 修改成功后, 向用户行为日志表中插入一条数据, 内容: 时间, 用户, 注册行为\n        UserLog userLog = new UserLogImpl();\n        UserLog.recodeUserRegist(user);\n        // 注册成功后, 向用户邮箱发送一封激活邮件\n        CommonUtils.sendEmail(user);\n        // 提交事务\n        DaoUtils.commit();\n    } catch(Exception e) {\n        // 回滚事务\n        DaoUtils.rollback();\n        // 向异常日志表中插入数据\n        ExceptionLog exceptionLog = new ExceptionLogImpl();\n        exceptionLog.recodeException(this, e);\n    }\n}\n```\n\n代码是两个业务层的代码, 主业务均为第7\\~8行\n\n现在存在一些问题: 以`updateUserInfo()`方法举例\n\n``` java\nUserDao userDao = new UserDaoImpl();\nUserLog userLog = new UserLogImpl();\nExceptionLog exceptionLog = new ExceptionLogImpl();\n```\n\n这里面耦合度很高:\n\n- 层与层之间紧密耦合在了一起, 接口与具体实现紧密耦合在一起\n\n    > 解决思路: 程序代码中不要动手new对象，第三方根据要求为程序提供需要的Bean对象\n\n- 通用的事务功能耦合在业务代码中，通用的日志功能耦合在业务代码中\n\n    > 程序代码中不要动手new对象，第三方根据要求为程序提供需要的Bean对象的代理对象\n\n### IoC思想\n\nInversion of Control，控制反转，强调的是原来在程序中创建Bean的权利反转给第三方\n\n### DI思想\n\nDependency Injection，依赖注入，强调的Bean之间关系，这种关系第三方负责去设置\n\n### AOP思想\n\nAspect Oriented Programming，面向切面编程，功能的横向抽取，主要的实现方式是Proxy\n\n## 基于XML管理Bean\n\nIDE中新建Java项目，并且新建子模块`day01`, 父模块中的`pom.xml`引入一些依赖\n\n==jdk版本: 21.0.2==\n\n``` xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>6.1.2</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.junit.jupiter</groupId>\n        <artifactId>junit-jupiter-api</artifactId>\n        <version>5.8.2</version>\n    </dependency>\n</dependencies>\n```\n\n建立一些简单的文件\n\n在`day01.src.main.java.org.example`文件夹下\n\n``` java\n// service.UserService.Java\npackage org.example.service;\n\npublic interface UserService {\n    void add();\n}\n\n```\n\n``` java\n// service.impl.UserSerivceImpl\npackage org.example.service.impl;\n\nimport org.example.service.UserService;\n\npublic class UserServiceImpl implements UserService {\n\tpublic void add() {\n        System.out.println(\"add......\");\n    }\n}\n\n```\n\n`day01/src/main/resources/`文件夹内添加xml配置文件, 文件名没有要求，这里叫做`beans.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.service.impl.UserServiceImpl\" id=\"userService\">\n\n    </bean>\n</beans>\n```\n\n`bean`标签中，class指定要创建对象的类，id是唯一标识\n\n\n\n``` java\n// test.TestUserService\npublic class TestUserService {\n    @Test\n    public void testUserService() {\n        // 加载Spring配置文件, 对象创建\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\n\n        // 获取创建的对象\n        // context.getBean(\"userService\")的返回值为Object类型, 需要强制类型转换\n        UserService userService = (UserService) context.getBean(\"userService\");\n        System.out.println(userService);\n\n        // 使用对象调用方法进行调试\n        userService.add();\n    }\n\n}\n\n```\n\n\n\n创建的对象会执行其构造函数。\n\n创建好的对象会被放入到`Map<String, BeanDefinition> beanDefinitionMap`\n\nkey是唯一标识符，`beans.xml`中的id\n\nvalue是类的定义（描述）信息\n\n\n\n\n\n## Log4j2日志框架\n\n### 日志信息优先级（由低到高）\n\n-   TRACE：追踪，是最低的日志级别，相当于追踪程序的执行\n-   DEBUG：调试一般在开发中，都将其设置为最低的日志级别\n-   INFO：信息，输出重要的信息，使用较多\n-   WARN：警告，输出警告的信息\n-   ERROR：错误，输出错误信息\n-   FATAL：严重错误\n\n ### 引入log4j2依赖\n\n``` xml\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>2.20.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-slf4j2-impl</artifactId>\n    <version>2.20.0</version>\n</dependency>\n```\n\n配置log4j2，在`day01.src.main.resources`下新建`log4j2.xml`\n\n``` xml\n<!--日志信息配置-->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<configuration>\n    <loggers>\n        <root level=\"DEBUG\">\n            <appender-ref ref=\"spring6log\" />\n            <appender-ref ref=\"RollingFile\"/>\n            <appender-ref ref=\"log\"/>\n        </root>\n    </loggers>\n    <appenders>\n        <!--输入日志信息到控制台-->\n        <console name=\"spring6log\" target=\"SYSTEM_OUT\">\n            <!--控制日志输出的格式-->\n            <PatternLayout pattern=\"%d{yyyy-MM-dd HH:mm:ss SSS} [%t] %-3level %logger{1024} - %msg%n\"/>\n        </console>\n\n        <!--文件会打印输出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试调用-->\n        <File name=\"log\" fileName=\"/Users/promise/Promise Code/Java/FinalWork/SpringStudy/day01/test.log\" append=\"false\">\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n\" />\n        </File>\n\n        <!--\n        这个会打印所有的信息\n        每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面进行压缩，作为存档\n        -->\n        <RollingFile name=\"RollingFile\" fileName=\"/Users/promise/Promise Code/Java/FinalWork/SpringStudy/day01/app.log\"\n                     filePattern=\"log/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz\">\n            <PatternLayout pattern=\"%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n\"/>\n            <SizeBasedTriggeringPolicy size=\"50MB\"/>\n            <!--DefaultRolloverStrategy 属性不设置，则默认为最多同一文件夹下7个文件，这里设置了20-->\n            <DefaultRolloverStrategy max=\"20\"/>\n        </RollingFile>\n    </appenders>\n</configuration>\n```\n\n### 使用logger\n\n在`org/example/test/TestUserService.java`文件，自定义logger\n\n``` java\npackage org.example.test;\n\n\nimport org.example.service.UserService;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class TestUserService {\n    // 创建Logger对象\n    private Logger logger = LoggerFactory.getLogger(TestUserService.class);\n    @Test\n    public void testUserService() {\n        // 加载Spring配置文件, 对象创建\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\n\n        // 获取创建的对象\n        // context.getBean(\"userService\")的返回值为Object类型, 需要强制类型转换\n        UserService userService = (UserService) context.getBean(\"userService\");\n        System.out.println(userService);\n\n        // 使用对象调用方法进行调试\n        userService.add();\n\n        //手动写日志\n        logger.info(\"执行调用成功**************\");\n    }\n\n}\n\n```\n\n![自定义日志输出](../images/springDay01/logger自定义输出@2x.png)\n\n","slug":"【study】Spring学习part01","published":1,"updated":"2024-02-07T12:06:24.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsbyyuh60001qbgtar2pfx67","content":"<h1 id=\"【study】Spring学习part01\"><a href=\"#【study】Spring学习part01\" class=\"headerlink\" title=\"【study】Spring学习part01\"></a>【study】Spring学习part01</h1><ul>\n<li>传统JavaWeb开发的困惑</li>\n<li>IoC、DI和AOP思想提出</li>\n<li>Spring框架诞生</li>\n</ul>\n<h2 id=\"传统JavaWeb开发的困惑以及解决方案\"><a href=\"#传统JavaWeb开发的困惑以及解决方案\" class=\"headerlink\" title=\"传统JavaWeb开发的困惑以及解决方案\"></a>传统JavaWeb开发的困惑以及解决方案</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 用户账户信息修改业务方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUserInfo</span><span class=\"hljs-params\">(User user)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 开启事务</span><br>        DaoUtils.openTransaction();<br>        <span class=\"hljs-comment\">// 获得UserDao执行插入User数据到数据库操作</span><br>        <span class=\"hljs-type\">UserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserDaoImpl</span>();<br>        userDao.updateUserInfo(user);<br>        <span class=\"hljs-comment\">// 修改成功后, 向用户行为日志表中插入一条数据, 内容: 修改时间等信息</span><br>        <span class=\"hljs-type\">UserLog</span> <span class=\"hljs-variable\">userLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLogImpl</span>();<br>        UserLog.recodeUserUpdate(user);<br>        <span class=\"hljs-comment\">// 提交事务</span><br>        DaoUtils.commit();<br>    &#125; <span class=\"hljs-keyword\">catch</span>(Exception e) &#123;<br>        <span class=\"hljs-comment\">// 回滚事务</span><br>        DaoUtils.rollback();<br>        <span class=\"hljs-comment\">// 向异常日志表中插入数据</span><br>        <span class=\"hljs-type\">ExceptionLog</span> <span class=\"hljs-variable\">exceptionLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExceptionLogImpl</span>();<br>        exceptionLog.recodeException(<span class=\"hljs-built_in\">this</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 用户注册业务方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">regist</span><span class=\"hljs-params\">(User user)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 开启事务</span><br>        DaoUtils.openTransaction();<br>        <span class=\"hljs-comment\">// 获得UserDao执行插入User数据到数据库操作</span><br>        <span class=\"hljs-type\">UserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserDaoImpl</span>();<br>        userDao.addUser(user);<br>        <span class=\"hljs-comment\">// 修改成功后, 向用户行为日志表中插入一条数据, 内容: 时间, 用户, 注册行为</span><br>        <span class=\"hljs-type\">UserLog</span> <span class=\"hljs-variable\">userLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLogImpl</span>();<br>        UserLog.recodeUserRegist(user);<br>        <span class=\"hljs-comment\">// 注册成功后, 向用户邮箱发送一封激活邮件</span><br>        CommonUtils.sendEmail(user);<br>        <span class=\"hljs-comment\">// 提交事务</span><br>        DaoUtils.commit();<br>    &#125; <span class=\"hljs-keyword\">catch</span>(Exception e) &#123;<br>        <span class=\"hljs-comment\">// 回滚事务</span><br>        DaoUtils.rollback();<br>        <span class=\"hljs-comment\">// 向异常日志表中插入数据</span><br>        <span class=\"hljs-type\">ExceptionLog</span> <span class=\"hljs-variable\">exceptionLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExceptionLogImpl</span>();<br>        exceptionLog.recodeException(<span class=\"hljs-built_in\">this</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>代码是两个业务层的代码, 主业务均为第7~8行</p>\n<p>现在存在一些问题: 以<code>updateUserInfo()</code>方法举例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">UserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserDaoImpl</span>();<br><span class=\"hljs-type\">UserLog</span> <span class=\"hljs-variable\">userLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLogImpl</span>();<br><span class=\"hljs-type\">ExceptionLog</span> <span class=\"hljs-variable\">exceptionLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExceptionLogImpl</span>();<br></code></pre></td></tr></table></figure>\n\n<p>这里面耦合度很高:</p>\n<ul>\n<li><p>层与层之间紧密耦合在了一起, 接口与具体实现紧密耦合在一起</p>\n<blockquote>\n<p>解决思路: 程序代码中不要动手new对象，第三方根据要求为程序提供需要的Bean对象</p>\n</blockquote>\n</li>\n<li><p>通用的事务功能耦合在业务代码中，通用的日志功能耦合在业务代码中</p>\n<blockquote>\n<p>程序代码中不要动手new对象，第三方根据要求为程序提供需要的Bean对象的代理对象</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"IoC思想\"><a href=\"#IoC思想\" class=\"headerlink\" title=\"IoC思想\"></a>IoC思想</h3><p>Inversion of Control，控制反转，强调的是原来在程序中创建Bean的权利反转给第三方</p>\n<h3 id=\"DI思想\"><a href=\"#DI思想\" class=\"headerlink\" title=\"DI思想\"></a>DI思想</h3><p>Dependency Injection，依赖注入，强调的Bean之间关系，这种关系第三方负责去设置</p>\n<h3 id=\"AOP思想\"><a href=\"#AOP思想\" class=\"headerlink\" title=\"AOP思想\"></a>AOP思想</h3><p>Aspect Oriented Programming，面向切面编程，功能的横向抽取，主要的实现方式是Proxy</p>\n<h2 id=\"基于XML管理Bean\"><a href=\"#基于XML管理Bean\" class=\"headerlink\" title=\"基于XML管理Bean\"></a>基于XML管理Bean</h2><p>IDE中新建Java项目，并且新建子模块<code>day01</code>, 父模块中的<code>pom.xml</code>引入一些依赖</p>\n<p>&#x3D;&#x3D;jdk版本: 21.0.2&#x3D;&#x3D;</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-context<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.junit.jupiter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit-jupiter-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.8.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>建立一些简单的文件</p>\n<p>在<code>day01.src.main.java.org.example</code>文件夹下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// service.UserService.Java</span><br><span class=\"hljs-keyword\">package</span> org.example.service;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// service.impl.UserSerivceImpl</span><br><span class=\"hljs-keyword\">package</span> org.example.service.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.service.UserService;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;add......&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><code>day01/src/main/resources/</code>文件夹内添加xml配置文件, 文件名没有要求，这里叫做<code>beans.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.service.impl.UserServiceImpl&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><code>bean</code>标签中，class指定要创建对象的类，id是唯一标识</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// test.TestUserService</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestUserService</span> &#123;<br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUserService</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 加载Spring配置文件, 对象创建</span><br>        <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;beans.xml&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 获取创建的对象</span><br>        <span class=\"hljs-comment\">// context.getBean(&quot;userService&quot;)的返回值为Object类型, 需要强制类型转换</span><br>        <span class=\"hljs-type\">UserService</span> <span class=\"hljs-variable\">userService</span> <span class=\"hljs-operator\">=</span> (UserService) context.getBean(<span class=\"hljs-string\">&quot;userService&quot;</span>);<br>        System.out.println(userService);<br><br>        <span class=\"hljs-comment\">// 使用对象调用方法进行调试</span><br>        userService.add();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>创建的对象会执行其构造函数。</p>\n<p>创建好的对象会被放入到<code>Map&lt;String, BeanDefinition&gt; beanDefinitionMap</code></p>\n<p>key是唯一标识符，<code>beans.xml</code>中的id</p>\n<p>value是类的定义（描述）信息</p>\n<h2 id=\"Log4j2日志框架\"><a href=\"#Log4j2日志框架\" class=\"headerlink\" title=\"Log4j2日志框架\"></a>Log4j2日志框架</h2><h3 id=\"日志信息优先级（由低到高）\"><a href=\"#日志信息优先级（由低到高）\" class=\"headerlink\" title=\"日志信息优先级（由低到高）\"></a>日志信息优先级（由低到高）</h3><ul>\n<li>TRACE：追踪，是最低的日志级别，相当于追踪程序的执行</li>\n<li>DEBUG：调试一般在开发中，都将其设置为最低的日志级别</li>\n<li>INFO：信息，输出重要的信息，使用较多</li>\n<li>WARN：警告，输出警告的信息</li>\n<li>ERROR：错误，输出错误信息</li>\n<li>FATAL：严重错误</li>\n</ul>\n<h3 id=\"引入log4j2依赖\"><a href=\"#引入log4j2依赖\" class=\"headerlink\" title=\"引入log4j2依赖\"></a>引入log4j2依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>log4j-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.20.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.20.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>配置log4j2，在<code>day01.src.main.resources</code>下新建<code>log4j2.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--日志信息配置--&gt;</span><br><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">loggers</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">root</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;DEBUG&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;spring6log&quot;</span> /&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;RollingFile&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;log&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">root</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">loggers</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appenders</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--输入日志信息到控制台--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">console</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;spring6log&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--控制日志输出的格式--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">console</span>&gt;</span><br><br>        <span class=\"hljs-comment\">&lt;!--文件会打印输出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试调用--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">File</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;log&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;/Users/promise/Promise Code/Java/FinalWork/SpringStudy/day01/test.log&quot;</span> <span class=\"hljs-attr\">append</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">File</span>&gt;</span><br><br>        <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        这个会打印所有的信息</span><br><span class=\"hljs-comment\">        每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面进行压缩，作为存档</span><br><span class=\"hljs-comment\">        --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RollingFile</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;RollingFile&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;/Users/promise/Promise Code/Java/FinalWork/SpringStudy/day01/app.log&quot;</span></span><br><span class=\"hljs-tag\">                     <span class=\"hljs-attr\">filePattern</span>=<span class=\"hljs-string\">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SizeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;50MB&quot;</span>/&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--DefaultRolloverStrategy 属性不设置，则默认为最多同一文件夹下7个文件，这里设置了20--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultRolloverStrategy</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;20&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RollingFile</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appenders</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用logger\"><a href=\"#使用logger\" class=\"headerlink\" title=\"使用logger\"></a>使用logger</h3><p>在<code>org/example/test/TestUserService.java</code>文件，自定义logger</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.test;<br><br><br><span class=\"hljs-keyword\">import</span> org.example.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestUserService</span> &#123;<br>    <span class=\"hljs-comment\">// 创建Logger对象</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">logger</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(TestUserService.class);<br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUserService</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 加载Spring配置文件, 对象创建</span><br>        <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;beans.xml&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 获取创建的对象</span><br>        <span class=\"hljs-comment\">// context.getBean(&quot;userService&quot;)的返回值为Object类型, 需要强制类型转换</span><br>        <span class=\"hljs-type\">UserService</span> <span class=\"hljs-variable\">userService</span> <span class=\"hljs-operator\">=</span> (UserService) context.getBean(<span class=\"hljs-string\">&quot;userService&quot;</span>);<br>        System.out.println(userService);<br><br>        <span class=\"hljs-comment\">// 使用对象调用方法进行调试</span><br>        userService.add();<br><br>        <span class=\"hljs-comment\">//手动写日志</span><br>        logger.info(<span class=\"hljs-string\">&quot;执行调用成功**************&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay01/logger%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%87%BA@2x.png\" alt=\"自定义日志输出\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【study】Spring学习part01\"><a href=\"#【study】Spring学习part01\" class=\"headerlink\" title=\"【study】Spring学习part01\"></a>【study】Spring学习part01</h1><ul>\n<li>传统JavaWeb开发的困惑</li>\n<li>IoC、DI和AOP思想提出</li>\n<li>Spring框架诞生</li>\n</ul>\n<h2 id=\"传统JavaWeb开发的困惑以及解决方案\"><a href=\"#传统JavaWeb开发的困惑以及解决方案\" class=\"headerlink\" title=\"传统JavaWeb开发的困惑以及解决方案\"></a>传统JavaWeb开发的困惑以及解决方案</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 用户账户信息修改业务方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUserInfo</span><span class=\"hljs-params\">(User user)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 开启事务</span><br>        DaoUtils.openTransaction();<br>        <span class=\"hljs-comment\">// 获得UserDao执行插入User数据到数据库操作</span><br>        <span class=\"hljs-type\">UserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserDaoImpl</span>();<br>        userDao.updateUserInfo(user);<br>        <span class=\"hljs-comment\">// 修改成功后, 向用户行为日志表中插入一条数据, 内容: 修改时间等信息</span><br>        <span class=\"hljs-type\">UserLog</span> <span class=\"hljs-variable\">userLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLogImpl</span>();<br>        UserLog.recodeUserUpdate(user);<br>        <span class=\"hljs-comment\">// 提交事务</span><br>        DaoUtils.commit();<br>    &#125; <span class=\"hljs-keyword\">catch</span>(Exception e) &#123;<br>        <span class=\"hljs-comment\">// 回滚事务</span><br>        DaoUtils.rollback();<br>        <span class=\"hljs-comment\">// 向异常日志表中插入数据</span><br>        <span class=\"hljs-type\">ExceptionLog</span> <span class=\"hljs-variable\">exceptionLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExceptionLogImpl</span>();<br>        exceptionLog.recodeException(<span class=\"hljs-built_in\">this</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 用户注册业务方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">regist</span><span class=\"hljs-params\">(User user)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 开启事务</span><br>        DaoUtils.openTransaction();<br>        <span class=\"hljs-comment\">// 获得UserDao执行插入User数据到数据库操作</span><br>        <span class=\"hljs-type\">UserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserDaoImpl</span>();<br>        userDao.addUser(user);<br>        <span class=\"hljs-comment\">// 修改成功后, 向用户行为日志表中插入一条数据, 内容: 时间, 用户, 注册行为</span><br>        <span class=\"hljs-type\">UserLog</span> <span class=\"hljs-variable\">userLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLogImpl</span>();<br>        UserLog.recodeUserRegist(user);<br>        <span class=\"hljs-comment\">// 注册成功后, 向用户邮箱发送一封激活邮件</span><br>        CommonUtils.sendEmail(user);<br>        <span class=\"hljs-comment\">// 提交事务</span><br>        DaoUtils.commit();<br>    &#125; <span class=\"hljs-keyword\">catch</span>(Exception e) &#123;<br>        <span class=\"hljs-comment\">// 回滚事务</span><br>        DaoUtils.rollback();<br>        <span class=\"hljs-comment\">// 向异常日志表中插入数据</span><br>        <span class=\"hljs-type\">ExceptionLog</span> <span class=\"hljs-variable\">exceptionLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExceptionLogImpl</span>();<br>        exceptionLog.recodeException(<span class=\"hljs-built_in\">this</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>代码是两个业务层的代码, 主业务均为第7~8行</p>\n<p>现在存在一些问题: 以<code>updateUserInfo()</code>方法举例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">UserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserDaoImpl</span>();<br><span class=\"hljs-type\">UserLog</span> <span class=\"hljs-variable\">userLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLogImpl</span>();<br><span class=\"hljs-type\">ExceptionLog</span> <span class=\"hljs-variable\">exceptionLog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExceptionLogImpl</span>();<br></code></pre></td></tr></table></figure>\n\n<p>这里面耦合度很高:</p>\n<ul>\n<li><p>层与层之间紧密耦合在了一起, 接口与具体实现紧密耦合在一起</p>\n<blockquote>\n<p>解决思路: 程序代码中不要动手new对象，第三方根据要求为程序提供需要的Bean对象</p>\n</blockquote>\n</li>\n<li><p>通用的事务功能耦合在业务代码中，通用的日志功能耦合在业务代码中</p>\n<blockquote>\n<p>程序代码中不要动手new对象，第三方根据要求为程序提供需要的Bean对象的代理对象</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"IoC思想\"><a href=\"#IoC思想\" class=\"headerlink\" title=\"IoC思想\"></a>IoC思想</h3><p>Inversion of Control，控制反转，强调的是原来在程序中创建Bean的权利反转给第三方</p>\n<h3 id=\"DI思想\"><a href=\"#DI思想\" class=\"headerlink\" title=\"DI思想\"></a>DI思想</h3><p>Dependency Injection，依赖注入，强调的Bean之间关系，这种关系第三方负责去设置</p>\n<h3 id=\"AOP思想\"><a href=\"#AOP思想\" class=\"headerlink\" title=\"AOP思想\"></a>AOP思想</h3><p>Aspect Oriented Programming，面向切面编程，功能的横向抽取，主要的实现方式是Proxy</p>\n<h2 id=\"基于XML管理Bean\"><a href=\"#基于XML管理Bean\" class=\"headerlink\" title=\"基于XML管理Bean\"></a>基于XML管理Bean</h2><p>IDE中新建Java项目，并且新建子模块<code>day01</code>, 父模块中的<code>pom.xml</code>引入一些依赖</p>\n<p>&#x3D;&#x3D;jdk版本: 21.0.2&#x3D;&#x3D;</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-context<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.junit.jupiter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit-jupiter-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.8.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>建立一些简单的文件</p>\n<p>在<code>day01.src.main.java.org.example</code>文件夹下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// service.UserService.Java</span><br><span class=\"hljs-keyword\">package</span> org.example.service;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// service.impl.UserSerivceImpl</span><br><span class=\"hljs-keyword\">package</span> org.example.service.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.service.UserService;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;add......&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><code>day01/src/main/resources/</code>文件夹内添加xml配置文件, 文件名没有要求，这里叫做<code>beans.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.service.impl.UserServiceImpl&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><code>bean</code>标签中，class指定要创建对象的类，id是唯一标识</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// test.TestUserService</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestUserService</span> &#123;<br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUserService</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 加载Spring配置文件, 对象创建</span><br>        <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;beans.xml&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 获取创建的对象</span><br>        <span class=\"hljs-comment\">// context.getBean(&quot;userService&quot;)的返回值为Object类型, 需要强制类型转换</span><br>        <span class=\"hljs-type\">UserService</span> <span class=\"hljs-variable\">userService</span> <span class=\"hljs-operator\">=</span> (UserService) context.getBean(<span class=\"hljs-string\">&quot;userService&quot;</span>);<br>        System.out.println(userService);<br><br>        <span class=\"hljs-comment\">// 使用对象调用方法进行调试</span><br>        userService.add();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>创建的对象会执行其构造函数。</p>\n<p>创建好的对象会被放入到<code>Map&lt;String, BeanDefinition&gt; beanDefinitionMap</code></p>\n<p>key是唯一标识符，<code>beans.xml</code>中的id</p>\n<p>value是类的定义（描述）信息</p>\n<h2 id=\"Log4j2日志框架\"><a href=\"#Log4j2日志框架\" class=\"headerlink\" title=\"Log4j2日志框架\"></a>Log4j2日志框架</h2><h3 id=\"日志信息优先级（由低到高）\"><a href=\"#日志信息优先级（由低到高）\" class=\"headerlink\" title=\"日志信息优先级（由低到高）\"></a>日志信息优先级（由低到高）</h3><ul>\n<li>TRACE：追踪，是最低的日志级别，相当于追踪程序的执行</li>\n<li>DEBUG：调试一般在开发中，都将其设置为最低的日志级别</li>\n<li>INFO：信息，输出重要的信息，使用较多</li>\n<li>WARN：警告，输出警告的信息</li>\n<li>ERROR：错误，输出错误信息</li>\n<li>FATAL：严重错误</li>\n</ul>\n<h3 id=\"引入log4j2依赖\"><a href=\"#引入log4j2依赖\" class=\"headerlink\" title=\"引入log4j2依赖\"></a>引入log4j2依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>log4j-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.20.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.20.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>配置log4j2，在<code>day01.src.main.resources</code>下新建<code>log4j2.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--日志信息配置--&gt;</span><br><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">loggers</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">root</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;DEBUG&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;spring6log&quot;</span> /&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;RollingFile&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;log&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">root</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">loggers</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appenders</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--输入日志信息到控制台--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">console</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;spring6log&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--控制日志输出的格式--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">console</span>&gt;</span><br><br>        <span class=\"hljs-comment\">&lt;!--文件会打印输出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试调用--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">File</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;log&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;/Users/promise/Promise Code/Java/FinalWork/SpringStudy/day01/test.log&quot;</span> <span class=\"hljs-attr\">append</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">File</span>&gt;</span><br><br>        <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        这个会打印所有的信息</span><br><span class=\"hljs-comment\">        每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面进行压缩，作为存档</span><br><span class=\"hljs-comment\">        --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RollingFile</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;RollingFile&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;/Users/promise/Promise Code/Java/FinalWork/SpringStudy/day01/app.log&quot;</span></span><br><span class=\"hljs-tag\">                     <span class=\"hljs-attr\">filePattern</span>=<span class=\"hljs-string\">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SizeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;50MB&quot;</span>/&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--DefaultRolloverStrategy 属性不设置，则默认为最多同一文件夹下7个文件，这里设置了20--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultRolloverStrategy</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;20&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RollingFile</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appenders</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用logger\"><a href=\"#使用logger\" class=\"headerlink\" title=\"使用logger\"></a>使用logger</h3><p>在<code>org/example/test/TestUserService.java</code>文件，自定义logger</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.test;<br><br><br><span class=\"hljs-keyword\">import</span> org.example.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestUserService</span> &#123;<br>    <span class=\"hljs-comment\">// 创建Logger对象</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">logger</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(TestUserService.class);<br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUserService</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 加载Spring配置文件, 对象创建</span><br>        <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;beans.xml&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 获取创建的对象</span><br>        <span class=\"hljs-comment\">// context.getBean(&quot;userService&quot;)的返回值为Object类型, 需要强制类型转换</span><br>        <span class=\"hljs-type\">UserService</span> <span class=\"hljs-variable\">userService</span> <span class=\"hljs-operator\">=</span> (UserService) context.getBean(<span class=\"hljs-string\">&quot;userService&quot;</span>);<br>        System.out.println(userService);<br><br>        <span class=\"hljs-comment\">// 使用对象调用方法进行调试</span><br>        userService.add();<br><br>        <span class=\"hljs-comment\">//手动写日志</span><br>        logger.info(<span class=\"hljs-string\">&quot;执行调用成功**************&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay01/logger%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%87%BA@2x.png\" alt=\"自定义日志输出\"></p>\n"},{"title":"【study】Spring学习part02","abbrlink":"b57237dc","date":"2024-02-01T11:16:23.000Z","_content":"\n# Spring学习part02\n\n\n\n## 控制反转  IoC\n\nSpring中通过IoC容器来管理所有Java对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由IoC容器管理的Java对象成为Spring Bean，与Java使用关键字`new`创建的Java对象没有任何区别。\n\nIoC容器是Spring框架中最重要的核心组件之一，它贯穿了Spring从诞生到成长的整个过程。\n\n![IoC](../images/springDay02/IoC.png)\n\n\n\n-   控制反转是一种思想\n-   控制反转是为了降低程序耦合度，提高程序扩展能力\n-   控制反转，反转的是什么？\n    -   将对象的创建权力交出去，交给第三方容器负责\n    -   将对象和对象之间关系的维护权交出去，交给第三方容器负责\n-   控制反转这种思想如何实现\n    -   DI（Dependency injection）：依赖注入\n\n## 依赖注入介绍\n\n**指Spring创建对象过程中，将的对象依赖属性通过配置进行注入**\n\n依赖注入常见的实现方式包括两种：\n\n-   set注入\n-   构造注入\n\nBean管理：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）\n\n\n\n## 基于XML管理bean\n\n新建子模块`spring6-iocxml`\n\n### 获取bean的三种方式\n\n#### 方式一：根据id获取\n\n\n\n#### 方式二：根据类型获取\n\n<font color=\"red\">当根据类型获取bean时，要求IoC容器中制定类型的bean有且只能有一个</font>\n\n若IoC容器中一共配置了两个，例如：\n\n``` xml\n<!--beans.xml中-->\n<bean class=\"org.example.spring6.iocxml.User\" id=\"user\"/>\n<bean class=\"org.example.spring6.iocxml.User\" id=\"user2\"/>\n```\n\n``` java\nUser user2 = context.getBean(User.class);\nSystem.out.println(\"根据类型获取bean: \" + user2);\n```\n\n\n\n<font color=\"red\">错误信息如下</font>\n\n``` \norg.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'org.example.spring6.iocxml.User' available: expected single matching bean but found 2: user,user2\n\n```\n\n\n\n如果一个接口有多个实现类，这些实现类都配置了bean，根据接口类型可以获取bean吗\n\n>   不可以，因为bean不唯一\n>\n>   ``` xml\n>   <!--一个接口实现类的获取过程-->\n>   <bean id=\"userDao\" class=\"org.example.spring6.iocxml.bean.UserDaoImpl\"/>\n>   <bean id=\"personDao\" class=\"org.example.spring6.iocxml.bean.PersonDaoImpl\" />\n>   ```\n>\n>   ``` java\n>   // java新建PersonDaoImpl，依赖UserDao接口\n>   package org.example.spring6.iocxml.bean;\n>   \n>   /**\n>    * \n>    * Date: 2024-02-02 17:05\n>    * Description:\n>    */\n>   \n>   public class PersonDaoImpl implements UserDao{\n>       @Override\n>       public void run() {\n>           System.out.println(\"Person......\");\n>       }\n>   }\n>   \n>   ```\n>\n>   ``` java\n>   // 编写测试用例\n>   @Test\n>   public void testUserDao() {\n>       ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\n>       // 根据类型获取接口对应的bean\n>       UserDao userDao = context.getBean(UserDao.class);\n>       System.out.println(userDao);\n>       userDao.run();\n>   }\n>   ```\n>\n>   \n>\n>   <font color=\"red\">错误信息</font>\n>\n>   ``` \n>   org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'org.example.spring6.iocxml.bean.UserDao' available: expected single matching bean but found 2: userDao,personDao\n>   \n>   ```\n\n\n\n#### 方式三：根据id和类型获取\n\n``` java\n@Test\npublic void testUser() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\n\n    // 1. 根据id获取bean\n    User user1 = (User) context.getBean(\"user\");\n    System.out.println(\"根据id获取bean: \" + user1);\n\n    // 2. 根据类型获取bean\n    User user2 = context.getBean(User.class);\n    System.out.println(\"根据类型获取bean: \" + user2);\n\n    // 3. 根据id和类型获取bean\n    User user3 = context.getBean(\"user\", User.class);\n    System.out.println(\"根据id和类型获取bean: \" + user3);\n}\n```\n\n### 依赖注入\n\n#### 依赖注入之setter注入\n\n1.   创建类，定义属性，生成属性的set方法\n2.   在spring配置文件中配置\n\n新建Book类，并且实现getter，setter，有参和无参构造函数\n\n``` java\n// org/example/spring6/iocxml/di/Book.java\npackage org.example.spring6.iocxml.di;\n\n/**\n * \n * Date: 2024-02-02 17:14\n * Description:\n */\n\npublic class Book {\n    private String bookName;\n    private String author;\n\n    public Book() {\n\n    }\n    public Book(String bookName, String author) {\n        this.bookName = bookName;\n        this.author = author;\n    }\n\n    public String getBookName() {\n        return bookName;\n    }\n\n    public void setBookName(String bookName) {\n        this.bookName = bookName;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    @Override\n    public String toString() {\n        return \"Book{\" +\n                \"bookName='\" + bookName + '\\'' +\n                \", author='\" + author + '\\'' +\n                '}';\n    }\n}\n\n```\n\n新建配置文件（为区分刚刚的配置文件）`bean-di.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <!--bean通过set方法注入-->\n    <!--具体过程，通过标签中的name属性，对应到setter中的setBookName()函数-->\n    <bean class=\"org.example.spring6.iocxml.di.Book\" id=\"book\">\n        <property name=\"bookName\" value=\"HTML\"/>  <!--属性名-->\n        <property name=\"author\" value=\"wangwu\"/>  <!--属性值-->\n    </bean>\n</beans>\n```\n\n在测试类进行测试\n\n``` java\n@Test\npublic void testSetter() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di.xml\");\n    Book book = context.getBean(\"book\", Book.class);\n    System.out.println(book);\n}\n```\n\n![set注入结果](../images/springDay02/set注入结果.png)\n\n\n\n#### 依赖注入之构造器注入\n\n1.   创建类，定义属性，生成有参数的构造方法\n2.   在spring配置文件配置\n\n**Book类同上，但是构造函数做简单修改**\n\n``` java\npublic Book() {\n    System.out.println(\"无参构造已经被执行\");\n}\npublic Book(String bookName, String author) {\n    this.bookName = bookName;\n    this.author = author;\n    System.out.println(\"有参构造已经被执行\");\n}\n```\n\n\n\n``` xml\n<!--bean通过set方法注入-->\n<bean class=\"org.example.spring6.iocxml.di.Book\" id=\"book\">\n    <property name=\"bookName\" value=\"HTML\"/>\n    <property name=\"author\" value=\"wangwu\"/>\n</bean>\n\n<!--bean通过构造器注入-->\n<bean class=\"org.example.spring6.iocxml.di.Book\" id=\"bookConstructor\">\n    <constructor-arg name=\"bookName\" value=\"PHP\"/>\n    <constructor-arg name=\"author\" value=\"AAAAA\"/>\n</bean>\n```\n\n\n\n测试类\n\n``` java\n@Test\npublic void testConstructor() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di.xml\");\n    Book book = context.getBean(\"bookConstructor\", Book.class);\n    System.out.println(book);\n}\n```\n\n\n\n执行结果\n\n![](../images/springDay02/有参注入结果.png)\n\n>   \\- 为什么有一句<font color=\"red\">无参构造已经被执行</font>？\n>\n>   \\- 因为xml文件中“通过set方法注入”里面的内容也被执行，这里运行的是无参构造函数\n\n\n\n#### 特殊值处理\n\n-   字面量赋值\n\n    常规写法\n\n-   null值\n\n    若为空值，需要使用额外的标签\n\n    ``` xml\n    <property name=\"bookName\">\n    \t<null/>\n    </property>\n    ```\n\n    \n\n-   xml实体\n\n    插入的值为xml格式\n\n    -   解决方法1：转义\n\n        ``` xml\n        <property name=\"bookName\" value=\"&lt; &gt;\">\n        </property>\n        ```\n\n        \n\n-   CDATA节（区），可以表示特殊符号\n\n    -   解决方法2：\n\n    ``` xml\n    <property name=\"bookName\">\n        <value><![CDATA[a < b]]></value>\n    </property>\n    \n    ```\n\n    \n\n    \n\n#### 特殊类型属性注入\n\n##### 外部引入bean\n\n新建两个类，部门和员工（一对多关系），\n\n``` java\n// org/example/spring6/iocxml/ditest/Department.java\npublic class Department {\n    private String dName;\n\n    public String getdName() {\n        return dName;\n    }\n\n    public void setdName(String dName) {\n        this.dName = dName;\n    }\n\n    public Department() {\n\n    }\n\n    public Department(String dName) {\n        this.dName = dName;\n    }\n\n    public void info() {\n        System.out.println(\"部门名称: \" + dName);\n    }\n}\n```\n\n\n\n``` java\n// org/example/spring6/iocxml/ditest/Employee.java\npublic class Employee {\n    private String eName;\n\n    private Integer age;\n\n    // 员工输入某个部门\n    private Department department;\n\n\n    public String geteName() {\n        return eName;\n    }\n\n    public void seteName(String eName) {\n        this.eName = eName;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public Department getDepartment() {\n        return department;\n    }\n\n    public void setDepartment(Department department) {\n        this.department = department;\n    }\n\n    public Employee() {\n\n    }\n\n    public Employee(String eName, Integer age, Department department) {\n        this.eName = eName;\n        this.age = age;\n        this.department = department;\n    }\n\n    public void work() {\n        System.out.println(eName + \"员工在工作, 工龄为: \" + age);\n        department.info();\n    }\n}\n\n```\n\n\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!--\n        第一种方式: 引入外部的bean\n        1. 创建两个类对象: Department, Employee\n        2. 在Employee的bean标签里面, 使用property引入Department, Employee的bean\n    -->\n    <bean class=\"org.example.spring6.iocxml.ditest.Department\" id=\"department\">\n        <property name=\"dName\" value=\"安保部\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.ditest.Employee\" id=\"employee\">\n        <!--普通属性注入-->\n        <property name=\"eName\" value=\"lucy\"/>\n        <property name=\"age\" value=\"50\"/>\n        <!--对象类型注入-->\n        <property name=\"department\" ref=\"department\"/>  <!--将部门对象引入  使用ref-->\n\n    </bean>\n</beans>\n```\n\n\n\n\n\n新建测试用例\n\n``` java\n@Test\npublic void testEmployee() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di-test.xml\");\n    // 员工对象\n    Employee employee = context.getBean(\"employee\", Employee.class);\n    employee.work();\n}\n```\n\n\n\n输出结果\n\n![](../images/springDay02/特殊类型注入结果.png)\n\n\n\n##### 内部引入bean\n\n``` xml\n<bean class=\"org.example.spring6.iocxml.ditest.Employee\" id=\"employee2\">\n        <!--内部bean注入-->\n        <property name=\"eName\" value=\"mary\"/>\n        <property name=\"age\" value=\"30\"/>\n        <property name=\"department\">\n            <bean class=\"org.example.spring6.iocxml.ditest.Department\">\n                <property name=\"dName\" value=\"财务部\"/>\n            </bean>\n        </property>\n</bean>\n```\n\n\n\n##### 级联引入bean\n\n``` xml\n<!--\n        第二种方式: 级联赋值bean\n        1. 创建两个类对象: Department, Employee\n        2. 在Employee的bean标签里面, 使用property引入Department, Employee的bean\n    -->\n<bean id=\"employee3\" class=\"org.example.spring6.iocxml.ditest.Employee\">\n    <property name=\"eName\" value=\"tom\"/>\n    <property name=\"age\" value=\"30\"/>\n\n    <!--级联赋值-->\n    <property name=\"department\" ref=\"department3\"/>  <!--这里不能写value-->\n    <property name=\"department.dName\" value=\"测试部\"/>\n</bean>\n<bean id=\"department3\" class=\"org.example.spring6.iocxml.ditest.Department\">\n    <property name=\"dName\" value=\"技术研发部\"/>\n</bean>\n```\n\n\n\n#### 为数组类型属性赋值\n\n员工类添加爱好，并生成getter(), setter()\n\n``` java\nprivate String[] hobbies;\n\npublic String[] getHobbies() {\n    return hobbies;\n}\n\npublic void setHobbies(String[] hobbies) {\n    this.hobbies = hobbies;\n}\n```\n\n构造bean，新建`bean-di-array.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.spring6.iocxml.ditest.Department\" id=\"department\">\n        <property name=\"dName\" value=\"技术部\" />\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.ditest.Employee\" id=\"employee\">\n        <!--注入普通的属性值-->\n        <property name=\"eName\" value=\"Lucy\" />\n        <property name=\"age\" value=\"20\" />\n        <!--注入对象类型的属性值-->\n        <property name=\"department\" ref=\"department\"/>\n        <!--注入数组类型的属性值-->\n        <property name=\"hobbies\">\n            <array>\n                <value>唱</value>\n                <value>跳</value>\n                <value>rap</value>\n                <value>篮球</value>\n            </array>\n        </property>\n\n    </bean>\n</beans>\n```\n\n>   如果为数组类型，在`property`标签中还有`array`标签写入，再使用`value`标签添加值。\n\n编写测试类\n\n``` java\n@Test\npublic void testArray() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di-array.xml\");\n    Employee employee = context.getBean(\"employee\", Employee.class);\n    employee.work();\n}\n```\n\n![](../images/springDay02/数组类型属性.png)\n\n\n\n#### 为集合类型属性注入\n\n##### list集合类型\n\n部门新增属性，员工列表，并生成getter(), setter()\n\n``` java\nprivate List<Employee> employeeList;\n\npublic List<Employee> getEmployeeList() {\n    return employeeList;\n}\n\npublic void setEmployeeList(List<Employee> employeeList) {\n    this.employeeList = employeeList;\n}\n\npublic void info() {\n    System.out.println(\"部门名称: \" + dName);\n    for (Employee emp : employeeList) {\n        System.out.println(emp.geteName());\n    }\n}\n```\n\n配置bean，`bean-di-list.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.spring6.iocxml.ditest.Employee\" id=\"employee1\">\n        <property name=\"eName\" value=\"Lucy\"/>\n        <property name=\"age\" value=\"20\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.ditest.Employee\" id=\"employee2\">\n        <property name=\"eName\" value=\"Mary\"/>\n        <property name=\"age\" value=\"30\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.ditest.Department\" id=\"department\">\n        <property name=\"dName\" value=\"技术研发部\"/>\n        <property name=\"employeeList\">\n            <list>  <!--list中引入其他的bean-->\n                <ref bean=\"employee1\"/>\n                <ref bean=\"employee2\"/>\n            </list>\n        </property>\n    </bean>\n</beans>\n```\n\n编写测试类\n\n``` java\n@Test\npublic void testList() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di-list.xml\");\n    Department department = context.getBean(\"department\", Department.class);\n    department.info();\n}\n```\n\n![](../images/springDay02/list类型属性.png)\n\n\n\n##### map集合类型\n\n新建学生类\n\n``` java\npackage org.example.spring6.iocxml.dimap;\n\nimport java.util.Map;\n\n/**\n * \n * Date: 2024-02-07 00:05\n * Description:\n */\n\npublic class Student {\n    private String studentId;\n    private String studentName;\n\n    private Map<String, Teacher> teacherMap;\n\n    public String getStudentId() {\n        return studentId;\n    }\n\n    public void setStudentId(String studentId) {\n        this.studentId = studentId;\n    }\n\n    public String getStudentName() {\n        return studentName;\n    }\n\n    public void setStudentName(String studentName) {\n        this.studentName = studentName;\n    }\n\n    public Map<String, Teacher> getTeacherMap() {\n        return teacherMap;\n    }\n\n    public void setTeacherMap(Map<String, Teacher> teacherMap) {\n        this.teacherMap = teacherMap;\n    }\n\n    public void run() {\n        System.out.println(\"学生编号: \" + studentId + \"学生名: \" + studentName);\n        System.out.println(teacherMap);\n    }\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"studentId='\" + studentId + '\\'' +\n                \", studentName='\" + studentName + '\\'' +\n                \", teacherMap=\" + teacherMap +\n                '}';\n    }\n}\n\n```\n\n\n\n新建教师类\n\n``` java\npackage org.example.spring6.iocxml.dimap;\n\n/**\n * \n * Date: 2024-02-07 00:05\n * Description:\n */\n\npublic class Teacher {\n    private String teacherId;\n    private String teacherName;\n\n    public String getTeacherId() {\n        return teacherId;\n    }\n\n    public void setTeacherId(String teacherId) {\n        this.teacherId = teacherId;\n    }\n\n    public String getTeacherName() {\n        return teacherName;\n    }\n\n    public void setTeacherName(String teacherName) {\n        this.teacherName = teacherName;\n    }\n\n    @Override\n    public String toString() {\n        return \"Teacher{\" +\n                \"teacherId='\" + teacherId + '\\'' +\n                \", teacherName='\" + teacherName + '\\'' +\n                '}';\n    }\n}\n\n```\n\n\n\n\n\n\n\n配置bean，`bean-di-map.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <!--\n        1. 创建两个对象\n        2. 注入普通类型属性\n        3. 在学生bean中注入map集合类型属性\n    -->\n    <bean class=\"org.example.spring6.iocxml.dimap.Student\" id=\"student\">\n        <property name=\"studentId\" value=\"20000\"/>\n        <property name=\"studentName\" value=\"张三\"/>\n        <property name=\"teacherMap\">\n            <map>\n                <entry key=\"100010\" value-ref=\"teacher1\"/>\n                <entry key=\"100011\" value-ref=\"teacher2\"/>\n                <entry key=\"100012\" value-ref=\"teacher3\"/>\n            </map>\n        </property>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.dimap.Teacher\" id=\"teacher1\">\n        <property name=\"teacherId\" value=\"100\"/>  <!--讲师id-->\n        <property name=\"teacherName\" value=\"蔡老师\"/>\n    </bean>\n    <bean class=\"org.example.spring6.iocxml.dimap.Teacher\" id=\"teacher2\">\n        <property name=\"teacherId\" value=\"101\"/>  <!--讲师id-->\n        <property name=\"teacherName\" value=\"徐老师\"/>\n    </bean>\n    <bean class=\"org.example.spring6.iocxml.dimap.Teacher\" id=\"teacher3\">\n        <property name=\"teacherId\" value=\"102\"/>  <!--讲师id-->\n        <property name=\"teacherName\" value=\"kun老师\"/>\n    </bean>\n</beans>\n```\n\n\n\n编写测试类\n\n``` java\n@Test\npublic void testMap() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di-map.xml\");\n    Student student = context.getBean(\"student\", Student.class);\n    student.run();\n}\n```\n\n![](../images/springDay02/map类型属性.png)\n\n\n\n#### 引用集合类型的bean\n\n新增课程类Lesson\n\n``` java\npackage org.example.spring6.iocxml.dimap;\n\n/**\n * \n * Date: 2024-02-07 00:29\n * Description:\n */\n\npublic class Lesson {\n    private String lessonName;\n\n    public String getLessonName() {\n        return lessonName;\n    }\n\n    public void setLessonName(String lessonName) {\n        this.lessonName = lessonName;\n    }\n\n    @Override\n    public String toString() {\n        return \"Lesson{\" +\n                \"lessonName='\" + lessonName + '\\'' +\n                '}';\n    }\n}\n\n```\n\n\n\n\n\n新增学生属性：lessonList，表示学生选了哪些课程，并生成getter(), setter()\n\n``` java\nprivate List<Lesson> lessonList;\n\npublic List<Lesson> getLessonList() {\n    return lessonList;\n}\n\npublic void setLessonList(List<Lesson> lessonList) {\n    this.lessonList = lessonList;\n}\n```\n\n\n\n配置bean，`bean-di-ref.xml`\n\n需要引入新的约束\n\n`xmlns:util=\"http://www.springframework.org/schema/util\"`\n\n`xsi:schemaLocation`中添加\n\n-   `http://www.springframework.org/schema/util`\n-   `http://www.springframework.org/schema/util/spring-util.xsd`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:util=\"http://www.springframework.org/schema/util\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/util\n       http://www.springframework.org/schema/util/spring-util.xsd\">\n    <!--1. 创建三个对象-->\n    <!--2. 注入普通类型属性-->\n    <bean class=\"org.example.spring6.iocxml.dimap.Student\" id=\"student\">\n        <property name=\"studentId\" value=\"10000\"/>\n        <property name=\"studentName\" value=\"张三\"/>\n        <property name=\"lessonList\" ref=\"lessonList\"/>\n        <property name=\"teacherMap\" ref=\"teacherMap\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.dimap.Teacher\" id=\"teacher1\">\n        <property name=\"teacherName\" value=\"蔡老师\"/>\n        <property name=\"teacherId\" value=\"100\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.dimap.Teacher\" id=\"teacher2\">\n        <property name=\"teacherName\" value=\"徐老师\"/>\n        <property name=\"teacherId\" value=\"101\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.dimap.Lesson\" id=\"lesson1\">\n        <property name=\"lessonName\" value=\"数据结构\"/>\n    </bean>\n    <bean class=\"org.example.spring6.iocxml.dimap.Lesson\" id=\"lesson2\">\n        <property name=\"lessonName\" value=\"计算机组成原理\"/>\n    </bean>\n    <bean class=\"org.example.spring6.iocxml.dimap.Lesson\" id=\"lesson3\">\n        <property name=\"lessonName\" value=\"操作系统\"/>\n    </bean>\n    <bean class=\"org.example.spring6.iocxml.dimap.Lesson\" id=\"lesson4\">\n        <property name=\"lessonName\" value=\"计算机网络\"/>\n    </bean>\n\n    <!--3. 使用util: 类型  定义-->\n    <util:list id=\"lessonList\">\n        <ref bean=\"lesson1\"/>\n        <ref bean=\"lesson2\"/>\n        <ref bean=\"lesson3\"/>\n        <ref bean=\"lesson4\"/>\n    </util:list>\n\n    <util:map id=\"teacherMap\">\n        <entry key=\"10010\" value-ref=\"teacher1\"/>\n        <entry key=\"10011\" value-ref=\"teacher2\"/>\n    </util:map>\n    <!--4. 在学生bean引入util: 类型定义bean, 完成list, map类型属性注入-->\n</beans>\n```\n\n\n\n输出结果\n\n![](../images/springDay02/ref结果1.png)\n\n\n\n![](../images/springDay02/ref结果2.png)\n\n\n\n#### p命名空间注入\n\n`bean-di-ref.xml`中简单修改，添加如下约束以及标签\n\n`xmlns:p=\"http://www.springframework.org/schema/p\"`\n\n``` xml\n<bean class=\"org.example.spring6.iocxml.dimap.Student\" id=\"studentP\" p:studentId=\"1000\" p:studentName=\"Mary\"\n      p:lessonList-ref=\"lessonList\" p:teacherMap-ref=\"teacherMap\">\n\n</bean>\n```\n\n编写测试用例\n\n``` java\n@Test\npublic void testPLabel() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di-ref.xml\");\n    Student student = context.getBean(\"studentP\", Student.class);\n    student.run();\n}\n```\n\n![](../images/springDay02/p命名空间.png)\n\n \n\n#### 引入外部属性文件\n\n导入连接MySQL相关依赖在`pom.xml`中\n\n``` xml\n<!--MySQL驱动-->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.30</version>\n</dependency>\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.0.31</version>\n</dependency>\n```\n\n\n\n连接MySQL操作，写入配置文件`jdbc.properties`，配置MySQL相关\n\n``` properties\njdbc.user=root\njdbc.password=11111111\njdbc.url=jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC\njdbc.driver=com.mysql.cj.jdbc.Driver\n```\n\n\n\n然后配置配置bean，`bean-jdbc.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n    <!--引入外部属性文件-->\n    <context:property-placeholder location=\"classpath:jdbc.properties\"/>\n\n    <!--完成数据库信息注入-->\n    <bean id=\"druidDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"url\" value=\"${jdbc.url}\"/>\n        <property name=\"username\" value=\"${jdbc.user}\"/>\n        <property name=\"password\" value=\"${jdbc.password}\"/>\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n    </bean>\n</beans>\n```\n\n这里的属性值会读取到`jdbc.properties`文件中的值\n\n\n\n编写测试用例\n\n``` java\n@Test\npublic void testJdbc2() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-jdbc.xml\");\n    DruidDataSource druidDataSource = context.getBean(DruidDataSource.class);\n    System.out.println(druidDataSource.getUrl());\n}\n```\n\n![](../images/springDay02/外部引入结果.png)\n\n\n\n### bean的作用域\n\n在Spring中，可以通过配置bean标签的`scope`属性来执行bean的作用范围，各取值含义如下表：\n\n| 取值              | 含义                                    | 创建对象的时机  |\n| ----------------- | --------------------------------------- | --------------- |\n| singleton（默认） | 在IoC容器中，这个bean的对象始终为单实例 | IoC容器初始化时 |\n| prototype         | 这个bean在IoC容器中有多个实例           | 获取bean时      |\n\n新建Order类\n\n``` java\npackage org.example.spring6.iocxml.scope;\n\n/**\n * \n * Date: 2024-02-07 12:32\n * Description:\n */\n\npublic class Orders {\n\n}\n\n```\n\n配置bean，`bean-scope.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <!--通过scope属性配置单实例  多实例-->\n    <bean class=\"org.example.spring6.iocxml.scope.Orders\" id=\"orders\" scope=\"singleton\">\n\n    </bean>\n</beans>\n```\n\n其中`bean`标签中的`scope`属性默认为`singleton`\n\n\n\n新建测试类\n\n``` java\n@Test\npublic void testOrders() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-scope.xml\");\n    Orders orders = context.getBean(\"orders\", Orders.class);\n    System.out.println(orders);\n    Orders orders1 = context.getBean(\"orders\", Orders.class);\n    System.out.println(orders1);\n}\n```\n\n这里新建两个对象，都取自同一个bean，输出对象的地址，查看是否相同\n\n![](../images/springDay02/单实例输出结果.png)\n\n可以看到两个实例的地址是相同的\n\n\n\n测试多实例，将`bean`标签中的`scope`属性改为`prototype`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <!--通过scope属性配置单实例  多实例-->\n    <bean class=\"org.example.spring6.iocxml.scope.Orders\" id=\"orders\" scope=\"prototype\">\n\n    </bean>\n</beans>\n```\n\n![](../images/springDay02/多实例输出结果.png)\n\n\n\n### bean的生命周期\n\n\n\n1.   bean对象的创建（调用无参构造）\n2.   给bean对象设置相关属性\n3.   bean后置处理器（初始化之前）\n4.   bean对象初始化（调用制定初始化方法）\n5.   bean后置处理器（初始化之后）\n6.   bean对象创建完成，可以使用\n7.   bean对象销毁（配置制定销毁方法）\n8.   关闭IoC容器\n\n新建User类\n\n``` java\npackage org.example.spring6.iocxml.life;\n\n/**\n * \n * Date: 2024-02-07 12:47\n * Description:\n */\n\npublic class User {\n    private String name;\n\n    public User() {\n        System.out.println(\"第一步: 这是无参构造函数, 创建bean对象\");\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        System.out.println(\"第二步: 给bean对象设置属性值\");\n    }\n\n    // 初始化的方法\n    public void initMethod() {\n        System.out.println(\"第四步: bean对象初始化, 调用指定方法进行初始化\");\n    }\n\n    // 销毁的方法\n    public void destroyMethod() {\n        System.out.println(\"第七步: bean对象销毁, 调用制定方法进行销毁\");\n    }\n\n\n}\n\n```\n\n用于实现bean的初始化和销毁方法，`initMethod()`和`destroyMethod()`\n\n构造bean，`bean-life.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.spring6.iocxml.life.User\" id=\"user\" init-method=\"initMethod\"\n          destroy-method=\"destroyMethod\">\n        <property name=\"name\" value=\"Lucy\" />\n    </bean>\n</beans>\n```\n\n在`bean`标签中添加两个属性`init-method`和`destroy-method`，属性值为两个函数名\n\n编写测试类\n\n``` java\n@Test\npublic void testLife() {\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"bean-life.xml\");\n    org.example.spring6.iocxml.life.User user = context.getBean(\"user\", org.example.spring6.iocxml.life.User.class);\n    System.out.println(user);\n    System.out.println(\"第六步: bean对象创建完成\");\n    context.close();  // 对象销毁  只有实现类才有这个函数, ApplicationContext并没有这个方法\n}\n```\n\n为了区分其他包里面的`User`类，这里写了包的全路径\n\n![](/Users/promise/Promise Code/blog/source/images/springDay02/bean生命周期输出1.png)\n\n这里并没有给出第三步与第五步，现在写入后置处理器\n\n新建类`MyBeanPost`依赖于接口`BeanPostProcessor`\n\n``` java\npackage org.example.spring6.iocxml.life;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\n/**\n * \n * Date: 2024-02-07 13:00\n * Description:\n */\n\npublic class MyBeanPost implements BeanPostProcessor {\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(\"第三步: 后置处理器, 在初始化之前执行\");\n        System.out.println(beanName + \"::\" + bean);\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(\"第五步: 后置处理器, 在初始化之后执行\");\n        System.out.println(beanName + \"::\" + bean);\n        return bean;\n    }\n\n}\n\n```\n\n在`bean-life.xml`中新增后置处理器的配置\n\n``` xml\n<!--bean的后置处理器要放入IoC容器才能生效-->\n<bean class=\"org.example.spring6.iocxml.life.MyBeanPost\" id=\"myBeanPost\">\n\n</bean>\n```\n\n测试类运行结果\n\n![](../images/springDay02/bean生命周期输出3.png)\n\n\n\n\n\n### FactoryBean工厂bean\n\n新建User1类，无任何属性\n\n``` java\npackage org.example.spring6.iocxml.factoryBean;\n\n/**\n * \n * Date: 2024-02-07 16:19\n * Description:\n */\n\npublic class User1 {\n\n}\n\n```\n\n配置bean，`bean-factorybean.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.spring6.iocxml.factoryBean.MyFactoryBean\" id=\"user1\">\n\n    </bean>\n</beans>\n```\n\n实现FactoryBean接口\n\n``` java\npackage org.example.spring6.iocxml.factoryBean;\n\nimport org.springframework.beans.factory.FactoryBean;\n\n/**\n * \n * Date: 2024-02-07 16:18\n * Description:\n */\n\npublic class MyFactoryBean implements FactoryBean<User1> {\n\n    @Override\n    public User1 getObject() throws Exception {\n        return new User1();\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return User1.class;\n    }\n}\n\n```\n\n新建测试类\n\n``` java\n@Test\npublic void testFactoryBean() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-factorybean.xml\");\n    User1 user1 = context.getBean(\"user1\", User1.class);\n    System.out.println(user1);\n}\n```\n\n![](../images/springDay02/factoryBean输出结果.png)\n\n### 基于XML的自动装配\n\n根据制定的策略，在IoC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性值复制\n\n![](../images/springDay02/环境准备.png)\n\n若不使用Spring的写法\n\n**DAO层**\n\n``` java\npackage org.example.spring6.iocxml.auto.dao;\n\npublic interface UserDao {\n    public void addUserDao();\n}\n\n```\n\n``` java\npackage org.example.spring6.iocxml.auto.dao.impl;\n\nimport org.example.spring6.iocxml.auto.dao.UserDao;\n\n/**\n * \n * Date: 2024-02-07 16:33\n * Description:\n */\n\npublic class UserDaoImpl implements UserDao {\n    @Override\n    public void addUserDao() {\n        System.out.println(\"执行了UserDao方法\");\n    }\n}\n\n```\n\n\n\n**Service层**\n\n``` java\npackage org.example.spring6.iocxml.auto.service;\n\npublic interface UserService {\n    public void addUserService();\n}\n\n```\n\n``` java\npackage org.example.spring6.iocxml.auto.service.impl;\n\nimport org.example.spring6.iocxml.auto.dao.UserDao;\nimport org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl;\nimport org.example.spring6.iocxml.auto.service.UserService;\n\n/**\n * \n * Date: 2024-02-07 16:32\n * Description:\n */\n\npublic class UserServiceImpl implements UserService {\n\n    @Override\n    public void addUserService() {\n        System.out.println(\"UserService()方法执行\");\n        UserDao userDao = new UserDaoImpl();\n        userDao.addUserDao();\n    }\n}\n\n```\n\n\n\n**Controller层**\n\n``` java\npackage org.example.spring6.iocxml.auto.controller;\n\nimport org.example.spring6.iocxml.auto.service.UserService;\nimport org.example.spring6.iocxml.auto.service.impl.UserServiceImpl;\n\n/**\n * \n * Date: 2024-02-07 16:31\n * Description:\n */\n\npublic class UserController {\n    public void addUser() {\n        System.out.println(\"controller方法执行\");\n        UserService userService = new UserServiceImpl();\n        userService.addUserService();\n    }\n}\n\n```\n\n\n\n**新建简单测试类**\n\n``` java\n@Test\npublic void testController() {\n    UserController controller = new UserController();\n    controller.addUser();\n}\n```\n\n![](../images/springDay02/简单测试输出.png)\n\n\n\n\n\n\n\n#### 配置bean，完成自动装配\n\n![](../images/springDay02/auto注入1.png)\n\n\n\n**Controller层**\n\n``` java\npackage org.example.spring6.iocxml.auto.controller;\n\nimport org.example.spring6.iocxml.auto.service.UserService;\nimport org.example.spring6.iocxml.auto.service.impl.UserServiceImpl;\n\n/**\n * \n * Date: 2024-02-07 16:31\n * Description:\n */\n\npublic class UserController {\n\n    private UserService userService;\n\n    public UserService getUserService() {\n        return userService;\n    }\n\n    public void setUserService(UserService userService) {\n        this.userService = userService;\n    }\n\n    public void addUser() {\n        System.out.println(\"controller方法执行\");\n        // 调用service方法\n        userService.addUserService();\n    }\n}\n\n```\n\n\n\n**Service层**\n\n``` java\npackage org.example.spring6.iocxml.auto.service.impl;\n\nimport org.example.spring6.iocxml.auto.dao.UserDao;\nimport org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl;\nimport org.example.spring6.iocxml.auto.service.UserService;\n\n/**\n * \n * Date: 2024-02-07 16:32\n * Description:\n */\n\npublic class UserServiceImpl implements UserService {\n\n    private UserDao userDao;\n\n    public UserDao getUserDao() {\n        return userDao;\n    }\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    @Override\n    public void addUserService() {\n        System.out.println(\"UserService()方法执行\");\n        userDao.addUserDao();\n    }\n}\n\n```\n\n\n\n配置bean，`bean-auto.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.spring6.iocxml.auto.controller.UserController\" id=\"userController\" autowire=\"byType\">\n\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.auto.service.impl.UserServiceImpl\" id=\"userService\" autowire=\"byType\">\n\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl\" id=\"userDao\">\n\n    </bean>\n</beans>\n```\n\n其中`autowire`属性是自动装填属性，属性值`byType`是根据类型自动装配，根据类型装配会自动匹配相应的类型，而根据名称匹配需要保证待匹配bean的名称与声明时相同。 \n\n\n\n\n\n新建测试类\n\n``` java\n@Test\npublic void testAuto() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-auto.xml\");\n    UserController userController = context.getBean(\"userController\", UserController.class);\n    userController.addUser();\n}\n```\n\n![](../images/springDay02/自动注入结果.png)\n\n>   `byType`：根据类型匹配IoC容器中的某个兼容类型的bean，为属性自动赋值\n>\n>   若在IoC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即默认值为null\n>\n>   若在IoC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException\n\n","source":"_posts/【study】Spring学习part02.md","raw":"---\ntitle: 【study】Spring学习part02\ntags:\n  - Study\n  - Java\n  - Spring框架\nabbrlink: b57237dc\ndate: 2024-02-01 19:16:23\n---\n\n# Spring学习part02\n\n\n\n## 控制反转  IoC\n\nSpring中通过IoC容器来管理所有Java对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由IoC容器管理的Java对象成为Spring Bean，与Java使用关键字`new`创建的Java对象没有任何区别。\n\nIoC容器是Spring框架中最重要的核心组件之一，它贯穿了Spring从诞生到成长的整个过程。\n\n![IoC](../images/springDay02/IoC.png)\n\n\n\n-   控制反转是一种思想\n-   控制反转是为了降低程序耦合度，提高程序扩展能力\n-   控制反转，反转的是什么？\n    -   将对象的创建权力交出去，交给第三方容器负责\n    -   将对象和对象之间关系的维护权交出去，交给第三方容器负责\n-   控制反转这种思想如何实现\n    -   DI（Dependency injection）：依赖注入\n\n## 依赖注入介绍\n\n**指Spring创建对象过程中，将的对象依赖属性通过配置进行注入**\n\n依赖注入常见的实现方式包括两种：\n\n-   set注入\n-   构造注入\n\nBean管理：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）\n\n\n\n## 基于XML管理bean\n\n新建子模块`spring6-iocxml`\n\n### 获取bean的三种方式\n\n#### 方式一：根据id获取\n\n\n\n#### 方式二：根据类型获取\n\n<font color=\"red\">当根据类型获取bean时，要求IoC容器中制定类型的bean有且只能有一个</font>\n\n若IoC容器中一共配置了两个，例如：\n\n``` xml\n<!--beans.xml中-->\n<bean class=\"org.example.spring6.iocxml.User\" id=\"user\"/>\n<bean class=\"org.example.spring6.iocxml.User\" id=\"user2\"/>\n```\n\n``` java\nUser user2 = context.getBean(User.class);\nSystem.out.println(\"根据类型获取bean: \" + user2);\n```\n\n\n\n<font color=\"red\">错误信息如下</font>\n\n``` \norg.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'org.example.spring6.iocxml.User' available: expected single matching bean but found 2: user,user2\n\n```\n\n\n\n如果一个接口有多个实现类，这些实现类都配置了bean，根据接口类型可以获取bean吗\n\n>   不可以，因为bean不唯一\n>\n>   ``` xml\n>   <!--一个接口实现类的获取过程-->\n>   <bean id=\"userDao\" class=\"org.example.spring6.iocxml.bean.UserDaoImpl\"/>\n>   <bean id=\"personDao\" class=\"org.example.spring6.iocxml.bean.PersonDaoImpl\" />\n>   ```\n>\n>   ``` java\n>   // java新建PersonDaoImpl，依赖UserDao接口\n>   package org.example.spring6.iocxml.bean;\n>   \n>   /**\n>    * \n>    * Date: 2024-02-02 17:05\n>    * Description:\n>    */\n>   \n>   public class PersonDaoImpl implements UserDao{\n>       @Override\n>       public void run() {\n>           System.out.println(\"Person......\");\n>       }\n>   }\n>   \n>   ```\n>\n>   ``` java\n>   // 编写测试用例\n>   @Test\n>   public void testUserDao() {\n>       ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\n>       // 根据类型获取接口对应的bean\n>       UserDao userDao = context.getBean(UserDao.class);\n>       System.out.println(userDao);\n>       userDao.run();\n>   }\n>   ```\n>\n>   \n>\n>   <font color=\"red\">错误信息</font>\n>\n>   ``` \n>   org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'org.example.spring6.iocxml.bean.UserDao' available: expected single matching bean but found 2: userDao,personDao\n>   \n>   ```\n\n\n\n#### 方式三：根据id和类型获取\n\n``` java\n@Test\npublic void testUser() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\n\n    // 1. 根据id获取bean\n    User user1 = (User) context.getBean(\"user\");\n    System.out.println(\"根据id获取bean: \" + user1);\n\n    // 2. 根据类型获取bean\n    User user2 = context.getBean(User.class);\n    System.out.println(\"根据类型获取bean: \" + user2);\n\n    // 3. 根据id和类型获取bean\n    User user3 = context.getBean(\"user\", User.class);\n    System.out.println(\"根据id和类型获取bean: \" + user3);\n}\n```\n\n### 依赖注入\n\n#### 依赖注入之setter注入\n\n1.   创建类，定义属性，生成属性的set方法\n2.   在spring配置文件中配置\n\n新建Book类，并且实现getter，setter，有参和无参构造函数\n\n``` java\n// org/example/spring6/iocxml/di/Book.java\npackage org.example.spring6.iocxml.di;\n\n/**\n * \n * Date: 2024-02-02 17:14\n * Description:\n */\n\npublic class Book {\n    private String bookName;\n    private String author;\n\n    public Book() {\n\n    }\n    public Book(String bookName, String author) {\n        this.bookName = bookName;\n        this.author = author;\n    }\n\n    public String getBookName() {\n        return bookName;\n    }\n\n    public void setBookName(String bookName) {\n        this.bookName = bookName;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    @Override\n    public String toString() {\n        return \"Book{\" +\n                \"bookName='\" + bookName + '\\'' +\n                \", author='\" + author + '\\'' +\n                '}';\n    }\n}\n\n```\n\n新建配置文件（为区分刚刚的配置文件）`bean-di.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <!--bean通过set方法注入-->\n    <!--具体过程，通过标签中的name属性，对应到setter中的setBookName()函数-->\n    <bean class=\"org.example.spring6.iocxml.di.Book\" id=\"book\">\n        <property name=\"bookName\" value=\"HTML\"/>  <!--属性名-->\n        <property name=\"author\" value=\"wangwu\"/>  <!--属性值-->\n    </bean>\n</beans>\n```\n\n在测试类进行测试\n\n``` java\n@Test\npublic void testSetter() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di.xml\");\n    Book book = context.getBean(\"book\", Book.class);\n    System.out.println(book);\n}\n```\n\n![set注入结果](../images/springDay02/set注入结果.png)\n\n\n\n#### 依赖注入之构造器注入\n\n1.   创建类，定义属性，生成有参数的构造方法\n2.   在spring配置文件配置\n\n**Book类同上，但是构造函数做简单修改**\n\n``` java\npublic Book() {\n    System.out.println(\"无参构造已经被执行\");\n}\npublic Book(String bookName, String author) {\n    this.bookName = bookName;\n    this.author = author;\n    System.out.println(\"有参构造已经被执行\");\n}\n```\n\n\n\n``` xml\n<!--bean通过set方法注入-->\n<bean class=\"org.example.spring6.iocxml.di.Book\" id=\"book\">\n    <property name=\"bookName\" value=\"HTML\"/>\n    <property name=\"author\" value=\"wangwu\"/>\n</bean>\n\n<!--bean通过构造器注入-->\n<bean class=\"org.example.spring6.iocxml.di.Book\" id=\"bookConstructor\">\n    <constructor-arg name=\"bookName\" value=\"PHP\"/>\n    <constructor-arg name=\"author\" value=\"AAAAA\"/>\n</bean>\n```\n\n\n\n测试类\n\n``` java\n@Test\npublic void testConstructor() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di.xml\");\n    Book book = context.getBean(\"bookConstructor\", Book.class);\n    System.out.println(book);\n}\n```\n\n\n\n执行结果\n\n![](../images/springDay02/有参注入结果.png)\n\n>   \\- 为什么有一句<font color=\"red\">无参构造已经被执行</font>？\n>\n>   \\- 因为xml文件中“通过set方法注入”里面的内容也被执行，这里运行的是无参构造函数\n\n\n\n#### 特殊值处理\n\n-   字面量赋值\n\n    常规写法\n\n-   null值\n\n    若为空值，需要使用额外的标签\n\n    ``` xml\n    <property name=\"bookName\">\n    \t<null/>\n    </property>\n    ```\n\n    \n\n-   xml实体\n\n    插入的值为xml格式\n\n    -   解决方法1：转义\n\n        ``` xml\n        <property name=\"bookName\" value=\"&lt; &gt;\">\n        </property>\n        ```\n\n        \n\n-   CDATA节（区），可以表示特殊符号\n\n    -   解决方法2：\n\n    ``` xml\n    <property name=\"bookName\">\n        <value><![CDATA[a < b]]></value>\n    </property>\n    \n    ```\n\n    \n\n    \n\n#### 特殊类型属性注入\n\n##### 外部引入bean\n\n新建两个类，部门和员工（一对多关系），\n\n``` java\n// org/example/spring6/iocxml/ditest/Department.java\npublic class Department {\n    private String dName;\n\n    public String getdName() {\n        return dName;\n    }\n\n    public void setdName(String dName) {\n        this.dName = dName;\n    }\n\n    public Department() {\n\n    }\n\n    public Department(String dName) {\n        this.dName = dName;\n    }\n\n    public void info() {\n        System.out.println(\"部门名称: \" + dName);\n    }\n}\n```\n\n\n\n``` java\n// org/example/spring6/iocxml/ditest/Employee.java\npublic class Employee {\n    private String eName;\n\n    private Integer age;\n\n    // 员工输入某个部门\n    private Department department;\n\n\n    public String geteName() {\n        return eName;\n    }\n\n    public void seteName(String eName) {\n        this.eName = eName;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public Department getDepartment() {\n        return department;\n    }\n\n    public void setDepartment(Department department) {\n        this.department = department;\n    }\n\n    public Employee() {\n\n    }\n\n    public Employee(String eName, Integer age, Department department) {\n        this.eName = eName;\n        this.age = age;\n        this.department = department;\n    }\n\n    public void work() {\n        System.out.println(eName + \"员工在工作, 工龄为: \" + age);\n        department.info();\n    }\n}\n\n```\n\n\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!--\n        第一种方式: 引入外部的bean\n        1. 创建两个类对象: Department, Employee\n        2. 在Employee的bean标签里面, 使用property引入Department, Employee的bean\n    -->\n    <bean class=\"org.example.spring6.iocxml.ditest.Department\" id=\"department\">\n        <property name=\"dName\" value=\"安保部\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.ditest.Employee\" id=\"employee\">\n        <!--普通属性注入-->\n        <property name=\"eName\" value=\"lucy\"/>\n        <property name=\"age\" value=\"50\"/>\n        <!--对象类型注入-->\n        <property name=\"department\" ref=\"department\"/>  <!--将部门对象引入  使用ref-->\n\n    </bean>\n</beans>\n```\n\n\n\n\n\n新建测试用例\n\n``` java\n@Test\npublic void testEmployee() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di-test.xml\");\n    // 员工对象\n    Employee employee = context.getBean(\"employee\", Employee.class);\n    employee.work();\n}\n```\n\n\n\n输出结果\n\n![](../images/springDay02/特殊类型注入结果.png)\n\n\n\n##### 内部引入bean\n\n``` xml\n<bean class=\"org.example.spring6.iocxml.ditest.Employee\" id=\"employee2\">\n        <!--内部bean注入-->\n        <property name=\"eName\" value=\"mary\"/>\n        <property name=\"age\" value=\"30\"/>\n        <property name=\"department\">\n            <bean class=\"org.example.spring6.iocxml.ditest.Department\">\n                <property name=\"dName\" value=\"财务部\"/>\n            </bean>\n        </property>\n</bean>\n```\n\n\n\n##### 级联引入bean\n\n``` xml\n<!--\n        第二种方式: 级联赋值bean\n        1. 创建两个类对象: Department, Employee\n        2. 在Employee的bean标签里面, 使用property引入Department, Employee的bean\n    -->\n<bean id=\"employee3\" class=\"org.example.spring6.iocxml.ditest.Employee\">\n    <property name=\"eName\" value=\"tom\"/>\n    <property name=\"age\" value=\"30\"/>\n\n    <!--级联赋值-->\n    <property name=\"department\" ref=\"department3\"/>  <!--这里不能写value-->\n    <property name=\"department.dName\" value=\"测试部\"/>\n</bean>\n<bean id=\"department3\" class=\"org.example.spring6.iocxml.ditest.Department\">\n    <property name=\"dName\" value=\"技术研发部\"/>\n</bean>\n```\n\n\n\n#### 为数组类型属性赋值\n\n员工类添加爱好，并生成getter(), setter()\n\n``` java\nprivate String[] hobbies;\n\npublic String[] getHobbies() {\n    return hobbies;\n}\n\npublic void setHobbies(String[] hobbies) {\n    this.hobbies = hobbies;\n}\n```\n\n构造bean，新建`bean-di-array.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.spring6.iocxml.ditest.Department\" id=\"department\">\n        <property name=\"dName\" value=\"技术部\" />\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.ditest.Employee\" id=\"employee\">\n        <!--注入普通的属性值-->\n        <property name=\"eName\" value=\"Lucy\" />\n        <property name=\"age\" value=\"20\" />\n        <!--注入对象类型的属性值-->\n        <property name=\"department\" ref=\"department\"/>\n        <!--注入数组类型的属性值-->\n        <property name=\"hobbies\">\n            <array>\n                <value>唱</value>\n                <value>跳</value>\n                <value>rap</value>\n                <value>篮球</value>\n            </array>\n        </property>\n\n    </bean>\n</beans>\n```\n\n>   如果为数组类型，在`property`标签中还有`array`标签写入，再使用`value`标签添加值。\n\n编写测试类\n\n``` java\n@Test\npublic void testArray() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di-array.xml\");\n    Employee employee = context.getBean(\"employee\", Employee.class);\n    employee.work();\n}\n```\n\n![](../images/springDay02/数组类型属性.png)\n\n\n\n#### 为集合类型属性注入\n\n##### list集合类型\n\n部门新增属性，员工列表，并生成getter(), setter()\n\n``` java\nprivate List<Employee> employeeList;\n\npublic List<Employee> getEmployeeList() {\n    return employeeList;\n}\n\npublic void setEmployeeList(List<Employee> employeeList) {\n    this.employeeList = employeeList;\n}\n\npublic void info() {\n    System.out.println(\"部门名称: \" + dName);\n    for (Employee emp : employeeList) {\n        System.out.println(emp.geteName());\n    }\n}\n```\n\n配置bean，`bean-di-list.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.spring6.iocxml.ditest.Employee\" id=\"employee1\">\n        <property name=\"eName\" value=\"Lucy\"/>\n        <property name=\"age\" value=\"20\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.ditest.Employee\" id=\"employee2\">\n        <property name=\"eName\" value=\"Mary\"/>\n        <property name=\"age\" value=\"30\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.ditest.Department\" id=\"department\">\n        <property name=\"dName\" value=\"技术研发部\"/>\n        <property name=\"employeeList\">\n            <list>  <!--list中引入其他的bean-->\n                <ref bean=\"employee1\"/>\n                <ref bean=\"employee2\"/>\n            </list>\n        </property>\n    </bean>\n</beans>\n```\n\n编写测试类\n\n``` java\n@Test\npublic void testList() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di-list.xml\");\n    Department department = context.getBean(\"department\", Department.class);\n    department.info();\n}\n```\n\n![](../images/springDay02/list类型属性.png)\n\n\n\n##### map集合类型\n\n新建学生类\n\n``` java\npackage org.example.spring6.iocxml.dimap;\n\nimport java.util.Map;\n\n/**\n * \n * Date: 2024-02-07 00:05\n * Description:\n */\n\npublic class Student {\n    private String studentId;\n    private String studentName;\n\n    private Map<String, Teacher> teacherMap;\n\n    public String getStudentId() {\n        return studentId;\n    }\n\n    public void setStudentId(String studentId) {\n        this.studentId = studentId;\n    }\n\n    public String getStudentName() {\n        return studentName;\n    }\n\n    public void setStudentName(String studentName) {\n        this.studentName = studentName;\n    }\n\n    public Map<String, Teacher> getTeacherMap() {\n        return teacherMap;\n    }\n\n    public void setTeacherMap(Map<String, Teacher> teacherMap) {\n        this.teacherMap = teacherMap;\n    }\n\n    public void run() {\n        System.out.println(\"学生编号: \" + studentId + \"学生名: \" + studentName);\n        System.out.println(teacherMap);\n    }\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"studentId='\" + studentId + '\\'' +\n                \", studentName='\" + studentName + '\\'' +\n                \", teacherMap=\" + teacherMap +\n                '}';\n    }\n}\n\n```\n\n\n\n新建教师类\n\n``` java\npackage org.example.spring6.iocxml.dimap;\n\n/**\n * \n * Date: 2024-02-07 00:05\n * Description:\n */\n\npublic class Teacher {\n    private String teacherId;\n    private String teacherName;\n\n    public String getTeacherId() {\n        return teacherId;\n    }\n\n    public void setTeacherId(String teacherId) {\n        this.teacherId = teacherId;\n    }\n\n    public String getTeacherName() {\n        return teacherName;\n    }\n\n    public void setTeacherName(String teacherName) {\n        this.teacherName = teacherName;\n    }\n\n    @Override\n    public String toString() {\n        return \"Teacher{\" +\n                \"teacherId='\" + teacherId + '\\'' +\n                \", teacherName='\" + teacherName + '\\'' +\n                '}';\n    }\n}\n\n```\n\n\n\n\n\n\n\n配置bean，`bean-di-map.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <!--\n        1. 创建两个对象\n        2. 注入普通类型属性\n        3. 在学生bean中注入map集合类型属性\n    -->\n    <bean class=\"org.example.spring6.iocxml.dimap.Student\" id=\"student\">\n        <property name=\"studentId\" value=\"20000\"/>\n        <property name=\"studentName\" value=\"张三\"/>\n        <property name=\"teacherMap\">\n            <map>\n                <entry key=\"100010\" value-ref=\"teacher1\"/>\n                <entry key=\"100011\" value-ref=\"teacher2\"/>\n                <entry key=\"100012\" value-ref=\"teacher3\"/>\n            </map>\n        </property>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.dimap.Teacher\" id=\"teacher1\">\n        <property name=\"teacherId\" value=\"100\"/>  <!--讲师id-->\n        <property name=\"teacherName\" value=\"蔡老师\"/>\n    </bean>\n    <bean class=\"org.example.spring6.iocxml.dimap.Teacher\" id=\"teacher2\">\n        <property name=\"teacherId\" value=\"101\"/>  <!--讲师id-->\n        <property name=\"teacherName\" value=\"徐老师\"/>\n    </bean>\n    <bean class=\"org.example.spring6.iocxml.dimap.Teacher\" id=\"teacher3\">\n        <property name=\"teacherId\" value=\"102\"/>  <!--讲师id-->\n        <property name=\"teacherName\" value=\"kun老师\"/>\n    </bean>\n</beans>\n```\n\n\n\n编写测试类\n\n``` java\n@Test\npublic void testMap() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di-map.xml\");\n    Student student = context.getBean(\"student\", Student.class);\n    student.run();\n}\n```\n\n![](../images/springDay02/map类型属性.png)\n\n\n\n#### 引用集合类型的bean\n\n新增课程类Lesson\n\n``` java\npackage org.example.spring6.iocxml.dimap;\n\n/**\n * \n * Date: 2024-02-07 00:29\n * Description:\n */\n\npublic class Lesson {\n    private String lessonName;\n\n    public String getLessonName() {\n        return lessonName;\n    }\n\n    public void setLessonName(String lessonName) {\n        this.lessonName = lessonName;\n    }\n\n    @Override\n    public String toString() {\n        return \"Lesson{\" +\n                \"lessonName='\" + lessonName + '\\'' +\n                '}';\n    }\n}\n\n```\n\n\n\n\n\n新增学生属性：lessonList，表示学生选了哪些课程，并生成getter(), setter()\n\n``` java\nprivate List<Lesson> lessonList;\n\npublic List<Lesson> getLessonList() {\n    return lessonList;\n}\n\npublic void setLessonList(List<Lesson> lessonList) {\n    this.lessonList = lessonList;\n}\n```\n\n\n\n配置bean，`bean-di-ref.xml`\n\n需要引入新的约束\n\n`xmlns:util=\"http://www.springframework.org/schema/util\"`\n\n`xsi:schemaLocation`中添加\n\n-   `http://www.springframework.org/schema/util`\n-   `http://www.springframework.org/schema/util/spring-util.xsd`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:util=\"http://www.springframework.org/schema/util\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/util\n       http://www.springframework.org/schema/util/spring-util.xsd\">\n    <!--1. 创建三个对象-->\n    <!--2. 注入普通类型属性-->\n    <bean class=\"org.example.spring6.iocxml.dimap.Student\" id=\"student\">\n        <property name=\"studentId\" value=\"10000\"/>\n        <property name=\"studentName\" value=\"张三\"/>\n        <property name=\"lessonList\" ref=\"lessonList\"/>\n        <property name=\"teacherMap\" ref=\"teacherMap\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.dimap.Teacher\" id=\"teacher1\">\n        <property name=\"teacherName\" value=\"蔡老师\"/>\n        <property name=\"teacherId\" value=\"100\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.dimap.Teacher\" id=\"teacher2\">\n        <property name=\"teacherName\" value=\"徐老师\"/>\n        <property name=\"teacherId\" value=\"101\"/>\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.dimap.Lesson\" id=\"lesson1\">\n        <property name=\"lessonName\" value=\"数据结构\"/>\n    </bean>\n    <bean class=\"org.example.spring6.iocxml.dimap.Lesson\" id=\"lesson2\">\n        <property name=\"lessonName\" value=\"计算机组成原理\"/>\n    </bean>\n    <bean class=\"org.example.spring6.iocxml.dimap.Lesson\" id=\"lesson3\">\n        <property name=\"lessonName\" value=\"操作系统\"/>\n    </bean>\n    <bean class=\"org.example.spring6.iocxml.dimap.Lesson\" id=\"lesson4\">\n        <property name=\"lessonName\" value=\"计算机网络\"/>\n    </bean>\n\n    <!--3. 使用util: 类型  定义-->\n    <util:list id=\"lessonList\">\n        <ref bean=\"lesson1\"/>\n        <ref bean=\"lesson2\"/>\n        <ref bean=\"lesson3\"/>\n        <ref bean=\"lesson4\"/>\n    </util:list>\n\n    <util:map id=\"teacherMap\">\n        <entry key=\"10010\" value-ref=\"teacher1\"/>\n        <entry key=\"10011\" value-ref=\"teacher2\"/>\n    </util:map>\n    <!--4. 在学生bean引入util: 类型定义bean, 完成list, map类型属性注入-->\n</beans>\n```\n\n\n\n输出结果\n\n![](../images/springDay02/ref结果1.png)\n\n\n\n![](../images/springDay02/ref结果2.png)\n\n\n\n#### p命名空间注入\n\n`bean-di-ref.xml`中简单修改，添加如下约束以及标签\n\n`xmlns:p=\"http://www.springframework.org/schema/p\"`\n\n``` xml\n<bean class=\"org.example.spring6.iocxml.dimap.Student\" id=\"studentP\" p:studentId=\"1000\" p:studentName=\"Mary\"\n      p:lessonList-ref=\"lessonList\" p:teacherMap-ref=\"teacherMap\">\n\n</bean>\n```\n\n编写测试用例\n\n``` java\n@Test\npublic void testPLabel() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-di-ref.xml\");\n    Student student = context.getBean(\"studentP\", Student.class);\n    student.run();\n}\n```\n\n![](../images/springDay02/p命名空间.png)\n\n \n\n#### 引入外部属性文件\n\n导入连接MySQL相关依赖在`pom.xml`中\n\n``` xml\n<!--MySQL驱动-->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.30</version>\n</dependency>\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.0.31</version>\n</dependency>\n```\n\n\n\n连接MySQL操作，写入配置文件`jdbc.properties`，配置MySQL相关\n\n``` properties\njdbc.user=root\njdbc.password=11111111\njdbc.url=jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC\njdbc.driver=com.mysql.cj.jdbc.Driver\n```\n\n\n\n然后配置配置bean，`bean-jdbc.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n    <!--引入外部属性文件-->\n    <context:property-placeholder location=\"classpath:jdbc.properties\"/>\n\n    <!--完成数据库信息注入-->\n    <bean id=\"druidDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"url\" value=\"${jdbc.url}\"/>\n        <property name=\"username\" value=\"${jdbc.user}\"/>\n        <property name=\"password\" value=\"${jdbc.password}\"/>\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n    </bean>\n</beans>\n```\n\n这里的属性值会读取到`jdbc.properties`文件中的值\n\n\n\n编写测试用例\n\n``` java\n@Test\npublic void testJdbc2() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-jdbc.xml\");\n    DruidDataSource druidDataSource = context.getBean(DruidDataSource.class);\n    System.out.println(druidDataSource.getUrl());\n}\n```\n\n![](../images/springDay02/外部引入结果.png)\n\n\n\n### bean的作用域\n\n在Spring中，可以通过配置bean标签的`scope`属性来执行bean的作用范围，各取值含义如下表：\n\n| 取值              | 含义                                    | 创建对象的时机  |\n| ----------------- | --------------------------------------- | --------------- |\n| singleton（默认） | 在IoC容器中，这个bean的对象始终为单实例 | IoC容器初始化时 |\n| prototype         | 这个bean在IoC容器中有多个实例           | 获取bean时      |\n\n新建Order类\n\n``` java\npackage org.example.spring6.iocxml.scope;\n\n/**\n * \n * Date: 2024-02-07 12:32\n * Description:\n */\n\npublic class Orders {\n\n}\n\n```\n\n配置bean，`bean-scope.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <!--通过scope属性配置单实例  多实例-->\n    <bean class=\"org.example.spring6.iocxml.scope.Orders\" id=\"orders\" scope=\"singleton\">\n\n    </bean>\n</beans>\n```\n\n其中`bean`标签中的`scope`属性默认为`singleton`\n\n\n\n新建测试类\n\n``` java\n@Test\npublic void testOrders() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-scope.xml\");\n    Orders orders = context.getBean(\"orders\", Orders.class);\n    System.out.println(orders);\n    Orders orders1 = context.getBean(\"orders\", Orders.class);\n    System.out.println(orders1);\n}\n```\n\n这里新建两个对象，都取自同一个bean，输出对象的地址，查看是否相同\n\n![](../images/springDay02/单实例输出结果.png)\n\n可以看到两个实例的地址是相同的\n\n\n\n测试多实例，将`bean`标签中的`scope`属性改为`prototype`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <!--通过scope属性配置单实例  多实例-->\n    <bean class=\"org.example.spring6.iocxml.scope.Orders\" id=\"orders\" scope=\"prototype\">\n\n    </bean>\n</beans>\n```\n\n![](../images/springDay02/多实例输出结果.png)\n\n\n\n### bean的生命周期\n\n\n\n1.   bean对象的创建（调用无参构造）\n2.   给bean对象设置相关属性\n3.   bean后置处理器（初始化之前）\n4.   bean对象初始化（调用制定初始化方法）\n5.   bean后置处理器（初始化之后）\n6.   bean对象创建完成，可以使用\n7.   bean对象销毁（配置制定销毁方法）\n8.   关闭IoC容器\n\n新建User类\n\n``` java\npackage org.example.spring6.iocxml.life;\n\n/**\n * \n * Date: 2024-02-07 12:47\n * Description:\n */\n\npublic class User {\n    private String name;\n\n    public User() {\n        System.out.println(\"第一步: 这是无参构造函数, 创建bean对象\");\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        System.out.println(\"第二步: 给bean对象设置属性值\");\n    }\n\n    // 初始化的方法\n    public void initMethod() {\n        System.out.println(\"第四步: bean对象初始化, 调用指定方法进行初始化\");\n    }\n\n    // 销毁的方法\n    public void destroyMethod() {\n        System.out.println(\"第七步: bean对象销毁, 调用制定方法进行销毁\");\n    }\n\n\n}\n\n```\n\n用于实现bean的初始化和销毁方法，`initMethod()`和`destroyMethod()`\n\n构造bean，`bean-life.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.spring6.iocxml.life.User\" id=\"user\" init-method=\"initMethod\"\n          destroy-method=\"destroyMethod\">\n        <property name=\"name\" value=\"Lucy\" />\n    </bean>\n</beans>\n```\n\n在`bean`标签中添加两个属性`init-method`和`destroy-method`，属性值为两个函数名\n\n编写测试类\n\n``` java\n@Test\npublic void testLife() {\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"bean-life.xml\");\n    org.example.spring6.iocxml.life.User user = context.getBean(\"user\", org.example.spring6.iocxml.life.User.class);\n    System.out.println(user);\n    System.out.println(\"第六步: bean对象创建完成\");\n    context.close();  // 对象销毁  只有实现类才有这个函数, ApplicationContext并没有这个方法\n}\n```\n\n为了区分其他包里面的`User`类，这里写了包的全路径\n\n![](/Users/promise/Promise Code/blog/source/images/springDay02/bean生命周期输出1.png)\n\n这里并没有给出第三步与第五步，现在写入后置处理器\n\n新建类`MyBeanPost`依赖于接口`BeanPostProcessor`\n\n``` java\npackage org.example.spring6.iocxml.life;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\n/**\n * \n * Date: 2024-02-07 13:00\n * Description:\n */\n\npublic class MyBeanPost implements BeanPostProcessor {\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(\"第三步: 后置处理器, 在初始化之前执行\");\n        System.out.println(beanName + \"::\" + bean);\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(\"第五步: 后置处理器, 在初始化之后执行\");\n        System.out.println(beanName + \"::\" + bean);\n        return bean;\n    }\n\n}\n\n```\n\n在`bean-life.xml`中新增后置处理器的配置\n\n``` xml\n<!--bean的后置处理器要放入IoC容器才能生效-->\n<bean class=\"org.example.spring6.iocxml.life.MyBeanPost\" id=\"myBeanPost\">\n\n</bean>\n```\n\n测试类运行结果\n\n![](../images/springDay02/bean生命周期输出3.png)\n\n\n\n\n\n### FactoryBean工厂bean\n\n新建User1类，无任何属性\n\n``` java\npackage org.example.spring6.iocxml.factoryBean;\n\n/**\n * \n * Date: 2024-02-07 16:19\n * Description:\n */\n\npublic class User1 {\n\n}\n\n```\n\n配置bean，`bean-factorybean.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.spring6.iocxml.factoryBean.MyFactoryBean\" id=\"user1\">\n\n    </bean>\n</beans>\n```\n\n实现FactoryBean接口\n\n``` java\npackage org.example.spring6.iocxml.factoryBean;\n\nimport org.springframework.beans.factory.FactoryBean;\n\n/**\n * \n * Date: 2024-02-07 16:18\n * Description:\n */\n\npublic class MyFactoryBean implements FactoryBean<User1> {\n\n    @Override\n    public User1 getObject() throws Exception {\n        return new User1();\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return User1.class;\n    }\n}\n\n```\n\n新建测试类\n\n``` java\n@Test\npublic void testFactoryBean() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-factorybean.xml\");\n    User1 user1 = context.getBean(\"user1\", User1.class);\n    System.out.println(user1);\n}\n```\n\n![](../images/springDay02/factoryBean输出结果.png)\n\n### 基于XML的自动装配\n\n根据制定的策略，在IoC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性值复制\n\n![](../images/springDay02/环境准备.png)\n\n若不使用Spring的写法\n\n**DAO层**\n\n``` java\npackage org.example.spring6.iocxml.auto.dao;\n\npublic interface UserDao {\n    public void addUserDao();\n}\n\n```\n\n``` java\npackage org.example.spring6.iocxml.auto.dao.impl;\n\nimport org.example.spring6.iocxml.auto.dao.UserDao;\n\n/**\n * \n * Date: 2024-02-07 16:33\n * Description:\n */\n\npublic class UserDaoImpl implements UserDao {\n    @Override\n    public void addUserDao() {\n        System.out.println(\"执行了UserDao方法\");\n    }\n}\n\n```\n\n\n\n**Service层**\n\n``` java\npackage org.example.spring6.iocxml.auto.service;\n\npublic interface UserService {\n    public void addUserService();\n}\n\n```\n\n``` java\npackage org.example.spring6.iocxml.auto.service.impl;\n\nimport org.example.spring6.iocxml.auto.dao.UserDao;\nimport org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl;\nimport org.example.spring6.iocxml.auto.service.UserService;\n\n/**\n * \n * Date: 2024-02-07 16:32\n * Description:\n */\n\npublic class UserServiceImpl implements UserService {\n\n    @Override\n    public void addUserService() {\n        System.out.println(\"UserService()方法执行\");\n        UserDao userDao = new UserDaoImpl();\n        userDao.addUserDao();\n    }\n}\n\n```\n\n\n\n**Controller层**\n\n``` java\npackage org.example.spring6.iocxml.auto.controller;\n\nimport org.example.spring6.iocxml.auto.service.UserService;\nimport org.example.spring6.iocxml.auto.service.impl.UserServiceImpl;\n\n/**\n * \n * Date: 2024-02-07 16:31\n * Description:\n */\n\npublic class UserController {\n    public void addUser() {\n        System.out.println(\"controller方法执行\");\n        UserService userService = new UserServiceImpl();\n        userService.addUserService();\n    }\n}\n\n```\n\n\n\n**新建简单测试类**\n\n``` java\n@Test\npublic void testController() {\n    UserController controller = new UserController();\n    controller.addUser();\n}\n```\n\n![](../images/springDay02/简单测试输出.png)\n\n\n\n\n\n\n\n#### 配置bean，完成自动装配\n\n![](../images/springDay02/auto注入1.png)\n\n\n\n**Controller层**\n\n``` java\npackage org.example.spring6.iocxml.auto.controller;\n\nimport org.example.spring6.iocxml.auto.service.UserService;\nimport org.example.spring6.iocxml.auto.service.impl.UserServiceImpl;\n\n/**\n * \n * Date: 2024-02-07 16:31\n * Description:\n */\n\npublic class UserController {\n\n    private UserService userService;\n\n    public UserService getUserService() {\n        return userService;\n    }\n\n    public void setUserService(UserService userService) {\n        this.userService = userService;\n    }\n\n    public void addUser() {\n        System.out.println(\"controller方法执行\");\n        // 调用service方法\n        userService.addUserService();\n    }\n}\n\n```\n\n\n\n**Service层**\n\n``` java\npackage org.example.spring6.iocxml.auto.service.impl;\n\nimport org.example.spring6.iocxml.auto.dao.UserDao;\nimport org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl;\nimport org.example.spring6.iocxml.auto.service.UserService;\n\n/**\n * \n * Date: 2024-02-07 16:32\n * Description:\n */\n\npublic class UserServiceImpl implements UserService {\n\n    private UserDao userDao;\n\n    public UserDao getUserDao() {\n        return userDao;\n    }\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    @Override\n    public void addUserService() {\n        System.out.println(\"UserService()方法执行\");\n        userDao.addUserDao();\n    }\n}\n\n```\n\n\n\n配置bean，`bean-auto.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean class=\"org.example.spring6.iocxml.auto.controller.UserController\" id=\"userController\" autowire=\"byType\">\n\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.auto.service.impl.UserServiceImpl\" id=\"userService\" autowire=\"byType\">\n\n    </bean>\n\n    <bean class=\"org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl\" id=\"userDao\">\n\n    </bean>\n</beans>\n```\n\n其中`autowire`属性是自动装填属性，属性值`byType`是根据类型自动装配，根据类型装配会自动匹配相应的类型，而根据名称匹配需要保证待匹配bean的名称与声明时相同。 \n\n\n\n\n\n新建测试类\n\n``` java\n@Test\npublic void testAuto() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-auto.xml\");\n    UserController userController = context.getBean(\"userController\", UserController.class);\n    userController.addUser();\n}\n```\n\n![](../images/springDay02/自动注入结果.png)\n\n>   `byType`：根据类型匹配IoC容器中的某个兼容类型的bean，为属性自动赋值\n>\n>   若在IoC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即默认值为null\n>\n>   若在IoC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException\n\n","slug":"【study】Spring学习part02","published":1,"updated":"2024-02-07T12:06:34.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsbyyuh70008qbgt6sksamtl","content":"<h1 id=\"Spring学习part02\"><a href=\"#Spring学习part02\" class=\"headerlink\" title=\"Spring学习part02\"></a>Spring学习part02</h1><h2 id=\"控制反转-IoC\"><a href=\"#控制反转-IoC\" class=\"headerlink\" title=\"控制反转  IoC\"></a>控制反转  IoC</h2><p>Spring中通过IoC容器来管理所有Java对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由IoC容器管理的Java对象成为Spring Bean，与Java使用关键字<code>new</code>创建的Java对象没有任何区别。</p>\n<p>IoC容器是Spring框架中最重要的核心组件之一，它贯穿了Spring从诞生到成长的整个过程。</p>\n<p><img src=\"/../images/springDay02/IoC.png\" alt=\"IoC\"></p>\n<ul>\n<li>控制反转是一种思想</li>\n<li>控制反转是为了降低程序耦合度，提高程序扩展能力</li>\n<li>控制反转，反转的是什么？<ul>\n<li>将对象的创建权力交出去，交给第三方容器负责</li>\n<li>将对象和对象之间关系的维护权交出去，交给第三方容器负责</li>\n</ul>\n</li>\n<li>控制反转这种思想如何实现<ul>\n<li>DI（Dependency injection）：依赖注入</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"依赖注入介绍\"><a href=\"#依赖注入介绍\" class=\"headerlink\" title=\"依赖注入介绍\"></a>依赖注入介绍</h2><p><strong>指Spring创建对象过程中，将的对象依赖属性通过配置进行注入</strong></p>\n<p>依赖注入常见的实现方式包括两种：</p>\n<ul>\n<li>set注入</li>\n<li>构造注入</li>\n</ul>\n<p>Bean管理：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）</p>\n<h2 id=\"基于XML管理bean\"><a href=\"#基于XML管理bean\" class=\"headerlink\" title=\"基于XML管理bean\"></a>基于XML管理bean</h2><p>新建子模块<code>spring6-iocxml</code></p>\n<h3 id=\"获取bean的三种方式\"><a href=\"#获取bean的三种方式\" class=\"headerlink\" title=\"获取bean的三种方式\"></a>获取bean的三种方式</h3><h4 id=\"方式一：根据id获取\"><a href=\"#方式一：根据id获取\" class=\"headerlink\" title=\"方式一：根据id获取\"></a>方式一：根据id获取</h4><h4 id=\"方式二：根据类型获取\"><a href=\"#方式二：根据类型获取\" class=\"headerlink\" title=\"方式二：根据类型获取\"></a>方式二：根据类型获取</h4><p><font color=\"red\">当根据类型获取bean时，要求IoC容器中制定类型的bean有且只能有一个</font></p>\n<p>若IoC容器中一共配置了两个，例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--beans.xml中--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.User&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.User&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user2&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user2</span> <span class=\"hljs-operator\">=</span> context.getBean(User.class);<br>System.out.println(<span class=\"hljs-string\">&quot;根据类型获取bean: &quot;</span> + user2);<br></code></pre></td></tr></table></figure>\n\n\n\n<p><font color=\"red\">错误信息如下</font></p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">org.springframework.beans.factory.NoUniqueBeanDefinitionException: <span class=\"hljs-keyword\">No</span> qualifying bean <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-string\">&#x27;org.example.spring6.iocxml.User&#x27;</span> available: expected single matching bean but <span class=\"hljs-built_in\">found</span> <span class=\"hljs-number\">2</span>: <span class=\"hljs-keyword\">user</span>,user2<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>如果一个接口有多个实现类，这些实现类都配置了bean，根据接口类型可以获取bean吗</p>\n<blockquote>\n<p>  不可以，因为bean不唯一</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--一个接口实现类的获取过程--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.bean.UserDaoImpl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;personDao&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.bean.PersonDaoImpl&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// java新建PersonDaoImpl，依赖UserDao接口</span><br><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.bean;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-02 17:05</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PersonDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDao</span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Person......&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 编写测试用例</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUserDao</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;beans.xml&quot;</span>);<br>    <span class=\"hljs-comment\">// 根据类型获取接口对应的bean</span><br>    <span class=\"hljs-type\">UserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> context.getBean(UserDao.class);<br>    System.out.println(userDao);<br>    userDao.run();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  <font color=\"red\">错误信息</font></p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">org<span class=\"hljs-selector-class\">.springframework</span><span class=\"hljs-selector-class\">.beans</span><span class=\"hljs-selector-class\">.factory</span><span class=\"hljs-selector-class\">.NoUniqueBeanDefinitionException</span>: No qualifying bean of type <span class=\"hljs-string\">&#x27;org.example.spring6.iocxml.bean.UserDao&#x27;</span> available: expected single matching bean but found <span class=\"hljs-number\">2</span>: userDao,personDao<br><br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"方式三：根据id和类型获取\"><a href=\"#方式三：根据id和类型获取\" class=\"headerlink\" title=\"方式三：根据id和类型获取\"></a>方式三：根据id和类型获取</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUser</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;beans.xml&quot;</span>);<br><br>    <span class=\"hljs-comment\">// 1. 根据id获取bean</span><br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user1</span> <span class=\"hljs-operator\">=</span> (User) context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;根据id获取bean: &quot;</span> + user1);<br><br>    <span class=\"hljs-comment\">// 2. 根据类型获取bean</span><br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user2</span> <span class=\"hljs-operator\">=</span> context.getBean(User.class);<br>    System.out.println(<span class=\"hljs-string\">&quot;根据类型获取bean: &quot;</span> + user2);<br><br>    <span class=\"hljs-comment\">// 3. 根据id和类型获取bean</span><br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user3</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>, User.class);<br>    System.out.println(<span class=\"hljs-string\">&quot;根据id和类型获取bean: &quot;</span> + user3);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><h4 id=\"依赖注入之setter注入\"><a href=\"#依赖注入之setter注入\" class=\"headerlink\" title=\"依赖注入之setter注入\"></a>依赖注入之setter注入</h4><ol>\n<li>创建类，定义属性，生成属性的set方法</li>\n<li>在spring配置文件中配置</li>\n</ol>\n<p>新建Book类，并且实现getter，setter，有参和无参构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org/example/spring6/iocxml/di/Book.java</span><br><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.di;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-02 17:14</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Book</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String bookName;<br>    <span class=\"hljs-keyword\">private</span> String author;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Book</span><span class=\"hljs-params\">()</span> &#123;<br><br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Book</span><span class=\"hljs-params\">(String bookName, String author)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.bookName = bookName;<br>        <span class=\"hljs-built_in\">this</span>.author = author;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getBookName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> bookName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setBookName</span><span class=\"hljs-params\">(String bookName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.bookName = bookName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getAuthor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> author;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAuthor</span><span class=\"hljs-params\">(String author)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.author = author;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Book&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;bookName=&#x27;&quot;</span> + bookName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, author=&#x27;&quot;</span> + author + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>新建配置文件（为区分刚刚的配置文件）<code>bean-di.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--bean通过set方法注入--&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--具体过程，通过标签中的name属性，对应到setter中的setBookName()函数--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.di.Book&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;HTML&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--属性名--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;author&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;wangwu&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--属性值--&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在测试类进行测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSetter</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di.xml&quot;</span>);<br>    <span class=\"hljs-type\">Book</span> <span class=\"hljs-variable\">book</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;book&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/set%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png\" alt=\"set注入结果\"></p>\n<h4 id=\"依赖注入之构造器注入\"><a href=\"#依赖注入之构造器注入\" class=\"headerlink\" title=\"依赖注入之构造器注入\"></a>依赖注入之构造器注入</h4><ol>\n<li>创建类，定义属性，生成有参数的构造方法</li>\n<li>在spring配置文件配置</li>\n</ol>\n<p><strong>Book类同上，但是构造函数做简单修改</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Book</span><span class=\"hljs-params\">()</span> &#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;无参构造已经被执行&quot;</span>);<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Book</span><span class=\"hljs-params\">(String bookName, String author)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.bookName = bookName;<br>    <span class=\"hljs-built_in\">this</span>.author = author;<br>    System.out.println(<span class=\"hljs-string\">&quot;有参构造已经被执行&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--bean通过set方法注入--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.di.Book&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;HTML&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;author&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;wangwu&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--bean通过构造器注入--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.di.Book&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;bookConstructor&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;PHP&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;author&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;AAAAA&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testConstructor</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di.xml&quot;</span>);<br>    <span class=\"hljs-type\">Book</span> <span class=\"hljs-variable\">book</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;bookConstructor&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>执行结果</p>\n<p><img src=\"/../images/springDay02/%E6%9C%89%E5%8F%82%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png\"></p>\n<blockquote>\n<p>  - 为什么有一句<font color=\"red\">无参构造已经被执行</font>？</p>\n<p>  - 因为xml文件中“通过set方法注入”里面的内容也被执行，这里运行的是无参构造函数</p>\n</blockquote>\n<h4 id=\"特殊值处理\"><a href=\"#特殊值处理\" class=\"headerlink\" title=\"特殊值处理\"></a>特殊值处理</h4><ul>\n<li><p>字面量赋值</p>\n<p>常规写法</p>\n</li>\n<li><p>null值</p>\n<p>若为空值，需要使用额外的标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">null</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>xml实体</p>\n<p>插入的值为xml格式</p>\n<ul>\n<li><p>解决方法1：转义</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;<span class=\"hljs-symbol\">&amp;lt;</span> <span class=\"hljs-symbol\">&amp;gt;</span>&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>CDATA节（区），可以表示特殊符号</p>\n<ul>\n<li>解决方法2：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"特殊类型属性注入\"><a href=\"#特殊类型属性注入\" class=\"headerlink\" title=\"特殊类型属性注入\"></a>特殊类型属性注入</h4><h5 id=\"外部引入bean\"><a href=\"#外部引入bean\" class=\"headerlink\" title=\"外部引入bean\"></a>外部引入bean</h5><p>新建两个类，部门和员工（一对多关系），</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org/example/spring6/iocxml/ditest/Department.java</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Department</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String dName;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getdName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> dName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setdName</span><span class=\"hljs-params\">(String dName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.dName = dName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Department</span><span class=\"hljs-params\">()</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Department</span><span class=\"hljs-params\">(String dName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.dName = dName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">info</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;部门名称: &quot;</span> + dName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org/example/spring6/iocxml/ditest/Employee.java</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Employee</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String eName;<br><br>    <span class=\"hljs-keyword\">private</span> Integer age;<br><br>    <span class=\"hljs-comment\">// 员工输入某个部门</span><br>    <span class=\"hljs-keyword\">private</span> Department department;<br><br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">geteName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> eName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">seteName</span><span class=\"hljs-params\">(String eName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.eName = eName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(Integer age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Department <span class=\"hljs-title function_\">getDepartment</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> department;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setDepartment</span><span class=\"hljs-params\">(Department department)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.department = department;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Employee</span><span class=\"hljs-params\">()</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Employee</span><span class=\"hljs-params\">(String eName, Integer age, Department department)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.eName = eName;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>        <span class=\"hljs-built_in\">this</span>.department = department;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">work</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(eName + <span class=\"hljs-string\">&quot;员工在工作, 工龄为: &quot;</span> + age);<br>        department.info();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        第一种方式: 引入外部的bean</span><br><span class=\"hljs-comment\">        1. 创建两个类对象: Department, Employee</span><br><span class=\"hljs-comment\">        2. 在Employee的bean标签里面, 使用property引入Department, Employee的bean</span><br><span class=\"hljs-comment\">    --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;department&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;安保部&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--普通属性注入--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;lucy&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;50&quot;</span>/&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--对象类型注入--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;department&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;department&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--将部门对象引入  使用ref--&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>新建测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testEmployee</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di-test.xml&quot;</span>);<br>    <span class=\"hljs-comment\">// 员工对象</span><br>    <span class=\"hljs-type\">Employee</span> <span class=\"hljs-variable\">employee</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;employee&quot;</span>, Employee.class);<br>    employee.work();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>输出结果</p>\n<p><img src=\"/../images/springDay02/%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png\"></p>\n<h5 id=\"内部引入bean\"><a href=\"#内部引入bean\" class=\"headerlink\" title=\"内部引入bean\"></a>内部引入bean</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee2&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--内部bean注入--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;mary&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;30&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;department&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;财务部&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"级联引入bean\"><a href=\"#级联引入bean\" class=\"headerlink\" title=\"级联引入bean\"></a>级联引入bean</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        第二种方式: 级联赋值bean</span><br><span class=\"hljs-comment\">        1. 创建两个类对象: Department, Employee</span><br><span class=\"hljs-comment\">        2. 在Employee的bean标签里面, 使用property引入Department, Employee的bean</span><br><span class=\"hljs-comment\">    --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee3&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;tom&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;30&quot;</span>/&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--级联赋值--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;department&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;department3&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--这里不能写value--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;department.dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;测试部&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;department3&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;技术研发部&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"为数组类型属性赋值\"><a href=\"#为数组类型属性赋值\" class=\"headerlink\" title=\"为数组类型属性赋值\"></a>为数组类型属性赋值</h4><p>员工类添加爱好，并生成getter(), setter()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> String[] hobbies;<br><br><span class=\"hljs-keyword\">public</span> String[] getHobbies() &#123;<br>    <span class=\"hljs-keyword\">return</span> hobbies;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setHobbies</span><span class=\"hljs-params\">(String[] hobbies)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.hobbies = hobbies;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>构造bean，新建<code>bean-di-array.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;department&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;技术部&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--注入普通的属性值--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Lucy&quot;</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;20&quot;</span> /&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--注入对象类型的属性值--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;department&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;department&quot;</span>/&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--注入数组类型的属性值--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hobbies&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">array</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>唱<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>跳<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>rap<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>篮球<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">array</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  如果为数组类型，在<code>property</code>标签中还有<code>array</code>标签写入，再使用<code>value</code>标签添加值。</p>\n</blockquote>\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testArray</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di-array.xml&quot;</span>);<br>    <span class=\"hljs-type\">Employee</span> <span class=\"hljs-variable\">employee</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;employee&quot;</span>, Employee.class);<br>    employee.work();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E5%B1%9E%E6%80%A7.png\"></p>\n<h4 id=\"为集合类型属性注入\"><a href=\"#为集合类型属性注入\" class=\"headerlink\" title=\"为集合类型属性注入\"></a>为集合类型属性注入</h4><h5 id=\"list集合类型\"><a href=\"#list集合类型\" class=\"headerlink\" title=\"list集合类型\"></a>list集合类型</h5><p>部门新增属性，员工列表，并生成getter(), setter()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> List&lt;Employee&gt; employeeList;<br><br><span class=\"hljs-keyword\">public</span> List&lt;Employee&gt; <span class=\"hljs-title function_\">getEmployeeList</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> employeeList;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setEmployeeList</span><span class=\"hljs-params\">(List&lt;Employee&gt; employeeList)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.employeeList = employeeList;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">info</span><span class=\"hljs-params\">()</span> &#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;部门名称: &quot;</span> + dName);<br>    <span class=\"hljs-keyword\">for</span> (Employee emp : employeeList) &#123;<br>        System.out.println(emp.geteName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>配置bean，<code>bean-di-list.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee1&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Lucy&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;20&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Mary&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;30&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;department&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;技术研发部&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;employeeList&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">list</span>&gt;</span>  <span class=\"hljs-comment\">&lt;!--list中引入其他的bean--&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;employee1&quot;</span>/&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;employee2&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">list</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testList</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di-list.xml&quot;</span>);<br>    <span class=\"hljs-type\">Department</span> <span class=\"hljs-variable\">department</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;department&quot;</span>, Department.class);<br>    department.info();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/list%E7%B1%BB%E5%9E%8B%E5%B1%9E%E6%80%A7.png\"></p>\n<h5 id=\"map集合类型\"><a href=\"#map集合类型\" class=\"headerlink\" title=\"map集合类型\"></a>map集合类型</h5><p>新建学生类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.dimap;<br><br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 00:05</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String studentId;<br>    <span class=\"hljs-keyword\">private</span> String studentName;<br><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, Teacher&gt; teacherMap;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getStudentId</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> studentId;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setStudentId</span><span class=\"hljs-params\">(String studentId)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.studentId = studentId;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getStudentName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> studentName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setStudentName</span><span class=\"hljs-params\">(String studentName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.studentName = studentName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Map&lt;String, Teacher&gt; <span class=\"hljs-title function_\">getTeacherMap</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> teacherMap;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setTeacherMap</span><span class=\"hljs-params\">(Map&lt;String, Teacher&gt; teacherMap)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.teacherMap = teacherMap;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;学生编号: &quot;</span> + studentId + <span class=\"hljs-string\">&quot;学生名: &quot;</span> + studentName);<br>        System.out.println(teacherMap);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Student&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;studentId=&#x27;&quot;</span> + studentId + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, studentName=&#x27;&quot;</span> + studentName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, teacherMap=&quot;</span> + teacherMap +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建教师类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.dimap;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 00:05</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Teacher</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String teacherId;<br>    <span class=\"hljs-keyword\">private</span> String teacherName;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getTeacherId</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> teacherId;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setTeacherId</span><span class=\"hljs-params\">(String teacherId)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.teacherId = teacherId;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getTeacherName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> teacherName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setTeacherName</span><span class=\"hljs-params\">(String teacherName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.teacherName = teacherName;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Teacher&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;teacherId=&#x27;&quot;</span> + teacherId + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, teacherName=&#x27;&quot;</span> + teacherName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>配置bean，<code>bean-di-map.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        1. 创建两个对象</span><br><span class=\"hljs-comment\">        2. 注入普通类型属性</span><br><span class=\"hljs-comment\">        3. 在学生bean中注入map集合类型属性</span><br><span class=\"hljs-comment\">    --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Student&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;student&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;studentId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;20000&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;studentName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;张三&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherMap&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;100010&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;teacher1&quot;</span>/&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;100011&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;teacher2&quot;</span>/&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;100012&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;teacher3&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacher1&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;100&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--讲师id--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;蔡老师&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacher2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;101&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--讲师id--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;徐老师&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacher3&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;102&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--讲师id--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;kun老师&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testMap</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di-map.xml&quot;</span>);<br>    <span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">student</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;student&quot;</span>, Student.class);<br>    student.run();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/map%E7%B1%BB%E5%9E%8B%E5%B1%9E%E6%80%A7.png\"></p>\n<h4 id=\"引用集合类型的bean\"><a href=\"#引用集合类型的bean\" class=\"headerlink\" title=\"引用集合类型的bean\"></a>引用集合类型的bean</h4><p>新增课程类Lesson</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.dimap;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 00:29</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Lesson</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String lessonName;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getLessonName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> lessonName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setLessonName</span><span class=\"hljs-params\">(String lessonName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.lessonName = lessonName;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Lesson&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;lessonName=&#x27;&quot;</span> + lessonName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>新增学生属性：lessonList，表示学生选了哪些课程，并生成getter(), setter()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> List&lt;Lesson&gt; lessonList;<br><br><span class=\"hljs-keyword\">public</span> List&lt;Lesson&gt; <span class=\"hljs-title function_\">getLessonList</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> lessonList;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setLessonList</span><span class=\"hljs-params\">(List&lt;Lesson&gt; lessonList)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.lessonList = lessonList;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>配置bean，<code>bean-di-ref.xml</code></p>\n<p>需要引入新的约束</p>\n<p><code>xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</code></p>\n<p><code>xsi:schemaLocation</code>中添加</p>\n<ul>\n<li><code>http://www.springframework.org/schema/util</code></li>\n<li><code>http://www.springframework.org/schema/util/spring-util.xsd</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:util</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/util</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--1. 创建三个对象--&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--2. 注入普通类型属性--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Student&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;student&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;studentId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;10000&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;studentName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;张三&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;lessonList&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;lessonList&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherMap&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;teacherMap&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacher1&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;蔡老师&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;100&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacher2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;徐老师&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;101&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;lesson1&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;lessonName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;数据结构&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;lesson2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;lessonName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;计算机组成原理&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;lesson3&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;lessonName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;操作系统&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;lesson4&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;lessonName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;计算机网络&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--3. 使用util: 类型  定义--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">util:list</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;lessonList&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;lesson1&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;lesson2&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;lesson3&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;lesson4&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">util:list</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">util:map</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacherMap&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;10010&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;teacher1&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;10011&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;teacher2&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">util:map</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--4. 在学生bean引入util: 类型定义bean, 完成list, map类型属性注入--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>输出结果</p>\n<p><img src=\"/../images/springDay02/ref%E7%BB%93%E6%9E%9C1.png\"></p>\n<p><img src=\"/../images/springDay02/ref%E7%BB%93%E6%9E%9C2.png\"></p>\n<h4 id=\"p命名空间注入\"><a href=\"#p命名空间注入\" class=\"headerlink\" title=\"p命名空间注入\"></a>p命名空间注入</h4><p><code>bean-di-ref.xml</code>中简单修改，添加如下约束以及标签</p>\n<p><code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Student&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;studentP&quot;</span> <span class=\"hljs-attr\">p:studentId</span>=<span class=\"hljs-string\">&quot;1000&quot;</span> <span class=\"hljs-attr\">p:studentName</span>=<span class=\"hljs-string\">&quot;Mary&quot;</span></span><br><span class=\"hljs-tag\">      <span class=\"hljs-attr\">p:lessonList-ref</span>=<span class=\"hljs-string\">&quot;lessonList&quot;</span> <span class=\"hljs-attr\">p:teacherMap-ref</span>=<span class=\"hljs-string\">&quot;teacherMap&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>编写测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testPLabel</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di-ref.xml&quot;</span>);<br>    <span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">student</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;studentP&quot;</span>, Student.class);<br>    student.run();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/p%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png\"></p>\n<h4 id=\"引入外部属性文件\"><a href=\"#引入外部属性文件\" class=\"headerlink\" title=\"引入外部属性文件\"></a>引入外部属性文件</h4><p>导入连接MySQL相关依赖在<code>pom.xml</code>中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--MySQL驱动--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.31<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>连接MySQL操作，写入配置文件<code>jdbc.properties</code>，配置MySQL相关</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">jdbc.user</span>=<span class=\"hljs-string\">root</span><br><span class=\"hljs-attr\">jdbc.password</span>=<span class=\"hljs-string\">11111111</span><br><span class=\"hljs-attr\">jdbc.url</span>=<span class=\"hljs-string\">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span><br><span class=\"hljs-attr\">jdbc.driver</span>=<span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>然后配置配置bean，<code>bean-jdbc.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--引入外部属性文件--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:property-placeholder</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--完成数据库信息注入--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这里的属性值会读取到<code>jdbc.properties</code>文件中的值</p>\n<p>编写测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testJdbc2</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-jdbc.xml&quot;</span>);<br>    <span class=\"hljs-type\">DruidDataSource</span> <span class=\"hljs-variable\">druidDataSource</span> <span class=\"hljs-operator\">=</span> context.getBean(DruidDataSource.class);<br>    System.out.println(druidDataSource.getUrl());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/%E5%A4%96%E9%83%A8%E5%BC%95%E5%85%A5%E7%BB%93%E6%9E%9C.png\"></p>\n<h3 id=\"bean的作用域\"><a href=\"#bean的作用域\" class=\"headerlink\" title=\"bean的作用域\"></a>bean的作用域</h3><p>在Spring中，可以通过配置bean标签的<code>scope</code>属性来执行bean的作用范围，各取值含义如下表：</p>\n<table>\n<thead>\n<tr>\n<th>取值</th>\n<th>含义</th>\n<th>创建对象的时机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>singleton（默认）</td>\n<td>在IoC容器中，这个bean的对象始终为单实例</td>\n<td>IoC容器初始化时</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>这个bean在IoC容器中有多个实例</td>\n<td>获取bean时</td>\n</tr>\n</tbody></table>\n<p>新建Order类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.scope;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 12:32</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Orders</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>配置bean，<code>bean-scope.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--通过scope属性配置单实例  多实例--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.scope.Orders&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orders&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;singleton&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>其中<code>bean</code>标签中的<code>scope</code>属性默认为<code>singleton</code></p>\n<p>新建测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testOrders</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-scope.xml&quot;</span>);<br>    <span class=\"hljs-type\">Orders</span> <span class=\"hljs-variable\">orders</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(orders);<br>    <span class=\"hljs-type\">Orders</span> <span class=\"hljs-variable\">orders1</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(orders1);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里新建两个对象，都取自同一个bean，输出对象的地址，查看是否相同</p>\n<p><img src=\"/../images/springDay02/%E5%8D%95%E5%AE%9E%E4%BE%8B%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png\"></p>\n<p>可以看到两个实例的地址是相同的</p>\n<p>测试多实例，将<code>bean</code>标签中的<code>scope</code>属性改为<code>prototype</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--通过scope属性配置单实例  多实例--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.scope.Orders&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orders&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;prototype&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/%E5%A4%9A%E5%AE%9E%E4%BE%8B%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png\"></p>\n<h3 id=\"bean的生命周期\"><a href=\"#bean的生命周期\" class=\"headerlink\" title=\"bean的生命周期\"></a>bean的生命周期</h3><ol>\n<li>bean对象的创建（调用无参构造）</li>\n<li>给bean对象设置相关属性</li>\n<li>bean后置处理器（初始化之前）</li>\n<li>bean对象初始化（调用制定初始化方法）</li>\n<li>bean后置处理器（初始化之后）</li>\n<li>bean对象创建完成，可以使用</li>\n<li>bean对象销毁（配置制定销毁方法）</li>\n<li>关闭IoC容器</li>\n</ol>\n<p>新建User类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.life;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 12:47</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">User</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第一步: 这是无参构造函数, 创建bean对象&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>        System.out.println(<span class=\"hljs-string\">&quot;第二步: 给bean对象设置属性值&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 初始化的方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initMethod</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第四步: bean对象初始化, 调用指定方法进行初始化&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 销毁的方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">destroyMethod</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第七步: bean对象销毁, 调用制定方法进行销毁&quot;</span>);<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>用于实现bean的初始化和销毁方法，<code>initMethod()</code>和<code>destroyMethod()</code></p>\n<p>构造bean，<code>bean-life.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.life.User&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">init-method</span>=<span class=\"hljs-string\">&quot;initMethod&quot;</span></span><br><span class=\"hljs-tag\">          <span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">&quot;destroyMethod&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Lucy&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在<code>bean</code>标签中添加两个属性<code>init-method</code>和<code>destroy-method</code>，属性值为两个函数名</p>\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testLife</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ClassPathXmlApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-life.xml&quot;</span>);<br>    org.example.spring6.iocxml.life.<span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>, org.example.spring6.iocxml.life.User.class);<br>    System.out.println(user);<br>    System.out.println(<span class=\"hljs-string\">&quot;第六步: bean对象创建完成&quot;</span>);<br>    context.close();  <span class=\"hljs-comment\">// 对象销毁  只有实现类才有这个函数, ApplicationContext并没有这个方法</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>为了区分其他包里面的<code>User</code>类，这里写了包的全路径</p>\n<p>![](&#x2F;Users&#x2F;promise&#x2F;Promise Code&#x2F;blog&#x2F;source&#x2F;images&#x2F;springDay02&#x2F;bean生命周期输出1.png)</p>\n<p>这里并没有给出第三步与第五步，现在写入后置处理器</p>\n<p>新建类<code>MyBeanPost</code>依赖于接口<code>BeanPostProcessor</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.life;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeansException;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 13:00</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyBeanPost</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BeanPostProcessor</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessBeforeInitialization</span><span class=\"hljs-params\">(Object bean, String beanName)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第三步: 后置处理器, 在初始化之前执行&quot;</span>);<br>        System.out.println(beanName + <span class=\"hljs-string\">&quot;::&quot;</span> + bean);<br>        <span class=\"hljs-keyword\">return</span> bean;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessAfterInitialization</span><span class=\"hljs-params\">(Object bean, String beanName)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第五步: 后置处理器, 在初始化之后执行&quot;</span>);<br>        System.out.println(beanName + <span class=\"hljs-string\">&quot;::&quot;</span> + bean);<br>        <span class=\"hljs-keyword\">return</span> bean;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>在<code>bean-life.xml</code>中新增后置处理器的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--bean的后置处理器要放入IoC容器才能生效--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.life.MyBeanPost&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myBeanPost&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>测试类运行结果</p>\n<p><img src=\"/../images/springDay02/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BE%93%E5%87%BA3.png\"></p>\n<h3 id=\"FactoryBean工厂bean\"><a href=\"#FactoryBean工厂bean\" class=\"headerlink\" title=\"FactoryBean工厂bean\"></a>FactoryBean工厂bean</h3><p>新建User1类，无任何属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.factoryBean;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:19</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User1</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>配置bean，<code>bean-factorybean.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.factoryBean.MyFactoryBean&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user1&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>实现FactoryBean接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.factoryBean;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:18</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyFactoryBean</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">FactoryBean</span>&lt;User1&gt; &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> User1 <span class=\"hljs-title function_\">getObject</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User1</span>();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class=\"hljs-keyword\">return</span> User1.class;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>新建测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFactoryBean</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-factorybean.xml&quot;</span>);<br>    <span class=\"hljs-type\">User1</span> <span class=\"hljs-variable\">user1</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;user1&quot;</span>, User1.class);<br>    System.out.println(user1);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/factoryBean%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png\"></p>\n<h3 id=\"基于XML的自动装配\"><a href=\"#基于XML的自动装配\" class=\"headerlink\" title=\"基于XML的自动装配\"></a>基于XML的自动装配</h3><p>根据制定的策略，在IoC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性值复制</p>\n<p><img src=\"/../images/springDay02/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.png\"></p>\n<p>若不使用Spring的写法</p>\n<p><strong>DAO层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.dao;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserDao</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUserDao</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.dao.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.dao.UserDao;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:33</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDao</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUserDao</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;执行了UserDao方法&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>Service层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.service;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUserService</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.service.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.dao.UserDao;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:32</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUserService</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;UserService()方法执行&quot;</span>);<br>        <span class=\"hljs-type\">UserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserDaoImpl</span>();<br>        userDao.addUserDao();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>Controller层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.impl.UserServiceImpl;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:31</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUser</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;controller方法执行&quot;</span>);<br>        <span class=\"hljs-type\">UserService</span> <span class=\"hljs-variable\">userService</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserServiceImpl</span>();<br>        userService.addUserService();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>新建简单测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testController</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">UserController</span> <span class=\"hljs-variable\">controller</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserController</span>();<br>    controller.addUser();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95%E8%BE%93%E5%87%BA.png\"></p>\n<h4 id=\"配置bean，完成自动装配\"><a href=\"#配置bean，完成自动装配\" class=\"headerlink\" title=\"配置bean，完成自动装配\"></a>配置bean，完成自动装配</h4><p><img src=\"/../images/springDay02/auto%E6%B3%A8%E5%85%A51.png\"></p>\n<p><strong>Controller层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.impl.UserServiceImpl;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:31</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-keyword\">public</span> UserService <span class=\"hljs-title function_\">getUserService</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userService;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setUserService</span><span class=\"hljs-params\">(UserService userService)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userService = userService;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUser</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;controller方法执行&quot;</span>);<br>        <span class=\"hljs-comment\">// 调用service方法</span><br>        userService.addUserService();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>Service层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.service.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.dao.UserDao;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:32</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> UserDao userDao;<br><br>    <span class=\"hljs-keyword\">public</span> UserDao <span class=\"hljs-title function_\">getUserDao</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userDao;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setUserDao</span><span class=\"hljs-params\">(UserDao userDao)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUserService</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;UserService()方法执行&quot;</span>);<br>        userDao.addUserDao();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>配置bean，<code>bean-auto.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.auto.controller.UserController&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userController&quot;</span> <span class=\"hljs-attr\">autowire</span>=<span class=\"hljs-string\">&quot;byType&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.auto.service.impl.UserServiceImpl&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span> <span class=\"hljs-attr\">autowire</span>=<span class=\"hljs-string\">&quot;byType&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>其中<code>autowire</code>属性是自动装填属性，属性值<code>byType</code>是根据类型自动装配，根据类型装配会自动匹配相应的类型，而根据名称匹配需要保证待匹配bean的名称与声明时相同。 </p>\n<p>新建测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAuto</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-auto.xml&quot;</span>);<br>    <span class=\"hljs-type\">UserController</span> <span class=\"hljs-variable\">userController</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;userController&quot;</span>, UserController.class);<br>    userController.addUser();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png\"></p>\n<blockquote>\n<p>  <code>byType</code>：根据类型匹配IoC容器中的某个兼容类型的bean，为属性自动赋值</p>\n<p>  若在IoC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即默认值为null</p>\n<p>  若在IoC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring学习part02\"><a href=\"#Spring学习part02\" class=\"headerlink\" title=\"Spring学习part02\"></a>Spring学习part02</h1><h2 id=\"控制反转-IoC\"><a href=\"#控制反转-IoC\" class=\"headerlink\" title=\"控制反转  IoC\"></a>控制反转  IoC</h2><p>Spring中通过IoC容器来管理所有Java对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由IoC容器管理的Java对象成为Spring Bean，与Java使用关键字<code>new</code>创建的Java对象没有任何区别。</p>\n<p>IoC容器是Spring框架中最重要的核心组件之一，它贯穿了Spring从诞生到成长的整个过程。</p>\n<p><img src=\"/../images/springDay02/IoC.png\" alt=\"IoC\"></p>\n<ul>\n<li>控制反转是一种思想</li>\n<li>控制反转是为了降低程序耦合度，提高程序扩展能力</li>\n<li>控制反转，反转的是什么？<ul>\n<li>将对象的创建权力交出去，交给第三方容器负责</li>\n<li>将对象和对象之间关系的维护权交出去，交给第三方容器负责</li>\n</ul>\n</li>\n<li>控制反转这种思想如何实现<ul>\n<li>DI（Dependency injection）：依赖注入</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"依赖注入介绍\"><a href=\"#依赖注入介绍\" class=\"headerlink\" title=\"依赖注入介绍\"></a>依赖注入介绍</h2><p><strong>指Spring创建对象过程中，将的对象依赖属性通过配置进行注入</strong></p>\n<p>依赖注入常见的实现方式包括两种：</p>\n<ul>\n<li>set注入</li>\n<li>构造注入</li>\n</ul>\n<p>Bean管理：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）</p>\n<h2 id=\"基于XML管理bean\"><a href=\"#基于XML管理bean\" class=\"headerlink\" title=\"基于XML管理bean\"></a>基于XML管理bean</h2><p>新建子模块<code>spring6-iocxml</code></p>\n<h3 id=\"获取bean的三种方式\"><a href=\"#获取bean的三种方式\" class=\"headerlink\" title=\"获取bean的三种方式\"></a>获取bean的三种方式</h3><h4 id=\"方式一：根据id获取\"><a href=\"#方式一：根据id获取\" class=\"headerlink\" title=\"方式一：根据id获取\"></a>方式一：根据id获取</h4><h4 id=\"方式二：根据类型获取\"><a href=\"#方式二：根据类型获取\" class=\"headerlink\" title=\"方式二：根据类型获取\"></a>方式二：根据类型获取</h4><p><font color=\"red\">当根据类型获取bean时，要求IoC容器中制定类型的bean有且只能有一个</font></p>\n<p>若IoC容器中一共配置了两个，例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--beans.xml中--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.User&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.User&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user2&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user2</span> <span class=\"hljs-operator\">=</span> context.getBean(User.class);<br>System.out.println(<span class=\"hljs-string\">&quot;根据类型获取bean: &quot;</span> + user2);<br></code></pre></td></tr></table></figure>\n\n\n\n<p><font color=\"red\">错误信息如下</font></p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">org.springframework.beans.factory.NoUniqueBeanDefinitionException: <span class=\"hljs-keyword\">No</span> qualifying bean <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-string\">&#x27;org.example.spring6.iocxml.User&#x27;</span> available: expected single matching bean but <span class=\"hljs-built_in\">found</span> <span class=\"hljs-number\">2</span>: <span class=\"hljs-keyword\">user</span>,user2<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>如果一个接口有多个实现类，这些实现类都配置了bean，根据接口类型可以获取bean吗</p>\n<blockquote>\n<p>  不可以，因为bean不唯一</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--一个接口实现类的获取过程--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.bean.UserDaoImpl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;personDao&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.bean.PersonDaoImpl&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// java新建PersonDaoImpl，依赖UserDao接口</span><br><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.bean;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-02 17:05</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PersonDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDao</span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Person......&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 编写测试用例</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUserDao</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;beans.xml&quot;</span>);<br>    <span class=\"hljs-comment\">// 根据类型获取接口对应的bean</span><br>    <span class=\"hljs-type\">UserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> context.getBean(UserDao.class);<br>    System.out.println(userDao);<br>    userDao.run();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  <font color=\"red\">错误信息</font></p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">org<span class=\"hljs-selector-class\">.springframework</span><span class=\"hljs-selector-class\">.beans</span><span class=\"hljs-selector-class\">.factory</span><span class=\"hljs-selector-class\">.NoUniqueBeanDefinitionException</span>: No qualifying bean of type <span class=\"hljs-string\">&#x27;org.example.spring6.iocxml.bean.UserDao&#x27;</span> available: expected single matching bean but found <span class=\"hljs-number\">2</span>: userDao,personDao<br><br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"方式三：根据id和类型获取\"><a href=\"#方式三：根据id和类型获取\" class=\"headerlink\" title=\"方式三：根据id和类型获取\"></a>方式三：根据id和类型获取</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUser</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;beans.xml&quot;</span>);<br><br>    <span class=\"hljs-comment\">// 1. 根据id获取bean</span><br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user1</span> <span class=\"hljs-operator\">=</span> (User) context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;根据id获取bean: &quot;</span> + user1);<br><br>    <span class=\"hljs-comment\">// 2. 根据类型获取bean</span><br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user2</span> <span class=\"hljs-operator\">=</span> context.getBean(User.class);<br>    System.out.println(<span class=\"hljs-string\">&quot;根据类型获取bean: &quot;</span> + user2);<br><br>    <span class=\"hljs-comment\">// 3. 根据id和类型获取bean</span><br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user3</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>, User.class);<br>    System.out.println(<span class=\"hljs-string\">&quot;根据id和类型获取bean: &quot;</span> + user3);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><h4 id=\"依赖注入之setter注入\"><a href=\"#依赖注入之setter注入\" class=\"headerlink\" title=\"依赖注入之setter注入\"></a>依赖注入之setter注入</h4><ol>\n<li>创建类，定义属性，生成属性的set方法</li>\n<li>在spring配置文件中配置</li>\n</ol>\n<p>新建Book类，并且实现getter，setter，有参和无参构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org/example/spring6/iocxml/di/Book.java</span><br><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.di;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-02 17:14</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Book</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String bookName;<br>    <span class=\"hljs-keyword\">private</span> String author;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Book</span><span class=\"hljs-params\">()</span> &#123;<br><br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Book</span><span class=\"hljs-params\">(String bookName, String author)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.bookName = bookName;<br>        <span class=\"hljs-built_in\">this</span>.author = author;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getBookName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> bookName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setBookName</span><span class=\"hljs-params\">(String bookName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.bookName = bookName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getAuthor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> author;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAuthor</span><span class=\"hljs-params\">(String author)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.author = author;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Book&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;bookName=&#x27;&quot;</span> + bookName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, author=&#x27;&quot;</span> + author + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>新建配置文件（为区分刚刚的配置文件）<code>bean-di.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--bean通过set方法注入--&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--具体过程，通过标签中的name属性，对应到setter中的setBookName()函数--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.di.Book&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;HTML&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--属性名--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;author&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;wangwu&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--属性值--&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在测试类进行测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSetter</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di.xml&quot;</span>);<br>    <span class=\"hljs-type\">Book</span> <span class=\"hljs-variable\">book</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;book&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/set%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png\" alt=\"set注入结果\"></p>\n<h4 id=\"依赖注入之构造器注入\"><a href=\"#依赖注入之构造器注入\" class=\"headerlink\" title=\"依赖注入之构造器注入\"></a>依赖注入之构造器注入</h4><ol>\n<li>创建类，定义属性，生成有参数的构造方法</li>\n<li>在spring配置文件配置</li>\n</ol>\n<p><strong>Book类同上，但是构造函数做简单修改</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Book</span><span class=\"hljs-params\">()</span> &#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;无参构造已经被执行&quot;</span>);<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Book</span><span class=\"hljs-params\">(String bookName, String author)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.bookName = bookName;<br>    <span class=\"hljs-built_in\">this</span>.author = author;<br>    System.out.println(<span class=\"hljs-string\">&quot;有参构造已经被执行&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--bean通过set方法注入--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.di.Book&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;HTML&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;author&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;wangwu&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--bean通过构造器注入--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.di.Book&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;bookConstructor&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;PHP&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;author&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;AAAAA&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testConstructor</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di.xml&quot;</span>);<br>    <span class=\"hljs-type\">Book</span> <span class=\"hljs-variable\">book</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;bookConstructor&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>执行结果</p>\n<p><img src=\"/../images/springDay02/%E6%9C%89%E5%8F%82%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png\"></p>\n<blockquote>\n<p>  - 为什么有一句<font color=\"red\">无参构造已经被执行</font>？</p>\n<p>  - 因为xml文件中“通过set方法注入”里面的内容也被执行，这里运行的是无参构造函数</p>\n</blockquote>\n<h4 id=\"特殊值处理\"><a href=\"#特殊值处理\" class=\"headerlink\" title=\"特殊值处理\"></a>特殊值处理</h4><ul>\n<li><p>字面量赋值</p>\n<p>常规写法</p>\n</li>\n<li><p>null值</p>\n<p>若为空值，需要使用额外的标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">null</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>xml实体</p>\n<p>插入的值为xml格式</p>\n<ul>\n<li><p>解决方法1：转义</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;<span class=\"hljs-symbol\">&amp;lt;</span> <span class=\"hljs-symbol\">&amp;gt;</span>&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>CDATA节（区），可以表示特殊符号</p>\n<ul>\n<li>解决方法2：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bookName&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"特殊类型属性注入\"><a href=\"#特殊类型属性注入\" class=\"headerlink\" title=\"特殊类型属性注入\"></a>特殊类型属性注入</h4><h5 id=\"外部引入bean\"><a href=\"#外部引入bean\" class=\"headerlink\" title=\"外部引入bean\"></a>外部引入bean</h5><p>新建两个类，部门和员工（一对多关系），</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org/example/spring6/iocxml/ditest/Department.java</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Department</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String dName;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getdName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> dName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setdName</span><span class=\"hljs-params\">(String dName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.dName = dName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Department</span><span class=\"hljs-params\">()</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Department</span><span class=\"hljs-params\">(String dName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.dName = dName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">info</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;部门名称: &quot;</span> + dName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org/example/spring6/iocxml/ditest/Employee.java</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Employee</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String eName;<br><br>    <span class=\"hljs-keyword\">private</span> Integer age;<br><br>    <span class=\"hljs-comment\">// 员工输入某个部门</span><br>    <span class=\"hljs-keyword\">private</span> Department department;<br><br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">geteName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> eName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">seteName</span><span class=\"hljs-params\">(String eName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.eName = eName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(Integer age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Department <span class=\"hljs-title function_\">getDepartment</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> department;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setDepartment</span><span class=\"hljs-params\">(Department department)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.department = department;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Employee</span><span class=\"hljs-params\">()</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Employee</span><span class=\"hljs-params\">(String eName, Integer age, Department department)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.eName = eName;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>        <span class=\"hljs-built_in\">this</span>.department = department;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">work</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(eName + <span class=\"hljs-string\">&quot;员工在工作, 工龄为: &quot;</span> + age);<br>        department.info();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        第一种方式: 引入外部的bean</span><br><span class=\"hljs-comment\">        1. 创建两个类对象: Department, Employee</span><br><span class=\"hljs-comment\">        2. 在Employee的bean标签里面, 使用property引入Department, Employee的bean</span><br><span class=\"hljs-comment\">    --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;department&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;安保部&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--普通属性注入--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;lucy&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;50&quot;</span>/&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--对象类型注入--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;department&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;department&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--将部门对象引入  使用ref--&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>新建测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testEmployee</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di-test.xml&quot;</span>);<br>    <span class=\"hljs-comment\">// 员工对象</span><br>    <span class=\"hljs-type\">Employee</span> <span class=\"hljs-variable\">employee</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;employee&quot;</span>, Employee.class);<br>    employee.work();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>输出结果</p>\n<p><img src=\"/../images/springDay02/%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png\"></p>\n<h5 id=\"内部引入bean\"><a href=\"#内部引入bean\" class=\"headerlink\" title=\"内部引入bean\"></a>内部引入bean</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee2&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--内部bean注入--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;mary&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;30&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;department&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;财务部&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"级联引入bean\"><a href=\"#级联引入bean\" class=\"headerlink\" title=\"级联引入bean\"></a>级联引入bean</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        第二种方式: 级联赋值bean</span><br><span class=\"hljs-comment\">        1. 创建两个类对象: Department, Employee</span><br><span class=\"hljs-comment\">        2. 在Employee的bean标签里面, 使用property引入Department, Employee的bean</span><br><span class=\"hljs-comment\">    --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee3&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;tom&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;30&quot;</span>/&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--级联赋值--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;department&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;department3&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--这里不能写value--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;department.dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;测试部&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;department3&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;技术研发部&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"为数组类型属性赋值\"><a href=\"#为数组类型属性赋值\" class=\"headerlink\" title=\"为数组类型属性赋值\"></a>为数组类型属性赋值</h4><p>员工类添加爱好，并生成getter(), setter()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> String[] hobbies;<br><br><span class=\"hljs-keyword\">public</span> String[] getHobbies() &#123;<br>    <span class=\"hljs-keyword\">return</span> hobbies;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setHobbies</span><span class=\"hljs-params\">(String[] hobbies)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.hobbies = hobbies;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>构造bean，新建<code>bean-di-array.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;department&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;技术部&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--注入普通的属性值--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Lucy&quot;</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;20&quot;</span> /&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--注入对象类型的属性值--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;department&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;department&quot;</span>/&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--注入数组类型的属性值--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hobbies&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">array</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>唱<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>跳<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>rap<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>篮球<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">array</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  如果为数组类型，在<code>property</code>标签中还有<code>array</code>标签写入，再使用<code>value</code>标签添加值。</p>\n</blockquote>\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testArray</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di-array.xml&quot;</span>);<br>    <span class=\"hljs-type\">Employee</span> <span class=\"hljs-variable\">employee</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;employee&quot;</span>, Employee.class);<br>    employee.work();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E5%B1%9E%E6%80%A7.png\"></p>\n<h4 id=\"为集合类型属性注入\"><a href=\"#为集合类型属性注入\" class=\"headerlink\" title=\"为集合类型属性注入\"></a>为集合类型属性注入</h4><h5 id=\"list集合类型\"><a href=\"#list集合类型\" class=\"headerlink\" title=\"list集合类型\"></a>list集合类型</h5><p>部门新增属性，员工列表，并生成getter(), setter()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> List&lt;Employee&gt; employeeList;<br><br><span class=\"hljs-keyword\">public</span> List&lt;Employee&gt; <span class=\"hljs-title function_\">getEmployeeList</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> employeeList;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setEmployeeList</span><span class=\"hljs-params\">(List&lt;Employee&gt; employeeList)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.employeeList = employeeList;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">info</span><span class=\"hljs-params\">()</span> &#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;部门名称: &quot;</span> + dName);<br>    <span class=\"hljs-keyword\">for</span> (Employee emp : employeeList) &#123;<br>        System.out.println(emp.geteName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>配置bean，<code>bean-di-list.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee1&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Lucy&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;20&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;eName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Mary&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;30&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;department&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;技术研发部&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;employeeList&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">list</span>&gt;</span>  <span class=\"hljs-comment\">&lt;!--list中引入其他的bean--&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;employee1&quot;</span>/&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;employee2&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">list</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testList</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di-list.xml&quot;</span>);<br>    <span class=\"hljs-type\">Department</span> <span class=\"hljs-variable\">department</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;department&quot;</span>, Department.class);<br>    department.info();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/list%E7%B1%BB%E5%9E%8B%E5%B1%9E%E6%80%A7.png\"></p>\n<h5 id=\"map集合类型\"><a href=\"#map集合类型\" class=\"headerlink\" title=\"map集合类型\"></a>map集合类型</h5><p>新建学生类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.dimap;<br><br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 00:05</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String studentId;<br>    <span class=\"hljs-keyword\">private</span> String studentName;<br><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, Teacher&gt; teacherMap;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getStudentId</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> studentId;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setStudentId</span><span class=\"hljs-params\">(String studentId)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.studentId = studentId;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getStudentName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> studentName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setStudentName</span><span class=\"hljs-params\">(String studentName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.studentName = studentName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Map&lt;String, Teacher&gt; <span class=\"hljs-title function_\">getTeacherMap</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> teacherMap;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setTeacherMap</span><span class=\"hljs-params\">(Map&lt;String, Teacher&gt; teacherMap)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.teacherMap = teacherMap;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;学生编号: &quot;</span> + studentId + <span class=\"hljs-string\">&quot;学生名: &quot;</span> + studentName);<br>        System.out.println(teacherMap);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Student&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;studentId=&#x27;&quot;</span> + studentId + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, studentName=&#x27;&quot;</span> + studentName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, teacherMap=&quot;</span> + teacherMap +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建教师类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.dimap;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 00:05</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Teacher</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String teacherId;<br>    <span class=\"hljs-keyword\">private</span> String teacherName;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getTeacherId</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> teacherId;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setTeacherId</span><span class=\"hljs-params\">(String teacherId)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.teacherId = teacherId;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getTeacherName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> teacherName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setTeacherName</span><span class=\"hljs-params\">(String teacherName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.teacherName = teacherName;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Teacher&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;teacherId=&#x27;&quot;</span> + teacherId + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, teacherName=&#x27;&quot;</span> + teacherName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>配置bean，<code>bean-di-map.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        1. 创建两个对象</span><br><span class=\"hljs-comment\">        2. 注入普通类型属性</span><br><span class=\"hljs-comment\">        3. 在学生bean中注入map集合类型属性</span><br><span class=\"hljs-comment\">    --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Student&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;student&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;studentId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;20000&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;studentName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;张三&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherMap&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;100010&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;teacher1&quot;</span>/&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;100011&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;teacher2&quot;</span>/&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;100012&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;teacher3&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacher1&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;100&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--讲师id--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;蔡老师&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacher2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;101&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--讲师id--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;徐老师&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacher3&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;102&quot;</span>/&gt;</span>  <span class=\"hljs-comment\">&lt;!--讲师id--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;kun老师&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testMap</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di-map.xml&quot;</span>);<br>    <span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">student</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;student&quot;</span>, Student.class);<br>    student.run();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/map%E7%B1%BB%E5%9E%8B%E5%B1%9E%E6%80%A7.png\"></p>\n<h4 id=\"引用集合类型的bean\"><a href=\"#引用集合类型的bean\" class=\"headerlink\" title=\"引用集合类型的bean\"></a>引用集合类型的bean</h4><p>新增课程类Lesson</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.dimap;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 00:29</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Lesson</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String lessonName;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getLessonName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> lessonName;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setLessonName</span><span class=\"hljs-params\">(String lessonName)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.lessonName = lessonName;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Lesson&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;lessonName=&#x27;&quot;</span> + lessonName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>新增学生属性：lessonList，表示学生选了哪些课程，并生成getter(), setter()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> List&lt;Lesson&gt; lessonList;<br><br><span class=\"hljs-keyword\">public</span> List&lt;Lesson&gt; <span class=\"hljs-title function_\">getLessonList</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> lessonList;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setLessonList</span><span class=\"hljs-params\">(List&lt;Lesson&gt; lessonList)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.lessonList = lessonList;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>配置bean，<code>bean-di-ref.xml</code></p>\n<p>需要引入新的约束</p>\n<p><code>xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</code></p>\n<p><code>xsi:schemaLocation</code>中添加</p>\n<ul>\n<li><code>http://www.springframework.org/schema/util</code></li>\n<li><code>http://www.springframework.org/schema/util/spring-util.xsd</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:util</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/util</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--1. 创建三个对象--&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--2. 注入普通类型属性--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Student&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;student&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;studentId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;10000&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;studentName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;张三&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;lessonList&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;lessonList&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherMap&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;teacherMap&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacher1&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;蔡老师&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;100&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacher2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;徐老师&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;teacherId&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;101&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;lesson1&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;lessonName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;数据结构&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;lesson2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;lessonName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;计算机组成原理&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;lesson3&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;lessonName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;操作系统&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;lesson4&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;lessonName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;计算机网络&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--3. 使用util: 类型  定义--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">util:list</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;lessonList&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;lesson1&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;lesson2&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;lesson3&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;lesson4&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">util:list</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">util:map</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;teacherMap&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;10010&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;teacher1&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;10011&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;teacher2&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">util:map</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--4. 在学生bean引入util: 类型定义bean, 完成list, map类型属性注入--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>输出结果</p>\n<p><img src=\"/../images/springDay02/ref%E7%BB%93%E6%9E%9C1.png\"></p>\n<p><img src=\"/../images/springDay02/ref%E7%BB%93%E6%9E%9C2.png\"></p>\n<h4 id=\"p命名空间注入\"><a href=\"#p命名空间注入\" class=\"headerlink\" title=\"p命名空间注入\"></a>p命名空间注入</h4><p><code>bean-di-ref.xml</code>中简单修改，添加如下约束以及标签</p>\n<p><code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.dimap.Student&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;studentP&quot;</span> <span class=\"hljs-attr\">p:studentId</span>=<span class=\"hljs-string\">&quot;1000&quot;</span> <span class=\"hljs-attr\">p:studentName</span>=<span class=\"hljs-string\">&quot;Mary&quot;</span></span><br><span class=\"hljs-tag\">      <span class=\"hljs-attr\">p:lessonList-ref</span>=<span class=\"hljs-string\">&quot;lessonList&quot;</span> <span class=\"hljs-attr\">p:teacherMap-ref</span>=<span class=\"hljs-string\">&quot;teacherMap&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>编写测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testPLabel</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-di-ref.xml&quot;</span>);<br>    <span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">student</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;studentP&quot;</span>, Student.class);<br>    student.run();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/p%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png\"></p>\n<h4 id=\"引入外部属性文件\"><a href=\"#引入外部属性文件\" class=\"headerlink\" title=\"引入外部属性文件\"></a>引入外部属性文件</h4><p>导入连接MySQL相关依赖在<code>pom.xml</code>中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--MySQL驱动--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.31<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>连接MySQL操作，写入配置文件<code>jdbc.properties</code>，配置MySQL相关</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">jdbc.user</span>=<span class=\"hljs-string\">root</span><br><span class=\"hljs-attr\">jdbc.password</span>=<span class=\"hljs-string\">11111111</span><br><span class=\"hljs-attr\">jdbc.url</span>=<span class=\"hljs-string\">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span><br><span class=\"hljs-attr\">jdbc.driver</span>=<span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>然后配置配置bean，<code>bean-jdbc.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--引入外部属性文件--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:property-placeholder</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--完成数据库信息注入--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这里的属性值会读取到<code>jdbc.properties</code>文件中的值</p>\n<p>编写测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testJdbc2</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-jdbc.xml&quot;</span>);<br>    <span class=\"hljs-type\">DruidDataSource</span> <span class=\"hljs-variable\">druidDataSource</span> <span class=\"hljs-operator\">=</span> context.getBean(DruidDataSource.class);<br>    System.out.println(druidDataSource.getUrl());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/%E5%A4%96%E9%83%A8%E5%BC%95%E5%85%A5%E7%BB%93%E6%9E%9C.png\"></p>\n<h3 id=\"bean的作用域\"><a href=\"#bean的作用域\" class=\"headerlink\" title=\"bean的作用域\"></a>bean的作用域</h3><p>在Spring中，可以通过配置bean标签的<code>scope</code>属性来执行bean的作用范围，各取值含义如下表：</p>\n<table>\n<thead>\n<tr>\n<th>取值</th>\n<th>含义</th>\n<th>创建对象的时机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>singleton（默认）</td>\n<td>在IoC容器中，这个bean的对象始终为单实例</td>\n<td>IoC容器初始化时</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>这个bean在IoC容器中有多个实例</td>\n<td>获取bean时</td>\n</tr>\n</tbody></table>\n<p>新建Order类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.scope;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 12:32</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Orders</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>配置bean，<code>bean-scope.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--通过scope属性配置单实例  多实例--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.scope.Orders&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orders&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;singleton&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>其中<code>bean</code>标签中的<code>scope</code>属性默认为<code>singleton</code></p>\n<p>新建测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testOrders</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-scope.xml&quot;</span>);<br>    <span class=\"hljs-type\">Orders</span> <span class=\"hljs-variable\">orders</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(orders);<br>    <span class=\"hljs-type\">Orders</span> <span class=\"hljs-variable\">orders1</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(orders1);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里新建两个对象，都取自同一个bean，输出对象的地址，查看是否相同</p>\n<p><img src=\"/../images/springDay02/%E5%8D%95%E5%AE%9E%E4%BE%8B%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png\"></p>\n<p>可以看到两个实例的地址是相同的</p>\n<p>测试多实例，将<code>bean</code>标签中的<code>scope</code>属性改为<code>prototype</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--通过scope属性配置单实例  多实例--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.scope.Orders&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orders&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;prototype&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/%E5%A4%9A%E5%AE%9E%E4%BE%8B%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png\"></p>\n<h3 id=\"bean的生命周期\"><a href=\"#bean的生命周期\" class=\"headerlink\" title=\"bean的生命周期\"></a>bean的生命周期</h3><ol>\n<li>bean对象的创建（调用无参构造）</li>\n<li>给bean对象设置相关属性</li>\n<li>bean后置处理器（初始化之前）</li>\n<li>bean对象初始化（调用制定初始化方法）</li>\n<li>bean后置处理器（初始化之后）</li>\n<li>bean对象创建完成，可以使用</li>\n<li>bean对象销毁（配置制定销毁方法）</li>\n<li>关闭IoC容器</li>\n</ol>\n<p>新建User类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.life;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 12:47</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">User</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第一步: 这是无参构造函数, 创建bean对象&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>        System.out.println(<span class=\"hljs-string\">&quot;第二步: 给bean对象设置属性值&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 初始化的方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initMethod</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第四步: bean对象初始化, 调用指定方法进行初始化&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 销毁的方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">destroyMethod</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第七步: bean对象销毁, 调用制定方法进行销毁&quot;</span>);<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>用于实现bean的初始化和销毁方法，<code>initMethod()</code>和<code>destroyMethod()</code></p>\n<p>构造bean，<code>bean-life.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.life.User&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">init-method</span>=<span class=\"hljs-string\">&quot;initMethod&quot;</span></span><br><span class=\"hljs-tag\">          <span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">&quot;destroyMethod&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Lucy&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在<code>bean</code>标签中添加两个属性<code>init-method</code>和<code>destroy-method</code>，属性值为两个函数名</p>\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testLife</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ClassPathXmlApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-life.xml&quot;</span>);<br>    org.example.spring6.iocxml.life.<span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>, org.example.spring6.iocxml.life.User.class);<br>    System.out.println(user);<br>    System.out.println(<span class=\"hljs-string\">&quot;第六步: bean对象创建完成&quot;</span>);<br>    context.close();  <span class=\"hljs-comment\">// 对象销毁  只有实现类才有这个函数, ApplicationContext并没有这个方法</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>为了区分其他包里面的<code>User</code>类，这里写了包的全路径</p>\n<p>![](&#x2F;Users&#x2F;promise&#x2F;Promise Code&#x2F;blog&#x2F;source&#x2F;images&#x2F;springDay02&#x2F;bean生命周期输出1.png)</p>\n<p>这里并没有给出第三步与第五步，现在写入后置处理器</p>\n<p>新建类<code>MyBeanPost</code>依赖于接口<code>BeanPostProcessor</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.life;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeansException;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 13:00</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyBeanPost</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BeanPostProcessor</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessBeforeInitialization</span><span class=\"hljs-params\">(Object bean, String beanName)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第三步: 后置处理器, 在初始化之前执行&quot;</span>);<br>        System.out.println(beanName + <span class=\"hljs-string\">&quot;::&quot;</span> + bean);<br>        <span class=\"hljs-keyword\">return</span> bean;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessAfterInitialization</span><span class=\"hljs-params\">(Object bean, String beanName)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第五步: 后置处理器, 在初始化之后执行&quot;</span>);<br>        System.out.println(beanName + <span class=\"hljs-string\">&quot;::&quot;</span> + bean);<br>        <span class=\"hljs-keyword\">return</span> bean;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>在<code>bean-life.xml</code>中新增后置处理器的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--bean的后置处理器要放入IoC容器才能生效--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.life.MyBeanPost&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myBeanPost&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>测试类运行结果</p>\n<p><img src=\"/../images/springDay02/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BE%93%E5%87%BA3.png\"></p>\n<h3 id=\"FactoryBean工厂bean\"><a href=\"#FactoryBean工厂bean\" class=\"headerlink\" title=\"FactoryBean工厂bean\"></a>FactoryBean工厂bean</h3><p>新建User1类，无任何属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.factoryBean;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:19</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User1</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>配置bean，<code>bean-factorybean.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.factoryBean.MyFactoryBean&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user1&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>实现FactoryBean接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.factoryBean;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:18</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyFactoryBean</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">FactoryBean</span>&lt;User1&gt; &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> User1 <span class=\"hljs-title function_\">getObject</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User1</span>();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class=\"hljs-keyword\">return</span> User1.class;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>新建测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFactoryBean</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-factorybean.xml&quot;</span>);<br>    <span class=\"hljs-type\">User1</span> <span class=\"hljs-variable\">user1</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;user1&quot;</span>, User1.class);<br>    System.out.println(user1);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/factoryBean%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png\"></p>\n<h3 id=\"基于XML的自动装配\"><a href=\"#基于XML的自动装配\" class=\"headerlink\" title=\"基于XML的自动装配\"></a>基于XML的自动装配</h3><p>根据制定的策略，在IoC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性值复制</p>\n<p><img src=\"/../images/springDay02/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.png\"></p>\n<p>若不使用Spring的写法</p>\n<p><strong>DAO层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.dao;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserDao</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUserDao</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.dao.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.dao.UserDao;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:33</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDao</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUserDao</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;执行了UserDao方法&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>Service层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.service;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUserService</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.service.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.dao.UserDao;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:32</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUserService</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;UserService()方法执行&quot;</span>);<br>        <span class=\"hljs-type\">UserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserDaoImpl</span>();<br>        userDao.addUserDao();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>Controller层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.impl.UserServiceImpl;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:31</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUser</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;controller方法执行&quot;</span>);<br>        <span class=\"hljs-type\">UserService</span> <span class=\"hljs-variable\">userService</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserServiceImpl</span>();<br>        userService.addUserService();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>新建简单测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testController</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">UserController</span> <span class=\"hljs-variable\">controller</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserController</span>();<br>    controller.addUser();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95%E8%BE%93%E5%87%BA.png\"></p>\n<h4 id=\"配置bean，完成自动装配\"><a href=\"#配置bean，完成自动装配\" class=\"headerlink\" title=\"配置bean，完成自动装配\"></a>配置bean，完成自动装配</h4><p><img src=\"/../images/springDay02/auto%E6%B3%A8%E5%85%A51.png\"></p>\n<p><strong>Controller层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.impl.UserServiceImpl;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:31</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-keyword\">public</span> UserService <span class=\"hljs-title function_\">getUserService</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userService;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setUserService</span><span class=\"hljs-params\">(UserService userService)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userService = userService;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUser</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;controller方法执行&quot;</span>);<br>        <span class=\"hljs-comment\">// 调用service方法</span><br>        userService.addUserService();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>Service层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6.iocxml.auto.service.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.dao.UserDao;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl;<br><span class=\"hljs-keyword\">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-07 16:32</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> UserDao userDao;<br><br>    <span class=\"hljs-keyword\">public</span> UserDao <span class=\"hljs-title function_\">getUserDao</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userDao;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setUserDao</span><span class=\"hljs-params\">(UserDao userDao)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addUserService</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;UserService()方法执行&quot;</span>);<br>        userDao.addUserDao();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>配置bean，<code>bean-auto.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.auto.controller.UserController&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userController&quot;</span> <span class=\"hljs-attr\">autowire</span>=<span class=\"hljs-string\">&quot;byType&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.auto.service.impl.UserServiceImpl&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span> <span class=\"hljs-attr\">autowire</span>=<span class=\"hljs-string\">&quot;byType&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>其中<code>autowire</code>属性是自动装填属性，属性值<code>byType</code>是根据类型自动装配，根据类型装配会自动匹配相应的类型，而根据名称匹配需要保证待匹配bean的名称与声明时相同。 </p>\n<p>新建测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAuto</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-auto.xml&quot;</span>);<br>    <span class=\"hljs-type\">UserController</span> <span class=\"hljs-variable\">userController</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;userController&quot;</span>, UserController.class);<br>    userController.addUser();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springDay02/%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png\"></p>\n<blockquote>\n<p>  <code>byType</code>：根据类型匹配IoC容器中的某个兼容类型的bean，为属性自动赋值</p>\n<p>  若在IoC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即默认值为null</p>\n<p>  若在IoC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException</p>\n</blockquote>\n"},{"title":"【study】Spring学习part04","abbrlink":"768577e2","date":"2024-02-07T15:54:00.000Z","_content":"\n# 【study】Spring学习part04\n\n\n\n\n\n## 反射\n\n通过Class文件获取到对象相关的内容，并使用\n\n``` java\nimport org.example.reflect.Car;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\n/**\n *\n * Date: 2024-02-08 00:02\n * Description:\n */\n\npublic class TestCar {\n    // 1. 获取class对象多种方式\n    @Test\n    public void testCarClass1() throws Exception {\n        // 1. 类名.class\n        Class clazz1 = Car.class;\n\n        // 2. 对象.getClass()\n        Class clazz2 = new Car().getClass();\n\n        // 3. Class.forName(\"类的全路径\")\n        Class clazz3 = Class.forName(\"org.example.reflect.Car\");\n\n        System.out.println(clazz1);\n        System.out.println(clazz2);\n        System.out.println(clazz3);\n\n        Car car1 = (Car) clazz3.getDeclaredConstructor().newInstance();\n        System.out.println(car1);\n    }\n\n    // 2. 获取构造方法\n    @Test\n    public void testCarClass2() throws Exception {\n        Class<Car> clazz = Car.class;\n        // 获取所有public构造方法\n        Constructor<?>[] constructors = clazz.getConstructors();\n        // 获取private构造方法\n        // clazz.getDeclaredConstructors();\n        for (Constructor<?> c : constructors) {\n            System.out.println(\"方法名称: \" + c.getName() + \"\\t参数个数:\" + c.getParameterCount());\n        }\n\n        // 指定有参构造创建对象\n        // 构造public\n        Constructor<Car> constructor1 = clazz.getConstructor(String.class, int.class, String.class);\n        Car car = constructor1.newInstance(\"问界\", 10, \"黑色\");\n        System.out.println(car);\n\n        // 构造private\n        Constructor<Car> declaredConstructor = clazz.getDeclaredConstructor(String.class);\n        declaredConstructor.setAccessible(true);  // 设置允许私有访问\n        Car car1 = declaredConstructor.newInstance(\"智界\");\n        System.out.println(car1);\n    }\n\n    // 3. 获取属性\n    @Test\n    public void testCarClass3() throws Exception {\n        Class<Car> carClass = Car.class;\n        // 获取所有public属性\n        Field[] fields = carClass.getFields();\n        System.out.println(\"public属性有\");\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n\n        // 获取所有public + private属性\n        System.out.println(\"private属性有\");\n        Field[] declaredFields = carClass.getDeclaredFields();\n        for (Field f : declaredFields) {\n            System.out.println(f);\n        }\n\n\n        Class clazz = Car.class;\n        Car car = (Car) clazz.getDeclaredConstructor().newInstance();\n        for (Field f : declaredFields) {\n            if (f.getName().equals(\"name\")) {\n                // 设置允许访问\n                f.setAccessible(true);\n                f.set(car, \"问界M9\");\n            }\n            System.out.println(f.getName());\n            System.out.println(car);\n        }\n    }\n\n    // 4. 获取方法\n    @Test\n    public void testCarClass4() throws Exception {\n        Car car = new Car(\"问界M7\", 3, \"蓝色\");\n        Class<? extends Car> clazz = car.getClass();\n\n        // 操作public方法\n        Method[] methods = clazz.getMethods();\n        for (Method m : methods) {\n            // System.out.println(m.getName());\n            // 执行某个方法\n            if (m.getName().equals(\"toString\")) {\n                String invoke = (String) m.invoke(car);\n                System.out.println(\"toString执行: \" + invoke);\n            }\n        }\n\n        // 操作private方法\n        Method[] methodAll = clazz.getDeclaredMethods();\n        for (Method m : methodAll) {\n            if (m.getName().equals(\"run\")) {\n                m.setAccessible(true);\n                m.invoke(car);\n            }\n        }\n    }\n\n}\n\n```\n\n\n\n## 手写IoC\n\n实现Spring的IoC过程\n\n### 1. 创建新的子模块`myspring`\n\n\n\n### 2. 创建测试类`service`、`dao`\n\n``` java\n// org.example.dao.UserDao.java\npackage org.example.dao;\n\npublic interface UserDao {\n    \n}\n\n```\n\n``` java\n// org.example.dao.impl.UserDaoImpl.java\npackage org.example.dao.impl;\n\nimport org.example.dao.UserDao;\n\npublic class UserDaoImpl implements UserDao {\n    \n}\n\n```\n\n``` java\n// org.example.service.UserService.java\npackage org.example.service;\n\npublic interface UserService {\n    \n}\n\n```\n\n``` java\n// org.example.service.impl.UserServiceImpl.java\npackage org.example.service.impl;\n\nimport org.example.dao.UserDao;\nimport org.example.service.UserService;\n\npublic class UserServiceImpl implements UserService {\n\n    private UserDao userDao;\n\n}\n\n```\n\n### 3. 创建两个注解\n\n#### 3.1 `@Bean`创建对象\n\n``` java\n// org.example.annotation.bean.java\npackage org.example.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.TYPE)  // 注解可以用在类上或接口上\n@Retention(RetentionPolicy.RUNTIME)  // 运行时生效\npublic @interface Bean {\n\n}\n\n```\n\n\n\n#### 3.2 `@Di`属性注入\n\n``` java\n// org.example.annotation.di.java\npackage org.example.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.FIELD)  // 注解在属性上\n@Retention(RetentionPolicy.RUNTIME)  // 运行时生效\npublic @interface Di {\n\n}\n\n```\n\n### 4. 创建bean容器接口`ApplicationContext`定义方法\n\n``` java\n// org.example.bean.ApplicationContext.java\npackage org.example.bean;\n\npublic interface ApplicationContext {\n    Object getBean(Class clazz);\n}\n\n```\n\n\n\n\n### 5.实现bean容器接口\n\n1.   返回对象\n2.   根据包规则加载bean\n\n>   比如org.example，扫描这个包与子包里面的所有类，是否有@Bean注解，如果有则把这个类通过反射进行实例化\n\n``` java\n// org.example.bean.AnnotationApplicationContext.java\n\npackage org.example.bean;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class AnnotationApplicationContext implements ApplicationContext{\n    // 创建Map, 用于存放Bean的实例对象\n    private Map<Class, Object> beanFactory = new HashMap<>();\n\n    // 返回对象\n    @Override\n    public Object getBean(Class clazz) {\n        return beanFactory.get(clazz);\n    }\n\n    // 设置包扫描规则\n    // 当前包及其子包, 若发现类前@Bean注解, 使用反射进行实例化\n    // 创建有参数的构造, 设置扫描规则\n\n\n    public AnnotationApplicationContext(String basePackage) {\n        //\n    }\n}\n\n```\n\n![](../images/springPart04/流程.png)\n\n\n\n\n\n","source":"_posts/【study】Spring学习part04【放弃】.md","raw":"---\ntitle: 【study】Spring学习part04\ntags:\n  - Study\n  - Java\n  - Spring框架\nabbrlink: '768577e2'\ndate: 2024-02-07 23:54:00\n---\n\n# 【study】Spring学习part04\n\n\n\n\n\n## 反射\n\n通过Class文件获取到对象相关的内容，并使用\n\n``` java\nimport org.example.reflect.Car;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\n/**\n *\n * Date: 2024-02-08 00:02\n * Description:\n */\n\npublic class TestCar {\n    // 1. 获取class对象多种方式\n    @Test\n    public void testCarClass1() throws Exception {\n        // 1. 类名.class\n        Class clazz1 = Car.class;\n\n        // 2. 对象.getClass()\n        Class clazz2 = new Car().getClass();\n\n        // 3. Class.forName(\"类的全路径\")\n        Class clazz3 = Class.forName(\"org.example.reflect.Car\");\n\n        System.out.println(clazz1);\n        System.out.println(clazz2);\n        System.out.println(clazz3);\n\n        Car car1 = (Car) clazz3.getDeclaredConstructor().newInstance();\n        System.out.println(car1);\n    }\n\n    // 2. 获取构造方法\n    @Test\n    public void testCarClass2() throws Exception {\n        Class<Car> clazz = Car.class;\n        // 获取所有public构造方法\n        Constructor<?>[] constructors = clazz.getConstructors();\n        // 获取private构造方法\n        // clazz.getDeclaredConstructors();\n        for (Constructor<?> c : constructors) {\n            System.out.println(\"方法名称: \" + c.getName() + \"\\t参数个数:\" + c.getParameterCount());\n        }\n\n        // 指定有参构造创建对象\n        // 构造public\n        Constructor<Car> constructor1 = clazz.getConstructor(String.class, int.class, String.class);\n        Car car = constructor1.newInstance(\"问界\", 10, \"黑色\");\n        System.out.println(car);\n\n        // 构造private\n        Constructor<Car> declaredConstructor = clazz.getDeclaredConstructor(String.class);\n        declaredConstructor.setAccessible(true);  // 设置允许私有访问\n        Car car1 = declaredConstructor.newInstance(\"智界\");\n        System.out.println(car1);\n    }\n\n    // 3. 获取属性\n    @Test\n    public void testCarClass3() throws Exception {\n        Class<Car> carClass = Car.class;\n        // 获取所有public属性\n        Field[] fields = carClass.getFields();\n        System.out.println(\"public属性有\");\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n\n        // 获取所有public + private属性\n        System.out.println(\"private属性有\");\n        Field[] declaredFields = carClass.getDeclaredFields();\n        for (Field f : declaredFields) {\n            System.out.println(f);\n        }\n\n\n        Class clazz = Car.class;\n        Car car = (Car) clazz.getDeclaredConstructor().newInstance();\n        for (Field f : declaredFields) {\n            if (f.getName().equals(\"name\")) {\n                // 设置允许访问\n                f.setAccessible(true);\n                f.set(car, \"问界M9\");\n            }\n            System.out.println(f.getName());\n            System.out.println(car);\n        }\n    }\n\n    // 4. 获取方法\n    @Test\n    public void testCarClass4() throws Exception {\n        Car car = new Car(\"问界M7\", 3, \"蓝色\");\n        Class<? extends Car> clazz = car.getClass();\n\n        // 操作public方法\n        Method[] methods = clazz.getMethods();\n        for (Method m : methods) {\n            // System.out.println(m.getName());\n            // 执行某个方法\n            if (m.getName().equals(\"toString\")) {\n                String invoke = (String) m.invoke(car);\n                System.out.println(\"toString执行: \" + invoke);\n            }\n        }\n\n        // 操作private方法\n        Method[] methodAll = clazz.getDeclaredMethods();\n        for (Method m : methodAll) {\n            if (m.getName().equals(\"run\")) {\n                m.setAccessible(true);\n                m.invoke(car);\n            }\n        }\n    }\n\n}\n\n```\n\n\n\n## 手写IoC\n\n实现Spring的IoC过程\n\n### 1. 创建新的子模块`myspring`\n\n\n\n### 2. 创建测试类`service`、`dao`\n\n``` java\n// org.example.dao.UserDao.java\npackage org.example.dao;\n\npublic interface UserDao {\n    \n}\n\n```\n\n``` java\n// org.example.dao.impl.UserDaoImpl.java\npackage org.example.dao.impl;\n\nimport org.example.dao.UserDao;\n\npublic class UserDaoImpl implements UserDao {\n    \n}\n\n```\n\n``` java\n// org.example.service.UserService.java\npackage org.example.service;\n\npublic interface UserService {\n    \n}\n\n```\n\n``` java\n// org.example.service.impl.UserServiceImpl.java\npackage org.example.service.impl;\n\nimport org.example.dao.UserDao;\nimport org.example.service.UserService;\n\npublic class UserServiceImpl implements UserService {\n\n    private UserDao userDao;\n\n}\n\n```\n\n### 3. 创建两个注解\n\n#### 3.1 `@Bean`创建对象\n\n``` java\n// org.example.annotation.bean.java\npackage org.example.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.TYPE)  // 注解可以用在类上或接口上\n@Retention(RetentionPolicy.RUNTIME)  // 运行时生效\npublic @interface Bean {\n\n}\n\n```\n\n\n\n#### 3.2 `@Di`属性注入\n\n``` java\n// org.example.annotation.di.java\npackage org.example.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.FIELD)  // 注解在属性上\n@Retention(RetentionPolicy.RUNTIME)  // 运行时生效\npublic @interface Di {\n\n}\n\n```\n\n### 4. 创建bean容器接口`ApplicationContext`定义方法\n\n``` java\n// org.example.bean.ApplicationContext.java\npackage org.example.bean;\n\npublic interface ApplicationContext {\n    Object getBean(Class clazz);\n}\n\n```\n\n\n\n\n### 5.实现bean容器接口\n\n1.   返回对象\n2.   根据包规则加载bean\n\n>   比如org.example，扫描这个包与子包里面的所有类，是否有@Bean注解，如果有则把这个类通过反射进行实例化\n\n``` java\n// org.example.bean.AnnotationApplicationContext.java\n\npackage org.example.bean;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class AnnotationApplicationContext implements ApplicationContext{\n    // 创建Map, 用于存放Bean的实例对象\n    private Map<Class, Object> beanFactory = new HashMap<>();\n\n    // 返回对象\n    @Override\n    public Object getBean(Class clazz) {\n        return beanFactory.get(clazz);\n    }\n\n    // 设置包扫描规则\n    // 当前包及其子包, 若发现类前@Bean注解, 使用反射进行实例化\n    // 创建有参数的构造, 设置扫描规则\n\n\n    public AnnotationApplicationContext(String basePackage) {\n        //\n    }\n}\n\n```\n\n![](../images/springPart04/流程.png)\n\n\n\n\n\n","slug":"【study】Spring学习part04【放弃】","published":1,"updated":"2024-02-11T16:23:32.277Z","_id":"clshpstx10000jgz8h61t9jtq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【study】Spring学习part04\"><a href=\"#【study】Spring学习part04\" class=\"headerlink\" title=\"【study】Spring学习part04\"></a>【study】Spring学习part04</h1><h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><p>通过Class文件获取到对象相关的内容，并使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.example.reflect.Car;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Field;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * Date: 2024-02-08 00:02</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestCar</span> &#123;<br>    <span class=\"hljs-comment\">// 1. 获取class对象多种方式</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCarClass1</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 1. 类名.class</span><br>        <span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">clazz1</span> <span class=\"hljs-operator\">=</span> Car.class;<br><br>        <span class=\"hljs-comment\">// 2. 对象.getClass()</span><br>        <span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">clazz2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>().getClass();<br><br>        <span class=\"hljs-comment\">// 3. Class.forName(&quot;类的全路径&quot;)</span><br>        <span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">clazz3</span> <span class=\"hljs-operator\">=</span> Class.forName(<span class=\"hljs-string\">&quot;org.example.reflect.Car&quot;</span>);<br><br>        System.out.println(clazz1);<br>        System.out.println(clazz2);<br>        System.out.println(clazz3);<br><br>        <span class=\"hljs-type\">Car</span> <span class=\"hljs-variable\">car1</span> <span class=\"hljs-operator\">=</span> (Car) clazz3.getDeclaredConstructor().newInstance();<br>        System.out.println(car1);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 2. 获取构造方法</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCarClass2</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        Class&lt;Car&gt; clazz = Car.class;<br>        <span class=\"hljs-comment\">// 获取所有public构造方法</span><br>        Constructor&lt;?&gt;[] constructors = clazz.getConstructors();<br>        <span class=\"hljs-comment\">// 获取private构造方法</span><br>        <span class=\"hljs-comment\">// clazz.getDeclaredConstructors();</span><br>        <span class=\"hljs-keyword\">for</span> (Constructor&lt;?&gt; c : constructors) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;方法名称: &quot;</span> + c.getName() + <span class=\"hljs-string\">&quot;\\t参数个数:&quot;</span> + c.getParameterCount());<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 指定有参构造创建对象</span><br>        <span class=\"hljs-comment\">// 构造public</span><br>        Constructor&lt;Car&gt; constructor1 = clazz.getConstructor(String.class, <span class=\"hljs-type\">int</span>.class, String.class);<br>        <span class=\"hljs-type\">Car</span> <span class=\"hljs-variable\">car</span> <span class=\"hljs-operator\">=</span> constructor1.newInstance(<span class=\"hljs-string\">&quot;问界&quot;</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;黑色&quot;</span>);<br>        System.out.println(car);<br><br>        <span class=\"hljs-comment\">// 构造private</span><br>        Constructor&lt;Car&gt; declaredConstructor = clazz.getDeclaredConstructor(String.class);<br>        declaredConstructor.setAccessible(<span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// 设置允许私有访问</span><br>        <span class=\"hljs-type\">Car</span> <span class=\"hljs-variable\">car1</span> <span class=\"hljs-operator\">=</span> declaredConstructor.newInstance(<span class=\"hljs-string\">&quot;智界&quot;</span>);<br>        System.out.println(car1);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 3. 获取属性</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCarClass3</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        Class&lt;Car&gt; carClass = Car.class;<br>        <span class=\"hljs-comment\">// 获取所有public属性</span><br>        Field[] fields = carClass.getFields();<br>        System.out.println(<span class=\"hljs-string\">&quot;public属性有&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 获取所有public + private属性</span><br>        System.out.println(<span class=\"hljs-string\">&quot;private属性有&quot;</span>);<br>        Field[] declaredFields = carClass.getDeclaredFields();<br>        <span class=\"hljs-keyword\">for</span> (Field f : declaredFields) &#123;<br>            System.out.println(f);<br>        &#125;<br><br><br>        <span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">clazz</span> <span class=\"hljs-operator\">=</span> Car.class;<br>        <span class=\"hljs-type\">Car</span> <span class=\"hljs-variable\">car</span> <span class=\"hljs-operator\">=</span> (Car) clazz.getDeclaredConstructor().newInstance();<br>        <span class=\"hljs-keyword\">for</span> (Field f : declaredFields) &#123;<br>            <span class=\"hljs-keyword\">if</span> (f.getName().equals(<span class=\"hljs-string\">&quot;name&quot;</span>)) &#123;<br>                <span class=\"hljs-comment\">// 设置允许访问</span><br>                f.setAccessible(<span class=\"hljs-literal\">true</span>);<br>                f.set(car, <span class=\"hljs-string\">&quot;问界M9&quot;</span>);<br>            &#125;<br>            System.out.println(f.getName());<br>            System.out.println(car);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 4. 获取方法</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCarClass4</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">Car</span> <span class=\"hljs-variable\">car</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;问界M7&quot;</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;蓝色&quot;</span>);<br>        Class&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Car</span>&gt; clazz = car.getClass();<br><br>        <span class=\"hljs-comment\">// 操作public方法</span><br>        Method[] methods = clazz.getMethods();<br>        <span class=\"hljs-keyword\">for</span> (Method m : methods) &#123;<br>            <span class=\"hljs-comment\">// System.out.println(m.getName());</span><br>            <span class=\"hljs-comment\">// 执行某个方法</span><br>            <span class=\"hljs-keyword\">if</span> (m.getName().equals(<span class=\"hljs-string\">&quot;toString&quot;</span>)) &#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">invoke</span> <span class=\"hljs-operator\">=</span> (String) m.invoke(car);<br>                System.out.println(<span class=\"hljs-string\">&quot;toString执行: &quot;</span> + invoke);<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 操作private方法</span><br>        Method[] methodAll = clazz.getDeclaredMethods();<br>        <span class=\"hljs-keyword\">for</span> (Method m : methodAll) &#123;<br>            <span class=\"hljs-keyword\">if</span> (m.getName().equals(<span class=\"hljs-string\">&quot;run&quot;</span>)) &#123;<br>                m.setAccessible(<span class=\"hljs-literal\">true</span>);<br>                m.invoke(car);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"手写IoC\"><a href=\"#手写IoC\" class=\"headerlink\" title=\"手写IoC\"></a>手写IoC</h2><p>实现Spring的IoC过程</p>\n<h3 id=\"1-创建新的子模块myspring\"><a href=\"#1-创建新的子模块myspring\" class=\"headerlink\" title=\"1. 创建新的子模块myspring\"></a>1. 创建新的子模块<code>myspring</code></h3><h3 id=\"2-创建测试类service、dao\"><a href=\"#2-创建测试类service、dao\" class=\"headerlink\" title=\"2. 创建测试类service、dao\"></a>2. 创建测试类<code>service</code>、<code>dao</code></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.dao.UserDao.java</span><br><span class=\"hljs-keyword\">package</span> org.example.dao;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserDao</span> &#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.dao.impl.UserDaoImpl.java</span><br><span class=\"hljs-keyword\">package</span> org.example.dao.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.dao.UserDao;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDao</span> &#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.service.UserService.java</span><br><span class=\"hljs-keyword\">package</span> org.example.service;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.service.impl.UserServiceImpl.java</span><br><span class=\"hljs-keyword\">package</span> org.example.service.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.dao.UserDao;<br><span class=\"hljs-keyword\">import</span> org.example.service.UserService;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> UserDao userDao;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-创建两个注解\"><a href=\"#3-创建两个注解\" class=\"headerlink\" title=\"3. 创建两个注解\"></a>3. 创建两个注解</h3><h4 id=\"3-1-Bean创建对象\"><a href=\"#3-1-Bean创建对象\" class=\"headerlink\" title=\"3.1 @Bean创建对象\"></a>3.1 <code>@Bean</code>创建对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.annotation.bean.java</span><br><span class=\"hljs-keyword\">package</span> org.example.annotation;<br><br><span class=\"hljs-keyword\">import</span> java.lang.annotation.ElementType;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Retention;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.RetentionPolicy;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Target;<br><br><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span>  <span class=\"hljs-comment\">// 注解可以用在类上或接口上</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span>  <span class=\"hljs-comment\">// 运行时生效</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Bean &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-2-Di属性注入\"><a href=\"#3-2-Di属性注入\" class=\"headerlink\" title=\"3.2 @Di属性注入\"></a>3.2 <code>@Di</code>属性注入</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.annotation.di.java</span><br><span class=\"hljs-keyword\">package</span> org.example.annotation;<br><br><span class=\"hljs-keyword\">import</span> java.lang.annotation.ElementType;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Retention;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.RetentionPolicy;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Target;<br><br><span class=\"hljs-meta\">@Target(ElementType.FIELD)</span>  <span class=\"hljs-comment\">// 注解在属性上</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span>  <span class=\"hljs-comment\">// 运行时生效</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Di &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-创建bean容器接口ApplicationContext定义方法\"><a href=\"#4-创建bean容器接口ApplicationContext定义方法\" class=\"headerlink\" title=\"4. 创建bean容器接口ApplicationContext定义方法\"></a>4. 创建bean容器接口<code>ApplicationContext</code>定义方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.bean.ApplicationContext.java</span><br><span class=\"hljs-keyword\">package</span> org.example.bean;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ApplicationContext</span> &#123;<br>    Object <span class=\"hljs-title function_\">getBean</span><span class=\"hljs-params\">(Class clazz)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"5-实现bean容器接口\"><a href=\"#5-实现bean容器接口\" class=\"headerlink\" title=\"5.实现bean容器接口\"></a>5.实现bean容器接口</h3><ol>\n<li>返回对象</li>\n<li>根据包规则加载bean</li>\n</ol>\n<blockquote>\n<p>  比如org.example，扫描这个包与子包里面的所有类，是否有@Bean注解，如果有则把这个类通过反射进行实例化</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.bean.AnnotationApplicationContext.java</span><br><br><span class=\"hljs-keyword\">package</span> org.example.bean;<br><br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnnotationApplicationContext</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ApplicationContext</span>&#123;<br>    <span class=\"hljs-comment\">// 创建Map, 用于存放Bean的实例对象</span><br>    <span class=\"hljs-keyword\">private</span> Map&lt;Class, Object&gt; beanFactory = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-comment\">// 返回对象</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getBean</span><span class=\"hljs-params\">(Class clazz)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> beanFactory.get(clazz);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 设置包扫描规则</span><br>    <span class=\"hljs-comment\">// 当前包及其子包, 若发现类前@Bean注解, 使用反射进行实例化</span><br>    <span class=\"hljs-comment\">// 创建有参数的构造, 设置扫描规则</span><br><br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AnnotationApplicationContext</span><span class=\"hljs-params\">(String basePackage)</span> &#123;<br>        <span class=\"hljs-comment\">//</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springPart04/%E6%B5%81%E7%A8%8B.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【study】Spring学习part04\"><a href=\"#【study】Spring学习part04\" class=\"headerlink\" title=\"【study】Spring学习part04\"></a>【study】Spring学习part04</h1><h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><p>通过Class文件获取到对象相关的内容，并使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.example.reflect.Car;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Field;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * Date: 2024-02-08 00:02</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestCar</span> &#123;<br>    <span class=\"hljs-comment\">// 1. 获取class对象多种方式</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCarClass1</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 1. 类名.class</span><br>        <span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">clazz1</span> <span class=\"hljs-operator\">=</span> Car.class;<br><br>        <span class=\"hljs-comment\">// 2. 对象.getClass()</span><br>        <span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">clazz2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>().getClass();<br><br>        <span class=\"hljs-comment\">// 3. Class.forName(&quot;类的全路径&quot;)</span><br>        <span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">clazz3</span> <span class=\"hljs-operator\">=</span> Class.forName(<span class=\"hljs-string\">&quot;org.example.reflect.Car&quot;</span>);<br><br>        System.out.println(clazz1);<br>        System.out.println(clazz2);<br>        System.out.println(clazz3);<br><br>        <span class=\"hljs-type\">Car</span> <span class=\"hljs-variable\">car1</span> <span class=\"hljs-operator\">=</span> (Car) clazz3.getDeclaredConstructor().newInstance();<br>        System.out.println(car1);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 2. 获取构造方法</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCarClass2</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        Class&lt;Car&gt; clazz = Car.class;<br>        <span class=\"hljs-comment\">// 获取所有public构造方法</span><br>        Constructor&lt;?&gt;[] constructors = clazz.getConstructors();<br>        <span class=\"hljs-comment\">// 获取private构造方法</span><br>        <span class=\"hljs-comment\">// clazz.getDeclaredConstructors();</span><br>        <span class=\"hljs-keyword\">for</span> (Constructor&lt;?&gt; c : constructors) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;方法名称: &quot;</span> + c.getName() + <span class=\"hljs-string\">&quot;\\t参数个数:&quot;</span> + c.getParameterCount());<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 指定有参构造创建对象</span><br>        <span class=\"hljs-comment\">// 构造public</span><br>        Constructor&lt;Car&gt; constructor1 = clazz.getConstructor(String.class, <span class=\"hljs-type\">int</span>.class, String.class);<br>        <span class=\"hljs-type\">Car</span> <span class=\"hljs-variable\">car</span> <span class=\"hljs-operator\">=</span> constructor1.newInstance(<span class=\"hljs-string\">&quot;问界&quot;</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;黑色&quot;</span>);<br>        System.out.println(car);<br><br>        <span class=\"hljs-comment\">// 构造private</span><br>        Constructor&lt;Car&gt; declaredConstructor = clazz.getDeclaredConstructor(String.class);<br>        declaredConstructor.setAccessible(<span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// 设置允许私有访问</span><br>        <span class=\"hljs-type\">Car</span> <span class=\"hljs-variable\">car1</span> <span class=\"hljs-operator\">=</span> declaredConstructor.newInstance(<span class=\"hljs-string\">&quot;智界&quot;</span>);<br>        System.out.println(car1);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 3. 获取属性</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCarClass3</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        Class&lt;Car&gt; carClass = Car.class;<br>        <span class=\"hljs-comment\">// 获取所有public属性</span><br>        Field[] fields = carClass.getFields();<br>        System.out.println(<span class=\"hljs-string\">&quot;public属性有&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 获取所有public + private属性</span><br>        System.out.println(<span class=\"hljs-string\">&quot;private属性有&quot;</span>);<br>        Field[] declaredFields = carClass.getDeclaredFields();<br>        <span class=\"hljs-keyword\">for</span> (Field f : declaredFields) &#123;<br>            System.out.println(f);<br>        &#125;<br><br><br>        <span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">clazz</span> <span class=\"hljs-operator\">=</span> Car.class;<br>        <span class=\"hljs-type\">Car</span> <span class=\"hljs-variable\">car</span> <span class=\"hljs-operator\">=</span> (Car) clazz.getDeclaredConstructor().newInstance();<br>        <span class=\"hljs-keyword\">for</span> (Field f : declaredFields) &#123;<br>            <span class=\"hljs-keyword\">if</span> (f.getName().equals(<span class=\"hljs-string\">&quot;name&quot;</span>)) &#123;<br>                <span class=\"hljs-comment\">// 设置允许访问</span><br>                f.setAccessible(<span class=\"hljs-literal\">true</span>);<br>                f.set(car, <span class=\"hljs-string\">&quot;问界M9&quot;</span>);<br>            &#125;<br>            System.out.println(f.getName());<br>            System.out.println(car);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 4. 获取方法</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCarClass4</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">Car</span> <span class=\"hljs-variable\">car</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;问界M7&quot;</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;蓝色&quot;</span>);<br>        Class&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Car</span>&gt; clazz = car.getClass();<br><br>        <span class=\"hljs-comment\">// 操作public方法</span><br>        Method[] methods = clazz.getMethods();<br>        <span class=\"hljs-keyword\">for</span> (Method m : methods) &#123;<br>            <span class=\"hljs-comment\">// System.out.println(m.getName());</span><br>            <span class=\"hljs-comment\">// 执行某个方法</span><br>            <span class=\"hljs-keyword\">if</span> (m.getName().equals(<span class=\"hljs-string\">&quot;toString&quot;</span>)) &#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">invoke</span> <span class=\"hljs-operator\">=</span> (String) m.invoke(car);<br>                System.out.println(<span class=\"hljs-string\">&quot;toString执行: &quot;</span> + invoke);<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 操作private方法</span><br>        Method[] methodAll = clazz.getDeclaredMethods();<br>        <span class=\"hljs-keyword\">for</span> (Method m : methodAll) &#123;<br>            <span class=\"hljs-keyword\">if</span> (m.getName().equals(<span class=\"hljs-string\">&quot;run&quot;</span>)) &#123;<br>                m.setAccessible(<span class=\"hljs-literal\">true</span>);<br>                m.invoke(car);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"手写IoC\"><a href=\"#手写IoC\" class=\"headerlink\" title=\"手写IoC\"></a>手写IoC</h2><p>实现Spring的IoC过程</p>\n<h3 id=\"1-创建新的子模块myspring\"><a href=\"#1-创建新的子模块myspring\" class=\"headerlink\" title=\"1. 创建新的子模块myspring\"></a>1. 创建新的子模块<code>myspring</code></h3><h3 id=\"2-创建测试类service、dao\"><a href=\"#2-创建测试类service、dao\" class=\"headerlink\" title=\"2. 创建测试类service、dao\"></a>2. 创建测试类<code>service</code>、<code>dao</code></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.dao.UserDao.java</span><br><span class=\"hljs-keyword\">package</span> org.example.dao;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserDao</span> &#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.dao.impl.UserDaoImpl.java</span><br><span class=\"hljs-keyword\">package</span> org.example.dao.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.dao.UserDao;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDao</span> &#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.service.UserService.java</span><br><span class=\"hljs-keyword\">package</span> org.example.service;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.service.impl.UserServiceImpl.java</span><br><span class=\"hljs-keyword\">package</span> org.example.service.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.dao.UserDao;<br><span class=\"hljs-keyword\">import</span> org.example.service.UserService;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> UserDao userDao;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-创建两个注解\"><a href=\"#3-创建两个注解\" class=\"headerlink\" title=\"3. 创建两个注解\"></a>3. 创建两个注解</h3><h4 id=\"3-1-Bean创建对象\"><a href=\"#3-1-Bean创建对象\" class=\"headerlink\" title=\"3.1 @Bean创建对象\"></a>3.1 <code>@Bean</code>创建对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.annotation.bean.java</span><br><span class=\"hljs-keyword\">package</span> org.example.annotation;<br><br><span class=\"hljs-keyword\">import</span> java.lang.annotation.ElementType;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Retention;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.RetentionPolicy;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Target;<br><br><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span>  <span class=\"hljs-comment\">// 注解可以用在类上或接口上</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span>  <span class=\"hljs-comment\">// 运行时生效</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Bean &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-2-Di属性注入\"><a href=\"#3-2-Di属性注入\" class=\"headerlink\" title=\"3.2 @Di属性注入\"></a>3.2 <code>@Di</code>属性注入</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.annotation.di.java</span><br><span class=\"hljs-keyword\">package</span> org.example.annotation;<br><br><span class=\"hljs-keyword\">import</span> java.lang.annotation.ElementType;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Retention;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.RetentionPolicy;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Target;<br><br><span class=\"hljs-meta\">@Target(ElementType.FIELD)</span>  <span class=\"hljs-comment\">// 注解在属性上</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span>  <span class=\"hljs-comment\">// 运行时生效</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Di &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-创建bean容器接口ApplicationContext定义方法\"><a href=\"#4-创建bean容器接口ApplicationContext定义方法\" class=\"headerlink\" title=\"4. 创建bean容器接口ApplicationContext定义方法\"></a>4. 创建bean容器接口<code>ApplicationContext</code>定义方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.bean.ApplicationContext.java</span><br><span class=\"hljs-keyword\">package</span> org.example.bean;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ApplicationContext</span> &#123;<br>    Object <span class=\"hljs-title function_\">getBean</span><span class=\"hljs-params\">(Class clazz)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"5-实现bean容器接口\"><a href=\"#5-实现bean容器接口\" class=\"headerlink\" title=\"5.实现bean容器接口\"></a>5.实现bean容器接口</h3><ol>\n<li>返回对象</li>\n<li>根据包规则加载bean</li>\n</ol>\n<blockquote>\n<p>  比如org.example，扫描这个包与子包里面的所有类，是否有@Bean注解，如果有则把这个类通过反射进行实例化</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.example.bean.AnnotationApplicationContext.java</span><br><br><span class=\"hljs-keyword\">package</span> org.example.bean;<br><br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnnotationApplicationContext</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ApplicationContext</span>&#123;<br>    <span class=\"hljs-comment\">// 创建Map, 用于存放Bean的实例对象</span><br>    <span class=\"hljs-keyword\">private</span> Map&lt;Class, Object&gt; beanFactory = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-comment\">// 返回对象</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getBean</span><span class=\"hljs-params\">(Class clazz)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> beanFactory.get(clazz);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 设置包扫描规则</span><br>    <span class=\"hljs-comment\">// 当前包及其子包, 若发现类前@Bean注解, 使用反射进行实例化</span><br>    <span class=\"hljs-comment\">// 创建有参数的构造, 设置扫描规则</span><br><br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AnnotationApplicationContext</span><span class=\"hljs-params\">(String basePackage)</span> &#123;<br>        <span class=\"hljs-comment\">//</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springPart04/%E6%B5%81%E7%A8%8B.png\"></p>\n"},{"title":"【study】Spring学习part05","abbrlink":"1824774","date":"2024-02-09T05:02:37.000Z","_content":"\n# 【study】Spring学习part05\n\n\n\n## AOP面向切面编程\n\n需求：制作一个计算器，包括加减乘除。还需要日志在核心业务前后做输出\n\n\n\n代码实现\n\n新建计算器类接口`Calculator`，定义四则运算\n\n``` java\npackage org.example.demo;\n\npublic interface Calculator {\n    int add(int a, int b);\n\n    int sub(int a, int b);\n\n    int mul(int a, int b);\n\n    int div(int a, int b);\n}\n\n```\n\n\n\n定义接口实现`CalculatorImpl`，实现四则运算的简单操作\n\n``` java\npackage org.example.demo.impl;\n\nimport org.example.demo.Calculator;\n\n/**\n * \n * Date: 2024-02-09 13:12\n * Description: 基本的实现类, 实现四则运算\n */\n\npublic class CalculatorImpl implements Calculator {\n    @Override\n    public int add(int a, int b) {\n        int result = a + b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int sub(int a, int b) {\n        int result = a - b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int mul(int a, int b) {\n        int result = a * b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int div(int a, int b) {\n        int result = a / b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n}\n\n```\n\n\n\n定义接口实现`CalculatorLogImpl`，增加日志输出\n\n``` java\npackage org.example.demo.impl;\n\nimport org.example.demo.Calculator;\n\n/**\n * \n * Date: 2024-02-09 13:20\n * Description: 含有日志的实现类, 包含四则运算\n */\n\npublic class CalculatorLogImpl implements Calculator {\n    @Override\n    public int add(int a, int b) {\n        System.out.printf(\"[日志] add方法开始执行, 参数是:%d, %d\", a, b);\n        int result = a + b;\n        System.out.println(\"方法内部result = \" + result);\n        System.out.printf(\"[日志] add方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int sub(int a, int b) {\n        System.out.printf(\"[日志] sub方法开始执行, 参数是:%d, %d\", a, b);\n        int result = a - b;\n        System.out.println(\"方法内部result = \" + result);\n        System.out.printf(\"[日志] sub方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int mul(int a, int b) {\n        System.out.printf(\"[日志] mul方法开始执行, 参数是:%d, %d\", a, b);\n        int result = a * b;\n        System.out.println(\"方法内部result = \" + result);\n        System.out.printf(\"[日志] mul方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int div(int a, int b) {\n        System.out.printf(\"[日志] div方法开始执行, 参数是:%d, %d\", a, b);\n        int result = a / b;\n        System.out.println(\"方法内部result = \" + result);\n        System.out.printf(\"[日志] div方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n}\n\n```\n\n\n\n**目前存在的问题**\n\n1.   日志功能混合到一定，代码耦合度高，维护起来不方便\n\n     >   日志功能和核心业务能否分离？\n     >\n     >   -   如果将日志功能抽象出工具类并不能做到，因为还是耦合在了业务中。\n\n\n\n### 代理模式\n\n设计模式中的一种，是**结构型模式**。作用是通过提供一个代理类，让我们在调用目标的方法时，不再是直接对目标方法进行调用，而是通过代理类**间接调用**，让不属于目标方法核心逻辑的代码从目标方法中剥离出来——**解耦**。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起有利于统一维护。\n\n![](../images/springPart05/代理模式.jpeg)\n\n\n\n-   代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。\n-   目标：被代理“套用”了非核心逻辑代码的类、对象、方法。\n\n\n\n#### 静态代理\n\n新建静态代理类`proxy.CalculatorStaticProxy.java`\n\n``` java\npackage org.example.demo.proxy;\n\nimport org.example.demo.Calculator;\n\nimport java.lang.ref.PhantomReference;\n\n/**\n * \n * Date: 2024-02-10 19:13\n * Description:\n */\n\npublic class CalculatorStaticProxy implements Calculator {\n    \n    // 被代理的目标对象传递过来\n    private Calculator calculator;\n    public CalculatorStaticProxy(Calculator calculator) {\n        this.calculator = calculator;\n    }\n    \n\n    @Override\n    public int add(int a, int b) {\n        // 输出日志\n        System.out.printf(\"[日志] add方法开始执行, 参数是:%d, %d\", a, b);\n        \n        // 调用目标对象的方法实现核心业务\n        int result = calculator.add(a, b);\n        \n        // 输出日志\n        System.out.printf(\"[日志] add方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int sub(int a, int b) {\n        // 输出日志\n        System.out.printf(\"[日志] sub方法开始执行, 参数是:%d, %d\", a, b);\n\n        // 调用目标对象的方法实现核心业务\n        int result = calculator.sub(a, b);\n\n        // 输出日志\n        System.out.printf(\"[日志] sub方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int mul(int a, int b) {\n        // 输出日志\n        System.out.printf(\"[日志] mul方法开始执行, 参数是:%d, %d\", a, b);\n\n        // 调用目标对象的方法实现核心业务\n        int result = calculator.mul(a, b);\n\n        // 输出日志\n        System.out.printf(\"[日志] mul方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int div(int a, int b) {\n        // 输出日志\n        System.out.printf(\"[日志] div方法开始执行, 参数是:%d, %d\", a, b);\n\n        // 调用目标对象的方法实现核心业务\n        int result = calculator.div(a, b);\n\n        // 输出日志\n        System.out.printf(\"[日志] div方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n}\n\n```\n\n当前存在问题，日志功能并没有抽取出来，不具备灵活性。将来有任何日志需求都需要一个代理类来实现。\n\n\n\n#### 动态代理\n\n定义代理工厂`ProxyFactory`，\n\n``` java\npackage org.example.demo.proxy;\n\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.Arrays;\n\n/**\n * \n * Date: 2024-02-10 19:29\n * Description:\n */\n\npublic class ProxyFactory {\n\n    // 目标对象\n    private final Object target;\n\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n\n    // 创建一个方法, 返回代理对象(动态)\n    public Object getProxy() {\n        /*\n         * @param ClassLoader: 加载动态生成代理类的类加载器\n         * @param interfaces: 目标对象实现所有接口类型的class\n         * @param InvocationHandler: 设置代理对象实现目标对象方法的过程\n         * */\n        ClassLoader classLoader = target.getClass().getClassLoader();\n        Class<?>[] interfaces = target.getClass().getInterfaces();\n        InvocationHandler invocationHandler = new InvocationHandler() {\n\n            /**\n             * @param proxy 代理对象\n             * @param method 需要重写目标对象的方法\n             * @param args method方法中所需要的参数\n             * @return Object\n             * */\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                // 调用目标方法\n                Object result = null;\n                try {\n                    System.out.println(\"[动态代理][日志] \" + method.getName() + \", 参数: \" + Arrays.toString(args));\n                    result = method.invoke(target, args);\n                    System.out.println(\"[动态代理][日志] \" + method.getName() + \", 结果: \" + result);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    System.out.println(\"[动态代理][日志] \" + method.getName() + \", 异常: \" + e.getMessage());\n                } finally {\n                    System.out.println(\"[动态代理][日志] \" + method.getName() + \", 方法执行完毕\");\n                }\n                return result;\n            }\n        };\n        return Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);\n    }\n}\n\n```\n\n\n\n测试单元\n\n``` java\n@Test\npublic void testCalculator() {\n    // 1. 创建代理对象(动态)\n    ProxyFactory proxyFactory = new ProxyFactory(new CalculatorImpl());\n    Calculator proxy = (Calculator) proxyFactory.getProxy();\n    proxy.add(1, 2);\n}\n```\n\n输出结果\n\n![](../images/springPart05/动态代理输出结果.png)\n\n\n\n### AOP\n\nAOP (Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，**在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术**。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之问的耦合降低，提高程序的可重用性，同时提高了开发的效率。\n\n#### 1. 横切关注点\n\n分散在每个、各个模块中解决同一样的问题，例如用户验证、日志管理、事务处理、数据缓存都属于**横切关注点**。\n\n从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。\n\n\n\n![](../images/springPart05/横切关注点.png)\n\n \n\n#### 2. 通知（增强）\n\n增强，想要增强的功能，例如安全、事务、日志等。\n\n每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法叫做通知方法。\n\n-   前置通知：在被代理的目标方法前执行\n-   返回通知：在被代理的目标方法**成功结束**后执行（寿终正寝）\n-   异常通知：在被代理的目标方法**异常结束**后执行（死于非命）\n-   后置通知：在被代理的目标方法**最终结束**后执行（盖棺定论）\n-   环绕通知：使用`try...catch...finally`结构围绕着**整个**被代理的目标方法，包括上面四种通知对应的所有位置\n\n![](../images/springPart05/通知（增强）.png)\n\n\n\n#### 3. 切面\n\n封装通知方法类\n\n![](../images/springPart05/切面.png)\n\n\n\n#### 4. 目标\n\n被代理的目标对象\n\n\n\n#### 5. 代理\n\n向目标对象应用通知之后创建的代理对象。\n\n\n\n#### 6. 连接点\n\n这是一个纯逻辑的概念\n\n把每个方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行顺序看成y轴，x轴和y轴交叉点就是连接点。**通俗说，就是Spring允许使用通知的地方**\n\n\n\n\n\n#### 7. 切入点\n\n定位连接点的方式。\n\n每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说），\n\n如果把连接点看作数据库中的记录，那么切入点就是查询记录的SQL 语句。\n\n**Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法**\n\n切点通过 `org.springframework.aop.Pointcut` 接口进行描述，它使用类和方法作为连接点的查询条件。\n\n\n\n### 基于注解的AOP\n\n#### 1. 添加依赖\n\n``` xml\n<!--Spring AOP依赖-->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aop</artifactId>\n    <version>6.0.2</version>\n</dependency>\n<!--Spring aspects依赖-->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aspects</artifactId>\n    <version>6.0.2</version>\n</dependency>\n```\n\n#### 2. 创建目标资源\n\n1.   接口\n2.   实现类\n\n同计算器的例子`Calculator.java`，`CalculatorImpl.java`，放入新的包`annotationaop`当中\n\n``` java\npackage org.example.annotationaop;\n\n\npublic interface Calculator {\n    int add(int a, int b);\n\n    int sub(int a, int b);\n\n    int mul(int a, int b);\n\n    int div(int a, int b);\n}\n\n```\n\n\n\n``` java\npackage org.example.annotationaop.impl;\n\n\nimport org.example.annotationaop.Calculator;\nimport org.springframework.stereotype.Component;\n\n/**\n * \n * Date: 2024-02-09 13:12\n * Description: 基本的实现类, 实现四则运算\n */\n\n@Component  // 添加注解注入\npublic class CalculatorImpl implements Calculator {\n    @Override\n    public int add(int a, int b) {\n        int result = a + b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int sub(int a, int b) {\n        int result = a - b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int mul(int a, int b) {\n        int result = a * b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int div(int a, int b) {\n        int result = a / b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n}\n\n```\n\n\n\n#### 3. 创建切面类\n\n1.   切入点\n2.   创建类型\n\n\n\n##### 切入点表达式\n\n\n五种通知类型注解，括号内参数为切入点表达式\n\n- 前置 `@Before()`\n- 返回 `@AfterReturning()`\n- 异常` @AfterThrowing()`\n- 后置 `@After()`\n- 环绕` @Around()`\n\n![](../images/springPart05/切入点表达式.png)\n\n\n\n创建切面类`LogAspect.java`\n\n``` java\npackage org.example.annotationaop;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Arrays;\n\n/**\n * \n * Date: 2024-02-10 23:14\n * Description:\n */\n\n// 切面类\n@Aspect  // 切面类注解\n@Component  // 在Spring IoC容器中管理\npublic class LogAspect {\n    // 设置切入点和通知类型\n    // 括号内写 切入点表达式 execution(访问修饰符 增强方法返回类型 增强方法所在类的全类名.方法名称(参数))\n    // * 可以省略一些\n    // 通知类型:\n    //      前置 @Before()\n    //      返回 @AfterReturning()\n    //      异常 @AfterThrowing()\n    //          目标方法出现异常, 这个通知会执行, 也能获取到目标方法异常信息\n    //      后置 @After()\n    //      环绕 @Around()\n\n    // 前置通知 @Before()\n    @Before(value = \"execution(public int org.example.annotationaop.impl.CalculatorImpl.*(..))\")\n    public void beforeMethod(JoinPoint joinPoint) {\n        String methodName = joinPoint.getSignature().getName();\n        Object[] args = joinPoint.getArgs();\n        System.out.println(\"Logger --> 前置通知, 方法名称: \" + methodName + \", 参数为: \" + Arrays.toString(args));\n    }\n\n    // 后置通知 @After()\n    @After(value = \"execution (* org.example.annotationaop.impl.CalculatorImpl.*(..))\")\n    public void afterMethod(JoinPoint joinPoint) {\n        String methodName = joinPoint.getSignature().getName();\n        System.out.println(\"Logger --> 后置通知, 方法名称: \" + methodName);\n    }\n\n    // 返回通知 @AfterReturning\n    // 参数returning = \"参数名\", 下方函数参数中Object 命名也必须一致\n    @AfterReturning(value = \"execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))\", returning = \"results\")\n    public void afterReturningMethod(JoinPoint joinPoint, Object results) {\n        String methodName = joinPoint.getSignature().getName();\n        System.out.println(\"Logger --> 返回通知, 方法名称: \" + methodName + \", 返回结果: \" + results);\n    }\n\n    // 异常通知 @AfterThrowing\n    @AfterThrowing(value = \"execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))\", throwing = \"ex\")\n    public void afterThrowingMethod(JoinPoint joinPoint, Throwable ex) {\n        String methodName = joinPoint.getSignature().getName();\n        System.out.println(\"Logger --> 异常通知, 方法名称: \" + methodName + \", 异常结果: \" + ex);\n    }\n\n    // 环绕通知 @Around\n    @Around(value = \"execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))\")\n    public Object aroundMethod(ProceedingJoinPoint joinPoint) {  // 使用ProceedingJoinPoint类型, 更强\n        String methodName = joinPoint.getSignature().getName();\n        Object[] args = joinPoint.getArgs();\n        String argString = Arrays.toString(args);\n        Object result = null;\n        try {\n            System.out.println(\"环绕通知, 目标方法之前执行\");\n            result = joinPoint.proceed();\n            System.out.println(\"环绕通知, 目标方法返回值之后执行\");\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n            System.out.println(\"环绕通知, 目标方法出现异常时执行\");\n        } finally {\n            System.out.println(\"环绕通知, 目标方法执行完毕时执行\");\n        }\n        return result;\n    }\n}\n\n\n```\n\n\n\n创建配置文件`bean.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context.xsd\n       http://www.springframework.org/schema/aop \n       http://www.springframework.org/schema/aop.xsd\">\n    <!--\n        基于注解的AOP实现:\n        1. 将目标对象和切面交给IoC容器管理(注解+扫描)\n        2. 开启AspectJ的自动代理, 为目标对象自动生成代理\n        3. 将切面类通过注解@Aspect标识\n    -->\n    <context:component-scan base-package=\"org.example.annotationaop\"/>\n\t<aop:aspectj-autoproxy/>\n\n</beans>\n```\n\n\n\n\n创建测试用例\n\n``` java\n@Test\npublic void testAOPAdd() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean.xml\");\n    org.example.annotationaop.Calculator calculator = context.getBean(org.example.annotationaop.Calculator.class);\n    System.out.println(\"**********add()开始执行**********\");\n    calculator.add(1, 2);\n    System.out.println(\"**********add()执行完毕**********\");\n    System.out.println(\"**********div()开始执行**********\");\n    calculator.div(2, 0);\n    System.out.println(\"**********div()执行完毕**********\");\n}\n```\n\n>    测试用例中使用`2/0`来引发错误异常。\n\n\n\n![](../images/springPart05/各种通知测试.png)\n\n\n\n#### 切入点表达式的重用\n\n定义方法`pointCut()`，在之前使用注解`@Pointcut()`，使用时候\n\n``` java\n// 重用切入点表达式\n@Pointcut(value = \"execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))\")\npublic void pointCut() {\n\n}\n\n@After(value = \"pointCut()\")  // 注解时的值直接写方法名（同一个包里面的切面），不同包就是全路径\n\n\n@After(value = \"org.example.annotationaop.LogAspect.pointCut()\")\n\n```\n\n\n\n#### 切面优先级\n\n使用`Order()`可以控制切面的优先级，越小级别越高\n\n\n\n\n\n### 基于XML的AOP\n\n 计算器接口、实现类、切面类同上，切面类去掉方法前的所有注解。\n\n新建配置文件`bean-aop.xml`，写入配置\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\n       http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop.xsd\">\n    <!--开启组件扫描-->\n    <context:component-scan base-package=\"org.example.xmlaop\"/>\n    <!--配置AOP五种通知类型-->\n    <aop:config>\n        <!--配置切面类-->\n        <aop:aspect ref=\"logAspect\">\n            <!--配置切入点-->\n            <aop:pointcut id=\"pointcut\" expression=\"execution(* org.example.xmlaop.impl.CalculatorImpl.*(..))\"/>\n            <!--配置五种通知类型-->\n            <!--1. 前置通知-->\n            <aop:before method=\"beforeMethod\" pointcut-ref=\"pointcut\"/>\n\n            <!--2. 后置通知-->\n            <aop:after method=\"afterMethod\" pointcut-ref=\"pointcut\"/>\n\n            <!--3. 返回通知-->\n            <aop:after-returning method=\"afterReturningMethod\" pointcut-ref=\"pointcut\" returning=\"results\"/>\n\n            <!--4. 异常通知-->\n            <aop:after-throwing method=\"afterThrowingMethod\" pointcut-ref=\"pointcut\" throwing=\"ex\"/>\n\n            <!--5. 环绕通知-->\n            <aop:around method=\"aroundMethod\" pointcut-ref=\"pointcut\"/>\n        </aop:aspect>\n    </aop:config>\n</beans>\n```\n\n\n\n新建测试用例\n\n``` java\n@Test\npublic void testXMLAOPAdd() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-aop.xml\");\n    org.example.xmlaop.Calculator calculator = context.getBean(org.example.xmlaop.Calculator.class);\n    System.out.println(\"**********add()开始执行**********\");\n    calculator.add(6, 2);\n    System.out.println(\"**********add()执行完毕**********\");\n    System.out.println(\"**********div()开始执行**********\");\n    calculator.div(4, 0);\n    System.out.println(\"**********div()执行完毕**********\");\n}\n```\n\n\n\n结果输出\n\n![](../images/springPart05/xml各种通知测试.png)\n\n","source":"_posts/【study】Spring学习part05.md","raw":"---\ntitle: 【study】Spring学习part05\ntags:\n  - Study\n  - Java\n  - Spring框架\nabbrlink: '1824774'\ndate: 2024-02-09 13:02:37\n---\n\n# 【study】Spring学习part05\n\n\n\n## AOP面向切面编程\n\n需求：制作一个计算器，包括加减乘除。还需要日志在核心业务前后做输出\n\n\n\n代码实现\n\n新建计算器类接口`Calculator`，定义四则运算\n\n``` java\npackage org.example.demo;\n\npublic interface Calculator {\n    int add(int a, int b);\n\n    int sub(int a, int b);\n\n    int mul(int a, int b);\n\n    int div(int a, int b);\n}\n\n```\n\n\n\n定义接口实现`CalculatorImpl`，实现四则运算的简单操作\n\n``` java\npackage org.example.demo.impl;\n\nimport org.example.demo.Calculator;\n\n/**\n * \n * Date: 2024-02-09 13:12\n * Description: 基本的实现类, 实现四则运算\n */\n\npublic class CalculatorImpl implements Calculator {\n    @Override\n    public int add(int a, int b) {\n        int result = a + b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int sub(int a, int b) {\n        int result = a - b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int mul(int a, int b) {\n        int result = a * b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int div(int a, int b) {\n        int result = a / b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n}\n\n```\n\n\n\n定义接口实现`CalculatorLogImpl`，增加日志输出\n\n``` java\npackage org.example.demo.impl;\n\nimport org.example.demo.Calculator;\n\n/**\n * \n * Date: 2024-02-09 13:20\n * Description: 含有日志的实现类, 包含四则运算\n */\n\npublic class CalculatorLogImpl implements Calculator {\n    @Override\n    public int add(int a, int b) {\n        System.out.printf(\"[日志] add方法开始执行, 参数是:%d, %d\", a, b);\n        int result = a + b;\n        System.out.println(\"方法内部result = \" + result);\n        System.out.printf(\"[日志] add方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int sub(int a, int b) {\n        System.out.printf(\"[日志] sub方法开始执行, 参数是:%d, %d\", a, b);\n        int result = a - b;\n        System.out.println(\"方法内部result = \" + result);\n        System.out.printf(\"[日志] sub方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int mul(int a, int b) {\n        System.out.printf(\"[日志] mul方法开始执行, 参数是:%d, %d\", a, b);\n        int result = a * b;\n        System.out.println(\"方法内部result = \" + result);\n        System.out.printf(\"[日志] mul方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int div(int a, int b) {\n        System.out.printf(\"[日志] div方法开始执行, 参数是:%d, %d\", a, b);\n        int result = a / b;\n        System.out.println(\"方法内部result = \" + result);\n        System.out.printf(\"[日志] div方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n}\n\n```\n\n\n\n**目前存在的问题**\n\n1.   日志功能混合到一定，代码耦合度高，维护起来不方便\n\n     >   日志功能和核心业务能否分离？\n     >\n     >   -   如果将日志功能抽象出工具类并不能做到，因为还是耦合在了业务中。\n\n\n\n### 代理模式\n\n设计模式中的一种，是**结构型模式**。作用是通过提供一个代理类，让我们在调用目标的方法时，不再是直接对目标方法进行调用，而是通过代理类**间接调用**，让不属于目标方法核心逻辑的代码从目标方法中剥离出来——**解耦**。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起有利于统一维护。\n\n![](../images/springPart05/代理模式.jpeg)\n\n\n\n-   代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。\n-   目标：被代理“套用”了非核心逻辑代码的类、对象、方法。\n\n\n\n#### 静态代理\n\n新建静态代理类`proxy.CalculatorStaticProxy.java`\n\n``` java\npackage org.example.demo.proxy;\n\nimport org.example.demo.Calculator;\n\nimport java.lang.ref.PhantomReference;\n\n/**\n * \n * Date: 2024-02-10 19:13\n * Description:\n */\n\npublic class CalculatorStaticProxy implements Calculator {\n    \n    // 被代理的目标对象传递过来\n    private Calculator calculator;\n    public CalculatorStaticProxy(Calculator calculator) {\n        this.calculator = calculator;\n    }\n    \n\n    @Override\n    public int add(int a, int b) {\n        // 输出日志\n        System.out.printf(\"[日志] add方法开始执行, 参数是:%d, %d\", a, b);\n        \n        // 调用目标对象的方法实现核心业务\n        int result = calculator.add(a, b);\n        \n        // 输出日志\n        System.out.printf(\"[日志] add方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int sub(int a, int b) {\n        // 输出日志\n        System.out.printf(\"[日志] sub方法开始执行, 参数是:%d, %d\", a, b);\n\n        // 调用目标对象的方法实现核心业务\n        int result = calculator.sub(a, b);\n\n        // 输出日志\n        System.out.printf(\"[日志] sub方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int mul(int a, int b) {\n        // 输出日志\n        System.out.printf(\"[日志] mul方法开始执行, 参数是:%d, %d\", a, b);\n\n        // 调用目标对象的方法实现核心业务\n        int result = calculator.mul(a, b);\n\n        // 输出日志\n        System.out.printf(\"[日志] mul方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n\n    @Override\n    public int div(int a, int b) {\n        // 输出日志\n        System.out.printf(\"[日志] div方法开始执行, 参数是:%d, %d\", a, b);\n\n        // 调用目标对象的方法实现核心业务\n        int result = calculator.div(a, b);\n\n        // 输出日志\n        System.out.printf(\"[日志] div方法执行结束, 结果是:%d\", result);\n        return result;\n    }\n}\n\n```\n\n当前存在问题，日志功能并没有抽取出来，不具备灵活性。将来有任何日志需求都需要一个代理类来实现。\n\n\n\n#### 动态代理\n\n定义代理工厂`ProxyFactory`，\n\n``` java\npackage org.example.demo.proxy;\n\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.Arrays;\n\n/**\n * \n * Date: 2024-02-10 19:29\n * Description:\n */\n\npublic class ProxyFactory {\n\n    // 目标对象\n    private final Object target;\n\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n\n    // 创建一个方法, 返回代理对象(动态)\n    public Object getProxy() {\n        /*\n         * @param ClassLoader: 加载动态生成代理类的类加载器\n         * @param interfaces: 目标对象实现所有接口类型的class\n         * @param InvocationHandler: 设置代理对象实现目标对象方法的过程\n         * */\n        ClassLoader classLoader = target.getClass().getClassLoader();\n        Class<?>[] interfaces = target.getClass().getInterfaces();\n        InvocationHandler invocationHandler = new InvocationHandler() {\n\n            /**\n             * @param proxy 代理对象\n             * @param method 需要重写目标对象的方法\n             * @param args method方法中所需要的参数\n             * @return Object\n             * */\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                // 调用目标方法\n                Object result = null;\n                try {\n                    System.out.println(\"[动态代理][日志] \" + method.getName() + \", 参数: \" + Arrays.toString(args));\n                    result = method.invoke(target, args);\n                    System.out.println(\"[动态代理][日志] \" + method.getName() + \", 结果: \" + result);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    System.out.println(\"[动态代理][日志] \" + method.getName() + \", 异常: \" + e.getMessage());\n                } finally {\n                    System.out.println(\"[动态代理][日志] \" + method.getName() + \", 方法执行完毕\");\n                }\n                return result;\n            }\n        };\n        return Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);\n    }\n}\n\n```\n\n\n\n测试单元\n\n``` java\n@Test\npublic void testCalculator() {\n    // 1. 创建代理对象(动态)\n    ProxyFactory proxyFactory = new ProxyFactory(new CalculatorImpl());\n    Calculator proxy = (Calculator) proxyFactory.getProxy();\n    proxy.add(1, 2);\n}\n```\n\n输出结果\n\n![](../images/springPart05/动态代理输出结果.png)\n\n\n\n### AOP\n\nAOP (Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，**在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术**。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之问的耦合降低，提高程序的可重用性，同时提高了开发的效率。\n\n#### 1. 横切关注点\n\n分散在每个、各个模块中解决同一样的问题，例如用户验证、日志管理、事务处理、数据缓存都属于**横切关注点**。\n\n从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。\n\n\n\n![](../images/springPart05/横切关注点.png)\n\n \n\n#### 2. 通知（增强）\n\n增强，想要增强的功能，例如安全、事务、日志等。\n\n每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法叫做通知方法。\n\n-   前置通知：在被代理的目标方法前执行\n-   返回通知：在被代理的目标方法**成功结束**后执行（寿终正寝）\n-   异常通知：在被代理的目标方法**异常结束**后执行（死于非命）\n-   后置通知：在被代理的目标方法**最终结束**后执行（盖棺定论）\n-   环绕通知：使用`try...catch...finally`结构围绕着**整个**被代理的目标方法，包括上面四种通知对应的所有位置\n\n![](../images/springPart05/通知（增强）.png)\n\n\n\n#### 3. 切面\n\n封装通知方法类\n\n![](../images/springPart05/切面.png)\n\n\n\n#### 4. 目标\n\n被代理的目标对象\n\n\n\n#### 5. 代理\n\n向目标对象应用通知之后创建的代理对象。\n\n\n\n#### 6. 连接点\n\n这是一个纯逻辑的概念\n\n把每个方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行顺序看成y轴，x轴和y轴交叉点就是连接点。**通俗说，就是Spring允许使用通知的地方**\n\n\n\n\n\n#### 7. 切入点\n\n定位连接点的方式。\n\n每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说），\n\n如果把连接点看作数据库中的记录，那么切入点就是查询记录的SQL 语句。\n\n**Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法**\n\n切点通过 `org.springframework.aop.Pointcut` 接口进行描述，它使用类和方法作为连接点的查询条件。\n\n\n\n### 基于注解的AOP\n\n#### 1. 添加依赖\n\n``` xml\n<!--Spring AOP依赖-->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aop</artifactId>\n    <version>6.0.2</version>\n</dependency>\n<!--Spring aspects依赖-->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aspects</artifactId>\n    <version>6.0.2</version>\n</dependency>\n```\n\n#### 2. 创建目标资源\n\n1.   接口\n2.   实现类\n\n同计算器的例子`Calculator.java`，`CalculatorImpl.java`，放入新的包`annotationaop`当中\n\n``` java\npackage org.example.annotationaop;\n\n\npublic interface Calculator {\n    int add(int a, int b);\n\n    int sub(int a, int b);\n\n    int mul(int a, int b);\n\n    int div(int a, int b);\n}\n\n```\n\n\n\n``` java\npackage org.example.annotationaop.impl;\n\n\nimport org.example.annotationaop.Calculator;\nimport org.springframework.stereotype.Component;\n\n/**\n * \n * Date: 2024-02-09 13:12\n * Description: 基本的实现类, 实现四则运算\n */\n\n@Component  // 添加注解注入\npublic class CalculatorImpl implements Calculator {\n    @Override\n    public int add(int a, int b) {\n        int result = a + b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int sub(int a, int b) {\n        int result = a - b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int mul(int a, int b) {\n        int result = a * b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n\n    @Override\n    public int div(int a, int b) {\n        int result = a / b;\n        System.out.println(\"方法内部result = \" + result);\n        return result;\n    }\n}\n\n```\n\n\n\n#### 3. 创建切面类\n\n1.   切入点\n2.   创建类型\n\n\n\n##### 切入点表达式\n\n\n五种通知类型注解，括号内参数为切入点表达式\n\n- 前置 `@Before()`\n- 返回 `@AfterReturning()`\n- 异常` @AfterThrowing()`\n- 后置 `@After()`\n- 环绕` @Around()`\n\n![](../images/springPart05/切入点表达式.png)\n\n\n\n创建切面类`LogAspect.java`\n\n``` java\npackage org.example.annotationaop;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Arrays;\n\n/**\n * \n * Date: 2024-02-10 23:14\n * Description:\n */\n\n// 切面类\n@Aspect  // 切面类注解\n@Component  // 在Spring IoC容器中管理\npublic class LogAspect {\n    // 设置切入点和通知类型\n    // 括号内写 切入点表达式 execution(访问修饰符 增强方法返回类型 增强方法所在类的全类名.方法名称(参数))\n    // * 可以省略一些\n    // 通知类型:\n    //      前置 @Before()\n    //      返回 @AfterReturning()\n    //      异常 @AfterThrowing()\n    //          目标方法出现异常, 这个通知会执行, 也能获取到目标方法异常信息\n    //      后置 @After()\n    //      环绕 @Around()\n\n    // 前置通知 @Before()\n    @Before(value = \"execution(public int org.example.annotationaop.impl.CalculatorImpl.*(..))\")\n    public void beforeMethod(JoinPoint joinPoint) {\n        String methodName = joinPoint.getSignature().getName();\n        Object[] args = joinPoint.getArgs();\n        System.out.println(\"Logger --> 前置通知, 方法名称: \" + methodName + \", 参数为: \" + Arrays.toString(args));\n    }\n\n    // 后置通知 @After()\n    @After(value = \"execution (* org.example.annotationaop.impl.CalculatorImpl.*(..))\")\n    public void afterMethod(JoinPoint joinPoint) {\n        String methodName = joinPoint.getSignature().getName();\n        System.out.println(\"Logger --> 后置通知, 方法名称: \" + methodName);\n    }\n\n    // 返回通知 @AfterReturning\n    // 参数returning = \"参数名\", 下方函数参数中Object 命名也必须一致\n    @AfterReturning(value = \"execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))\", returning = \"results\")\n    public void afterReturningMethod(JoinPoint joinPoint, Object results) {\n        String methodName = joinPoint.getSignature().getName();\n        System.out.println(\"Logger --> 返回通知, 方法名称: \" + methodName + \", 返回结果: \" + results);\n    }\n\n    // 异常通知 @AfterThrowing\n    @AfterThrowing(value = \"execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))\", throwing = \"ex\")\n    public void afterThrowingMethod(JoinPoint joinPoint, Throwable ex) {\n        String methodName = joinPoint.getSignature().getName();\n        System.out.println(\"Logger --> 异常通知, 方法名称: \" + methodName + \", 异常结果: \" + ex);\n    }\n\n    // 环绕通知 @Around\n    @Around(value = \"execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))\")\n    public Object aroundMethod(ProceedingJoinPoint joinPoint) {  // 使用ProceedingJoinPoint类型, 更强\n        String methodName = joinPoint.getSignature().getName();\n        Object[] args = joinPoint.getArgs();\n        String argString = Arrays.toString(args);\n        Object result = null;\n        try {\n            System.out.println(\"环绕通知, 目标方法之前执行\");\n            result = joinPoint.proceed();\n            System.out.println(\"环绕通知, 目标方法返回值之后执行\");\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n            System.out.println(\"环绕通知, 目标方法出现异常时执行\");\n        } finally {\n            System.out.println(\"环绕通知, 目标方法执行完毕时执行\");\n        }\n        return result;\n    }\n}\n\n\n```\n\n\n\n创建配置文件`bean.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context.xsd\n       http://www.springframework.org/schema/aop \n       http://www.springframework.org/schema/aop.xsd\">\n    <!--\n        基于注解的AOP实现:\n        1. 将目标对象和切面交给IoC容器管理(注解+扫描)\n        2. 开启AspectJ的自动代理, 为目标对象自动生成代理\n        3. 将切面类通过注解@Aspect标识\n    -->\n    <context:component-scan base-package=\"org.example.annotationaop\"/>\n\t<aop:aspectj-autoproxy/>\n\n</beans>\n```\n\n\n\n\n创建测试用例\n\n``` java\n@Test\npublic void testAOPAdd() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean.xml\");\n    org.example.annotationaop.Calculator calculator = context.getBean(org.example.annotationaop.Calculator.class);\n    System.out.println(\"**********add()开始执行**********\");\n    calculator.add(1, 2);\n    System.out.println(\"**********add()执行完毕**********\");\n    System.out.println(\"**********div()开始执行**********\");\n    calculator.div(2, 0);\n    System.out.println(\"**********div()执行完毕**********\");\n}\n```\n\n>    测试用例中使用`2/0`来引发错误异常。\n\n\n\n![](../images/springPart05/各种通知测试.png)\n\n\n\n#### 切入点表达式的重用\n\n定义方法`pointCut()`，在之前使用注解`@Pointcut()`，使用时候\n\n``` java\n// 重用切入点表达式\n@Pointcut(value = \"execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))\")\npublic void pointCut() {\n\n}\n\n@After(value = \"pointCut()\")  // 注解时的值直接写方法名（同一个包里面的切面），不同包就是全路径\n\n\n@After(value = \"org.example.annotationaop.LogAspect.pointCut()\")\n\n```\n\n\n\n#### 切面优先级\n\n使用`Order()`可以控制切面的优先级，越小级别越高\n\n\n\n\n\n### 基于XML的AOP\n\n 计算器接口、实现类、切面类同上，切面类去掉方法前的所有注解。\n\n新建配置文件`bean-aop.xml`，写入配置\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\n       http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop.xsd\">\n    <!--开启组件扫描-->\n    <context:component-scan base-package=\"org.example.xmlaop\"/>\n    <!--配置AOP五种通知类型-->\n    <aop:config>\n        <!--配置切面类-->\n        <aop:aspect ref=\"logAspect\">\n            <!--配置切入点-->\n            <aop:pointcut id=\"pointcut\" expression=\"execution(* org.example.xmlaop.impl.CalculatorImpl.*(..))\"/>\n            <!--配置五种通知类型-->\n            <!--1. 前置通知-->\n            <aop:before method=\"beforeMethod\" pointcut-ref=\"pointcut\"/>\n\n            <!--2. 后置通知-->\n            <aop:after method=\"afterMethod\" pointcut-ref=\"pointcut\"/>\n\n            <!--3. 返回通知-->\n            <aop:after-returning method=\"afterReturningMethod\" pointcut-ref=\"pointcut\" returning=\"results\"/>\n\n            <!--4. 异常通知-->\n            <aop:after-throwing method=\"afterThrowingMethod\" pointcut-ref=\"pointcut\" throwing=\"ex\"/>\n\n            <!--5. 环绕通知-->\n            <aop:around method=\"aroundMethod\" pointcut-ref=\"pointcut\"/>\n        </aop:aspect>\n    </aop:config>\n</beans>\n```\n\n\n\n新建测试用例\n\n``` java\n@Test\npublic void testXMLAOPAdd() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean-aop.xml\");\n    org.example.xmlaop.Calculator calculator = context.getBean(org.example.xmlaop.Calculator.class);\n    System.out.println(\"**********add()开始执行**********\");\n    calculator.add(6, 2);\n    System.out.println(\"**********add()执行完毕**********\");\n    System.out.println(\"**********div()开始执行**********\");\n    calculator.div(4, 0);\n    System.out.println(\"**********div()执行完毕**********\");\n}\n```\n\n\n\n结果输出\n\n![](../images/springPart05/xml各种通知测试.png)\n\n","slug":"【study】Spring学习part05","published":1,"updated":"2024-02-11T16:23:32.279Z","_id":"clshpstx30001jgz8ai3melli","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【study】Spring学习part05\"><a href=\"#【study】Spring学习part05\" class=\"headerlink\" title=\"【study】Spring学习part05\"></a>【study】Spring学习part05</h1><h2 id=\"AOP面向切面编程\"><a href=\"#AOP面向切面编程\" class=\"headerlink\" title=\"AOP面向切面编程\"></a>AOP面向切面编程</h2><p>需求：制作一个计算器，包括加减乘除。还需要日志在核心业务前后做输出</p>\n<p>代码实现</p>\n<p>新建计算器类接口<code>Calculator</code>，定义四则运算</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.demo;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>定义接口实现<code>CalculatorImpl</code>，实现四则运算的简单操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.demo.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.demo.Calculator;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-09 13:12</span><br><span class=\"hljs-comment\"> * Description: 基本的实现类, 实现四则运算</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CalculatorImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a + b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a - b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a * b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a / b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>定义接口实现<code>CalculatorLogImpl</code>，增加日志输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.demo.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.demo.Calculator;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-09 13:20</span><br><span class=\"hljs-comment\"> * Description: 含有日志的实现类, 包含四则运算</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CalculatorLogImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] add方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a + b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] add方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] sub方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a - b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] sub方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] mul方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a * b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] mul方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] div方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a / b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] div方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>目前存在的问题</strong></p>\n<ol>\n<li><p>日志功能混合到一定，代码耦合度高，维护起来不方便</p>\n<blockquote>\n<p>  日志功能和核心业务能否分离？</p>\n<ul>\n<li>如果将日志功能抽象出工具类并不能做到，因为还是耦合在了业务中。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>设计模式中的一种，是<strong>结构型模式</strong>。作用是通过提供一个代理类，让我们在调用目标的方法时，不再是直接对目标方法进行调用，而是通过代理类<strong>间接调用</strong>，让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起有利于统一维护。</p>\n<p><img src=\"/../images/springPart05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.jpeg\"></p>\n<ul>\n<li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li>\n<li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li>\n</ul>\n<h4 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h4><p>新建静态代理类<code>proxy.CalculatorStaticProxy.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.demo.proxy;<br><br><span class=\"hljs-keyword\">import</span> org.example.demo.Calculator;<br><br><span class=\"hljs-keyword\">import</span> java.lang.ref.PhantomReference;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-10 19:13</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CalculatorStaticProxy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <br>    <span class=\"hljs-comment\">// 被代理的目标对象传递过来</span><br>    <span class=\"hljs-keyword\">private</span> Calculator calculator;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CalculatorStaticProxy</span><span class=\"hljs-params\">(Calculator calculator)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.calculator = calculator;<br>    &#125;<br>    <br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] add方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <br>        <span class=\"hljs-comment\">// 调用目标对象的方法实现核心业务</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> calculator.add(a, b);<br>        <br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] add方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] sub方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br><br>        <span class=\"hljs-comment\">// 调用目标对象的方法实现核心业务</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> calculator.sub(a, b);<br><br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] sub方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] mul方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br><br>        <span class=\"hljs-comment\">// 调用目标对象的方法实现核心业务</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> calculator.mul(a, b);<br><br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] mul方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] div方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br><br>        <span class=\"hljs-comment\">// 调用目标对象的方法实现核心业务</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> calculator.div(a, b);<br><br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] div方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>当前存在问题，日志功能并没有抽取出来，不具备灵活性。将来有任何日志需求都需要一个代理类来实现。</p>\n<h4 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h4><p>定义代理工厂<code>ProxyFactory</code>，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.demo.proxy;<br><br><br><span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationHandler;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Proxy;<br><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-10 19:29</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ProxyFactory</span> &#123;<br><br>    <span class=\"hljs-comment\">// 目标对象</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Object target;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">ProxyFactory</span><span class=\"hljs-params\">(Object target)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.target = target;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 创建一个方法, 返回代理对象(动态)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getProxy</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">         * @param ClassLoader: 加载动态生成代理类的类加载器</span><br><span class=\"hljs-comment\">         * @param interfaces: 目标对象实现所有接口类型的class</span><br><span class=\"hljs-comment\">         * @param InvocationHandler: 设置代理对象实现目标对象方法的过程</span><br><span class=\"hljs-comment\">         * */</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">classLoader</span> <span class=\"hljs-operator\">=</span> target.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();<br>        <span class=\"hljs-type\">InvocationHandler</span> <span class=\"hljs-variable\">invocationHandler</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InvocationHandler</span>() &#123;<br><br>            <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">             * <span class=\"hljs-doctag\">@param</span> proxy 代理对象</span><br><span class=\"hljs-comment\">             * <span class=\"hljs-doctag\">@param</span> method 需要重写目标对象的方法</span><br><span class=\"hljs-comment\">             * <span class=\"hljs-doctag\">@param</span> args method方法中所需要的参数</span><br><span class=\"hljs-comment\">             * <span class=\"hljs-doctag\">@return</span> Object</span><br><span class=\"hljs-comment\">             * */</span><br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">invoke</span><span class=\"hljs-params\">(Object proxy, Method method, Object[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable &#123;<br>                <span class=\"hljs-comment\">// 调用目标方法</span><br>                <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    System.out.println(<span class=\"hljs-string\">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class=\"hljs-string\">&quot;, 参数: &quot;</span> + Arrays.toString(args));<br>                    result = method.invoke(target, args);<br>                    System.out.println(<span class=\"hljs-string\">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class=\"hljs-string\">&quot;, 结果: &quot;</span> + result);<br>                &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                    System.out.println(<span class=\"hljs-string\">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class=\"hljs-string\">&quot;, 异常: &quot;</span> + e.getMessage());<br>                &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                    System.out.println(<span class=\"hljs-string\">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class=\"hljs-string\">&quot;, 方法执行完毕&quot;</span>);<br>                &#125;<br>                <span class=\"hljs-keyword\">return</span> result;<br>            &#125;<br>        &#125;;<br>        <span class=\"hljs-keyword\">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>测试单元</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCalculator</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 1. 创建代理对象(动态)</span><br>    <span class=\"hljs-type\">ProxyFactory</span> <span class=\"hljs-variable\">proxyFactory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProxyFactory</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CalculatorImpl</span>());<br>    <span class=\"hljs-type\">Calculator</span> <span class=\"hljs-variable\">proxy</span> <span class=\"hljs-operator\">=</span> (Calculator) proxyFactory.getProxy();<br>    proxy.add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<p><img src=\"/../images/springPart05/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png\"></p>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p>AOP (Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，<strong>在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术</strong>。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之问的耦合降低，提高程序的可重用性，同时提高了开发的效率。</p>\n<h4 id=\"1-横切关注点\"><a href=\"#1-横切关注点\" class=\"headerlink\" title=\"1. 横切关注点\"></a>1. 横切关注点</h4><p>分散在每个、各个模块中解决同一样的问题，例如用户验证、日志管理、事务处理、数据缓存都属于<strong>横切关注点</strong>。</p>\n<p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p>\n<p><img src=\"/../images/springPart05/%E6%A8%AA%E5%88%87%E5%85%B3%E6%B3%A8%E7%82%B9.png\"></p>\n<h4 id=\"2-通知（增强）\"><a href=\"#2-通知（增强）\" class=\"headerlink\" title=\"2. 通知（增强）\"></a>2. 通知（增强）</h4><p>增强，想要增强的功能，例如安全、事务、日志等。</p>\n<p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法叫做通知方法。</p>\n<ul>\n<li>前置通知：在被代理的目标方法前执行</li>\n<li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（寿终正寝）</li>\n<li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（死于非命）</li>\n<li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（盖棺定论）</li>\n<li>环绕通知：使用<code>try...catch...finally</code>结构围绕着<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li>\n</ul>\n<p><img src=\"/../images/springPart05/%E9%80%9A%E7%9F%A5%EF%BC%88%E5%A2%9E%E5%BC%BA%EF%BC%89.png\"></p>\n<h4 id=\"3-切面\"><a href=\"#3-切面\" class=\"headerlink\" title=\"3. 切面\"></a>3. 切面</h4><p>封装通知方法类</p>\n<p><img src=\"/../images/springPart05/%E5%88%87%E9%9D%A2.png\"></p>\n<h4 id=\"4-目标\"><a href=\"#4-目标\" class=\"headerlink\" title=\"4. 目标\"></a>4. 目标</h4><p>被代理的目标对象</p>\n<h4 id=\"5-代理\"><a href=\"#5-代理\" class=\"headerlink\" title=\"5. 代理\"></a>5. 代理</h4><p>向目标对象应用通知之后创建的代理对象。</p>\n<h4 id=\"6-连接点\"><a href=\"#6-连接点\" class=\"headerlink\" title=\"6. 连接点\"></a>6. 连接点</h4><p>这是一个纯逻辑的概念</p>\n<p>把每个方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行顺序看成y轴，x轴和y轴交叉点就是连接点。<strong>通俗说，就是Spring允许使用通知的地方</strong></p>\n<h4 id=\"7-切入点\"><a href=\"#7-切入点\" class=\"headerlink\" title=\"7. 切入点\"></a>7. 切入点</h4><p>定位连接点的方式。</p>\n<p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说），</p>\n<p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的SQL 语句。</p>\n<p><strong>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法</strong></p>\n<p>切点通过 <code>org.springframework.aop.Pointcut</code> 接口进行描述，它使用类和方法作为连接点的查询条件。</p>\n<h3 id=\"基于注解的AOP\"><a href=\"#基于注解的AOP\" class=\"headerlink\" title=\"基于注解的AOP\"></a>基于注解的AOP</h3><h4 id=\"1-添加依赖\"><a href=\"#1-添加依赖\" class=\"headerlink\" title=\"1. 添加依赖\"></a>1. 添加依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--Spring AOP依赖--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-aop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--Spring aspects依赖--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-aspects<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建目标资源\"><a href=\"#2-创建目标资源\" class=\"headerlink\" title=\"2. 创建目标资源\"></a>2. 创建目标资源</h4><ol>\n<li>接口</li>\n<li>实现类</li>\n</ol>\n<p>同计算器的例子<code>Calculator.java</code>，<code>CalculatorImpl.java</code>，放入新的包<code>annotationaop</code>当中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.annotationaop;<br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.annotationaop.impl;<br><br><br><span class=\"hljs-keyword\">import</span> org.example.annotationaop.Calculator;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-09 13:12</span><br><span class=\"hljs-comment\"> * Description: 基本的实现类, 实现四则运算</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Component</span>  <span class=\"hljs-comment\">// 添加注解注入</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CalculatorImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a + b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a - b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a * b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a / b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-创建切面类\"><a href=\"#3-创建切面类\" class=\"headerlink\" title=\"3. 创建切面类\"></a>3. 创建切面类</h4><ol>\n<li>切入点</li>\n<li>创建类型</li>\n</ol>\n<h5 id=\"切入点表达式\"><a href=\"#切入点表达式\" class=\"headerlink\" title=\"切入点表达式\"></a>切入点表达式</h5><p>五种通知类型注解，括号内参数为切入点表达式</p>\n<ul>\n<li>前置 <code>@Before()</code></li>\n<li>返回 <code>@AfterReturning()</code></li>\n<li>异常<code> @AfterThrowing()</code></li>\n<li>后置 <code>@After()</code></li>\n<li>环绕<code> @Around()</code></li>\n</ul>\n<p><img src=\"/../images/springPart05/%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F.png\"></p>\n<p>创建切面类<code>LogAspect.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.annotationaop;<br><br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.*;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-10 23:14</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-comment\">// 切面类</span><br><span class=\"hljs-meta\">@Aspect</span>  <span class=\"hljs-comment\">// 切面类注解</span><br><span class=\"hljs-meta\">@Component</span>  <span class=\"hljs-comment\">// 在Spring IoC容器中管理</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LogAspect</span> &#123;<br>    <span class=\"hljs-comment\">// 设置切入点和通知类型</span><br>    <span class=\"hljs-comment\">// 括号内写 切入点表达式 execution(访问修饰符 增强方法返回类型 增强方法所在类的全类名.方法名称(参数))</span><br>    <span class=\"hljs-comment\">// * 可以省略一些</span><br>    <span class=\"hljs-comment\">// 通知类型:</span><br>    <span class=\"hljs-comment\">//      前置 @Before()</span><br>    <span class=\"hljs-comment\">//      返回 @AfterReturning()</span><br>    <span class=\"hljs-comment\">//      异常 @AfterThrowing()</span><br>    <span class=\"hljs-comment\">//          目标方法出现异常, 这个通知会执行, 也能获取到目标方法异常信息</span><br>    <span class=\"hljs-comment\">//      后置 @After()</span><br>    <span class=\"hljs-comment\">//      环绕 @Around()</span><br><br>    <span class=\"hljs-comment\">// 前置通知 @Before()</span><br>    <span class=\"hljs-meta\">@Before(value = &quot;execution(public int org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeMethod</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class=\"hljs-string\">&quot;Logger --&gt; 前置通知, 方法名称: &quot;</span> + methodName + <span class=\"hljs-string\">&quot;, 参数为: &quot;</span> + Arrays.toString(args));<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 后置通知 @After()</span><br>    <span class=\"hljs-meta\">@After(value = &quot;execution (* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterMethod</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class=\"hljs-string\">&quot;Logger --&gt; 后置通知, 方法名称: &quot;</span> + methodName);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 返回通知 @AfterReturning</span><br>    <span class=\"hljs-comment\">// 参数returning = &quot;参数名&quot;, 下方函数参数中Object 命名也必须一致</span><br>    <span class=\"hljs-meta\">@AfterReturning(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;, returning = &quot;results&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterReturningMethod</span><span class=\"hljs-params\">(JoinPoint joinPoint, Object results)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class=\"hljs-string\">&quot;Logger --&gt; 返回通知, 方法名称: &quot;</span> + methodName + <span class=\"hljs-string\">&quot;, 返回结果: &quot;</span> + results);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 异常通知 @AfterThrowing</span><br>    <span class=\"hljs-meta\">@AfterThrowing(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterThrowingMethod</span><span class=\"hljs-params\">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class=\"hljs-string\">&quot;Logger --&gt; 异常通知, 方法名称: &quot;</span> + methodName + <span class=\"hljs-string\">&quot;, 异常结果: &quot;</span> + ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 环绕通知 @Around</span><br>    <span class=\"hljs-meta\">@Around(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">aroundMethod</span><span class=\"hljs-params\">(ProceedingJoinPoint joinPoint)</span> &#123;  <span class=\"hljs-comment\">// 使用ProceedingJoinPoint类型, 更强</span><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        Object[] args = joinPoint.getArgs();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">argString</span> <span class=\"hljs-operator\">=</span> Arrays.toString(args);<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;环绕通知, 目标方法之前执行&quot;</span>);<br>            result = joinPoint.proceed();<br>            System.out.println(<span class=\"hljs-string\">&quot;环绕通知, 目标方法返回值之后执行&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>            System.out.println(<span class=\"hljs-string\">&quot;环绕通知, 目标方法出现异常时执行&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;环绕通知, 目标方法执行完毕时执行&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>创建配置文件<code>bean.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans </span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop </span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        基于注解的AOP实现:</span><br><span class=\"hljs-comment\">        1. 将目标对象和切面交给IoC容器管理(注解+扫描)</span><br><span class=\"hljs-comment\">        2. 开启AspectJ的自动代理, 为目标对象自动生成代理</span><br><span class=\"hljs-comment\">        3. 将切面类通过注解@Aspect标识</span><br><span class=\"hljs-comment\">    --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example.annotationaop&quot;</span>/&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span>/&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n<p>创建测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAOPAdd</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean.xml&quot;</span>);<br>    org.example.annotationaop.<span class=\"hljs-type\">Calculator</span> <span class=\"hljs-variable\">calculator</span> <span class=\"hljs-operator\">=</span> context.getBean(org.example.annotationaop.Calculator.class);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********add()开始执行**********&quot;</span>);<br>    calculator.add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********add()执行完毕**********&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********div()开始执行**********&quot;</span>);<br>    calculator.div(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********div()执行完毕**********&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>   测试用例中使用<code>2/0</code>来引发错误异常。</p>\n</blockquote>\n<p><img src=\"/../images/springPart05/%E5%90%84%E7%A7%8D%E9%80%9A%E7%9F%A5%E6%B5%8B%E8%AF%95.png\"></p>\n<h4 id=\"切入点表达式的重用\"><a href=\"#切入点表达式的重用\" class=\"headerlink\" title=\"切入点表达式的重用\"></a>切入点表达式的重用</h4><p>定义方法<code>pointCut()</code>，在之前使用注解<code>@Pointcut()</code>，使用时候</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 重用切入点表达式</span><br><span class=\"hljs-meta\">@Pointcut(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pointCut</span><span class=\"hljs-params\">()</span> &#123;<br><br>&#125;<br><br><span class=\"hljs-meta\">@After(value = &quot;pointCut()&quot;)</span>  <span class=\"hljs-comment\">// 注解时的值直接写方法名（同一个包里面的切面），不同包就是全路径</span><br><br><br><span class=\"hljs-meta\">@After(value = &quot;org.example.annotationaop.LogAspect.pointCut()&quot;)</span><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"切面优先级\"><a href=\"#切面优先级\" class=\"headerlink\" title=\"切面优先级\"></a>切面优先级</h4><p>使用<code>Order()</code>可以控制切面的优先级，越小级别越高</p>\n<h3 id=\"基于XML的AOP\"><a href=\"#基于XML的AOP\" class=\"headerlink\" title=\"基于XML的AOP\"></a>基于XML的AOP</h3><p> 计算器接口、实现类、切面类同上，切面类去掉方法前的所有注解。</p>\n<p>新建配置文件<code>bean-aop.xml</code>，写入配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--开启组件扫描--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example.xmlaop&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--配置AOP五种通知类型--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--配置切面类--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspect</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;logAspect&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--配置切入点--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;execution(* org.example.xmlaop.impl.CalculatorImpl.*(..))&quot;</span>/&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--配置五种通知类型--&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--1. 前置通知--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:before</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;beforeMethod&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span>/&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!--2. 后置通知--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;afterMethod&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span>/&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!--3. 返回通知--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after-returning</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;afterReturningMethod&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span> <span class=\"hljs-attr\">returning</span>=<span class=\"hljs-string\">&quot;results&quot;</span>/&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!--4. 异常通知--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after-throwing</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;afterThrowingMethod&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span> <span class=\"hljs-attr\">throwing</span>=<span class=\"hljs-string\">&quot;ex&quot;</span>/&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!--5. 环绕通知--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:around</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;aroundMethod&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:aspect</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testXMLAOPAdd</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-aop.xml&quot;</span>);<br>    org.example.xmlaop.<span class=\"hljs-type\">Calculator</span> <span class=\"hljs-variable\">calculator</span> <span class=\"hljs-operator\">=</span> context.getBean(org.example.xmlaop.Calculator.class);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********add()开始执行**********&quot;</span>);<br>    calculator.add(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********add()执行完毕**********&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********div()开始执行**********&quot;</span>);<br>    calculator.div(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********div()执行完毕**********&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>结果输出</p>\n<p><img src=\"/../images/springPart05/xml%E5%90%84%E7%A7%8D%E9%80%9A%E7%9F%A5%E6%B5%8B%E8%AF%95.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【study】Spring学习part05\"><a href=\"#【study】Spring学习part05\" class=\"headerlink\" title=\"【study】Spring学习part05\"></a>【study】Spring学习part05</h1><h2 id=\"AOP面向切面编程\"><a href=\"#AOP面向切面编程\" class=\"headerlink\" title=\"AOP面向切面编程\"></a>AOP面向切面编程</h2><p>需求：制作一个计算器，包括加减乘除。还需要日志在核心业务前后做输出</p>\n<p>代码实现</p>\n<p>新建计算器类接口<code>Calculator</code>，定义四则运算</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.demo;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>定义接口实现<code>CalculatorImpl</code>，实现四则运算的简单操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.demo.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.demo.Calculator;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-09 13:12</span><br><span class=\"hljs-comment\"> * Description: 基本的实现类, 实现四则运算</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CalculatorImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a + b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a - b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a * b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a / b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>定义接口实现<code>CalculatorLogImpl</code>，增加日志输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.demo.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.demo.Calculator;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-09 13:20</span><br><span class=\"hljs-comment\"> * Description: 含有日志的实现类, 包含四则运算</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CalculatorLogImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] add方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a + b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] add方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] sub方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a - b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] sub方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] mul方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a * b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] mul方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] div方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a / b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] div方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>目前存在的问题</strong></p>\n<ol>\n<li><p>日志功能混合到一定，代码耦合度高，维护起来不方便</p>\n<blockquote>\n<p>  日志功能和核心业务能否分离？</p>\n<ul>\n<li>如果将日志功能抽象出工具类并不能做到，因为还是耦合在了业务中。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>设计模式中的一种，是<strong>结构型模式</strong>。作用是通过提供一个代理类，让我们在调用目标的方法时，不再是直接对目标方法进行调用，而是通过代理类<strong>间接调用</strong>，让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起有利于统一维护。</p>\n<p><img src=\"/../images/springPart05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.jpeg\"></p>\n<ul>\n<li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li>\n<li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li>\n</ul>\n<h4 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h4><p>新建静态代理类<code>proxy.CalculatorStaticProxy.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.demo.proxy;<br><br><span class=\"hljs-keyword\">import</span> org.example.demo.Calculator;<br><br><span class=\"hljs-keyword\">import</span> java.lang.ref.PhantomReference;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-10 19:13</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CalculatorStaticProxy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <br>    <span class=\"hljs-comment\">// 被代理的目标对象传递过来</span><br>    <span class=\"hljs-keyword\">private</span> Calculator calculator;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CalculatorStaticProxy</span><span class=\"hljs-params\">(Calculator calculator)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.calculator = calculator;<br>    &#125;<br>    <br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] add方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <br>        <span class=\"hljs-comment\">// 调用目标对象的方法实现核心业务</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> calculator.add(a, b);<br>        <br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] add方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] sub方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br><br>        <span class=\"hljs-comment\">// 调用目标对象的方法实现核心业务</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> calculator.sub(a, b);<br><br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] sub方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] mul方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br><br>        <span class=\"hljs-comment\">// 调用目标对象的方法实现核心业务</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> calculator.mul(a, b);<br><br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] mul方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] div方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br><br>        <span class=\"hljs-comment\">// 调用目标对象的方法实现核心业务</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> calculator.div(a, b);<br><br>        <span class=\"hljs-comment\">// 输出日志</span><br>        System.out.printf(<span class=\"hljs-string\">&quot;[日志] div方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>当前存在问题，日志功能并没有抽取出来，不具备灵活性。将来有任何日志需求都需要一个代理类来实现。</p>\n<h4 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h4><p>定义代理工厂<code>ProxyFactory</code>，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.demo.proxy;<br><br><br><span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationHandler;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Proxy;<br><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-10 19:29</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ProxyFactory</span> &#123;<br><br>    <span class=\"hljs-comment\">// 目标对象</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Object target;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">ProxyFactory</span><span class=\"hljs-params\">(Object target)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.target = target;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 创建一个方法, 返回代理对象(动态)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getProxy</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">         * @param ClassLoader: 加载动态生成代理类的类加载器</span><br><span class=\"hljs-comment\">         * @param interfaces: 目标对象实现所有接口类型的class</span><br><span class=\"hljs-comment\">         * @param InvocationHandler: 设置代理对象实现目标对象方法的过程</span><br><span class=\"hljs-comment\">         * */</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">classLoader</span> <span class=\"hljs-operator\">=</span> target.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();<br>        <span class=\"hljs-type\">InvocationHandler</span> <span class=\"hljs-variable\">invocationHandler</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InvocationHandler</span>() &#123;<br><br>            <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">             * <span class=\"hljs-doctag\">@param</span> proxy 代理对象</span><br><span class=\"hljs-comment\">             * <span class=\"hljs-doctag\">@param</span> method 需要重写目标对象的方法</span><br><span class=\"hljs-comment\">             * <span class=\"hljs-doctag\">@param</span> args method方法中所需要的参数</span><br><span class=\"hljs-comment\">             * <span class=\"hljs-doctag\">@return</span> Object</span><br><span class=\"hljs-comment\">             * */</span><br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">invoke</span><span class=\"hljs-params\">(Object proxy, Method method, Object[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable &#123;<br>                <span class=\"hljs-comment\">// 调用目标方法</span><br>                <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    System.out.println(<span class=\"hljs-string\">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class=\"hljs-string\">&quot;, 参数: &quot;</span> + Arrays.toString(args));<br>                    result = method.invoke(target, args);<br>                    System.out.println(<span class=\"hljs-string\">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class=\"hljs-string\">&quot;, 结果: &quot;</span> + result);<br>                &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                    System.out.println(<span class=\"hljs-string\">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class=\"hljs-string\">&quot;, 异常: &quot;</span> + e.getMessage());<br>                &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                    System.out.println(<span class=\"hljs-string\">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class=\"hljs-string\">&quot;, 方法执行完毕&quot;</span>);<br>                &#125;<br>                <span class=\"hljs-keyword\">return</span> result;<br>            &#125;<br>        &#125;;<br>        <span class=\"hljs-keyword\">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>测试单元</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCalculator</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 1. 创建代理对象(动态)</span><br>    <span class=\"hljs-type\">ProxyFactory</span> <span class=\"hljs-variable\">proxyFactory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProxyFactory</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CalculatorImpl</span>());<br>    <span class=\"hljs-type\">Calculator</span> <span class=\"hljs-variable\">proxy</span> <span class=\"hljs-operator\">=</span> (Calculator) proxyFactory.getProxy();<br>    proxy.add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<p><img src=\"/../images/springPart05/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png\"></p>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p>AOP (Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，<strong>在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术</strong>。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之问的耦合降低，提高程序的可重用性，同时提高了开发的效率。</p>\n<h4 id=\"1-横切关注点\"><a href=\"#1-横切关注点\" class=\"headerlink\" title=\"1. 横切关注点\"></a>1. 横切关注点</h4><p>分散在每个、各个模块中解决同一样的问题，例如用户验证、日志管理、事务处理、数据缓存都属于<strong>横切关注点</strong>。</p>\n<p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p>\n<p><img src=\"/../images/springPart05/%E6%A8%AA%E5%88%87%E5%85%B3%E6%B3%A8%E7%82%B9.png\"></p>\n<h4 id=\"2-通知（增强）\"><a href=\"#2-通知（增强）\" class=\"headerlink\" title=\"2. 通知（增强）\"></a>2. 通知（增强）</h4><p>增强，想要增强的功能，例如安全、事务、日志等。</p>\n<p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法叫做通知方法。</p>\n<ul>\n<li>前置通知：在被代理的目标方法前执行</li>\n<li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（寿终正寝）</li>\n<li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（死于非命）</li>\n<li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（盖棺定论）</li>\n<li>环绕通知：使用<code>try...catch...finally</code>结构围绕着<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li>\n</ul>\n<p><img src=\"/../images/springPart05/%E9%80%9A%E7%9F%A5%EF%BC%88%E5%A2%9E%E5%BC%BA%EF%BC%89.png\"></p>\n<h4 id=\"3-切面\"><a href=\"#3-切面\" class=\"headerlink\" title=\"3. 切面\"></a>3. 切面</h4><p>封装通知方法类</p>\n<p><img src=\"/../images/springPart05/%E5%88%87%E9%9D%A2.png\"></p>\n<h4 id=\"4-目标\"><a href=\"#4-目标\" class=\"headerlink\" title=\"4. 目标\"></a>4. 目标</h4><p>被代理的目标对象</p>\n<h4 id=\"5-代理\"><a href=\"#5-代理\" class=\"headerlink\" title=\"5. 代理\"></a>5. 代理</h4><p>向目标对象应用通知之后创建的代理对象。</p>\n<h4 id=\"6-连接点\"><a href=\"#6-连接点\" class=\"headerlink\" title=\"6. 连接点\"></a>6. 连接点</h4><p>这是一个纯逻辑的概念</p>\n<p>把每个方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行顺序看成y轴，x轴和y轴交叉点就是连接点。<strong>通俗说，就是Spring允许使用通知的地方</strong></p>\n<h4 id=\"7-切入点\"><a href=\"#7-切入点\" class=\"headerlink\" title=\"7. 切入点\"></a>7. 切入点</h4><p>定位连接点的方式。</p>\n<p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说），</p>\n<p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的SQL 语句。</p>\n<p><strong>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法</strong></p>\n<p>切点通过 <code>org.springframework.aop.Pointcut</code> 接口进行描述，它使用类和方法作为连接点的查询条件。</p>\n<h3 id=\"基于注解的AOP\"><a href=\"#基于注解的AOP\" class=\"headerlink\" title=\"基于注解的AOP\"></a>基于注解的AOP</h3><h4 id=\"1-添加依赖\"><a href=\"#1-添加依赖\" class=\"headerlink\" title=\"1. 添加依赖\"></a>1. 添加依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--Spring AOP依赖--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-aop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--Spring aspects依赖--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-aspects<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建目标资源\"><a href=\"#2-创建目标资源\" class=\"headerlink\" title=\"2. 创建目标资源\"></a>2. 创建目标资源</h4><ol>\n<li>接口</li>\n<li>实现类</li>\n</ol>\n<p>同计算器的例子<code>Calculator.java</code>，<code>CalculatorImpl.java</code>，放入新的包<code>annotationaop</code>当中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.annotationaop;<br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.annotationaop.impl;<br><br><br><span class=\"hljs-keyword\">import</span> org.example.annotationaop.Calculator;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-09 13:12</span><br><span class=\"hljs-comment\"> * Description: 基本的实现类, 实现四则运算</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Component</span>  <span class=\"hljs-comment\">// 添加注解注入</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CalculatorImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Calculator</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a + b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sub</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a - b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mul</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a * b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">div</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> a / b;<br>        System.out.println(<span class=\"hljs-string\">&quot;方法内部result = &quot;</span> + result);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-创建切面类\"><a href=\"#3-创建切面类\" class=\"headerlink\" title=\"3. 创建切面类\"></a>3. 创建切面类</h4><ol>\n<li>切入点</li>\n<li>创建类型</li>\n</ol>\n<h5 id=\"切入点表达式\"><a href=\"#切入点表达式\" class=\"headerlink\" title=\"切入点表达式\"></a>切入点表达式</h5><p>五种通知类型注解，括号内参数为切入点表达式</p>\n<ul>\n<li>前置 <code>@Before()</code></li>\n<li>返回 <code>@AfterReturning()</code></li>\n<li>异常<code> @AfterThrowing()</code></li>\n<li>后置 <code>@After()</code></li>\n<li>环绕<code> @Around()</code></li>\n</ul>\n<p><img src=\"/../images/springPart05/%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F.png\"></p>\n<p>创建切面类<code>LogAspect.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.annotationaop;<br><br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.*;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * Date: 2024-02-10 23:14</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-comment\">// 切面类</span><br><span class=\"hljs-meta\">@Aspect</span>  <span class=\"hljs-comment\">// 切面类注解</span><br><span class=\"hljs-meta\">@Component</span>  <span class=\"hljs-comment\">// 在Spring IoC容器中管理</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LogAspect</span> &#123;<br>    <span class=\"hljs-comment\">// 设置切入点和通知类型</span><br>    <span class=\"hljs-comment\">// 括号内写 切入点表达式 execution(访问修饰符 增强方法返回类型 增强方法所在类的全类名.方法名称(参数))</span><br>    <span class=\"hljs-comment\">// * 可以省略一些</span><br>    <span class=\"hljs-comment\">// 通知类型:</span><br>    <span class=\"hljs-comment\">//      前置 @Before()</span><br>    <span class=\"hljs-comment\">//      返回 @AfterReturning()</span><br>    <span class=\"hljs-comment\">//      异常 @AfterThrowing()</span><br>    <span class=\"hljs-comment\">//          目标方法出现异常, 这个通知会执行, 也能获取到目标方法异常信息</span><br>    <span class=\"hljs-comment\">//      后置 @After()</span><br>    <span class=\"hljs-comment\">//      环绕 @Around()</span><br><br>    <span class=\"hljs-comment\">// 前置通知 @Before()</span><br>    <span class=\"hljs-meta\">@Before(value = &quot;execution(public int org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeMethod</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class=\"hljs-string\">&quot;Logger --&gt; 前置通知, 方法名称: &quot;</span> + methodName + <span class=\"hljs-string\">&quot;, 参数为: &quot;</span> + Arrays.toString(args));<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 后置通知 @After()</span><br>    <span class=\"hljs-meta\">@After(value = &quot;execution (* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterMethod</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class=\"hljs-string\">&quot;Logger --&gt; 后置通知, 方法名称: &quot;</span> + methodName);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 返回通知 @AfterReturning</span><br>    <span class=\"hljs-comment\">// 参数returning = &quot;参数名&quot;, 下方函数参数中Object 命名也必须一致</span><br>    <span class=\"hljs-meta\">@AfterReturning(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;, returning = &quot;results&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterReturningMethod</span><span class=\"hljs-params\">(JoinPoint joinPoint, Object results)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class=\"hljs-string\">&quot;Logger --&gt; 返回通知, 方法名称: &quot;</span> + methodName + <span class=\"hljs-string\">&quot;, 返回结果: &quot;</span> + results);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 异常通知 @AfterThrowing</span><br>    <span class=\"hljs-meta\">@AfterThrowing(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterThrowingMethod</span><span class=\"hljs-params\">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class=\"hljs-string\">&quot;Logger --&gt; 异常通知, 方法名称: &quot;</span> + methodName + <span class=\"hljs-string\">&quot;, 异常结果: &quot;</span> + ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 环绕通知 @Around</span><br>    <span class=\"hljs-meta\">@Around(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">aroundMethod</span><span class=\"hljs-params\">(ProceedingJoinPoint joinPoint)</span> &#123;  <span class=\"hljs-comment\">// 使用ProceedingJoinPoint类型, 更强</span><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        Object[] args = joinPoint.getArgs();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">argString</span> <span class=\"hljs-operator\">=</span> Arrays.toString(args);<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;环绕通知, 目标方法之前执行&quot;</span>);<br>            result = joinPoint.proceed();<br>            System.out.println(<span class=\"hljs-string\">&quot;环绕通知, 目标方法返回值之后执行&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>            System.out.println(<span class=\"hljs-string\">&quot;环绕通知, 目标方法出现异常时执行&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;环绕通知, 目标方法执行完毕时执行&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>创建配置文件<code>bean.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans </span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop </span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        基于注解的AOP实现:</span><br><span class=\"hljs-comment\">        1. 将目标对象和切面交给IoC容器管理(注解+扫描)</span><br><span class=\"hljs-comment\">        2. 开启AspectJ的自动代理, 为目标对象自动生成代理</span><br><span class=\"hljs-comment\">        3. 将切面类通过注解@Aspect标识</span><br><span class=\"hljs-comment\">    --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example.annotationaop&quot;</span>/&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span>/&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n<p>创建测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAOPAdd</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean.xml&quot;</span>);<br>    org.example.annotationaop.<span class=\"hljs-type\">Calculator</span> <span class=\"hljs-variable\">calculator</span> <span class=\"hljs-operator\">=</span> context.getBean(org.example.annotationaop.Calculator.class);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********add()开始执行**********&quot;</span>);<br>    calculator.add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********add()执行完毕**********&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********div()开始执行**********&quot;</span>);<br>    calculator.div(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********div()执行完毕**********&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>   测试用例中使用<code>2/0</code>来引发错误异常。</p>\n</blockquote>\n<p><img src=\"/../images/springPart05/%E5%90%84%E7%A7%8D%E9%80%9A%E7%9F%A5%E6%B5%8B%E8%AF%95.png\"></p>\n<h4 id=\"切入点表达式的重用\"><a href=\"#切入点表达式的重用\" class=\"headerlink\" title=\"切入点表达式的重用\"></a>切入点表达式的重用</h4><p>定义方法<code>pointCut()</code>，在之前使用注解<code>@Pointcut()</code>，使用时候</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 重用切入点表达式</span><br><span class=\"hljs-meta\">@Pointcut(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pointCut</span><span class=\"hljs-params\">()</span> &#123;<br><br>&#125;<br><br><span class=\"hljs-meta\">@After(value = &quot;pointCut()&quot;)</span>  <span class=\"hljs-comment\">// 注解时的值直接写方法名（同一个包里面的切面），不同包就是全路径</span><br><br><br><span class=\"hljs-meta\">@After(value = &quot;org.example.annotationaop.LogAspect.pointCut()&quot;)</span><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"切面优先级\"><a href=\"#切面优先级\" class=\"headerlink\" title=\"切面优先级\"></a>切面优先级</h4><p>使用<code>Order()</code>可以控制切面的优先级，越小级别越高</p>\n<h3 id=\"基于XML的AOP\"><a href=\"#基于XML的AOP\" class=\"headerlink\" title=\"基于XML的AOP\"></a>基于XML的AOP</h3><p> 计算器接口、实现类、切面类同上，切面类去掉方法前的所有注解。</p>\n<p>新建配置文件<code>bean-aop.xml</code>，写入配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--开启组件扫描--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example.xmlaop&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--配置AOP五种通知类型--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--配置切面类--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspect</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;logAspect&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--配置切入点--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;execution(* org.example.xmlaop.impl.CalculatorImpl.*(..))&quot;</span>/&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--配置五种通知类型--&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--1. 前置通知--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:before</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;beforeMethod&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span>/&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!--2. 后置通知--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;afterMethod&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span>/&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!--3. 返回通知--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after-returning</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;afterReturningMethod&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span> <span class=\"hljs-attr\">returning</span>=<span class=\"hljs-string\">&quot;results&quot;</span>/&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!--4. 异常通知--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after-throwing</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;afterThrowingMethod&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span> <span class=\"hljs-attr\">throwing</span>=<span class=\"hljs-string\">&quot;ex&quot;</span>/&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!--5. 环绕通知--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:around</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;aroundMethod&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:aspect</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testXMLAOPAdd</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean-aop.xml&quot;</span>);<br>    org.example.xmlaop.<span class=\"hljs-type\">Calculator</span> <span class=\"hljs-variable\">calculator</span> <span class=\"hljs-operator\">=</span> context.getBean(org.example.xmlaop.Calculator.class);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********add()开始执行**********&quot;</span>);<br>    calculator.add(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********add()执行完毕**********&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********div()开始执行**********&quot;</span>);<br>    calculator.div(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;**********div()执行完毕**********&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>结果输出</p>\n<p><img src=\"/../images/springPart05/xml%E5%90%84%E7%A7%8D%E9%80%9A%E7%9F%A5%E6%B5%8B%E8%AF%95.png\"></p>\n"},{"title":"【study】Spring学习part06","abbrlink":"988b16ce","date":"2024-02-16T16:06:44.000Z","_content":"\n# Spring学习part06\n\n\n\nmacOS启动MySQL命令\n\n`sudo /usr/local/mysql/support-files/mysql.server start`\n\n\n\n## JdbcTemplate\n\n\n\n引入相关依赖\n\n``` xml\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jdbc</artifactId>\n    <version>6.1.2</version>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-test</artifactId>\n    <version>5.3.20</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.30</version>\n</dependency>\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.0.31</version>\n</dependency>\n```\n\n\n\n\n\n\n\n新建数据库`spring`\n\n``` sql\nCREATE TABLE `t_emp` (\n    `id` INT(11) NOT NULL AUTO_INCREMENT,\n    `name` VARCHAR(20) DEFAULT NULL COMMENT '姓名',\n    `age` INT(11) DEFAULT NULL COMMENT '年龄',\n    `sex` VARCHAR(2) DEFAULT NULL COMMENT '性别', \n    PRIMARY KEY (`id`)\n) ENGINE=INNODB DEFAULT CHARSET=utf8mb4;\n```\n\n\n\n新建jdbc相关配置`jdbc.properties`\n\n``` properties\njdbc.url=jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&useSSL=false\njdbc.driver=com.mysql.cj.jdbc.Driver\njdbc.user=root\njdbc.password=11111111\n```\n\n\n\n新建bean，`beans.xml`，并配置\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n    <!--引入外部属性文件, 创建数据源对象-->\n    <context:property-placeholder location=\"classpath:jdbc.properties\"/>\n    <bean class=\"com.alibaba.druid.pool.DruidDataSource\" id=\"druidDataSource\">\n        <property name=\"url\" value=\"${jdbc.url}\"/>\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n        <property name=\"username\" value=\"${jdbc.user}\"/>\n        <property name=\"password\" value=\"${jdbc.password}\"/>\n    </bean>\n\n    <!--创建jdbcTemplate对象, 注入数据源-->\n    <bean class=\"org.springframework.jdbc.core.JdbcTemplate\" id=\"jdbcTemplate\">\n        <property name=\"dataSource\" ref=\"druidDataSource\"/>\n    </bean>\n\n\n</beans>\n```\n\n\n\n### 1. CRUD操作\n\n\n\n#### 插入\n\n新建测试类`jdbc.JdbcTemplateTest.java`\n\n``` java\npackage org.example.jdbc;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n\n/**\n * Author: Promise\n * Date: 2024-02-19 18:50\n * Description:\n */\n\n@SpringJUnitConfig(locations = \"classpath:beans.xml\")\npublic class JdbcTemplateTest {\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    @Test\n    public void testUpdate1() {\n        // 1. 添加\n        // 1.1 编写SQL语句\n        String sql = \"INSERT INTO t_emp VALUES (NULL, ?, ?, ?)\";\n        // 1.2 调用jdbcTemplate方法, 传入相关参数\n        // int rows = jdbcTemplate.update(sql, \"张三\", 20, \"男\");  // 影响行数\n        // System.out.println(rows);\n\n        // Object[] role = {\"李四\", 30, \"女\"};  // 等价于上面写法\n        // System.out.println(jdbcTemplate.update(sql, role));\n\n        Object[] role = {\"王五\", 35, \"女\"};\n        System.out.println(jdbcTemplate.update(sql, role));\n    }\n}\n\n```\n\n\n\n新增一条查看MySQL结果\n\n![](../images/springPart06/新增数据MySQL结果.png)\n\n\n\n查看spring输出结果\n\n![新增数据spring结果](../images/springPart06/新增数据spring结果.png)\n\n\n\n多插入两条数据\n\n![MySQL新增几条数据](../images/springPart06/MySQL新增几条数据.png)\n\n\n\n#### 修改\n\n继续添加测试方法\n\n``` java\n@Test\npublic void testUpdate2() {\n    // 2. 修改\n    String sql = \"UPDATE t_emp SET name=? WHERE id=?\";\n    int rows = jdbcTemplate.update(sql, \"Wang Wu\", 3);\n    System.out.println(rows);\n}\n```\n\nMySQL结果如下\n\n![](../images/springPart06/修改MySQL结果.png)\n\n\n\n#### 删除\n\n添加删除测试方法\n\n``` java\n@Test\npublic void testUpdate3() {\n    // 3. 删除\n    String sql = \"DELETE from t_emp where id=?\";\n    int rows = jdbcTemplate.update(sql, 3);\n    System.out.println(rows);\n}\n```\n\n\n\n![](../images/springPart06/删除数据MySQL结果.png)\n\n\n\n#### 查询\n\n##### 查询：返回对象\n\n新建员工类`Emp.java`，并且生成`getter`、`setter`、`toString()`\n\n``` java\npackage org.example.jdbc;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\n/**\n * Date: 2024-02-26 21:03\n * Description:\n */\n\npublic class Emp {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String sex;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n\n    @Override\n    public String toString() {\n        return \"Emp{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", sex='\" + sex + '\\'' +\n                '}';\n    }\n}\n\n```\n\n\n\n###### 写法一：自行封装\n\n测试方法，查看id为1的用户相关信息\n\n``` java\n@Test\npublic void testReturnObject() {\n    // 4.1 查询: 返回对象   写法1\n    String sql = \"SELECT * FROM t_emp WHERE id=?\";\n    Object o = jdbcTemplate.queryForObject(sql, (rs, rowNum) -> {\n        Emp emp = new Emp();\n        emp.setName(rs.getString(\"name\"));\n        emp.setAge(rs.getInt(\"age\"));\n        emp.setSex(rs.getString(\"sex\"));\n        return emp;\n    }, 1);\n    System.out.println(o);\n}\n```\n\n使用的是`public <T> T queryForObject(String sql, RowMapper<T> rowMapper, @Nullable Object... args) throws DataAccessException`，使用lambda表达式。\n\n`RowMapper<T> rowMapper`接口实现源码如下\n\n``` java\npublic interface RowMapper<T> {\n    @Nullable\n    T mapRow(ResultSet rs, int rowNum) throws SQLException;\n}\n\n```\n\n-   `rs`是返回的结果\n-   `rowNum`是返回的行数\n\n![](../images/springPart06/返回对象类型.png)\n\n\n\n若不对相关属性赋值返回为`null`\n\n\n\n###### 写法二：使用BeanPropertyRowMapper\n\n``` java\n@Test\npublic void testReturnObject2() {\n    // 4.1 查询: 返回对象  写法2\n    String sql = \"SELECT * FROM t_emp WHERE id=?\";\n    Object o = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper<>(Emp.class), 1);\n    System.out.println(o);\n}\n```\n\n`BeanPropertyRowMapper`实现了相关方法，在参数中放入`Emp.class`可以直接映射到`Emp`实体类中。\n\n\n\n##### 查询：返回list\n\n查询所有表数据\n\n``` java\n@Test\npublic void testReturnList() {\n    // 4.2 查询: 返回List\n    String sql = \"SELECT * FROM t_emp\";\n    List<Emp> result = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Emp.class));\n    System.out.println(result);\n}\n```\n\n![](../images/springPart06/返回List类型.png)\n\n\n\n\n\n##### 查询：返回单个值\n\n查询共多少条记录\n\n```java\n@Test\npublic void testReturnValue() {\n    String sql = \"SELECT COUNT(*) FROM t_emp\";\n    Integer count = jdbcTemplate.queryForObject(sql, Integer.class);\n    System.out.println(count);\n}\n```\n\n\n\n\n\n## 事务\n\n\n\n### 编程式事务\n\n相关伪代码\n\n``` java\nConnection conn = ...;\ntry {\n\t// 开启事务： 关闭事务的自动提交；\n    conn.setAutoCommit(false);\n    \n    // 核心操作\n    // TODO\n    \n    // 提交事务\n    conn.commit();\n    \n} catch(Exception e) {\n\t// 回滚事务\n    conn.rollBack();\n} finally {\n\t// 释放数据库连接\n    conn.close();\n}\n```\n\n编程式实现事务的缺陷：\n\n-   细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己完成，比较繁琐。\n-   代码复用性不高：如果没有有效抽取出，每次实现功能都需要自己编写代码，代码并没有得到复用\n\n\n\n---\n\n不使用事务会产生的问题：demo\n\n\n\n### 声明式事务\n\n#### 基于注解的声明式事务\n\n\n\n需求：用户购买图书的时候，数据库中对书的数量进行变动，用户表对余额进行变动。\n\n创建两个表，`t_book`和`t_user`\n\n``` sql\nCREATE TABLE `t_book`(  \n    `book_id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n    `book_name` VARCHAR(20) DEFAULT NULL COMMENT '图书名称',\n    `price` INT(11) DEFAULT NULL COMMENT '价格',\n    `stock` INT(10) UNSIGNED DEFAULT NULL COMMENT '库存(无符号)',\n    PRIMARY KEY (`book_id`)\n)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 AUTO_INCREMENT=3;\n\n\nCREATE TABLE `t_user` (\n    `user_id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n    `username` VARCHAR(20) DEFAULT NULL COMMENT '用户名',\n    `balance` INT(10) UNSIGNED DEFAULT NULL COMMENT '余额(无符号)',\n    PRIMARY KEY (`user_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 AUTO_INCREMENT=2;\n\n```\n\n\n\n在图书表插入几条数据\n\n``` sql\nINSERT INTO `t_book` (`book_id`, `book_name`, `price`, `stock`)\nVALUES (1, '三体', 80, 100);\n\nINSERT INTO `t_book` (`book_id`, `book_name`, `price`, `stock`)\nVALUES (2, '流浪地球', 50, 200);\n```\n\n\n\n\n\n在用户表插入一条数据\n\n``` sql\nINSERT INTO `t_user` (`user_id`, `username`, `balance`)\nVALUES (1, 'admin', 50);\n```\n\n\n\n实现Controller层, Service层与DAO层\n\n#### Controller层\n\n``` java\npackage org.example.tx.controller;\n\nimport org.example.tx.service.BookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 14:51\n * Description:\n */\n\n@Controller\npublic class BookController {\n    @Autowired\n    private BookService bookService;\n\n    /**\n     * 购买书的方法\n     * @param bookId 图书id\n     * @param userId 用户id\n     * */\n    public void buyBook(Integer bookId, Integer userId) {\n        // 调用Service方法\n        bookService.buyBook(bookId, userId);\n    }\n}\n\n```\n\n\n\n\n\n#### Service层与实现类\n\n``` java\npackage org.example.tx.service;\n\npublic interface BookService {\n    public void buyBook(Integer bookId, Integer userId);\n}\n\n```\n\n\n\n``` java\npackage org.example.tx.service.impl;\n\nimport org.example.tx.dao.BookDao;\nimport org.example.tx.service.BookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 14:53\n * Description:\n */\n\n@Service\npublic class BookServiceImpl implements BookService {\n    @Autowired\n    private BookDao bookDao;\n\n    @Override\n    public void buyBook(Integer bookId, Integer userId) {\n        // 1. 根据图书id查询图书价格\n        Integer price = bookDao.getBookPriceByBookId(bookId);\n\n        // 2. 更新图书表的库存量\n        bookDao.updateStock(bookId);\n\n        // 3. 更新用户表的用户余额\n        bookDao.updateUserBalance(userId, price);\n    }\n}\n\n```\n\n\n\n\n\n\n\n#### DAO层与实现类\n\n```java\npackage org.example.tx.dao;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 14:53\n * Description:\n */\n\npublic interface BookDao {\n    Integer getBookPriceByBookId(Integer bookId);\n\n    void updateStock(Integer bookId);\n\n    void updateUserBalance(Integer userId, Integer price);\n}\n```\n\n\n\n```java\npackage org.example.tx.dao.impl;\n\nimport org.example.tx.dao.BookDao;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Repository;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 14:54\n * Description:\n */\n\n@Repository\npublic class BookDaoImpl implements BookDao {\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    @Override\n    public Integer getBookPriceByBookId(Integer bookId) {\n        String sql = \"SELECT price FROM t_book WHERE book_id=?\";\n        Integer price = jdbcTemplate.queryForObject(sql, Integer.class, bookId);\n        return price;\n    }\n\n    @Override\n    public void updateStock(Integer bookId) {\n        String sql = \"UPDATE t_book SET stock=stock-1 WHERE book_id=?\";\n        jdbcTemplate.update(sql, bookId);\n    }\n\n    @Override\n    public void updateUserBalance(Integer userId, Integer price) {\n        String sql = \"UPDATE t_user set balance=balance-? WHERE user_id=?\";\n        jdbcTemplate.update(sql, price, userId);\n    }\n}\n```\n\n\n\n#### 创建测试类\n\n``` java\nimport org.example.tx.controller.BookController;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 15:13\n * Description:\n */\n\n@SpringJUnitConfig(locations = \"classpath:beans.xml\")\npublic class TestBookTx {\n    @Autowired\n    private BookController bookController;\n\n    @Test\n    public void testBuyBook() {\n        bookController.buyBook(1, 1);\n    }\n}\n\n```\n\n\n\n图书表更新后结果\n\n![](../images/springPart06/图书表结果1.png)\n\n\n\n用户表更新后结果\n\n![用户表结果1](/Users/promise/Promise Code/blog/source/images/springPart06/用户表结果1.png)\n\n\n\n\n\n#### 当前存在问题\n\n新增一本书《三体2》，售价800元。\n\n``` sql\nINSERT INTO `t_book` (`book_id`, `book_name`, `price`, `stock`)\nVALUES (3, '三体2', 800, 100);\n```\n\n用户想购买《三体2》但是余额不足会发生什么\n\n``` java\n@Test\npublic void testBuyBook() {\n    bookController.buyBook(3, 1);\n}\n```\n\n\n\n报错信息如下：\n\n```\norg.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL [UPDATE t_user set balance=balance-? WHERE user_id=?]; Data truncation: BIGINT UNSIGNED value is out of range in '(`spring`.`t_user`.`balance` - 800)'\n\n```\n\n因为余额使用的是无符号数，此时余额还有420元不足以支付800元的书籍。在数据库中报错。\n\n\n\n但是图书表数量发生了变化\n\n![](../images/springPart06/图书表结果2.png)\n\n\n\n**所以在此需要添加事务进行操作**\n\n#### 添加事务\n\n配置bean，在`bean.xml`文件中，\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\n       http://www.springframework.org/schema/tx\n       http://www.springframework.org/schema/tx/spring-tx.xsd\">\n\n    <!--引入外部属性文件, 创建数据源对象-->\n    <context:property-placeholder location=\"classpath:jdbc.properties\"/>\n    <bean class=\"com.alibaba.druid.pool.DruidDataSource\" id=\"druidDataSource\">\n        <property name=\"url\" value=\"${jdbc.url}\"/>\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n        <property name=\"username\" value=\"${jdbc.user}\"/>\n        <property name=\"password\" value=\"${jdbc.password}\"/>\n    </bean>\n\n    <!--创建jdbcTemplate对象, 注入数据源-->\n    <bean class=\"org.springframework.jdbc.core.JdbcTemplate\" id=\"jdbcTemplate\">\n        <property name=\"dataSource\" ref=\"druidDataSource\"/>\n    </bean>\n\n\n    <context:component-scan base-package=\"org.example.tx\"/>\n\n    <bean class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\" id=\"transactionManager\">\n        <property name=\"dataSource\" ref=\"druidDataSource\"/>\n    </bean>\n    <!--\n        开启事务的注解驱动\n        通过注解@Transactional所标识的方法或标识的类中所有的方法, 都会被事务管理器管理事务\n    -->\n    <!--transaction-manager属性值是transactionManager, 如果事务管理器bean的id正好是默认值, 可以省略这个属性-->\n    <tx:annotation-driven transaction-manager=\"transactionManager\"/>\n</beans>\n```\n\n\n\n在实现类前加注解\n\n```java\n@Transactional\n@Override\npublic void buyBook(Integer bookId, Integer userId) {\n    // 1. 根据图书id查询图书价格\n    Integer price = bookDao.getBookPriceByBookId(bookId);\n\n    // 2. 更新图书表的库存量\n    bookDao.updateStock(bookId);\n\n    // 3. 更新用户表的用户余额\n    bookDao.updateUserBalance(userId, price);\n\n}\n```\n\n\n\n\n\n`@Transactional`注解标识的位置\n\n-   `@Transactional`标识在方法上，则只会影响该方法\n-   `@Transactional`标识在类上，则会影响类中的所有方法\n\n  \n\n#### @Transactional属性\n\n-   `readOnly`是否只读：如果设置为只读属性，只能进行查询操作，不能进行修改、添加、删除操作\n\n-   `timeout`超时（单位是秒）：在设置超时时间之内没有完成，抛出异常回滚。默认值`-1`（不超时）\n\n-   回滚策略：设置哪些异常不回滚，哪些异常进行回滚。\n\n    -   `rollbackFor`：需要设置一个Class类型对象\n    -   `rollbackForClassName`：需要设置一个字符串类型的全类名\n    -   `noRollbackFor`：需要设置一个Class类型对象\n    -   `noRollbackForClassName`：需要设置一个字符串类型的全类名\n\n-   `isolation`隔离级别：读问题（脏读、幻读、重复读等）\n\n    数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。\n\n    -   READ UNCOMMITTED：读未提交，允许Transaction01读取Transaction02未提交的修改\n    -   READ COMMITTED：读已提交，要求Transaction01只能读取Transaction02已提交的修改\n    -   REPEATABLE READ：可重复读，确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新\n    -   SERIALIZABLE：串行化，确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下\n\n    | 隔离级别         | 脏读 | 不可重复读 | 幻读 |\n    | ---------------- | ---- | ---------- | ---- |\n    | READ UNCOMMITTED | 有   | 有         | 有   |\n    | READ COMMITTED   | 无   | 有         | 有   |\n    | REPEATABLE READ  | 无   | 无         | 有   |\n    | SERIALIZABLE     | 无   | 无         | 无   |\n\n    \n\n    各种数据库产品对事务隔离级别支持程度\n\n    |     隔离级别     |  Oracle   |   MySQL   |\n    | :--------------: | :-------: | :-------: |\n    | READ UNCOMMITTED |     ❌     |     ✅     |\n    |  READ COMMITTED  | ✅（默认） |     ✅     |\n    | REPEATABLE READ  |     ❌     | ✅（默认） |\n    |   SERIALIZABLE   |     ✅     |     ✅     |\n\n    使用方式：`@Transactional(isolation = Isolation.READ_UNCOMMITTED)`\n\n-   `propagation`传播行为：事务方法之间的调用，事务该如何进行使用\n\n    什么是事务的传播行为？\n\n    在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，\n\n    事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。\n\n    一共有七种传播行为：\n\n    -   REQUIRED：支持当前事务，如果不存在就新建一个（默认）【没有就新建，有就加入】\n\n    -   SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行【有就加入，没有就不管了】\n\n    -   MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常【有就加入，没有就抛异常】\n\n    -   REQUIRES_NEW：开启一个新的事务，如果一个事务已经存任，则特这个存在的事务挂起 【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】\n\n    -   NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务【不支持事务，存在就挂起】\n\n    -   NEVER：以非事务方式运行，如果有事务存在，抛出异常【不支持事务，存在就抛异常】\n    -   NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样】。\n\n\n\n## 使用全注解配置事务\n\n创建配置类，同时需要注释掉`bean.xml`内所有`bean`标签内容，否则会引起冲突\n\n``` java\npackage org.example.tx.config;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.sql.DataSource;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 20:49\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"org.example.tx\")\n@EnableTransactionManagement\npublic class SpringConfig {\n    @Bean\n    public DataSource getDataSource() {\n        DruidDataSource druidDataSource = new DruidDataSource();\n        druidDataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n        druidDataSource.setUsername(\"root\");\n        druidDataSource.setPassword(\"11111111\");\n        druidDataSource.setUrl(\"jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&useSSL=false\");\n        return druidDataSource;\n    }\n\n    @Bean(name = \"jdbcTemplate\")\n    public JdbcTemplate getJdbcTemplate(DataSource dataSource) {\n        JdbcTemplate jdbcTemplate = new JdbcTemplate();\n        jdbcTemplate.setDataSource(dataSource);\n        return jdbcTemplate;\n    }\n\n    @Bean\n    public DataSourceTransactionManager getDataSourceTransactionManager(DataSource dataSource) {\n        DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager();\n        dataSourceTransactionManager.setDataSource(dataSource);\n        return dataSourceTransactionManager;\n    }\n\n}\n\n```\n\n","source":"_posts/【study】Spring学习part06.md","raw":"---\ntitle: 【study】Spring学习part06\ntags:\n  - Study\n  - Java\n  - Spring框架\nabbrlink: 988b16ce\ndate: 2024-02-17 00:06:44\n---\n\n# Spring学习part06\n\n\n\nmacOS启动MySQL命令\n\n`sudo /usr/local/mysql/support-files/mysql.server start`\n\n\n\n## JdbcTemplate\n\n\n\n引入相关依赖\n\n``` xml\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jdbc</artifactId>\n    <version>6.1.2</version>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-test</artifactId>\n    <version>5.3.20</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.30</version>\n</dependency>\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.0.31</version>\n</dependency>\n```\n\n\n\n\n\n\n\n新建数据库`spring`\n\n``` sql\nCREATE TABLE `t_emp` (\n    `id` INT(11) NOT NULL AUTO_INCREMENT,\n    `name` VARCHAR(20) DEFAULT NULL COMMENT '姓名',\n    `age` INT(11) DEFAULT NULL COMMENT '年龄',\n    `sex` VARCHAR(2) DEFAULT NULL COMMENT '性别', \n    PRIMARY KEY (`id`)\n) ENGINE=INNODB DEFAULT CHARSET=utf8mb4;\n```\n\n\n\n新建jdbc相关配置`jdbc.properties`\n\n``` properties\njdbc.url=jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&useSSL=false\njdbc.driver=com.mysql.cj.jdbc.Driver\njdbc.user=root\njdbc.password=11111111\n```\n\n\n\n新建bean，`beans.xml`，并配置\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n    <!--引入外部属性文件, 创建数据源对象-->\n    <context:property-placeholder location=\"classpath:jdbc.properties\"/>\n    <bean class=\"com.alibaba.druid.pool.DruidDataSource\" id=\"druidDataSource\">\n        <property name=\"url\" value=\"${jdbc.url}\"/>\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n        <property name=\"username\" value=\"${jdbc.user}\"/>\n        <property name=\"password\" value=\"${jdbc.password}\"/>\n    </bean>\n\n    <!--创建jdbcTemplate对象, 注入数据源-->\n    <bean class=\"org.springframework.jdbc.core.JdbcTemplate\" id=\"jdbcTemplate\">\n        <property name=\"dataSource\" ref=\"druidDataSource\"/>\n    </bean>\n\n\n</beans>\n```\n\n\n\n### 1. CRUD操作\n\n\n\n#### 插入\n\n新建测试类`jdbc.JdbcTemplateTest.java`\n\n``` java\npackage org.example.jdbc;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n\n/**\n * Author: Promise\n * Date: 2024-02-19 18:50\n * Description:\n */\n\n@SpringJUnitConfig(locations = \"classpath:beans.xml\")\npublic class JdbcTemplateTest {\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    @Test\n    public void testUpdate1() {\n        // 1. 添加\n        // 1.1 编写SQL语句\n        String sql = \"INSERT INTO t_emp VALUES (NULL, ?, ?, ?)\";\n        // 1.2 调用jdbcTemplate方法, 传入相关参数\n        // int rows = jdbcTemplate.update(sql, \"张三\", 20, \"男\");  // 影响行数\n        // System.out.println(rows);\n\n        // Object[] role = {\"李四\", 30, \"女\"};  // 等价于上面写法\n        // System.out.println(jdbcTemplate.update(sql, role));\n\n        Object[] role = {\"王五\", 35, \"女\"};\n        System.out.println(jdbcTemplate.update(sql, role));\n    }\n}\n\n```\n\n\n\n新增一条查看MySQL结果\n\n![](../images/springPart06/新增数据MySQL结果.png)\n\n\n\n查看spring输出结果\n\n![新增数据spring结果](../images/springPart06/新增数据spring结果.png)\n\n\n\n多插入两条数据\n\n![MySQL新增几条数据](../images/springPart06/MySQL新增几条数据.png)\n\n\n\n#### 修改\n\n继续添加测试方法\n\n``` java\n@Test\npublic void testUpdate2() {\n    // 2. 修改\n    String sql = \"UPDATE t_emp SET name=? WHERE id=?\";\n    int rows = jdbcTemplate.update(sql, \"Wang Wu\", 3);\n    System.out.println(rows);\n}\n```\n\nMySQL结果如下\n\n![](../images/springPart06/修改MySQL结果.png)\n\n\n\n#### 删除\n\n添加删除测试方法\n\n``` java\n@Test\npublic void testUpdate3() {\n    // 3. 删除\n    String sql = \"DELETE from t_emp where id=?\";\n    int rows = jdbcTemplate.update(sql, 3);\n    System.out.println(rows);\n}\n```\n\n\n\n![](../images/springPart06/删除数据MySQL结果.png)\n\n\n\n#### 查询\n\n##### 查询：返回对象\n\n新建员工类`Emp.java`，并且生成`getter`、`setter`、`toString()`\n\n``` java\npackage org.example.jdbc;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\n/**\n * Date: 2024-02-26 21:03\n * Description:\n */\n\npublic class Emp {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String sex;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n\n    @Override\n    public String toString() {\n        return \"Emp{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", sex='\" + sex + '\\'' +\n                '}';\n    }\n}\n\n```\n\n\n\n###### 写法一：自行封装\n\n测试方法，查看id为1的用户相关信息\n\n``` java\n@Test\npublic void testReturnObject() {\n    // 4.1 查询: 返回对象   写法1\n    String sql = \"SELECT * FROM t_emp WHERE id=?\";\n    Object o = jdbcTemplate.queryForObject(sql, (rs, rowNum) -> {\n        Emp emp = new Emp();\n        emp.setName(rs.getString(\"name\"));\n        emp.setAge(rs.getInt(\"age\"));\n        emp.setSex(rs.getString(\"sex\"));\n        return emp;\n    }, 1);\n    System.out.println(o);\n}\n```\n\n使用的是`public <T> T queryForObject(String sql, RowMapper<T> rowMapper, @Nullable Object... args) throws DataAccessException`，使用lambda表达式。\n\n`RowMapper<T> rowMapper`接口实现源码如下\n\n``` java\npublic interface RowMapper<T> {\n    @Nullable\n    T mapRow(ResultSet rs, int rowNum) throws SQLException;\n}\n\n```\n\n-   `rs`是返回的结果\n-   `rowNum`是返回的行数\n\n![](../images/springPart06/返回对象类型.png)\n\n\n\n若不对相关属性赋值返回为`null`\n\n\n\n###### 写法二：使用BeanPropertyRowMapper\n\n``` java\n@Test\npublic void testReturnObject2() {\n    // 4.1 查询: 返回对象  写法2\n    String sql = \"SELECT * FROM t_emp WHERE id=?\";\n    Object o = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper<>(Emp.class), 1);\n    System.out.println(o);\n}\n```\n\n`BeanPropertyRowMapper`实现了相关方法，在参数中放入`Emp.class`可以直接映射到`Emp`实体类中。\n\n\n\n##### 查询：返回list\n\n查询所有表数据\n\n``` java\n@Test\npublic void testReturnList() {\n    // 4.2 查询: 返回List\n    String sql = \"SELECT * FROM t_emp\";\n    List<Emp> result = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Emp.class));\n    System.out.println(result);\n}\n```\n\n![](../images/springPart06/返回List类型.png)\n\n\n\n\n\n##### 查询：返回单个值\n\n查询共多少条记录\n\n```java\n@Test\npublic void testReturnValue() {\n    String sql = \"SELECT COUNT(*) FROM t_emp\";\n    Integer count = jdbcTemplate.queryForObject(sql, Integer.class);\n    System.out.println(count);\n}\n```\n\n\n\n\n\n## 事务\n\n\n\n### 编程式事务\n\n相关伪代码\n\n``` java\nConnection conn = ...;\ntry {\n\t// 开启事务： 关闭事务的自动提交；\n    conn.setAutoCommit(false);\n    \n    // 核心操作\n    // TODO\n    \n    // 提交事务\n    conn.commit();\n    \n} catch(Exception e) {\n\t// 回滚事务\n    conn.rollBack();\n} finally {\n\t// 释放数据库连接\n    conn.close();\n}\n```\n\n编程式实现事务的缺陷：\n\n-   细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己完成，比较繁琐。\n-   代码复用性不高：如果没有有效抽取出，每次实现功能都需要自己编写代码，代码并没有得到复用\n\n\n\n---\n\n不使用事务会产生的问题：demo\n\n\n\n### 声明式事务\n\n#### 基于注解的声明式事务\n\n\n\n需求：用户购买图书的时候，数据库中对书的数量进行变动，用户表对余额进行变动。\n\n创建两个表，`t_book`和`t_user`\n\n``` sql\nCREATE TABLE `t_book`(  \n    `book_id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n    `book_name` VARCHAR(20) DEFAULT NULL COMMENT '图书名称',\n    `price` INT(11) DEFAULT NULL COMMENT '价格',\n    `stock` INT(10) UNSIGNED DEFAULT NULL COMMENT '库存(无符号)',\n    PRIMARY KEY (`book_id`)\n)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 AUTO_INCREMENT=3;\n\n\nCREATE TABLE `t_user` (\n    `user_id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n    `username` VARCHAR(20) DEFAULT NULL COMMENT '用户名',\n    `balance` INT(10) UNSIGNED DEFAULT NULL COMMENT '余额(无符号)',\n    PRIMARY KEY (`user_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 AUTO_INCREMENT=2;\n\n```\n\n\n\n在图书表插入几条数据\n\n``` sql\nINSERT INTO `t_book` (`book_id`, `book_name`, `price`, `stock`)\nVALUES (1, '三体', 80, 100);\n\nINSERT INTO `t_book` (`book_id`, `book_name`, `price`, `stock`)\nVALUES (2, '流浪地球', 50, 200);\n```\n\n\n\n\n\n在用户表插入一条数据\n\n``` sql\nINSERT INTO `t_user` (`user_id`, `username`, `balance`)\nVALUES (1, 'admin', 50);\n```\n\n\n\n实现Controller层, Service层与DAO层\n\n#### Controller层\n\n``` java\npackage org.example.tx.controller;\n\nimport org.example.tx.service.BookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 14:51\n * Description:\n */\n\n@Controller\npublic class BookController {\n    @Autowired\n    private BookService bookService;\n\n    /**\n     * 购买书的方法\n     * @param bookId 图书id\n     * @param userId 用户id\n     * */\n    public void buyBook(Integer bookId, Integer userId) {\n        // 调用Service方法\n        bookService.buyBook(bookId, userId);\n    }\n}\n\n```\n\n\n\n\n\n#### Service层与实现类\n\n``` java\npackage org.example.tx.service;\n\npublic interface BookService {\n    public void buyBook(Integer bookId, Integer userId);\n}\n\n```\n\n\n\n``` java\npackage org.example.tx.service.impl;\n\nimport org.example.tx.dao.BookDao;\nimport org.example.tx.service.BookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 14:53\n * Description:\n */\n\n@Service\npublic class BookServiceImpl implements BookService {\n    @Autowired\n    private BookDao bookDao;\n\n    @Override\n    public void buyBook(Integer bookId, Integer userId) {\n        // 1. 根据图书id查询图书价格\n        Integer price = bookDao.getBookPriceByBookId(bookId);\n\n        // 2. 更新图书表的库存量\n        bookDao.updateStock(bookId);\n\n        // 3. 更新用户表的用户余额\n        bookDao.updateUserBalance(userId, price);\n    }\n}\n\n```\n\n\n\n\n\n\n\n#### DAO层与实现类\n\n```java\npackage org.example.tx.dao;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 14:53\n * Description:\n */\n\npublic interface BookDao {\n    Integer getBookPriceByBookId(Integer bookId);\n\n    void updateStock(Integer bookId);\n\n    void updateUserBalance(Integer userId, Integer price);\n}\n```\n\n\n\n```java\npackage org.example.tx.dao.impl;\n\nimport org.example.tx.dao.BookDao;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Repository;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 14:54\n * Description:\n */\n\n@Repository\npublic class BookDaoImpl implements BookDao {\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    @Override\n    public Integer getBookPriceByBookId(Integer bookId) {\n        String sql = \"SELECT price FROM t_book WHERE book_id=?\";\n        Integer price = jdbcTemplate.queryForObject(sql, Integer.class, bookId);\n        return price;\n    }\n\n    @Override\n    public void updateStock(Integer bookId) {\n        String sql = \"UPDATE t_book SET stock=stock-1 WHERE book_id=?\";\n        jdbcTemplate.update(sql, bookId);\n    }\n\n    @Override\n    public void updateUserBalance(Integer userId, Integer price) {\n        String sql = \"UPDATE t_user set balance=balance-? WHERE user_id=?\";\n        jdbcTemplate.update(sql, price, userId);\n    }\n}\n```\n\n\n\n#### 创建测试类\n\n``` java\nimport org.example.tx.controller.BookController;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 15:13\n * Description:\n */\n\n@SpringJUnitConfig(locations = \"classpath:beans.xml\")\npublic class TestBookTx {\n    @Autowired\n    private BookController bookController;\n\n    @Test\n    public void testBuyBook() {\n        bookController.buyBook(1, 1);\n    }\n}\n\n```\n\n\n\n图书表更新后结果\n\n![](../images/springPart06/图书表结果1.png)\n\n\n\n用户表更新后结果\n\n![用户表结果1](/Users/promise/Promise Code/blog/source/images/springPart06/用户表结果1.png)\n\n\n\n\n\n#### 当前存在问题\n\n新增一本书《三体2》，售价800元。\n\n``` sql\nINSERT INTO `t_book` (`book_id`, `book_name`, `price`, `stock`)\nVALUES (3, '三体2', 800, 100);\n```\n\n用户想购买《三体2》但是余额不足会发生什么\n\n``` java\n@Test\npublic void testBuyBook() {\n    bookController.buyBook(3, 1);\n}\n```\n\n\n\n报错信息如下：\n\n```\norg.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL [UPDATE t_user set balance=balance-? WHERE user_id=?]; Data truncation: BIGINT UNSIGNED value is out of range in '(`spring`.`t_user`.`balance` - 800)'\n\n```\n\n因为余额使用的是无符号数，此时余额还有420元不足以支付800元的书籍。在数据库中报错。\n\n\n\n但是图书表数量发生了变化\n\n![](../images/springPart06/图书表结果2.png)\n\n\n\n**所以在此需要添加事务进行操作**\n\n#### 添加事务\n\n配置bean，在`bean.xml`文件中，\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\n       http://www.springframework.org/schema/tx\n       http://www.springframework.org/schema/tx/spring-tx.xsd\">\n\n    <!--引入外部属性文件, 创建数据源对象-->\n    <context:property-placeholder location=\"classpath:jdbc.properties\"/>\n    <bean class=\"com.alibaba.druid.pool.DruidDataSource\" id=\"druidDataSource\">\n        <property name=\"url\" value=\"${jdbc.url}\"/>\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n        <property name=\"username\" value=\"${jdbc.user}\"/>\n        <property name=\"password\" value=\"${jdbc.password}\"/>\n    </bean>\n\n    <!--创建jdbcTemplate对象, 注入数据源-->\n    <bean class=\"org.springframework.jdbc.core.JdbcTemplate\" id=\"jdbcTemplate\">\n        <property name=\"dataSource\" ref=\"druidDataSource\"/>\n    </bean>\n\n\n    <context:component-scan base-package=\"org.example.tx\"/>\n\n    <bean class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\" id=\"transactionManager\">\n        <property name=\"dataSource\" ref=\"druidDataSource\"/>\n    </bean>\n    <!--\n        开启事务的注解驱动\n        通过注解@Transactional所标识的方法或标识的类中所有的方法, 都会被事务管理器管理事务\n    -->\n    <!--transaction-manager属性值是transactionManager, 如果事务管理器bean的id正好是默认值, 可以省略这个属性-->\n    <tx:annotation-driven transaction-manager=\"transactionManager\"/>\n</beans>\n```\n\n\n\n在实现类前加注解\n\n```java\n@Transactional\n@Override\npublic void buyBook(Integer bookId, Integer userId) {\n    // 1. 根据图书id查询图书价格\n    Integer price = bookDao.getBookPriceByBookId(bookId);\n\n    // 2. 更新图书表的库存量\n    bookDao.updateStock(bookId);\n\n    // 3. 更新用户表的用户余额\n    bookDao.updateUserBalance(userId, price);\n\n}\n```\n\n\n\n\n\n`@Transactional`注解标识的位置\n\n-   `@Transactional`标识在方法上，则只会影响该方法\n-   `@Transactional`标识在类上，则会影响类中的所有方法\n\n  \n\n#### @Transactional属性\n\n-   `readOnly`是否只读：如果设置为只读属性，只能进行查询操作，不能进行修改、添加、删除操作\n\n-   `timeout`超时（单位是秒）：在设置超时时间之内没有完成，抛出异常回滚。默认值`-1`（不超时）\n\n-   回滚策略：设置哪些异常不回滚，哪些异常进行回滚。\n\n    -   `rollbackFor`：需要设置一个Class类型对象\n    -   `rollbackForClassName`：需要设置一个字符串类型的全类名\n    -   `noRollbackFor`：需要设置一个Class类型对象\n    -   `noRollbackForClassName`：需要设置一个字符串类型的全类名\n\n-   `isolation`隔离级别：读问题（脏读、幻读、重复读等）\n\n    数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。\n\n    -   READ UNCOMMITTED：读未提交，允许Transaction01读取Transaction02未提交的修改\n    -   READ COMMITTED：读已提交，要求Transaction01只能读取Transaction02已提交的修改\n    -   REPEATABLE READ：可重复读，确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新\n    -   SERIALIZABLE：串行化，确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下\n\n    | 隔离级别         | 脏读 | 不可重复读 | 幻读 |\n    | ---------------- | ---- | ---------- | ---- |\n    | READ UNCOMMITTED | 有   | 有         | 有   |\n    | READ COMMITTED   | 无   | 有         | 有   |\n    | REPEATABLE READ  | 无   | 无         | 有   |\n    | SERIALIZABLE     | 无   | 无         | 无   |\n\n    \n\n    各种数据库产品对事务隔离级别支持程度\n\n    |     隔离级别     |  Oracle   |   MySQL   |\n    | :--------------: | :-------: | :-------: |\n    | READ UNCOMMITTED |     ❌     |     ✅     |\n    |  READ COMMITTED  | ✅（默认） |     ✅     |\n    | REPEATABLE READ  |     ❌     | ✅（默认） |\n    |   SERIALIZABLE   |     ✅     |     ✅     |\n\n    使用方式：`@Transactional(isolation = Isolation.READ_UNCOMMITTED)`\n\n-   `propagation`传播行为：事务方法之间的调用，事务该如何进行使用\n\n    什么是事务的传播行为？\n\n    在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，\n\n    事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。\n\n    一共有七种传播行为：\n\n    -   REQUIRED：支持当前事务，如果不存在就新建一个（默认）【没有就新建，有就加入】\n\n    -   SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行【有就加入，没有就不管了】\n\n    -   MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常【有就加入，没有就抛异常】\n\n    -   REQUIRES_NEW：开启一个新的事务，如果一个事务已经存任，则特这个存在的事务挂起 【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】\n\n    -   NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务【不支持事务，存在就挂起】\n\n    -   NEVER：以非事务方式运行，如果有事务存在，抛出异常【不支持事务，存在就抛异常】\n    -   NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样】。\n\n\n\n## 使用全注解配置事务\n\n创建配置类，同时需要注释掉`bean.xml`内所有`bean`标签内容，否则会引起冲突\n\n``` java\npackage org.example.tx.config;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.sql.DataSource;\n\n/**\n * Author: Promise\n * Date: 2024-02-29 20:49\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"org.example.tx\")\n@EnableTransactionManagement\npublic class SpringConfig {\n    @Bean\n    public DataSource getDataSource() {\n        DruidDataSource druidDataSource = new DruidDataSource();\n        druidDataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n        druidDataSource.setUsername(\"root\");\n        druidDataSource.setPassword(\"11111111\");\n        druidDataSource.setUrl(\"jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&useSSL=false\");\n        return druidDataSource;\n    }\n\n    @Bean(name = \"jdbcTemplate\")\n    public JdbcTemplate getJdbcTemplate(DataSource dataSource) {\n        JdbcTemplate jdbcTemplate = new JdbcTemplate();\n        jdbcTemplate.setDataSource(dataSource);\n        return jdbcTemplate;\n    }\n\n    @Bean\n    public DataSourceTransactionManager getDataSourceTransactionManager(DataSource dataSource) {\n        DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager();\n        dataSourceTransactionManager.setDataSource(dataSource);\n        return dataSourceTransactionManager;\n    }\n\n}\n\n```\n\n","slug":"【study】Spring学习part06","published":1,"updated":"2024-03-01T09:01:46.976Z","_id":"clt88t16800005kz8cpnp3i6i","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Spring学习part06\"><a href=\"#Spring学习part06\" class=\"headerlink\" title=\"Spring学习part06\"></a>Spring学习part06</h1><p>macOS启动MySQL命令</p>\n<p><code>sudo /usr/local/mysql/support-files/mysql.server start</code></p>\n<h2 id=\"JdbcTemplate\"><a href=\"#JdbcTemplate\" class=\"headerlink\" title=\"JdbcTemplate\"></a>JdbcTemplate</h2><p>引入相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.3.20<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.31<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>新建数据库<code>spring</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `t_emp` (<br>    `id` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>    `name` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;姓名&#x27;</span>,<br>    `age` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;年龄&#x27;</span>,<br>    `sex` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;性别&#x27;</span>, <br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class=\"hljs-operator\">=</span>INNODB <span class=\"hljs-keyword\">DEFAULT</span> CHARSET<span class=\"hljs-operator\">=</span>utf8mb4;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建jdbc相关配置<code>jdbc.properties</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">jdbc.url</span>=<span class=\"hljs-string\">jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false</span><br><span class=\"hljs-attr\">jdbc.driver</span>=<span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br><span class=\"hljs-attr\">jdbc.user</span>=<span class=\"hljs-string\">root</span><br><span class=\"hljs-attr\">jdbc.password</span>=<span class=\"hljs-string\">11111111</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建bean，<code>beans.xml</code>，并配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--引入外部属性文件, 创建数据源对象--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:property-placeholder</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--创建jdbcTemplate对象, 注入数据源--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-CRUD操作\"><a href=\"#1-CRUD操作\" class=\"headerlink\" title=\"1. CRUD操作\"></a>1. CRUD操作</h3><h4 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h4><p>新建测试类<code>jdbc.JdbcTemplateTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.jdbc;<br><br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-19 18:50</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JdbcTemplateTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdate1</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 1. 添加</span><br>        <span class=\"hljs-comment\">// 1.1 编写SQL语句</span><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;INSERT INTO t_emp VALUES (NULL, ?, ?, ?)&quot;</span>;<br>        <span class=\"hljs-comment\">// 1.2 调用jdbcTemplate方法, 传入相关参数</span><br>        <span class=\"hljs-comment\">// int rows = jdbcTemplate.update(sql, &quot;张三&quot;, 20, &quot;男&quot;);  // 影响行数</span><br>        <span class=\"hljs-comment\">// System.out.println(rows);</span><br><br>        <span class=\"hljs-comment\">// Object[] role = &#123;&quot;李四&quot;, 30, &quot;女&quot;&#125;;  // 等价于上面写法</span><br>        <span class=\"hljs-comment\">// System.out.println(jdbcTemplate.update(sql, role));</span><br><br>        Object[] role = &#123;<span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-string\">&quot;女&quot;</span>&#125;;<br>        System.out.println(jdbcTemplate.update(sql, role));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>新增一条查看MySQL结果</p>\n<p><img src=\"/../images/springPart06/%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AEMySQL%E7%BB%93%E6%9E%9C.png\"></p>\n<p>查看spring输出结果</p>\n<p><img src=\"/../images/springPart06/%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AEspring%E7%BB%93%E6%9E%9C.png\" alt=\"新增数据spring结果\"></p>\n<p>多插入两条数据</p>\n<p><img src=\"/../images/springPart06/MySQL%E6%96%B0%E5%A2%9E%E5%87%A0%E6%9D%A1%E6%95%B0%E6%8D%AE.png\" alt=\"MySQL新增几条数据\"></p>\n<h4 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h4><p>继续添加测试方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdate2</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 2. 修改</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;UPDATE t_emp SET name=? WHERE id=?&quot;</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rows</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.update(sql, <span class=\"hljs-string\">&quot;Wang Wu&quot;</span>, <span class=\"hljs-number\">3</span>);<br>    System.out.println(rows);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>MySQL结果如下</p>\n<p><img src=\"/../images/springPart06/%E4%BF%AE%E6%94%B9MySQL%E7%BB%93%E6%9E%9C.png\"></p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>添加删除测试方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdate3</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 3. 删除</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;DELETE from t_emp where id=?&quot;</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rows</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.update(sql, <span class=\"hljs-number\">3</span>);<br>    System.out.println(rows);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/../images/springPart06/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AEMySQL%E7%BB%93%E6%9E%9C.png\"></p>\n<h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><h5 id=\"查询：返回对象\"><a href=\"#查询：返回对象\" class=\"headerlink\" title=\"查询：返回对象\"></a>查询：返回对象</h5><p>新建员工类<code>Emp.java</code>，并且生成<code>getter</code>、<code>setter</code>、<code>toString()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.jdbc;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Date: 2024-02-26 21:03</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Emp</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Integer id;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> Integer age;<br>    <span class=\"hljs-keyword\">private</span> String sex;<br><br>    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">getId</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> id;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setId</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.id = id;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(Integer age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getSex</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> sex;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setSex</span><span class=\"hljs-params\">(String sex)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.sex = sex;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Emp&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;id=&quot;</span> + id +<br>                <span class=\"hljs-string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>                <span class=\"hljs-string\">&quot;, sex=&#x27;&quot;</span> + sex + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"写法一：自行封装\"><a href=\"#写法一：自行封装\" class=\"headerlink\" title=\"写法一：自行封装\"></a>写法一：自行封装</h6><p>测试方法，查看id为1的用户相关信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testReturnObject</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 4.1 查询: 返回对象   写法1</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;SELECT * FROM t_emp WHERE id=?&quot;</span>;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.queryForObject(sql, (rs, rowNum) -&gt; &#123;<br>        <span class=\"hljs-type\">Emp</span> <span class=\"hljs-variable\">emp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Emp</span>();<br>        emp.setName(rs.getString(<span class=\"hljs-string\">&quot;name&quot;</span>));<br>        emp.setAge(rs.getInt(<span class=\"hljs-string\">&quot;age&quot;</span>));<br>        emp.setSex(rs.getString(<span class=\"hljs-string\">&quot;sex&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> emp;<br>    &#125;, <span class=\"hljs-number\">1</span>);<br>    System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用的是<code>public &lt;T&gt; T queryForObject(String sql, RowMapper&lt;T&gt; rowMapper, @Nullable Object... args) throws DataAccessException</code>，使用lambda表达式。</p>\n<p><code>RowMapper&lt;T&gt; rowMapper</code>接口实现源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">RowMapper</span>&lt;T&gt; &#123;<br>    <span class=\"hljs-meta\">@Nullable</span><br>    T <span class=\"hljs-title function_\">mapRow</span><span class=\"hljs-params\">(ResultSet rs, <span class=\"hljs-type\">int</span> rowNum)</span> <span class=\"hljs-keyword\">throws</span> SQLException;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>rs</code>是返回的结果</li>\n<li><code>rowNum</code>是返回的行数</li>\n</ul>\n<p><img src=\"/../images/springPart06/%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B.png\"></p>\n<p>若不对相关属性赋值返回为<code>null</code></p>\n<h6 id=\"写法二：使用BeanPropertyRowMapper\"><a href=\"#写法二：使用BeanPropertyRowMapper\" class=\"headerlink\" title=\"写法二：使用BeanPropertyRowMapper\"></a>写法二：使用BeanPropertyRowMapper</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testReturnObject2</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 4.1 查询: 返回对象  写法2</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;SELECT * FROM t_emp WHERE id=?&quot;</span>;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.queryForObject(sql, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class), <span class=\"hljs-number\">1</span>);<br>    System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>BeanPropertyRowMapper</code>实现了相关方法，在参数中放入<code>Emp.class</code>可以直接映射到<code>Emp</code>实体类中。</p>\n<h5 id=\"查询：返回list\"><a href=\"#查询：返回list\" class=\"headerlink\" title=\"查询：返回list\"></a>查询：返回list</h5><p>查询所有表数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testReturnList</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 4.2 查询: 返回List</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;SELECT * FROM t_emp&quot;</span>;<br>    List&lt;Emp&gt; result = jdbcTemplate.query(sql, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springPart06/%E8%BF%94%E5%9B%9EList%E7%B1%BB%E5%9E%8B.png\"></p>\n<h5 id=\"查询：返回单个值\"><a href=\"#查询：返回单个值\" class=\"headerlink\" title=\"查询：返回单个值\"></a>查询：返回单个值</h5><p>查询共多少条记录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testReturnValue</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;SELECT COUNT(*) FROM t_emp&quot;</span>;<br>    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.queryForObject(sql, Integer.class);<br>    System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h3 id=\"编程式事务\"><a href=\"#编程式事务\" class=\"headerlink\" title=\"编程式事务\"></a>编程式事务</h3><p>相关伪代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">conn</span> <span class=\"hljs-operator\">=</span> ...;<br><span class=\"hljs-keyword\">try</span> &#123;<br>\t<span class=\"hljs-comment\">// 开启事务： 关闭事务的自动提交；</span><br>    conn.setAutoCommit(<span class=\"hljs-literal\">false</span>);<br>    <br>    <span class=\"hljs-comment\">// 核心操作</span><br>    <span class=\"hljs-comment\">// TODO</span><br>    <br>    <span class=\"hljs-comment\">// 提交事务</span><br>    conn.commit();<br>    <br>&#125; <span class=\"hljs-keyword\">catch</span>(Exception e) &#123;<br>\t<span class=\"hljs-comment\">// 回滚事务</span><br>    conn.rollBack();<br>&#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>\t<span class=\"hljs-comment\">// 释放数据库连接</span><br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>编程式实现事务的缺陷：</p>\n<ul>\n<li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己完成，比较繁琐。</li>\n<li>代码复用性不高：如果没有有效抽取出，每次实现功能都需要自己编写代码，代码并没有得到复用</li>\n</ul>\n<hr>\n<p>不使用事务会产生的问题：demo</p>\n<h3 id=\"声明式事务\"><a href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h3><h4 id=\"基于注解的声明式事务\"><a href=\"#基于注解的声明式事务\" class=\"headerlink\" title=\"基于注解的声明式事务\"></a>基于注解的声明式事务</h4><p>需求：用户购买图书的时候，数据库中对书的数量进行变动，用户表对余额进行变动。</p>\n<p>创建两个表，<code>t_book</code>和<code>t_user</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `t_book`(  <br>    `book_id` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"hljs-string\">&#x27;主键&#x27;</span>,<br>    `book_name` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;图书名称&#x27;</span>,<br>    `price` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;价格&#x27;</span>,<br>    `stock` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">10</span>) UNSIGNED <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;库存(无符号)&#x27;</span>,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`book_id`)<br>)ENGINE<span class=\"hljs-operator\">=</span>InnoDB <span class=\"hljs-keyword\">DEFAULT</span> CHARSET<span class=\"hljs-operator\">=</span>utf8mb4 AUTO_INCREMENT<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span>;<br><br><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `t_user` (<br>    `user_id` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"hljs-string\">&#x27;主键&#x27;</span>,<br>    `username` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;用户名&#x27;</span>,<br>    `balance` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">10</span>) UNSIGNED <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;余额(无符号)&#x27;</span>,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`user_id`)<br>) ENGINE<span class=\"hljs-operator\">=</span>InnoDB <span class=\"hljs-keyword\">DEFAULT</span> CHARSET<span class=\"hljs-operator\">=</span>utf8mb4 AUTO_INCREMENT<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span>;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>在图书表插入几条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t_book` (`book_id`, `book_name`, `price`, `stock`)<br><span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;三体&#x27;</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">100</span>);<br><br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t_book` (`book_id`, `book_name`, `price`, `stock`)<br><span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;流浪地球&#x27;</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">200</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>在用户表插入一条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t_user` (`user_id`, `username`, `balance`)<br><span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-number\">50</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>实现Controller层, Service层与DAO层</p>\n<h4 id=\"Controller层\"><a href=\"#Controller层\" class=\"headerlink\" title=\"Controller层\"></a>Controller层</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.tx.service.BookService;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 14:51</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookController</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> BookService bookService;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 购买书的方法</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> bookId 图书id</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> userId 用户id</span><br><span class=\"hljs-comment\">     * */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">buyBook</span><span class=\"hljs-params\">(Integer bookId, Integer userId)</span> &#123;<br>        <span class=\"hljs-comment\">// 调用Service方法</span><br>        bookService.buyBook(bookId, userId);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"Service层与实现类\"><a href=\"#Service层与实现类\" class=\"headerlink\" title=\"Service层与实现类\"></a>Service层与实现类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.service;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">BookService</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">buyBook</span><span class=\"hljs-params\">(Integer bookId, Integer userId)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.service.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.tx.dao.BookDao;<br><span class=\"hljs-keyword\">import</span> org.example.tx.service.BookService;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 14:53</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BookService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> BookDao bookDao;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">buyBook</span><span class=\"hljs-params\">(Integer bookId, Integer userId)</span> &#123;<br>        <span class=\"hljs-comment\">// 1. 根据图书id查询图书价格</span><br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> bookDao.getBookPriceByBookId(bookId);<br><br>        <span class=\"hljs-comment\">// 2. 更新图书表的库存量</span><br>        bookDao.updateStock(bookId);<br><br>        <span class=\"hljs-comment\">// 3. 更新用户表的用户余额</span><br>        bookDao.updateUserBalance(userId, price);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"DAO层与实现类\"><a href=\"#DAO层与实现类\" class=\"headerlink\" title=\"DAO层与实现类\"></a>DAO层与实现类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.dao;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 14:53</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">BookDao</span> &#123;<br>    Integer <span class=\"hljs-title function_\">getBookPriceByBookId</span><span class=\"hljs-params\">(Integer bookId)</span>;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateStock</span><span class=\"hljs-params\">(Integer bookId)</span>;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUserBalance</span><span class=\"hljs-params\">(Integer userId, Integer price)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.dao.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.tx.dao.BookDao;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Repository;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 14:54</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BookDao</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">getBookPriceByBookId</span><span class=\"hljs-params\">(Integer bookId)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;SELECT price FROM t_book WHERE book_id=?&quot;</span>;<br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);<br>        <span class=\"hljs-keyword\">return</span> price;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateStock</span><span class=\"hljs-params\">(Integer bookId)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;UPDATE t_book SET stock=stock-1 WHERE book_id=?&quot;</span>;<br>        jdbcTemplate.update(sql, bookId);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUserBalance</span><span class=\"hljs-params\">(Integer userId, Integer price)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;UPDATE t_user set balance=balance-? WHERE user_id=?&quot;</span>;<br>        jdbcTemplate.update(sql, price, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建测试类\"><a href=\"#创建测试类\" class=\"headerlink\" title=\"创建测试类\"></a>创建测试类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.example.tx.controller.BookController;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 15:13</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestBookTx</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> BookController bookController;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBuyBook</span><span class=\"hljs-params\">()</span> &#123;<br>        bookController.buyBook(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>图书表更新后结果</p>\n<p><img src=\"/../images/springPart06/%E5%9B%BE%E4%B9%A6%E8%A1%A8%E7%BB%93%E6%9E%9C1.png\"></p>\n<p>用户表更新后结果</p>\n<p>![用户表结果1](&#x2F;Users&#x2F;promise&#x2F;Promise Code&#x2F;blog&#x2F;source&#x2F;images&#x2F;springPart06&#x2F;用户表结果1.png)</p>\n<h4 id=\"当前存在问题\"><a href=\"#当前存在问题\" class=\"headerlink\" title=\"当前存在问题\"></a>当前存在问题</h4><p>新增一本书《三体2》，售价800元。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t_book` (`book_id`, `book_name`, `price`, `stock`)<br><span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;三体2&#x27;</span>, <span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">100</span>);<br></code></pre></td></tr></table></figure>\n\n<p>用户想购买《三体2》但是余额不足会发生什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBuyBook</span><span class=\"hljs-params\">()</span> &#123;<br>    bookController.buyBook(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>报错信息如下：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; <span class=\"hljs-keyword\">SQL</span> [<span class=\"hljs-keyword\">UPDATE</span> t_user <span class=\"hljs-keyword\">set</span> balance=balance-? <span class=\"hljs-keyword\">WHERE</span> user_id=?]; Data truncation: <span class=\"hljs-type\">BIGINT</span> UNSIGNED <span class=\"hljs-keyword\">value</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">out</span> <span class=\"hljs-keyword\">of</span> range <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&#x27;(`spring`.`t_user`.`balance` - 800)&#x27;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>因为余额使用的是无符号数，此时余额还有420元不足以支付800元的书籍。在数据库中报错。</p>\n<p>但是图书表数量发生了变化</p>\n<p><img src=\"/../images/springPart06/%E5%9B%BE%E4%B9%A6%E8%A1%A8%E7%BB%93%E6%9E%9C2.png\"></p>\n<p><strong>所以在此需要添加事务进行操作</strong></p>\n<h4 id=\"添加事务\"><a href=\"#添加事务\" class=\"headerlink\" title=\"添加事务\"></a>添加事务</h4><p>配置bean，在<code>bean.xml</code>文件中，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:tx</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/tx</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--引入外部属性文件, 创建数据源对象--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:property-placeholder</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--创建jdbcTemplate对象, 注入数据源--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example.tx&quot;</span>/&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;transactionManager&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        开启事务的注解驱动</span><br><span class=\"hljs-comment\">        通过注解@Transactional所标识的方法或标识的类中所有的方法, 都会被事务管理器管理事务</span><br><span class=\"hljs-comment\">    --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--transaction-manager属性值是transactionManager, 如果事务管理器bean的id正好是默认值, 可以省略这个属性--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:annotation-driven</span> <span class=\"hljs-attr\">transaction-manager</span>=<span class=\"hljs-string\">&quot;transactionManager&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>在实现类前加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Transactional</span><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">buyBook</span><span class=\"hljs-params\">(Integer bookId, Integer userId)</span> &#123;<br>    <span class=\"hljs-comment\">// 1. 根据图书id查询图书价格</span><br>    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> bookDao.getBookPriceByBookId(bookId);<br><br>    <span class=\"hljs-comment\">// 2. 更新图书表的库存量</span><br>    bookDao.updateStock(bookId);<br><br>    <span class=\"hljs-comment\">// 3. 更新用户表的用户余额</span><br>    bookDao.updateUserBalance(userId, price);<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p><code>@Transactional</code>注解标识的位置</p>\n<ul>\n<li><code>@Transactional</code>标识在方法上，则只会影响该方法</li>\n<li><code>@Transactional</code>标识在类上，则会影响类中的所有方法</li>\n</ul>\n<h4 id=\"Transactional属性\"><a href=\"#Transactional属性\" class=\"headerlink\" title=\"@Transactional属性\"></a>@Transactional属性</h4><ul>\n<li><p><code>readOnly</code>是否只读：如果设置为只读属性，只能进行查询操作，不能进行修改、添加、删除操作</p>\n</li>\n<li><p><code>timeout</code>超时（单位是秒）：在设置超时时间之内没有完成，抛出异常回滚。默认值<code>-1</code>（不超时）</p>\n</li>\n<li><p>回滚策略：设置哪些异常不回滚，哪些异常进行回滚。</p>\n<ul>\n<li><code>rollbackFor</code>：需要设置一个Class类型对象</li>\n<li><code>rollbackForClassName</code>：需要设置一个字符串类型的全类名</li>\n<li><code>noRollbackFor</code>：需要设置一个Class类型对象</li>\n<li><code>noRollbackForClassName</code>：需要设置一个字符串类型的全类名</li>\n</ul>\n</li>\n<li><p><code>isolation</code>隔离级别：读问题（脏读、幻读、重复读等）</p>\n<p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p>\n<ul>\n<li>READ UNCOMMITTED：读未提交，允许Transaction01读取Transaction02未提交的修改</li>\n<li>READ COMMITTED：读已提交，要求Transaction01只能读取Transaction02已提交的修改</li>\n<li>REPEATABLE READ：可重复读，确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新</li>\n<li>SERIALIZABLE：串行化，确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>READ UNCOMMITTED</td>\n<td>有</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>READ COMMITTED</td>\n<td>无</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>REPEATABLE READ</td>\n<td>无</td>\n<td>无</td>\n<td>有</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>无</td>\n<td>无</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>各种数据库产品对事务隔离级别支持程度</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">隔离级别</th>\n<th align=\"center\">Oracle</th>\n<th align=\"center\">MySQL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">READ UNCOMMITTED</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">READ COMMITTED</td>\n<td align=\"center\">✅（默认）</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">REPEATABLE READ</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅（默认）</td>\n</tr>\n<tr>\n<td align=\"center\">SERIALIZABLE</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n</tr>\n</tbody></table>\n<p>使用方式：<code>@Transactional(isolation = Isolation.READ_UNCOMMITTED)</code></p>\n</li>\n<li><p><code>propagation</code>传播行为：事务方法之间的调用，事务该如何进行使用</p>\n<p>什么是事务的传播行为？</p>\n<p>在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，</p>\n<p>事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</p>\n<p>一共有七种传播行为：</p>\n<ul>\n<li><p>REQUIRED：支持当前事务，如果不存在就新建一个（默认）【没有就新建，有就加入】</p>\n</li>\n<li><p>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行【有就加入，没有就不管了】</p>\n</li>\n<li><p>MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常【有就加入，没有就抛异常】</p>\n</li>\n<li><p>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存任，则特这个存在的事务挂起 【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】</p>\n</li>\n<li><p>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务【不支持事务，存在就挂起】</p>\n</li>\n<li><p>NEVER：以非事务方式运行，如果有事务存在，抛出异常【不支持事务，存在就抛异常】</p>\n</li>\n<li><p>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样】。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用全注解配置事务\"><a href=\"#使用全注解配置事务\" class=\"headerlink\" title=\"使用全注解配置事务\"></a>使用全注解配置事务</h2><p>创建配置类，同时需要注释掉<code>bean.xml</code>内所有<code>bean</code>标签内容，否则会引起冲突</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.config;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class=\"hljs-keyword\">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class=\"hljs-keyword\">import</span> javax.sql.DataSource;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 20:49</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ComponentScan(&quot;org.example.tx&quot;)</span><br><span class=\"hljs-meta\">@EnableTransactionManagement</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title function_\">getDataSource</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">DruidDataSource</span> <span class=\"hljs-variable\">druidDataSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        druidDataSource.setUsername(<span class=\"hljs-string\">&quot;root&quot;</span>);<br>        druidDataSource.setPassword(<span class=\"hljs-string\">&quot;11111111&quot;</span>);<br>        druidDataSource.setUrl(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> druidDataSource;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean(name = &quot;jdbcTemplate&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> JdbcTemplate <span class=\"hljs-title function_\">getJdbcTemplate</span><span class=\"hljs-params\">(DataSource dataSource)</span> &#123;<br>        <span class=\"hljs-type\">JdbcTemplate</span> <span class=\"hljs-variable\">jdbcTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class=\"hljs-keyword\">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DataSourceTransactionManager <span class=\"hljs-title function_\">getDataSourceTransactionManager</span><span class=\"hljs-params\">(DataSource dataSource)</span> &#123;<br>        <span class=\"hljs-type\">DataSourceTransactionManager</span> <span class=\"hljs-variable\">dataSourceTransactionManager</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DataSourceTransactionManager</span>();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class=\"hljs-keyword\">return</span> dataSourceTransactionManager;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring学习part06\"><a href=\"#Spring学习part06\" class=\"headerlink\" title=\"Spring学习part06\"></a>Spring学习part06</h1><p>macOS启动MySQL命令</p>\n<p><code>sudo /usr/local/mysql/support-files/mysql.server start</code></p>\n<h2 id=\"JdbcTemplate\"><a href=\"#JdbcTemplate\" class=\"headerlink\" title=\"JdbcTemplate\"></a>JdbcTemplate</h2><p>引入相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.3.20<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.31<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>新建数据库<code>spring</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `t_emp` (<br>    `id` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>    `name` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;姓名&#x27;</span>,<br>    `age` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;年龄&#x27;</span>,<br>    `sex` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;性别&#x27;</span>, <br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class=\"hljs-operator\">=</span>INNODB <span class=\"hljs-keyword\">DEFAULT</span> CHARSET<span class=\"hljs-operator\">=</span>utf8mb4;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建jdbc相关配置<code>jdbc.properties</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">jdbc.url</span>=<span class=\"hljs-string\">jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false</span><br><span class=\"hljs-attr\">jdbc.driver</span>=<span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br><span class=\"hljs-attr\">jdbc.user</span>=<span class=\"hljs-string\">root</span><br><span class=\"hljs-attr\">jdbc.password</span>=<span class=\"hljs-string\">11111111</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建bean，<code>beans.xml</code>，并配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--引入外部属性文件, 创建数据源对象--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:property-placeholder</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--创建jdbcTemplate对象, 注入数据源--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-CRUD操作\"><a href=\"#1-CRUD操作\" class=\"headerlink\" title=\"1. CRUD操作\"></a>1. CRUD操作</h3><h4 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h4><p>新建测试类<code>jdbc.JdbcTemplateTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.jdbc;<br><br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-19 18:50</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JdbcTemplateTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdate1</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 1. 添加</span><br>        <span class=\"hljs-comment\">// 1.1 编写SQL语句</span><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;INSERT INTO t_emp VALUES (NULL, ?, ?, ?)&quot;</span>;<br>        <span class=\"hljs-comment\">// 1.2 调用jdbcTemplate方法, 传入相关参数</span><br>        <span class=\"hljs-comment\">// int rows = jdbcTemplate.update(sql, &quot;张三&quot;, 20, &quot;男&quot;);  // 影响行数</span><br>        <span class=\"hljs-comment\">// System.out.println(rows);</span><br><br>        <span class=\"hljs-comment\">// Object[] role = &#123;&quot;李四&quot;, 30, &quot;女&quot;&#125;;  // 等价于上面写法</span><br>        <span class=\"hljs-comment\">// System.out.println(jdbcTemplate.update(sql, role));</span><br><br>        Object[] role = &#123;<span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-string\">&quot;女&quot;</span>&#125;;<br>        System.out.println(jdbcTemplate.update(sql, role));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>新增一条查看MySQL结果</p>\n<p><img src=\"/../images/springPart06/%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AEMySQL%E7%BB%93%E6%9E%9C.png\"></p>\n<p>查看spring输出结果</p>\n<p><img src=\"/../images/springPart06/%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AEspring%E7%BB%93%E6%9E%9C.png\" alt=\"新增数据spring结果\"></p>\n<p>多插入两条数据</p>\n<p><img src=\"/../images/springPart06/MySQL%E6%96%B0%E5%A2%9E%E5%87%A0%E6%9D%A1%E6%95%B0%E6%8D%AE.png\" alt=\"MySQL新增几条数据\"></p>\n<h4 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h4><p>继续添加测试方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdate2</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 2. 修改</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;UPDATE t_emp SET name=? WHERE id=?&quot;</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rows</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.update(sql, <span class=\"hljs-string\">&quot;Wang Wu&quot;</span>, <span class=\"hljs-number\">3</span>);<br>    System.out.println(rows);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>MySQL结果如下</p>\n<p><img src=\"/../images/springPart06/%E4%BF%AE%E6%94%B9MySQL%E7%BB%93%E6%9E%9C.png\"></p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>添加删除测试方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdate3</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 3. 删除</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;DELETE from t_emp where id=?&quot;</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rows</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.update(sql, <span class=\"hljs-number\">3</span>);<br>    System.out.println(rows);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/../images/springPart06/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AEMySQL%E7%BB%93%E6%9E%9C.png\"></p>\n<h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><h5 id=\"查询：返回对象\"><a href=\"#查询：返回对象\" class=\"headerlink\" title=\"查询：返回对象\"></a>查询：返回对象</h5><p>新建员工类<code>Emp.java</code>，并且生成<code>getter</code>、<code>setter</code>、<code>toString()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.jdbc;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Date: 2024-02-26 21:03</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Emp</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Integer id;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> Integer age;<br>    <span class=\"hljs-keyword\">private</span> String sex;<br><br>    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">getId</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> id;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setId</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.id = id;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(Integer age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getSex</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> sex;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setSex</span><span class=\"hljs-params\">(String sex)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.sex = sex;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Emp&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;id=&quot;</span> + id +<br>                <span class=\"hljs-string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>                <span class=\"hljs-string\">&quot;, sex=&#x27;&quot;</span> + sex + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"写法一：自行封装\"><a href=\"#写法一：自行封装\" class=\"headerlink\" title=\"写法一：自行封装\"></a>写法一：自行封装</h6><p>测试方法，查看id为1的用户相关信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testReturnObject</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 4.1 查询: 返回对象   写法1</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;SELECT * FROM t_emp WHERE id=?&quot;</span>;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.queryForObject(sql, (rs, rowNum) -&gt; &#123;<br>        <span class=\"hljs-type\">Emp</span> <span class=\"hljs-variable\">emp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Emp</span>();<br>        emp.setName(rs.getString(<span class=\"hljs-string\">&quot;name&quot;</span>));<br>        emp.setAge(rs.getInt(<span class=\"hljs-string\">&quot;age&quot;</span>));<br>        emp.setSex(rs.getString(<span class=\"hljs-string\">&quot;sex&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> emp;<br>    &#125;, <span class=\"hljs-number\">1</span>);<br>    System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用的是<code>public &lt;T&gt; T queryForObject(String sql, RowMapper&lt;T&gt; rowMapper, @Nullable Object... args) throws DataAccessException</code>，使用lambda表达式。</p>\n<p><code>RowMapper&lt;T&gt; rowMapper</code>接口实现源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">RowMapper</span>&lt;T&gt; &#123;<br>    <span class=\"hljs-meta\">@Nullable</span><br>    T <span class=\"hljs-title function_\">mapRow</span><span class=\"hljs-params\">(ResultSet rs, <span class=\"hljs-type\">int</span> rowNum)</span> <span class=\"hljs-keyword\">throws</span> SQLException;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>rs</code>是返回的结果</li>\n<li><code>rowNum</code>是返回的行数</li>\n</ul>\n<p><img src=\"/../images/springPart06/%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B.png\"></p>\n<p>若不对相关属性赋值返回为<code>null</code></p>\n<h6 id=\"写法二：使用BeanPropertyRowMapper\"><a href=\"#写法二：使用BeanPropertyRowMapper\" class=\"headerlink\" title=\"写法二：使用BeanPropertyRowMapper\"></a>写法二：使用BeanPropertyRowMapper</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testReturnObject2</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 4.1 查询: 返回对象  写法2</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;SELECT * FROM t_emp WHERE id=?&quot;</span>;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.queryForObject(sql, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class), <span class=\"hljs-number\">1</span>);<br>    System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>BeanPropertyRowMapper</code>实现了相关方法，在参数中放入<code>Emp.class</code>可以直接映射到<code>Emp</code>实体类中。</p>\n<h5 id=\"查询：返回list\"><a href=\"#查询：返回list\" class=\"headerlink\" title=\"查询：返回list\"></a>查询：返回list</h5><p>查询所有表数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testReturnList</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 4.2 查询: 返回List</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;SELECT * FROM t_emp&quot;</span>;<br>    List&lt;Emp&gt; result = jdbcTemplate.query(sql, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springPart06/%E8%BF%94%E5%9B%9EList%E7%B1%BB%E5%9E%8B.png\"></p>\n<h5 id=\"查询：返回单个值\"><a href=\"#查询：返回单个值\" class=\"headerlink\" title=\"查询：返回单个值\"></a>查询：返回单个值</h5><p>查询共多少条记录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testReturnValue</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;SELECT COUNT(*) FROM t_emp&quot;</span>;<br>    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.queryForObject(sql, Integer.class);<br>    System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h3 id=\"编程式事务\"><a href=\"#编程式事务\" class=\"headerlink\" title=\"编程式事务\"></a>编程式事务</h3><p>相关伪代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">conn</span> <span class=\"hljs-operator\">=</span> ...;<br><span class=\"hljs-keyword\">try</span> &#123;<br>\t<span class=\"hljs-comment\">// 开启事务： 关闭事务的自动提交；</span><br>    conn.setAutoCommit(<span class=\"hljs-literal\">false</span>);<br>    <br>    <span class=\"hljs-comment\">// 核心操作</span><br>    <span class=\"hljs-comment\">// TODO</span><br>    <br>    <span class=\"hljs-comment\">// 提交事务</span><br>    conn.commit();<br>    <br>&#125; <span class=\"hljs-keyword\">catch</span>(Exception e) &#123;<br>\t<span class=\"hljs-comment\">// 回滚事务</span><br>    conn.rollBack();<br>&#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>\t<span class=\"hljs-comment\">// 释放数据库连接</span><br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>编程式实现事务的缺陷：</p>\n<ul>\n<li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己完成，比较繁琐。</li>\n<li>代码复用性不高：如果没有有效抽取出，每次实现功能都需要自己编写代码，代码并没有得到复用</li>\n</ul>\n<hr>\n<p>不使用事务会产生的问题：demo</p>\n<h3 id=\"声明式事务\"><a href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h3><h4 id=\"基于注解的声明式事务\"><a href=\"#基于注解的声明式事务\" class=\"headerlink\" title=\"基于注解的声明式事务\"></a>基于注解的声明式事务</h4><p>需求：用户购买图书的时候，数据库中对书的数量进行变动，用户表对余额进行变动。</p>\n<p>创建两个表，<code>t_book</code>和<code>t_user</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `t_book`(  <br>    `book_id` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"hljs-string\">&#x27;主键&#x27;</span>,<br>    `book_name` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;图书名称&#x27;</span>,<br>    `price` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;价格&#x27;</span>,<br>    `stock` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">10</span>) UNSIGNED <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;库存(无符号)&#x27;</span>,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`book_id`)<br>)ENGINE<span class=\"hljs-operator\">=</span>InnoDB <span class=\"hljs-keyword\">DEFAULT</span> CHARSET<span class=\"hljs-operator\">=</span>utf8mb4 AUTO_INCREMENT<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span>;<br><br><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `t_user` (<br>    `user_id` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"hljs-string\">&#x27;主键&#x27;</span>,<br>    `username` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;用户名&#x27;</span>,<br>    `balance` <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">10</span>) UNSIGNED <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;余额(无符号)&#x27;</span>,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`user_id`)<br>) ENGINE<span class=\"hljs-operator\">=</span>InnoDB <span class=\"hljs-keyword\">DEFAULT</span> CHARSET<span class=\"hljs-operator\">=</span>utf8mb4 AUTO_INCREMENT<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span>;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>在图书表插入几条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t_book` (`book_id`, `book_name`, `price`, `stock`)<br><span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;三体&#x27;</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">100</span>);<br><br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t_book` (`book_id`, `book_name`, `price`, `stock`)<br><span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;流浪地球&#x27;</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">200</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>在用户表插入一条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t_user` (`user_id`, `username`, `balance`)<br><span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-number\">50</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>实现Controller层, Service层与DAO层</p>\n<h4 id=\"Controller层\"><a href=\"#Controller层\" class=\"headerlink\" title=\"Controller层\"></a>Controller层</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.tx.service.BookService;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 14:51</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookController</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> BookService bookService;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 购买书的方法</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> bookId 图书id</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> userId 用户id</span><br><span class=\"hljs-comment\">     * */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">buyBook</span><span class=\"hljs-params\">(Integer bookId, Integer userId)</span> &#123;<br>        <span class=\"hljs-comment\">// 调用Service方法</span><br>        bookService.buyBook(bookId, userId);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"Service层与实现类\"><a href=\"#Service层与实现类\" class=\"headerlink\" title=\"Service层与实现类\"></a>Service层与实现类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.service;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">BookService</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">buyBook</span><span class=\"hljs-params\">(Integer bookId, Integer userId)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.service.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.tx.dao.BookDao;<br><span class=\"hljs-keyword\">import</span> org.example.tx.service.BookService;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 14:53</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BookService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> BookDao bookDao;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">buyBook</span><span class=\"hljs-params\">(Integer bookId, Integer userId)</span> &#123;<br>        <span class=\"hljs-comment\">// 1. 根据图书id查询图书价格</span><br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> bookDao.getBookPriceByBookId(bookId);<br><br>        <span class=\"hljs-comment\">// 2. 更新图书表的库存量</span><br>        bookDao.updateStock(bookId);<br><br>        <span class=\"hljs-comment\">// 3. 更新用户表的用户余额</span><br>        bookDao.updateUserBalance(userId, price);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"DAO层与实现类\"><a href=\"#DAO层与实现类\" class=\"headerlink\" title=\"DAO层与实现类\"></a>DAO层与实现类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.dao;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 14:53</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">BookDao</span> &#123;<br>    Integer <span class=\"hljs-title function_\">getBookPriceByBookId</span><span class=\"hljs-params\">(Integer bookId)</span>;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateStock</span><span class=\"hljs-params\">(Integer bookId)</span>;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUserBalance</span><span class=\"hljs-params\">(Integer userId, Integer price)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.dao.impl;<br><br><span class=\"hljs-keyword\">import</span> org.example.tx.dao.BookDao;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Repository;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 14:54</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BookDao</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">getBookPriceByBookId</span><span class=\"hljs-params\">(Integer bookId)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;SELECT price FROM t_book WHERE book_id=?&quot;</span>;<br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);<br>        <span class=\"hljs-keyword\">return</span> price;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateStock</span><span class=\"hljs-params\">(Integer bookId)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;UPDATE t_book SET stock=stock-1 WHERE book_id=?&quot;</span>;<br>        jdbcTemplate.update(sql, bookId);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUserBalance</span><span class=\"hljs-params\">(Integer userId, Integer price)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;UPDATE t_user set balance=balance-? WHERE user_id=?&quot;</span>;<br>        jdbcTemplate.update(sql, price, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建测试类\"><a href=\"#创建测试类\" class=\"headerlink\" title=\"创建测试类\"></a>创建测试类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.example.tx.controller.BookController;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 15:13</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestBookTx</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> BookController bookController;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBuyBook</span><span class=\"hljs-params\">()</span> &#123;<br>        bookController.buyBook(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>图书表更新后结果</p>\n<p><img src=\"/../images/springPart06/%E5%9B%BE%E4%B9%A6%E8%A1%A8%E7%BB%93%E6%9E%9C1.png\"></p>\n<p>用户表更新后结果</p>\n<p>![用户表结果1](&#x2F;Users&#x2F;promise&#x2F;Promise Code&#x2F;blog&#x2F;source&#x2F;images&#x2F;springPart06&#x2F;用户表结果1.png)</p>\n<h4 id=\"当前存在问题\"><a href=\"#当前存在问题\" class=\"headerlink\" title=\"当前存在问题\"></a>当前存在问题</h4><p>新增一本书《三体2》，售价800元。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t_book` (`book_id`, `book_name`, `price`, `stock`)<br><span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;三体2&#x27;</span>, <span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">100</span>);<br></code></pre></td></tr></table></figure>\n\n<p>用户想购买《三体2》但是余额不足会发生什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBuyBook</span><span class=\"hljs-params\">()</span> &#123;<br>    bookController.buyBook(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>报错信息如下：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; <span class=\"hljs-keyword\">SQL</span> [<span class=\"hljs-keyword\">UPDATE</span> t_user <span class=\"hljs-keyword\">set</span> balance=balance-? <span class=\"hljs-keyword\">WHERE</span> user_id=?]; Data truncation: <span class=\"hljs-type\">BIGINT</span> UNSIGNED <span class=\"hljs-keyword\">value</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">out</span> <span class=\"hljs-keyword\">of</span> range <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&#x27;(`spring`.`t_user`.`balance` - 800)&#x27;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>因为余额使用的是无符号数，此时余额还有420元不足以支付800元的书籍。在数据库中报错。</p>\n<p>但是图书表数量发生了变化</p>\n<p><img src=\"/../images/springPart06/%E5%9B%BE%E4%B9%A6%E8%A1%A8%E7%BB%93%E6%9E%9C2.png\"></p>\n<p><strong>所以在此需要添加事务进行操作</strong></p>\n<h4 id=\"添加事务\"><a href=\"#添加事务\" class=\"headerlink\" title=\"添加事务\"></a>添加事务</h4><p>配置bean，在<code>bean.xml</code>文件中，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:tx</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/tx</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--引入外部属性文件, 创建数据源对象--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:property-placeholder</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--创建jdbcTemplate对象, 注入数据源--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example.tx&quot;</span>/&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;transactionManager&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">        开启事务的注解驱动</span><br><span class=\"hljs-comment\">        通过注解@Transactional所标识的方法或标识的类中所有的方法, 都会被事务管理器管理事务</span><br><span class=\"hljs-comment\">    --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--transaction-manager属性值是transactionManager, 如果事务管理器bean的id正好是默认值, 可以省略这个属性--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:annotation-driven</span> <span class=\"hljs-attr\">transaction-manager</span>=<span class=\"hljs-string\">&quot;transactionManager&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>在实现类前加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Transactional</span><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">buyBook</span><span class=\"hljs-params\">(Integer bookId, Integer userId)</span> &#123;<br>    <span class=\"hljs-comment\">// 1. 根据图书id查询图书价格</span><br>    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> bookDao.getBookPriceByBookId(bookId);<br><br>    <span class=\"hljs-comment\">// 2. 更新图书表的库存量</span><br>    bookDao.updateStock(bookId);<br><br>    <span class=\"hljs-comment\">// 3. 更新用户表的用户余额</span><br>    bookDao.updateUserBalance(userId, price);<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p><code>@Transactional</code>注解标识的位置</p>\n<ul>\n<li><code>@Transactional</code>标识在方法上，则只会影响该方法</li>\n<li><code>@Transactional</code>标识在类上，则会影响类中的所有方法</li>\n</ul>\n<h4 id=\"Transactional属性\"><a href=\"#Transactional属性\" class=\"headerlink\" title=\"@Transactional属性\"></a>@Transactional属性</h4><ul>\n<li><p><code>readOnly</code>是否只读：如果设置为只读属性，只能进行查询操作，不能进行修改、添加、删除操作</p>\n</li>\n<li><p><code>timeout</code>超时（单位是秒）：在设置超时时间之内没有完成，抛出异常回滚。默认值<code>-1</code>（不超时）</p>\n</li>\n<li><p>回滚策略：设置哪些异常不回滚，哪些异常进行回滚。</p>\n<ul>\n<li><code>rollbackFor</code>：需要设置一个Class类型对象</li>\n<li><code>rollbackForClassName</code>：需要设置一个字符串类型的全类名</li>\n<li><code>noRollbackFor</code>：需要设置一个Class类型对象</li>\n<li><code>noRollbackForClassName</code>：需要设置一个字符串类型的全类名</li>\n</ul>\n</li>\n<li><p><code>isolation</code>隔离级别：读问题（脏读、幻读、重复读等）</p>\n<p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p>\n<ul>\n<li>READ UNCOMMITTED：读未提交，允许Transaction01读取Transaction02未提交的修改</li>\n<li>READ COMMITTED：读已提交，要求Transaction01只能读取Transaction02已提交的修改</li>\n<li>REPEATABLE READ：可重复读，确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新</li>\n<li>SERIALIZABLE：串行化，确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>READ UNCOMMITTED</td>\n<td>有</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>READ COMMITTED</td>\n<td>无</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>REPEATABLE READ</td>\n<td>无</td>\n<td>无</td>\n<td>有</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>无</td>\n<td>无</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>各种数据库产品对事务隔离级别支持程度</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">隔离级别</th>\n<th align=\"center\">Oracle</th>\n<th align=\"center\">MySQL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">READ UNCOMMITTED</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">READ COMMITTED</td>\n<td align=\"center\">✅（默认）</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\">REPEATABLE READ</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅（默认）</td>\n</tr>\n<tr>\n<td align=\"center\">SERIALIZABLE</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n</tr>\n</tbody></table>\n<p>使用方式：<code>@Transactional(isolation = Isolation.READ_UNCOMMITTED)</code></p>\n</li>\n<li><p><code>propagation</code>传播行为：事务方法之间的调用，事务该如何进行使用</p>\n<p>什么是事务的传播行为？</p>\n<p>在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，</p>\n<p>事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</p>\n<p>一共有七种传播行为：</p>\n<ul>\n<li><p>REQUIRED：支持当前事务，如果不存在就新建一个（默认）【没有就新建，有就加入】</p>\n</li>\n<li><p>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行【有就加入，没有就不管了】</p>\n</li>\n<li><p>MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常【有就加入，没有就抛异常】</p>\n</li>\n<li><p>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存任，则特这个存在的事务挂起 【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】</p>\n</li>\n<li><p>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务【不支持事务，存在就挂起】</p>\n</li>\n<li><p>NEVER：以非事务方式运行，如果有事务存在，抛出异常【不支持事务，存在就抛异常】</p>\n</li>\n<li><p>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样】。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用全注解配置事务\"><a href=\"#使用全注解配置事务\" class=\"headerlink\" title=\"使用全注解配置事务\"></a>使用全注解配置事务</h2><p>创建配置类，同时需要注释掉<code>bean.xml</code>内所有<code>bean</code>标签内容，否则会引起冲突</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.tx.config;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class=\"hljs-keyword\">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class=\"hljs-keyword\">import</span> javax.sql.DataSource;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-02-29 20:49</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ComponentScan(&quot;org.example.tx&quot;)</span><br><span class=\"hljs-meta\">@EnableTransactionManagement</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title function_\">getDataSource</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">DruidDataSource</span> <span class=\"hljs-variable\">druidDataSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        druidDataSource.setUsername(<span class=\"hljs-string\">&quot;root&quot;</span>);<br>        druidDataSource.setPassword(<span class=\"hljs-string\">&quot;11111111&quot;</span>);<br>        druidDataSource.setUrl(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> druidDataSource;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean(name = &quot;jdbcTemplate&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> JdbcTemplate <span class=\"hljs-title function_\">getJdbcTemplate</span><span class=\"hljs-params\">(DataSource dataSource)</span> &#123;<br>        <span class=\"hljs-type\">JdbcTemplate</span> <span class=\"hljs-variable\">jdbcTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class=\"hljs-keyword\">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DataSourceTransactionManager <span class=\"hljs-title function_\">getDataSourceTransactionManager</span><span class=\"hljs-params\">(DataSource dataSource)</span> &#123;<br>        <span class=\"hljs-type\">DataSourceTransactionManager</span> <span class=\"hljs-variable\">dataSourceTransactionManager</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DataSourceTransactionManager</span>();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class=\"hljs-keyword\">return</span> dataSourceTransactionManager;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"【study】Spring学习part03","abbrlink":"e8e1e241","date":"2024-02-07T09:06:15.000Z","_content":"\n# 【study】Spring学习part03\n\n新建模块`spring6-ioc-annotation`\n\n## 基于注解管理bean（★）\n\nSpring通过注解实现自动装配的步骤如下：\n\n1.   引入依赖\n2.   开启组件扫描\n3.   使用注解定义bean\n4.   依赖注入\n\n\n\n最基本的写法：\n\n新建类User\n\n``` java\npackage org.example.spring6;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class User {\n\n}\n\n```\n\n配置bean文件，`bean.xml`，添加相关约束\n\n`xmlns:context=\"http://www.springframework.org/schema/context\"`\n\n``` xml\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\"\n```\n\n\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <!--开启组件扫描-->\n    <context:component-scan base-package=\"org.example.spring6\"/>\n\n</beans>\n```\n\n### 使用注解定义bean\n\nSpring提供了一下多个注解，这些注解可以直接标注在Java类上，将它们定义成Spring bean\n\n| 注解        | 说明                                                         |\n| ----------- | ------------------------------------------------------------ |\n| @Component  | 该注解用于描述Spring中的bean，他是一个泛化的概念，仅仅表示容器中的一个组件（bean），并且可以作用在应用的任何层次，例如Service层，Dao层等。使用时只需将该注解标注在相应类上即可。 |\n| @Repository | 该注解用于将数据访问层（Dao层）的类标识为Spring中的bean，其功能与@Component相同。 |\n| @Service    | 该注解通常作用在业务层（Service层），用于将业务层的类标识为Spring中的bean，其功能与@Component相同 |\n| @Controller | 该注解通常作用在控制层（如Spring MVC的Controller），用于将控制层的类标识为Spring中的bean，其功能与@Component相同 |\n\n编写测试类\n\n``` java\n@Test\npublic void testUser() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean.xml\");\n    User user = context.getBean(\"user\", User.class);\n    System.out.println(user);\n}\n```\n\n![输出结果](../images/springPart03/Component注解输出1.png)\n\n\n\n\n\n### @Autowired注入\n\n单独使用`@Autowired`注解是根据类型装配，默认是`byType`\n\n``` xml\n<!--bean.xml-->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <!--开启组件扫描-->\n    <context:component-scan base-package=\"org.example.spring6\"/>\n\n</beans>\n```\n\n\n\n构建一个小demo，项目结构如下\n\n`org/example/autowired/`路径下\n\n```\n📁 autowired/\n├─📁 dao/\n│ ├─📁 impl/\n│ │ └─📄 UserDaoImpl.java\n│ └─📄 UserDao.java\n├─📁 controller/\n│ └─📄 UserController.java\n└─📁 service/\n  ├─📁 impl/\n  │ └─📄 UserServiceImpl.java\n  └─📄 UserSerivce.java\n\n```\n\nController使用`@Controller`注解\n\nDao的接口实现使用`@Repository`注解\n\nService的接口实现使用`@Service`注解\n\n`UserController`、`UserServiceImpl`、`UserDaoImpl`分别实现`add()`方法，接口省略不写。\n\n\n\n#### 1. 属性注入\n\n在`UserController`中注入`service`，这里不再需要`setter()`进行注入，使用`@Autowired注解`，下面同理。即注解写到属性上。\n\n``` java\n@Controller\npublic class UserController {\n    // 注入service\n    // 第一种方式：属性注入\n    @Autowired  // 根据类型找到对应对象, 完成注入\n    private UserService userService;\n    \n    public void add() {\n    \tSystem.out.println(\"controller......\");\n        userService.add();\n    }\n\n}\n```\n\n\n\n在`UserServiceImpl`中注入`dao`\n\n``` java\n@Service\npublic class UserServiceImpl implements UserService {\n    // 注入dao\n    // 第一种方式: 属性注入\n    @Autowired\n    private UserDao userDao;\n    \n    public void add() {\n        System.out.println(\"service......\");\n        userDao.add();\n    }\n}\n```\n\n\n\n编写测试类\n\n``` java\n@Test\npublic void testAutowired() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean.xml\");\n    UserController controller = context.getBean(UserController.class);\n    controller.add();\n}\n```\n\n\n\n\n\n![](../images/springPart03/autowired结果输出.png)\n\n\n\n#### 2. set注入\n\n写出其`setter()`，在前方加入注解`@Autowired`，之后同理\n\n``` java\npackage org.example.autowired.controller;\n\nimport org.example.autowired.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\n\n\n@Controller\npublic class UserController {\n\n    // 第二种方式: set注入\n    // 生成setter()\n    private UserService userService;\n\n    @Autowired\n    public void setUserService(UserService userService) {\n        this.userService = userService;\n    }\n\n    public void add() {\n        System.out.println(\"controller......\");\n        userService.add();\n    }\n}\n\n```\n\n#### 3. 构造方法注入\n\n在构造函数前加入注解`@Autowired`，其他同理\n\n```  java\npackage org.example.autowired.controller;\n\nimport org.example.autowired.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\n\n\n@Controller\npublic class UserController {\n\n    // 第三种方式: 构造方法注入\n    // 生成构造函数\n    private UserService userService;\n\n    @Autowired\n    public UserController(UserService userService) {\n    \tthis.userService = userService;\n    }\n\n    public void add() {\n        System.out.println(\"controller......\");\n        userService.add();\n    }\n}\n\n\n```\n\n#### 4. 形参注入\n\n形参也可以使用`@Autowired`进行注解\n\n\n\n#### 5. 只有一个构造函数，无需使用注解\n\n<font color=\"red\">当构造函数只有一个时，Autowired注解可以省略</font>\n\n\n\n#### 6. @Autowired注解和@Qualifier注解联合\n\n新建一个`UserRedisDaoImpl`类实现`UserDao`接口\n\n``` java\n@Repository\npublic class UserRedisDaoImpl implements UserDao {\n    @Override\n    public void add() {\n        System.out.println(\"user redis......\");\n    }\n}\n\n```\n\n此时执行测试代码会报错\n\n``` \norg.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userController': Unsatisfied dependency expressed through method 'setUserService' parameter 0: Error creating bean with name 'userServiceImpl': Unsatisfied dependency expressed through field 'userDao': No qualifying bean of type 'org.example.autowired.dao.UserDao' available: expected single matching bean but found 2: userDaoImpl,userRedisDaoImpl\n\n```\n\n因为`UserDao`在注入的时候发现了两个对象，`userDaoImpl,userRedisDaoImpl`，此时不能根据类型注入，需要进行名称注入\n\n``` java\n@Service\npublic class UserServiceImpl implements UserService {\n    // 注入dao\n    // 第一种方式: 属性注入\n    @Autowired\n    @Qualifier (value = \"userRedisDaoImpl\")\n    private UserDao userDao;\n\n    @Override\n    public void add() {\n        System.out.println(\"service.....\");\n        userDao.add();\n    }\n}\n\n```\n\n\n\n![](../images/springPart03/qualifier结果输出.png)\n\n\n\n### @Resource注入\n\n与`@Autowired`注解区别\n\n| @Resource                                                    | @Autowired                                                   |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 是JDK扩展包中，属于JDK的一部分。所以该注解是标准注解，更具有通用性。 | Spring框架中自己的注解                                       |\n| 默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到则会自动启动通过类型byType装配 | 默认根据类型装配byType，如果想根据名称装配，需要配合`@Qualifier`注解一起使用 |\n| 用在属性上、setter方法上                                     | 用在属性上、setter方法上、构造方法上、构造方法参数上         |\n\n\n\n需要使用依赖（JDK高于11或低于8需要引入依赖）\n\n``` xml\n<dependency>\n    <groupId>jakarta.annotation</groupId>\n    <artifactId>jakarta.annotation-api</artifactId>\n    <version>2.1.1</version>\n</dependency>\n```\n\n \n\n### 全注解开发\n\n不再使用spring配置文件，写一个配置类代替配置文件\n\n新建配置类\n\n``` java\n@Configuration  // 配置类\n@ComponentScan(\"org.example\")  // 开启组件扫描\n// 该注解等价于在bean.xml文件中 <context:component-scan base-package=\"org.example\"/>\npublic class SpringConfig {\n\n}\n```\n\n\n\n新建测试用例\n\n``` java\n@Test\npublic void testUserControllerAnno() {\n    // 加载配置类\n    ApplicationContext context = new AnnotationConfigApplicationContext(SpringConfig.class);\n    UserController controller = context.getBean(UserController.class);\n    controller.add();\n}\n```\n\n","source":"_posts/【study】Spring学习part03.md","raw":"---\ntitle: 【study】Spring学习part03\ntags:\n  - Study\n  - Java\n  - Spring框架\nabbrlink: e8e1e241\ndate: 2024-02-07 17:06:15\n---\n\n# 【study】Spring学习part03\n\n新建模块`spring6-ioc-annotation`\n\n## 基于注解管理bean（★）\n\nSpring通过注解实现自动装配的步骤如下：\n\n1.   引入依赖\n2.   开启组件扫描\n3.   使用注解定义bean\n4.   依赖注入\n\n\n\n最基本的写法：\n\n新建类User\n\n``` java\npackage org.example.spring6;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class User {\n\n}\n\n```\n\n配置bean文件，`bean.xml`，添加相关约束\n\n`xmlns:context=\"http://www.springframework.org/schema/context\"`\n\n``` xml\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\"\n```\n\n\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <!--开启组件扫描-->\n    <context:component-scan base-package=\"org.example.spring6\"/>\n\n</beans>\n```\n\n### 使用注解定义bean\n\nSpring提供了一下多个注解，这些注解可以直接标注在Java类上，将它们定义成Spring bean\n\n| 注解        | 说明                                                         |\n| ----------- | ------------------------------------------------------------ |\n| @Component  | 该注解用于描述Spring中的bean，他是一个泛化的概念，仅仅表示容器中的一个组件（bean），并且可以作用在应用的任何层次，例如Service层，Dao层等。使用时只需将该注解标注在相应类上即可。 |\n| @Repository | 该注解用于将数据访问层（Dao层）的类标识为Spring中的bean，其功能与@Component相同。 |\n| @Service    | 该注解通常作用在业务层（Service层），用于将业务层的类标识为Spring中的bean，其功能与@Component相同 |\n| @Controller | 该注解通常作用在控制层（如Spring MVC的Controller），用于将控制层的类标识为Spring中的bean，其功能与@Component相同 |\n\n编写测试类\n\n``` java\n@Test\npublic void testUser() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean.xml\");\n    User user = context.getBean(\"user\", User.class);\n    System.out.println(user);\n}\n```\n\n![输出结果](../images/springPart03/Component注解输出1.png)\n\n\n\n\n\n### @Autowired注入\n\n单独使用`@Autowired`注解是根据类型装配，默认是`byType`\n\n``` xml\n<!--bean.xml-->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <!--开启组件扫描-->\n    <context:component-scan base-package=\"org.example.spring6\"/>\n\n</beans>\n```\n\n\n\n构建一个小demo，项目结构如下\n\n`org/example/autowired/`路径下\n\n```\n📁 autowired/\n├─📁 dao/\n│ ├─📁 impl/\n│ │ └─📄 UserDaoImpl.java\n│ └─📄 UserDao.java\n├─📁 controller/\n│ └─📄 UserController.java\n└─📁 service/\n  ├─📁 impl/\n  │ └─📄 UserServiceImpl.java\n  └─📄 UserSerivce.java\n\n```\n\nController使用`@Controller`注解\n\nDao的接口实现使用`@Repository`注解\n\nService的接口实现使用`@Service`注解\n\n`UserController`、`UserServiceImpl`、`UserDaoImpl`分别实现`add()`方法，接口省略不写。\n\n\n\n#### 1. 属性注入\n\n在`UserController`中注入`service`，这里不再需要`setter()`进行注入，使用`@Autowired注解`，下面同理。即注解写到属性上。\n\n``` java\n@Controller\npublic class UserController {\n    // 注入service\n    // 第一种方式：属性注入\n    @Autowired  // 根据类型找到对应对象, 完成注入\n    private UserService userService;\n    \n    public void add() {\n    \tSystem.out.println(\"controller......\");\n        userService.add();\n    }\n\n}\n```\n\n\n\n在`UserServiceImpl`中注入`dao`\n\n``` java\n@Service\npublic class UserServiceImpl implements UserService {\n    // 注入dao\n    // 第一种方式: 属性注入\n    @Autowired\n    private UserDao userDao;\n    \n    public void add() {\n        System.out.println(\"service......\");\n        userDao.add();\n    }\n}\n```\n\n\n\n编写测试类\n\n``` java\n@Test\npublic void testAutowired() {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"bean.xml\");\n    UserController controller = context.getBean(UserController.class);\n    controller.add();\n}\n```\n\n\n\n\n\n![](../images/springPart03/autowired结果输出.png)\n\n\n\n#### 2. set注入\n\n写出其`setter()`，在前方加入注解`@Autowired`，之后同理\n\n``` java\npackage org.example.autowired.controller;\n\nimport org.example.autowired.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\n\n\n@Controller\npublic class UserController {\n\n    // 第二种方式: set注入\n    // 生成setter()\n    private UserService userService;\n\n    @Autowired\n    public void setUserService(UserService userService) {\n        this.userService = userService;\n    }\n\n    public void add() {\n        System.out.println(\"controller......\");\n        userService.add();\n    }\n}\n\n```\n\n#### 3. 构造方法注入\n\n在构造函数前加入注解`@Autowired`，其他同理\n\n```  java\npackage org.example.autowired.controller;\n\nimport org.example.autowired.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\n\n\n@Controller\npublic class UserController {\n\n    // 第三种方式: 构造方法注入\n    // 生成构造函数\n    private UserService userService;\n\n    @Autowired\n    public UserController(UserService userService) {\n    \tthis.userService = userService;\n    }\n\n    public void add() {\n        System.out.println(\"controller......\");\n        userService.add();\n    }\n}\n\n\n```\n\n#### 4. 形参注入\n\n形参也可以使用`@Autowired`进行注解\n\n\n\n#### 5. 只有一个构造函数，无需使用注解\n\n<font color=\"red\">当构造函数只有一个时，Autowired注解可以省略</font>\n\n\n\n#### 6. @Autowired注解和@Qualifier注解联合\n\n新建一个`UserRedisDaoImpl`类实现`UserDao`接口\n\n``` java\n@Repository\npublic class UserRedisDaoImpl implements UserDao {\n    @Override\n    public void add() {\n        System.out.println(\"user redis......\");\n    }\n}\n\n```\n\n此时执行测试代码会报错\n\n``` \norg.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userController': Unsatisfied dependency expressed through method 'setUserService' parameter 0: Error creating bean with name 'userServiceImpl': Unsatisfied dependency expressed through field 'userDao': No qualifying bean of type 'org.example.autowired.dao.UserDao' available: expected single matching bean but found 2: userDaoImpl,userRedisDaoImpl\n\n```\n\n因为`UserDao`在注入的时候发现了两个对象，`userDaoImpl,userRedisDaoImpl`，此时不能根据类型注入，需要进行名称注入\n\n``` java\n@Service\npublic class UserServiceImpl implements UserService {\n    // 注入dao\n    // 第一种方式: 属性注入\n    @Autowired\n    @Qualifier (value = \"userRedisDaoImpl\")\n    private UserDao userDao;\n\n    @Override\n    public void add() {\n        System.out.println(\"service.....\");\n        userDao.add();\n    }\n}\n\n```\n\n\n\n![](../images/springPart03/qualifier结果输出.png)\n\n\n\n### @Resource注入\n\n与`@Autowired`注解区别\n\n| @Resource                                                    | @Autowired                                                   |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 是JDK扩展包中，属于JDK的一部分。所以该注解是标准注解，更具有通用性。 | Spring框架中自己的注解                                       |\n| 默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到则会自动启动通过类型byType装配 | 默认根据类型装配byType，如果想根据名称装配，需要配合`@Qualifier`注解一起使用 |\n| 用在属性上、setter方法上                                     | 用在属性上、setter方法上、构造方法上、构造方法参数上         |\n\n\n\n需要使用依赖（JDK高于11或低于8需要引入依赖）\n\n``` xml\n<dependency>\n    <groupId>jakarta.annotation</groupId>\n    <artifactId>jakarta.annotation-api</artifactId>\n    <version>2.1.1</version>\n</dependency>\n```\n\n \n\n### 全注解开发\n\n不再使用spring配置文件，写一个配置类代替配置文件\n\n新建配置类\n\n``` java\n@Configuration  // 配置类\n@ComponentScan(\"org.example\")  // 开启组件扫描\n// 该注解等价于在bean.xml文件中 <context:component-scan base-package=\"org.example\"/>\npublic class SpringConfig {\n\n}\n```\n\n\n\n新建测试用例\n\n``` java\n@Test\npublic void testUserControllerAnno() {\n    // 加载配置类\n    ApplicationContext context = new AnnotationConfigApplicationContext(SpringConfig.class);\n    UserController controller = context.getBean(UserController.class);\n    controller.add();\n}\n```\n\n","slug":"【study】Spring学习part03","published":1,"updated":"2024-02-29T08:27:48.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt88t16a00045kz817bx3ebm","content":"<h1 id=\"【study】Spring学习part03\"><a href=\"#【study】Spring学习part03\" class=\"headerlink\" title=\"【study】Spring学习part03\"></a>【study】Spring学习part03</h1><p>新建模块<code>spring6-ioc-annotation</code></p>\n<h2 id=\"基于注解管理bean（★）\"><a href=\"#基于注解管理bean（★）\" class=\"headerlink\" title=\"基于注解管理bean（★）\"></a>基于注解管理bean（★）</h2><p>Spring通过注解实现自动装配的步骤如下：</p>\n<ol>\n<li>引入依赖</li>\n<li>开启组件扫描</li>\n<li>使用注解定义bean</li>\n<li>依赖注入</li>\n</ol>\n<p>最基本的写法：</p>\n<p>新建类User</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>配置bean文件，<code>bean.xml</code>，添加相关约束</p>\n<p><code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans<br>       http://www.springframework.org/schema/beans/spring-beans.xsd<br>       http://www.springframework.org/schema/context<br>       http://www.springframework.org/schema/context/spring-context.xsd&quot;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--开启组件扫描--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example.spring6&quot;</span>/&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用注解定义bean\"><a href=\"#使用注解定义bean\" class=\"headerlink\" title=\"使用注解定义bean\"></a>使用注解定义bean</h3><p>Spring提供了一下多个注解，这些注解可以直接标注在Java类上，将它们定义成Spring bean</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Component</td>\n<td>该注解用于描述Spring中的bean，他是一个泛化的概念，仅仅表示容器中的一个组件（bean），并且可以作用在应用的任何层次，例如Service层，Dao层等。使用时只需将该注解标注在相应类上即可。</td>\n</tr>\n<tr>\n<td>@Repository</td>\n<td>该注解用于将数据访问层（Dao层）的类标识为Spring中的bean，其功能与@Component相同。</td>\n</tr>\n<tr>\n<td>@Service</td>\n<td>该注解通常作用在业务层（Service层），用于将业务层的类标识为Spring中的bean，其功能与@Component相同</td>\n</tr>\n<tr>\n<td>@Controller</td>\n<td>该注解通常作用在控制层（如Spring MVC的Controller），用于将控制层的类标识为Spring中的bean，其功能与@Component相同</td>\n</tr>\n</tbody></table>\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUser</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean.xml&quot;</span>);<br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>, User.class);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springPart03/Component%E6%B3%A8%E8%A7%A3%E8%BE%93%E5%87%BA1.png\" alt=\"输出结果\"></p>\n<h3 id=\"Autowired注入\"><a href=\"#Autowired注入\" class=\"headerlink\" title=\"@Autowired注入\"></a>@Autowired注入</h3><p>单独使用<code>@Autowired</code>注解是根据类型装配，默认是<code>byType</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--bean.xml--&gt;</span><br><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--开启组件扫描--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example.spring6&quot;</span>/&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>构建一个小demo，项目结构如下</p>\n<p><code>org/example/autowired/</code>路径下</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">📁 autowired/<br>├─📁 dao/<br>│ ├─📁 impl/<br>│ │ └─📄 <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UserDaoImpl</span>.</span></span>java<br>│ └─📄 <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UserDao</span>.</span></span>java<br>├─📁 controller/<br>│ └─📄 <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UserController</span>.</span></span>java<br>└─📁 service/<br>  ├─📁 impl/<br>  │ └─📄 <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UserServiceImpl</span>.</span></span>java<br>  └─📄 <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UserSerivce</span>.</span></span>java<br><br></code></pre></td></tr></table></figure>\n\n<p>Controller使用<code>@Controller</code>注解</p>\n<p>Dao的接口实现使用<code>@Repository</code>注解</p>\n<p>Service的接口实现使用<code>@Service</code>注解</p>\n<p><code>UserController</code>、<code>UserServiceImpl</code>、<code>UserDaoImpl</code>分别实现<code>add()</code>方法，接口省略不写。</p>\n<h4 id=\"1-属性注入\"><a href=\"#1-属性注入\" class=\"headerlink\" title=\"1. 属性注入\"></a>1. 属性注入</h4><p>在<code>UserController</code>中注入<code>service</code>，这里不再需要<code>setter()</code>进行注入，使用<code>@Autowired注解</code>，下面同理。即注解写到属性上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br>    <span class=\"hljs-comment\">// 注入service</span><br>    <span class=\"hljs-comment\">// 第一种方式：属性注入</span><br>    <span class=\"hljs-meta\">@Autowired</span>  <span class=\"hljs-comment\">// 根据类型找到对应对象, 完成注入</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>    \tSystem.out.println(<span class=\"hljs-string\">&quot;controller......&quot;</span>);<br>        userService.add();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在<code>UserServiceImpl</code>中注入<code>dao</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-comment\">// 注入dao</span><br>    <span class=\"hljs-comment\">// 第一种方式: 属性注入</span><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserDao userDao;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;service......&quot;</span>);<br>        userDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAutowired</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean.xml&quot;</span>);<br>    <span class=\"hljs-type\">UserController</span> <span class=\"hljs-variable\">controller</span> <span class=\"hljs-operator\">=</span> context.getBean(UserController.class);<br>    controller.add();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/../images/springPart03/autowired%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA.png\"></p>\n<h4 id=\"2-set注入\"><a href=\"#2-set注入\" class=\"headerlink\" title=\"2. set注入\"></a>2. set注入</h4><p>写出其<code>setter()</code>，在前方加入注解<code>@Autowired</code>，之后同理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.autowired.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.autowired.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br><br>    <span class=\"hljs-comment\">// 第二种方式: set注入</span><br>    <span class=\"hljs-comment\">// 生成setter()</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setUserService</span><span class=\"hljs-params\">(UserService userService)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userService = userService;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;controller......&quot;</span>);<br>        userService.add();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-构造方法注入\"><a href=\"#3-构造方法注入\" class=\"headerlink\" title=\"3. 构造方法注入\"></a>3. 构造方法注入</h4><p>在构造函数前加入注解<code>@Autowired</code>，其他同理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.autowired.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.autowired.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br><br>    <span class=\"hljs-comment\">// 第三种方式: 构造方法注入</span><br>    <span class=\"hljs-comment\">// 生成构造函数</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">UserController</span><span class=\"hljs-params\">(UserService userService)</span> &#123;<br>    \t<span class=\"hljs-built_in\">this</span>.userService = userService;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;controller......&quot;</span>);<br>        userService.add();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-形参注入\"><a href=\"#4-形参注入\" class=\"headerlink\" title=\"4. 形参注入\"></a>4. 形参注入</h4><p>形参也可以使用<code>@Autowired</code>进行注解</p>\n<h4 id=\"5-只有一个构造函数，无需使用注解\"><a href=\"#5-只有一个构造函数，无需使用注解\" class=\"headerlink\" title=\"5. 只有一个构造函数，无需使用注解\"></a>5. 只有一个构造函数，无需使用注解</h4><p><font color=\"red\">当构造函数只有一个时，Autowired注解可以省略</font></p>\n<h4 id=\"6-Autowired注解和-Qualifier注解联合\"><a href=\"#6-Autowired注解和-Qualifier注解联合\" class=\"headerlink\" title=\"6. @Autowired注解和@Qualifier注解联合\"></a>6. @Autowired注解和@Qualifier注解联合</h4><p>新建一个<code>UserRedisDaoImpl</code>类实现<code>UserDao</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRedisDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDao</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;user redis......&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>此时执行测试代码会报错</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean <span class=\"hljs-keyword\">with</span> name <span class=\"hljs-string\">&#x27;userController&#x27;</span>: Unsatisfied dependency expressed through <span class=\"hljs-keyword\">method</span> &#x27;<span class=\"hljs-title function_\">setUserService</span>&#x27; <span class=\"hljs-title function_\">parameter</span> 0: Error creating bean <span class=\"hljs-keyword\">with</span> name <span class=\"hljs-string\">&#x27;userServiceImpl&#x27;</span>: Unsatisfied dependency expressed through field <span class=\"hljs-string\">&#x27;userDao&#x27;</span>: No qualifying bean <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-string\">&#x27;org.example.autowired.dao.UserDao&#x27;</span> available: expected single <span class=\"hljs-keyword\">matching</span> bean but found <span class=\"hljs-number\">2</span>: userDaoImpl,userRedisDaoImpl<br><br></code></pre></td></tr></table></figure>\n\n<p>因为<code>UserDao</code>在注入的时候发现了两个对象，<code>userDaoImpl,userRedisDaoImpl</code>，此时不能根据类型注入，需要进行名称注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-comment\">// 注入dao</span><br>    <span class=\"hljs-comment\">// 第一种方式: 属性注入</span><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-meta\">@Qualifier</span> (value = <span class=\"hljs-string\">&quot;userRedisDaoImpl&quot;</span>)<br>    <span class=\"hljs-keyword\">private</span> UserDao userDao;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;service.....&quot;</span>);<br>        userDao.add();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/../images/springPart03/qualifier%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA.png\"></p>\n<h3 id=\"Resource注入\"><a href=\"#Resource注入\" class=\"headerlink\" title=\"@Resource注入\"></a>@Resource注入</h3><p>与<code>@Autowired</code>注解区别</p>\n<table>\n<thead>\n<tr>\n<th>@Resource</th>\n<th>@Autowired</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>是JDK扩展包中，属于JDK的一部分。所以该注解是标准注解，更具有通用性。</td>\n<td>Spring框架中自己的注解</td>\n</tr>\n<tr>\n<td>默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到则会自动启动通过类型byType装配</td>\n<td>默认根据类型装配byType，如果想根据名称装配，需要配合<code>@Qualifier</code>注解一起使用</td>\n</tr>\n<tr>\n<td>用在属性上、setter方法上</td>\n<td>用在属性上、setter方法上、构造方法上、构造方法参数上</td>\n</tr>\n</tbody></table>\n<p>需要使用依赖（JDK高于11或低于8需要引入依赖）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>jakarta.annotation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jakarta.annotation-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"全注解开发\"><a href=\"#全注解开发\" class=\"headerlink\" title=\"全注解开发\"></a>全注解开发</h3><p>不再使用spring配置文件，写一个配置类代替配置文件</p>\n<p>新建配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span>  <span class=\"hljs-comment\">// 配置类</span><br><span class=\"hljs-meta\">@ComponentScan(&quot;org.example&quot;)</span>  <span class=\"hljs-comment\">// 开启组件扫描</span><br><span class=\"hljs-comment\">// 该注解等价于在bean.xml文件中 &lt;context:component-scan base-package=&quot;org.example&quot;/&gt;</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUserControllerAnno</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 加载配置类</span><br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>    <span class=\"hljs-type\">UserController</span> <span class=\"hljs-variable\">controller</span> <span class=\"hljs-operator\">=</span> context.getBean(UserController.class);<br>    controller.add();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【study】Spring学习part03\"><a href=\"#【study】Spring学习part03\" class=\"headerlink\" title=\"【study】Spring学习part03\"></a>【study】Spring学习part03</h1><p>新建模块<code>spring6-ioc-annotation</code></p>\n<h2 id=\"基于注解管理bean（★）\"><a href=\"#基于注解管理bean（★）\" class=\"headerlink\" title=\"基于注解管理bean（★）\"></a>基于注解管理bean（★）</h2><p>Spring通过注解实现自动装配的步骤如下：</p>\n<ol>\n<li>引入依赖</li>\n<li>开启组件扫描</li>\n<li>使用注解定义bean</li>\n<li>依赖注入</li>\n</ol>\n<p>最基本的写法：</p>\n<p>新建类User</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.spring6;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>配置bean文件，<code>bean.xml</code>，添加相关约束</p>\n<p><code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans<br>       http://www.springframework.org/schema/beans/spring-beans.xsd<br>       http://www.springframework.org/schema/context<br>       http://www.springframework.org/schema/context/spring-context.xsd&quot;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--开启组件扫描--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example.spring6&quot;</span>/&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用注解定义bean\"><a href=\"#使用注解定义bean\" class=\"headerlink\" title=\"使用注解定义bean\"></a>使用注解定义bean</h3><p>Spring提供了一下多个注解，这些注解可以直接标注在Java类上，将它们定义成Spring bean</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Component</td>\n<td>该注解用于描述Spring中的bean，他是一个泛化的概念，仅仅表示容器中的一个组件（bean），并且可以作用在应用的任何层次，例如Service层，Dao层等。使用时只需将该注解标注在相应类上即可。</td>\n</tr>\n<tr>\n<td>@Repository</td>\n<td>该注解用于将数据访问层（Dao层）的类标识为Spring中的bean，其功能与@Component相同。</td>\n</tr>\n<tr>\n<td>@Service</td>\n<td>该注解通常作用在业务层（Service层），用于将业务层的类标识为Spring中的bean，其功能与@Component相同</td>\n</tr>\n<tr>\n<td>@Controller</td>\n<td>该注解通常作用在控制层（如Spring MVC的Controller），用于将控制层的类标识为Spring中的bean，其功能与@Component相同</td>\n</tr>\n</tbody></table>\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUser</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean.xml&quot;</span>);<br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>, User.class);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/springPart03/Component%E6%B3%A8%E8%A7%A3%E8%BE%93%E5%87%BA1.png\" alt=\"输出结果\"></p>\n<h3 id=\"Autowired注入\"><a href=\"#Autowired注入\" class=\"headerlink\" title=\"@Autowired注入\"></a>@Autowired注入</h3><p>单独使用<code>@Autowired</code>注解是根据类型装配，默认是<code>byType</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--bean.xml--&gt;</span><br><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--开启组件扫描--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example.spring6&quot;</span>/&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>构建一个小demo，项目结构如下</p>\n<p><code>org/example/autowired/</code>路径下</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">📁 autowired/<br>├─📁 dao/<br>│ ├─📁 impl/<br>│ │ └─📄 <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UserDaoImpl</span>.</span></span>java<br>│ └─📄 <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UserDao</span>.</span></span>java<br>├─📁 controller/<br>│ └─📄 <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UserController</span>.</span></span>java<br>└─📁 service/<br>  ├─📁 impl/<br>  │ └─📄 <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UserServiceImpl</span>.</span></span>java<br>  └─📄 <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UserSerivce</span>.</span></span>java<br><br></code></pre></td></tr></table></figure>\n\n<p>Controller使用<code>@Controller</code>注解</p>\n<p>Dao的接口实现使用<code>@Repository</code>注解</p>\n<p>Service的接口实现使用<code>@Service</code>注解</p>\n<p><code>UserController</code>、<code>UserServiceImpl</code>、<code>UserDaoImpl</code>分别实现<code>add()</code>方法，接口省略不写。</p>\n<h4 id=\"1-属性注入\"><a href=\"#1-属性注入\" class=\"headerlink\" title=\"1. 属性注入\"></a>1. 属性注入</h4><p>在<code>UserController</code>中注入<code>service</code>，这里不再需要<code>setter()</code>进行注入，使用<code>@Autowired注解</code>，下面同理。即注解写到属性上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br>    <span class=\"hljs-comment\">// 注入service</span><br>    <span class=\"hljs-comment\">// 第一种方式：属性注入</span><br>    <span class=\"hljs-meta\">@Autowired</span>  <span class=\"hljs-comment\">// 根据类型找到对应对象, 完成注入</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>    \tSystem.out.println(<span class=\"hljs-string\">&quot;controller......&quot;</span>);<br>        userService.add();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在<code>UserServiceImpl</code>中注入<code>dao</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-comment\">// 注入dao</span><br>    <span class=\"hljs-comment\">// 第一种方式: 属性注入</span><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserDao userDao;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;service......&quot;</span>);<br>        userDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAutowired</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;bean.xml&quot;</span>);<br>    <span class=\"hljs-type\">UserController</span> <span class=\"hljs-variable\">controller</span> <span class=\"hljs-operator\">=</span> context.getBean(UserController.class);<br>    controller.add();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/../images/springPart03/autowired%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA.png\"></p>\n<h4 id=\"2-set注入\"><a href=\"#2-set注入\" class=\"headerlink\" title=\"2. set注入\"></a>2. set注入</h4><p>写出其<code>setter()</code>，在前方加入注解<code>@Autowired</code>，之后同理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.autowired.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.autowired.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br><br>    <span class=\"hljs-comment\">// 第二种方式: set注入</span><br>    <span class=\"hljs-comment\">// 生成setter()</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setUserService</span><span class=\"hljs-params\">(UserService userService)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userService = userService;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;controller......&quot;</span>);<br>        userService.add();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-构造方法注入\"><a href=\"#3-构造方法注入\" class=\"headerlink\" title=\"3. 构造方法注入\"></a>3. 构造方法注入</h4><p>在构造函数前加入注解<code>@Autowired</code>，其他同理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.autowired.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.autowired.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br><br>    <span class=\"hljs-comment\">// 第三种方式: 构造方法注入</span><br>    <span class=\"hljs-comment\">// 生成构造函数</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">UserController</span><span class=\"hljs-params\">(UserService userService)</span> &#123;<br>    \t<span class=\"hljs-built_in\">this</span>.userService = userService;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;controller......&quot;</span>);<br>        userService.add();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-形参注入\"><a href=\"#4-形参注入\" class=\"headerlink\" title=\"4. 形参注入\"></a>4. 形参注入</h4><p>形参也可以使用<code>@Autowired</code>进行注解</p>\n<h4 id=\"5-只有一个构造函数，无需使用注解\"><a href=\"#5-只有一个构造函数，无需使用注解\" class=\"headerlink\" title=\"5. 只有一个构造函数，无需使用注解\"></a>5. 只有一个构造函数，无需使用注解</h4><p><font color=\"red\">当构造函数只有一个时，Autowired注解可以省略</font></p>\n<h4 id=\"6-Autowired注解和-Qualifier注解联合\"><a href=\"#6-Autowired注解和-Qualifier注解联合\" class=\"headerlink\" title=\"6. @Autowired注解和@Qualifier注解联合\"></a>6. @Autowired注解和@Qualifier注解联合</h4><p>新建一个<code>UserRedisDaoImpl</code>类实现<code>UserDao</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRedisDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDao</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;user redis......&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>此时执行测试代码会报错</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean <span class=\"hljs-keyword\">with</span> name <span class=\"hljs-string\">&#x27;userController&#x27;</span>: Unsatisfied dependency expressed through <span class=\"hljs-keyword\">method</span> &#x27;<span class=\"hljs-title function_\">setUserService</span>&#x27; <span class=\"hljs-title function_\">parameter</span> 0: Error creating bean <span class=\"hljs-keyword\">with</span> name <span class=\"hljs-string\">&#x27;userServiceImpl&#x27;</span>: Unsatisfied dependency expressed through field <span class=\"hljs-string\">&#x27;userDao&#x27;</span>: No qualifying bean <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-string\">&#x27;org.example.autowired.dao.UserDao&#x27;</span> available: expected single <span class=\"hljs-keyword\">matching</span> bean but found <span class=\"hljs-number\">2</span>: userDaoImpl,userRedisDaoImpl<br><br></code></pre></td></tr></table></figure>\n\n<p>因为<code>UserDao</code>在注入的时候发现了两个对象，<code>userDaoImpl,userRedisDaoImpl</code>，此时不能根据类型注入，需要进行名称注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-comment\">// 注入dao</span><br>    <span class=\"hljs-comment\">// 第一种方式: 属性注入</span><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-meta\">@Qualifier</span> (value = <span class=\"hljs-string\">&quot;userRedisDaoImpl&quot;</span>)<br>    <span class=\"hljs-keyword\">private</span> UserDao userDao;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;service.....&quot;</span>);<br>        userDao.add();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/../images/springPart03/qualifier%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA.png\"></p>\n<h3 id=\"Resource注入\"><a href=\"#Resource注入\" class=\"headerlink\" title=\"@Resource注入\"></a>@Resource注入</h3><p>与<code>@Autowired</code>注解区别</p>\n<table>\n<thead>\n<tr>\n<th>@Resource</th>\n<th>@Autowired</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>是JDK扩展包中，属于JDK的一部分。所以该注解是标准注解，更具有通用性。</td>\n<td>Spring框架中自己的注解</td>\n</tr>\n<tr>\n<td>默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到则会自动启动通过类型byType装配</td>\n<td>默认根据类型装配byType，如果想根据名称装配，需要配合<code>@Qualifier</code>注解一起使用</td>\n</tr>\n<tr>\n<td>用在属性上、setter方法上</td>\n<td>用在属性上、setter方法上、构造方法上、构造方法参数上</td>\n</tr>\n</tbody></table>\n<p>需要使用依赖（JDK高于11或低于8需要引入依赖）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>jakarta.annotation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jakarta.annotation-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"全注解开发\"><a href=\"#全注解开发\" class=\"headerlink\" title=\"全注解开发\"></a>全注解开发</h3><p>不再使用spring配置文件，写一个配置类代替配置文件</p>\n<p>新建配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span>  <span class=\"hljs-comment\">// 配置类</span><br><span class=\"hljs-meta\">@ComponentScan(&quot;org.example&quot;)</span>  <span class=\"hljs-comment\">// 开启组件扫描</span><br><span class=\"hljs-comment\">// 该注解等价于在bean.xml文件中 &lt;context:component-scan base-package=&quot;org.example&quot;/&gt;</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUserControllerAnno</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 加载配置类</span><br>    <span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>    <span class=\"hljs-type\">UserController</span> <span class=\"hljs-variable\">controller</span> <span class=\"hljs-operator\">=</span> context.getBean(UserController.class);<br>    controller.add();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"【study】SpringMVC学习Part01","abbrlink":"38cadbef","date":"2024-03-01T07:39:42.000Z","_content":"\n# Spring MVC学习 Part01\n\n\n\n**SSM=Spring + Spring MVC + MyBatis**\n\n\n\nSSM技术栈如下\n\n![](../images/springMVCPart01/SSM技术栈.png)\n\n表述层\n\nSSM框架构建起单体项目的技术栈需求！其中Spring MVC负责表述层（控制层）实现简化。\n\nSpring MVC的作用主要覆盖式表述层，例如：\n\n-   请求映射\n-   数据输入\n-   视图界面\n-   请求分发\n-   表单回显\n-   会话控制\n-   过滤拦截\n-   异步交互\n-   文件上传\n-   文件下载\n-   数据校验\n-   类型转换\n-   等等等\n\n\n\n## 1. Spring MVC处理流程\n\n![](../images/springMVCPart01/SpringMVC请求流程.png)\n\n\n\n1.   用户发送请求至前端控制器 DispatcherServlet。\n2.   DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。\n3.    处理器映射器根据请求 url 找到具体的处理器，生成处理器对象及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet。\n4.    DispatcherServlet 通过 HandlerAdapter 处理器适配器调用处理器。\n5.    HandlerAdapter 执行处理器（handler，也叫后端控制器）。\n6.    Controller 执行完成返回 ModelAndView。\n7.    HandlerAdapter 将 handler 执行结果 ModelAndView 返回给 DispatcherServlet\n8.   DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。\n9.   ViewReslover 解析后返回具体 View 对象。\n10.   DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中\n11.   DispatcherServlet 响应用户。\n\n\n\n### Spring MVC涉及组件理解：\n\n1.   DispatcherServlet：Spring MVC提供，需要使用`web.xml`配置使其生效，它是整个流处理的核心，所有请求都经过它的处理的分发。\n2.   HandlerMapping：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。它内部缓存handler（Controller方法）和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler\n3.   HandlerAdapter：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。它可以处理请求参数和处理响应数据。每次DispatcherServlet都是通过handlerAdapter间接调用handler，它是handler和DispatcherServlet之间的适配器\n4.   Handler：处理器，是Controller类内部方法的简称，由自己定义，用来接收参数，向后调用业务，最终返回响应结果\n\n5.   ViewResovler：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。视图解析器主要作用简化模板视图页面查找。**前后端分离项目，后端只返回JSON数据**。视图解析器组件不是必须的。\n\n\n\n\n\n## 2. 新建Spring MVC项目\n\n在父工程的`pom.xml`文件导入相关依赖\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>SpringMVCStudy</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>spring-mvc-part01</module>\n    </modules>\n\n    <properties>\n        <spring.version>6.1.4</spring.version>\n        <servlet.api>10.0.0</servlet.api>\n        <maven.compiler.source>21</maven.compiler.source>\n        <maven.compiler.target>21</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>jakarta.platform</groupId>\n            <artifactId>jakarta.jakartaee-web-api</artifactId>\n            <version>${servlet.api}</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n\n\n\n\n子模块名`spring-mvc-part01`，并且将改模块更改为web项目，在“文件--->项目--->项目结构”添加`web`相关\n\n![](../images/springMVCPart01/更改为web项目.png)\n\n\n\n添加工件\n\n![](../images/springMVCPart01/idea添加工件.png)\n\n\n\n\n\n\n\n新建Controller，`controller.HelloController`\n\n```java\npackage org.example.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * Author: Promise\n * Date: 2024-03-01 18:03\n * Description:\n */\n\n@Controller\npublic class HelloController {\n\n    // handler: springmvc/hello  return \"hello spring mvc!\"\n    // 对外访问的地址, 到handlerMapping注册的注解\n    @RequestMapping(\"springmvc/hello\")  // 对外访问的地址\n    @ResponseBody  // 直接返回字符串给前端, 不要查找视图解析器\n    public String hello() {\n        System.out.println(\"HelloController.hello\");\n        return \"Hello Spring MVC!\";\n    }\n}\n```\n\n\n\n新建配置类，将Controller配置到IoC容器中，`config.MVCConfig.java`\n\n```java\npackage org.example.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n\n/**\n * Author: Promise\n * Date: 2024-03-01 18:07\n * Description:\n *  1. Controller配置到IoC容器\n *  2. HandlerMapping handlerAdapter加入到IoC容器\n */\n\n@Configuration  // 配置类注解\n@ComponentScan(\"org.example.controller\")  // 扫描指定包\npublic class MVCConfig {\n    @Bean\n    public RequestMappingHandlerMapping handlerMapping() {\n        return new RequestMappingHandlerMapping();\n    }\n\n    @Bean\n    public RequestMappingHandlerAdapter handlerAdapter() {\n        return new RequestMappingHandlerAdapter();\n    }\n}\n\n```\n\n\n\n配置Spring MVC\n\n```java\npackage org.example.config;\n\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\n/**\n * Author: Promise\n * Date: 2024-03-01 18:26\n * Description:\n * Spring MVC提供的接口, 是替代web.xml的方案, 更方便实现完全注解方式ssm处理\n * Spring MVC框架会自动检查当前实现类, 会自动加载getRootConfigClasses() / getServletConfigClasses().\n * getServletMappings 返回的地址 设置DispatcherServlet对应处理的地址\n */\n\npublic class SpringMVCInit extends AbstractAnnotationConfigDispatcherServletInitializer {\n    /**\n     * 指定service / mapper 层的配置类\n     */\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return null;\n    }\n\n    /**\n     * 指定Spring MVC 的配置类\n     */\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class[]{MVCConfig.class};  // IoC 配置类\n    }\n\n    /**\n     * 设置DispatcherServlet处理路径\n     * 一般情况下为 / 代表处理所有请求\n     */\n    @Override\n    protected String[] getServletMappings() {\n        return new String[]{\"/\"};\n    }\n}\n\n// 该类等效了以下内容\n// <web-app>\n//\n//  <listener>\n//     <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n//  </listener>\n//\n//\n//  <servlet>\n//     <servlet-name>app1</servlet-name>\n//     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n//     <init-param>\n//        <param-name>contextConfigLocation</param-name>\n//        <param-value>/WEB-INF/web.xml</param-value>\n//     </init-param>\n//     <load-on-startup>1</load-on-startup>\n//  </servlet>\n//\n//  <servlet-mapping>\n//     <servlet-name>app1</servlet-name>\n//     <url-pattern>/</url-pattern>\n//  </servlet-mapping>\n//\n//</web-app>\n```\n\n\n\n## 3. 搭建Tomcat（macOS下）\n\n[apache-tomcat-10.1.19.zip](https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.19/bin/apache-tomcat-10.1.19.zip)\n\n下载tomcat压缩包，进行解压。进入到idea中，将红框内的路径修改为解压后的路径。\n\n![](../images/springMVCPart01/tomcat.png)\n\n在“部署”栏目中添加之前新建的“工件”，并且上下文更改为`/`\n\n![](../images/springMVCPart01/部署.png)\n\n\n\n到解压路径下，修改`*.sh`文件的启动权限\n\n``` shell\nchmod u+x *.sh\n```\n\n启动tomcat\n\n``` shell\n./startup.sh\n```\n\n关闭tomcat\n\n``` sh\n./shutdown.sh\n```\n\n\n\n此时已经可以使用idea来启动Tomcat服务器\n\n\n\n运行，输入URL`http://localhost:8080/springmvc/hello`\n\n![](../images/springMVCPart01/helloSpringMVC.png)\n\n\n\n## 4. Spring MVC接收数据\n\n### 4.1 访问路径\n\n`@RequestMapping`注解的作用是将请求的URL地址和处理请求的方式（handler方法）关联起来，建立映射的关系\n\n>   1.   不同于WebServlet必须要使用`/`开头，但是在SpringMVC中不一定必须要用`/`开头\n>\n>   2.   支持模糊地址。`*`：任意一层字符串     `**`：任意层任意字符串。\n>\n>        `/user/*`  --->  /`user/a`可以进入，`/user/a/b`不可以进入\n>\n>        `/user/**`    ---> `/user/a/a/a/a/a`\n>\n>   3.   请求方式的指定：使用属性`method`，若不符合请求方式，会出现<font color=\"red\">405</font>异常\n\n\n\n```java\npackage org.example.requestmapping;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 14:16\n * Description:\n * 类上和方法上添加@RequestsMapping区别\n *      类上是提取通用方法的地址(非必须)\n *      方法上是具体的handler地址(必须)\n *      如下方代码, 如果想访问/user路径, 那么直接写@RequestMapping不加参数即可\n */\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n    @RequestMapping(value = \"/login\", method = {RequestMethod.GET, RequestMethod.POST})  // 作用注册地址, 将handler注册到handlerMapping上\n    public String login() {\n        return null;\n    }\n\n    @RequestMapping(value = \"/register\", method = RequestMethod.POST)\n    public String register() {\n        return null;\n    }\n\n    @RequestMapping\n    public String index() {\n        return null;\n    }\n}\n\n```\n\n`@GetMapping`和`@PostMapping`注解\n\n均继承自`@RequestMapping`，但是他们只能用于注解方法\n\n`@RequestMapping(value = \"/register\", method = RequestMethod.POST)`等价于`@PostRequest(\"register\")`\n\n`GET   POST    PUT   DELETE`同理\n\n\n\n### @RequestMapping注解\n\n-   `value = \"***\"`：路径\n-   `method = RequestMethod.***`：请求方法\n\n\n\n## 5. Spring MVC接收数据\n\nparam格式：`key1=value1&key2=value2`\n\nJSON格式：`{\"key1\": \"value1\", \"key2\": \"value2\"}`\n\nparam格式是ASCII码，JSON为`UTF-8`。类型方面，param仅支持字符串类型，而JSON可以更复杂\n\n新建模块`spring-mvc-part02`，并且按照之前的方法重新配置web项目，部署Tomcat时，“应用程序上下文”更改为`/part02`\n\n![](../images/springMVCPart01/tomcat2.png)\n\n\n\n此处使用三种接收参数方式：\n\n-   直接接收\n-   注解指定：指定任意请求参数名，要求必须传递\n-   特殊值\n\n新建Controller，`param.ParamController`\n\n\n\n### 5.1 直接接收\n\n\n\n```java\npackage org.example.param;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 15:19\n * Description:\n */\n\n@Controller\n@RequestMapping(\"/param\")\npublic class ParamController {\n    @GetMapping(\"/data\")\n    @ResponseBody\n    public String data(String name, int age) {\n        System.out.println(\"name = \" + name + \", age = \" + age);\n        return \"name = \" + name + \", age = \" + age;\n    }\n}\n```\n\n\n\n\n\n\n\n新建配置类`config.MVCConfig`\n\n``` java\npackage org.example.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 15:20\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"org.example\")\npublic class MVCConfig {\n    @Bean\n    public RequestMappingHandlerMapping handlerMapping() {\n        return new RequestMappingHandlerMapping();\n    }\n\n    @Bean\n    public RequestMappingHandlerAdapter handlerAdapter() {\n        return new RequestMappingHandlerAdapter();\n    }\n}\n\n```\n\n\n\nSpring MVC初始化\n\n```java\npackage org.example.config;\n\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 15:21\n * Description:\n */\n\npublic class SpringMVCInit extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return new Class[0];\n    }\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class[]{MVCConfig.class};\n    }\n\n    @Override\n    protected String[] getServletMappings() {\n        return new String[]{\"/\"};\n    }\n}\n\n```\n\n启动服务器，在浏览器输入相应URL\n\n`http://localhost:8080/part02/param/data?name=root&age=18`\n\n\n\n![](../images/springMVCPart01/mvc接收参数结果1.png)\n\n### 5.2 注解指定\n\n\n\n**@RequestParam参数**\n\n只加在形参列表，指定请求参数名，或者是否为必须传递，或者非必须传递设置默认值\n\n\n\n*用法如下*\n\n\n\n`String func(@RequestParam(value = \"\"), required = true)`\n\n\n\n1.   `value = \"***\"`：前端传过来的参数名\n2.   `required = true/false`：是否为必须传递项，默认为必须（若不传递会报<font color=\"red\">400</font>异常）\n3.   `defaultValue = \"1\"`：默认值为1\n\n\n\n在`param.ParamController.java`继续添加方法\n\n``` java\n// 2. 注解指定\n// URL:  /param/data1?account=root&page=1\n// 其中account参数为必须传递, page是非必须传递(但是需要有一个默认值)\n@GetMapping(\"/data1\")\n@ResponseBody\npublic String data1(@RequestParam(value = \"account\") String username,\n                    @RequestParam(required = false, defaultValue = \"1\") int page) {\n    System.out.println(\"account(username) = \" + username + \", page = \" + page);\n    return \"account(username) = \" + username + \", page = \" + page;\n}\n```\n\n\n\n\n\n![](../images/springMVCPart01/注解指定结果.png)\n\n### 5.3 特殊值\n\n继续在`ParamController`添加方法\n\n```java\n// 3. 特殊值\n// 一名多值   key=1&key=2  直接使用集合值即可\n// URL:   /param/data2?hobbies=唱&hobbies=跳&hobbies=rap&hobbies=篮球\n@GetMapping(\"/data2\")\n@ResponseBody\npublic String data2(@RequestParam List<String> hobbies) {\n    System.out.println(\"hobbies = \" + hobbies);\n    return hobbies.toString();\n}\n```\n\n>   注意：此处的参数必须要添加@RequestParam，将hobbies对应的一个字符才能直接赋值给集合，报错类型异常。加了此注解之后才可add相应字符串\n\n\n\n<font color=\"red\">下图为不加@RequestParam注解报错的情况</font>\n\n![](../images/springMVCPart01/list不加注解报错.png)\n\n\n\n<font color=\"green\">添加注解之后</font>\n\n![](../images/springMVCPart01/list添加注解但是问号.png)\n\n控制台的输出\n\n![](../images/springMVCPart01/添加注解控制台.png)\n\n现在解决编码的问题\n\n需要将类注解的`@RequestMapping`中增加属性即可。\n\n`@RequestMapping(value = \"/param\", produces = \"text/plain;charset=UTF-8\")`\n\n\n\n\n\n### 5.4 使用实体对象接收值（*）\n\n\n\n创建实体类`pojo.User`\n\n```java\npackage org.example.pojo;\n\nimport org.springframework.stereotype.Component;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 19:59\n * Description:\n */\n\npublic class User {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    \n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n```\n\n\n\n添加方法\n\n```java\n// 4. 实体类\n// 用实体类接收值\n// URL:   /param/data3?name=zhangsan&age=18\n@GetMapping(\"/data3\")\n@ResponseBody\npublic String data3(User user) {  // 属性名等同于前端传的属性\n    System.out.println(user);\n    return user.toString();\n}\n```\n\n\n\n\n\n![](../images/springMVCPart01/实体对象.png)\n\n若传输过来的属性对应不到实体对象，也不会进行赋值。\n\n\n\n\n\n### 5.5 路径传参\n\n新建Controller，`path.Controller`\n\n```java\npackage org.example.path;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 20:11\n * Description:\n */\n\n@Controller\n@RequestMapping(\"path\")\npublic class PathController {\n    \n    // URL:  path/账号/密码\n    // 动态路径设计\n    @GetMapping(\"{account}/{password}\")  // 使用大括号\n    @ResponseBody\n    public String login() {\n        \n    }\n}\n```\n\n**@GetMapping(\"{account}/{password}\")**\n\n等价于`@GetMapping(\"*/*\")`，但是使用星号并不能获取到参数。\n\n若按照如下形式写，代表接收param类型的值\n\n``` java\n@GetMapping(\"{account}/{password}\")  // 使用大括号\n@ResponseBody\npublic String login(String account, String password) {\n\n}\n```\n\n需要使用注解`@PathVariable`在形参前面，其他属性与`@RequestParam`中相同，可以设置不同的名字和是否必须项等。\n\n\n\n\n\n``` java\npackage org.example.path;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 20:11\n * Description:\n */\n\n@Controller\n@RequestMapping(value = \"/path\", produces = \"text/plain;charset=UTF-8\")\npublic class PathController {\n\n    // URL:  path/账号/密码\n    // 动态路径设计\n    @ResponseBody\n    @GetMapping(value = \"/{account}/{password}\")  // 使用大括号\n    public String login(@PathVariable(\"account\") String account,\n                        @PathVariable(\"password\") String password) {\n        System.out.println(\"account = \" + account + \", password = \" + password);\n        return \"account = \" + account + \", password = \" + password;\n    }\n}\n\n```\n\n\n\n\n\n![](../images/springMVCPart01/路径参数.png)\n\n\n\n\n\n### 5.6 JSON接收\n\n新建Controller，`json.JSONController`\n\n```java\npackage org.example.json;\n\nimport org.example.pojo.Person;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 20:51\n * Description:\n */\n\n@Controller\n@RequestMapping(\"json\")\n@ResponseBody\npublic class JSONController {\n    // data 通过请求体使用post方法\n\n    @PostMapping(\"data\")\n    public String data(@RequestBody Person person) {\n        System.out.println(\"person = \" + person);\n        return person.toString();\n    }\n}\n```\n\n默认实体类是param类型的，但是想接收JSON格式，需要加入注解`@RequestBody`\n\n\n\n使用Python进行模拟POST请求\n\n``` python\nimport requests\n\nurl = \"http://localhost:8080/part02/json/data\"\nperson = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"gender\": \"male\"\n}\n\nresponse = requests.post(url, data=person)\nprint(response)\n\n```\n\n\n\n\n\n模拟POST请求之后会得到以下报错，<font color=\"red\">415</font>状态码\n\n![](../images/springMVCPart01/415报错.png)\n\n\n\n**415类型错误原因???**\n\n>   因为JSON是前端的格式，而不是Java的格式。Java原生的Web API只支持路径参数和param参数。\n>\n>   如果需要项目支持JSON格式需要以下操作：\n>\n>   -   导入JSON处理相关依赖\n>\n>       ``` xml\n>       <dependency>\n>           <groupId>com.fasterxml.jackson.core</groupId>\n>           <artifactId>jackson-databind</artifactId>\n>           <version>2.15.0</version>\n>       </dependency>\n>       ```\n>\n>       \n>\n>   -   handlerAdapter配置JSON转换器\n>\n>       在`config.MVCConfig.java`中添加类注解`@EnableWebMVC`，给handlerAdapter配置JSON转换器\n>\n>   \n>\n>   但是经过一天的Debug还没找到问题的所在，即使python代码我更改为如下的形式\n>\n>   ``` python\n>   import requests\n>   import json\n>   \n>   url = \"http://localhost:8080/part02/json/data\"\n>   person = {\n>       \"name\": \"John Doe\",\n>       \"age\": 30,\n>       \"gender\": \"male\"\n>   }\n>   \n>   \n>   header = {\n>       \"Content-Type\": \"application/json\"\n>   }\n>   \n>   response = requests.post(url, data=json.dumps(person), headers=header)\n>   print(response.text)\n>   \n>   ```\n>\n>   java代码更改为以下（主要是`@PostMapping`注解添加了属性）\n>\n>   ``` java\n>   @PostMapping(value = \"data\", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)\n>   public String data(@RequestBody Person person) {\n>       System.out.println(\"person = \" + person);\n>       return person.toString();\n>   }\n>   ```\n>\n>   consumes属性是指定接收的字符串格式，这里为`application/json;charset=utf-8`\n>\n>   报的错误为\n>\n>   <font color=\"#6c0000\">org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content-Type 'application/json;charset=UTF-8' is not supported]</font>\n>\n>   \n\n\n\n#### @EnableWebMvc注解\n\n效果等同于在XML配置中，可以使用`<mvc:annotation-driven>`元素\n\n\n\n### 5.7 接收cookie\n\n**@CookieValue**\n\n新建Controller，`cookie.CookieController`\n\n```java\npackage org.example.cookie;\n\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.CookieValue;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * Author: Promise\n * Date: 2024-03-04 21:36\n * Description:\n */\n\n@Controller\n@RequestMapping(\"cookie\")\n@ResponseBody\npublic class CookieController {\n    @GetMapping(\"data\")\n    public String data(@CookieValue(value = \"cookieName\")String value) {\n        System.out.printf(\"value = \" + value);\n        return value;\n    }\n\n    @GetMapping(\"save\")\n    public String save(HttpServletResponse response) {\n        Cookie cookie = new Cookie(\"cookieName\", \"root\");\n        response.addCookie(cookie);\n        return \"ok\";\n    }\n}\n```\n\n先通过`/cookie/save`添加一个cookie，再访问`/cookie/data`返回这个cookie的值\n\n\n\n### 5.8获取请求头\n\n**@RequestHeader**\n\n>   `@Request***`可以查到通过request请求的各种参数\n\n新建Controller，`header.HeaderController`\n\n```java\npackage org.example.header;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestHeader;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * Author: Promise\n * Date: 2024-03-04 21:42\n * Description:\n */\n\n@Controller\n@RequestMapping(\"header\")\n@ResponseBody\npublic class headerController {\n    @GetMapping(\"getHeader\")\n    public String getHeader(@RequestHeader(\"Host\") String host) {\n        System.out.println(\"host = \" + host);\n        return host;\n    }\n}\n```\n\n\n\n","source":"_posts/【study】SpringMVC学习Part01.md","raw":"---\ntitle: 【study】SpringMVC学习Part01\ntags:\n  - Study\n  - Java\n  - Spring MVC框架\nabbrlink: 38cadbef\ndate: 2024-03-01 15:39:42\n---\n\n# Spring MVC学习 Part01\n\n\n\n**SSM=Spring + Spring MVC + MyBatis**\n\n\n\nSSM技术栈如下\n\n![](../images/springMVCPart01/SSM技术栈.png)\n\n表述层\n\nSSM框架构建起单体项目的技术栈需求！其中Spring MVC负责表述层（控制层）实现简化。\n\nSpring MVC的作用主要覆盖式表述层，例如：\n\n-   请求映射\n-   数据输入\n-   视图界面\n-   请求分发\n-   表单回显\n-   会话控制\n-   过滤拦截\n-   异步交互\n-   文件上传\n-   文件下载\n-   数据校验\n-   类型转换\n-   等等等\n\n\n\n## 1. Spring MVC处理流程\n\n![](../images/springMVCPart01/SpringMVC请求流程.png)\n\n\n\n1.   用户发送请求至前端控制器 DispatcherServlet。\n2.   DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。\n3.    处理器映射器根据请求 url 找到具体的处理器，生成处理器对象及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet。\n4.    DispatcherServlet 通过 HandlerAdapter 处理器适配器调用处理器。\n5.    HandlerAdapter 执行处理器（handler，也叫后端控制器）。\n6.    Controller 执行完成返回 ModelAndView。\n7.    HandlerAdapter 将 handler 执行结果 ModelAndView 返回给 DispatcherServlet\n8.   DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。\n9.   ViewReslover 解析后返回具体 View 对象。\n10.   DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中\n11.   DispatcherServlet 响应用户。\n\n\n\n### Spring MVC涉及组件理解：\n\n1.   DispatcherServlet：Spring MVC提供，需要使用`web.xml`配置使其生效，它是整个流处理的核心，所有请求都经过它的处理的分发。\n2.   HandlerMapping：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。它内部缓存handler（Controller方法）和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler\n3.   HandlerAdapter：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。它可以处理请求参数和处理响应数据。每次DispatcherServlet都是通过handlerAdapter间接调用handler，它是handler和DispatcherServlet之间的适配器\n4.   Handler：处理器，是Controller类内部方法的简称，由自己定义，用来接收参数，向后调用业务，最终返回响应结果\n\n5.   ViewResovler：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。视图解析器主要作用简化模板视图页面查找。**前后端分离项目，后端只返回JSON数据**。视图解析器组件不是必须的。\n\n\n\n\n\n## 2. 新建Spring MVC项目\n\n在父工程的`pom.xml`文件导入相关依赖\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>SpringMVCStudy</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>spring-mvc-part01</module>\n    </modules>\n\n    <properties>\n        <spring.version>6.1.4</spring.version>\n        <servlet.api>10.0.0</servlet.api>\n        <maven.compiler.source>21</maven.compiler.source>\n        <maven.compiler.target>21</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>jakarta.platform</groupId>\n            <artifactId>jakarta.jakartaee-web-api</artifactId>\n            <version>${servlet.api}</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n\n\n\n\n子模块名`spring-mvc-part01`，并且将改模块更改为web项目，在“文件--->项目--->项目结构”添加`web`相关\n\n![](../images/springMVCPart01/更改为web项目.png)\n\n\n\n添加工件\n\n![](../images/springMVCPart01/idea添加工件.png)\n\n\n\n\n\n\n\n新建Controller，`controller.HelloController`\n\n```java\npackage org.example.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * Author: Promise\n * Date: 2024-03-01 18:03\n * Description:\n */\n\n@Controller\npublic class HelloController {\n\n    // handler: springmvc/hello  return \"hello spring mvc!\"\n    // 对外访问的地址, 到handlerMapping注册的注解\n    @RequestMapping(\"springmvc/hello\")  // 对外访问的地址\n    @ResponseBody  // 直接返回字符串给前端, 不要查找视图解析器\n    public String hello() {\n        System.out.println(\"HelloController.hello\");\n        return \"Hello Spring MVC!\";\n    }\n}\n```\n\n\n\n新建配置类，将Controller配置到IoC容器中，`config.MVCConfig.java`\n\n```java\npackage org.example.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n\n/**\n * Author: Promise\n * Date: 2024-03-01 18:07\n * Description:\n *  1. Controller配置到IoC容器\n *  2. HandlerMapping handlerAdapter加入到IoC容器\n */\n\n@Configuration  // 配置类注解\n@ComponentScan(\"org.example.controller\")  // 扫描指定包\npublic class MVCConfig {\n    @Bean\n    public RequestMappingHandlerMapping handlerMapping() {\n        return new RequestMappingHandlerMapping();\n    }\n\n    @Bean\n    public RequestMappingHandlerAdapter handlerAdapter() {\n        return new RequestMappingHandlerAdapter();\n    }\n}\n\n```\n\n\n\n配置Spring MVC\n\n```java\npackage org.example.config;\n\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\n/**\n * Author: Promise\n * Date: 2024-03-01 18:26\n * Description:\n * Spring MVC提供的接口, 是替代web.xml的方案, 更方便实现完全注解方式ssm处理\n * Spring MVC框架会自动检查当前实现类, 会自动加载getRootConfigClasses() / getServletConfigClasses().\n * getServletMappings 返回的地址 设置DispatcherServlet对应处理的地址\n */\n\npublic class SpringMVCInit extends AbstractAnnotationConfigDispatcherServletInitializer {\n    /**\n     * 指定service / mapper 层的配置类\n     */\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return null;\n    }\n\n    /**\n     * 指定Spring MVC 的配置类\n     */\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class[]{MVCConfig.class};  // IoC 配置类\n    }\n\n    /**\n     * 设置DispatcherServlet处理路径\n     * 一般情况下为 / 代表处理所有请求\n     */\n    @Override\n    protected String[] getServletMappings() {\n        return new String[]{\"/\"};\n    }\n}\n\n// 该类等效了以下内容\n// <web-app>\n//\n//  <listener>\n//     <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n//  </listener>\n//\n//\n//  <servlet>\n//     <servlet-name>app1</servlet-name>\n//     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n//     <init-param>\n//        <param-name>contextConfigLocation</param-name>\n//        <param-value>/WEB-INF/web.xml</param-value>\n//     </init-param>\n//     <load-on-startup>1</load-on-startup>\n//  </servlet>\n//\n//  <servlet-mapping>\n//     <servlet-name>app1</servlet-name>\n//     <url-pattern>/</url-pattern>\n//  </servlet-mapping>\n//\n//</web-app>\n```\n\n\n\n## 3. 搭建Tomcat（macOS下）\n\n[apache-tomcat-10.1.19.zip](https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.19/bin/apache-tomcat-10.1.19.zip)\n\n下载tomcat压缩包，进行解压。进入到idea中，将红框内的路径修改为解压后的路径。\n\n![](../images/springMVCPart01/tomcat.png)\n\n在“部署”栏目中添加之前新建的“工件”，并且上下文更改为`/`\n\n![](../images/springMVCPart01/部署.png)\n\n\n\n到解压路径下，修改`*.sh`文件的启动权限\n\n``` shell\nchmod u+x *.sh\n```\n\n启动tomcat\n\n``` shell\n./startup.sh\n```\n\n关闭tomcat\n\n``` sh\n./shutdown.sh\n```\n\n\n\n此时已经可以使用idea来启动Tomcat服务器\n\n\n\n运行，输入URL`http://localhost:8080/springmvc/hello`\n\n![](../images/springMVCPart01/helloSpringMVC.png)\n\n\n\n## 4. Spring MVC接收数据\n\n### 4.1 访问路径\n\n`@RequestMapping`注解的作用是将请求的URL地址和处理请求的方式（handler方法）关联起来，建立映射的关系\n\n>   1.   不同于WebServlet必须要使用`/`开头，但是在SpringMVC中不一定必须要用`/`开头\n>\n>   2.   支持模糊地址。`*`：任意一层字符串     `**`：任意层任意字符串。\n>\n>        `/user/*`  --->  /`user/a`可以进入，`/user/a/b`不可以进入\n>\n>        `/user/**`    ---> `/user/a/a/a/a/a`\n>\n>   3.   请求方式的指定：使用属性`method`，若不符合请求方式，会出现<font color=\"red\">405</font>异常\n\n\n\n```java\npackage org.example.requestmapping;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 14:16\n * Description:\n * 类上和方法上添加@RequestsMapping区别\n *      类上是提取通用方法的地址(非必须)\n *      方法上是具体的handler地址(必须)\n *      如下方代码, 如果想访问/user路径, 那么直接写@RequestMapping不加参数即可\n */\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n    @RequestMapping(value = \"/login\", method = {RequestMethod.GET, RequestMethod.POST})  // 作用注册地址, 将handler注册到handlerMapping上\n    public String login() {\n        return null;\n    }\n\n    @RequestMapping(value = \"/register\", method = RequestMethod.POST)\n    public String register() {\n        return null;\n    }\n\n    @RequestMapping\n    public String index() {\n        return null;\n    }\n}\n\n```\n\n`@GetMapping`和`@PostMapping`注解\n\n均继承自`@RequestMapping`，但是他们只能用于注解方法\n\n`@RequestMapping(value = \"/register\", method = RequestMethod.POST)`等价于`@PostRequest(\"register\")`\n\n`GET   POST    PUT   DELETE`同理\n\n\n\n### @RequestMapping注解\n\n-   `value = \"***\"`：路径\n-   `method = RequestMethod.***`：请求方法\n\n\n\n## 5. Spring MVC接收数据\n\nparam格式：`key1=value1&key2=value2`\n\nJSON格式：`{\"key1\": \"value1\", \"key2\": \"value2\"}`\n\nparam格式是ASCII码，JSON为`UTF-8`。类型方面，param仅支持字符串类型，而JSON可以更复杂\n\n新建模块`spring-mvc-part02`，并且按照之前的方法重新配置web项目，部署Tomcat时，“应用程序上下文”更改为`/part02`\n\n![](../images/springMVCPart01/tomcat2.png)\n\n\n\n此处使用三种接收参数方式：\n\n-   直接接收\n-   注解指定：指定任意请求参数名，要求必须传递\n-   特殊值\n\n新建Controller，`param.ParamController`\n\n\n\n### 5.1 直接接收\n\n\n\n```java\npackage org.example.param;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 15:19\n * Description:\n */\n\n@Controller\n@RequestMapping(\"/param\")\npublic class ParamController {\n    @GetMapping(\"/data\")\n    @ResponseBody\n    public String data(String name, int age) {\n        System.out.println(\"name = \" + name + \", age = \" + age);\n        return \"name = \" + name + \", age = \" + age;\n    }\n}\n```\n\n\n\n\n\n\n\n新建配置类`config.MVCConfig`\n\n``` java\npackage org.example.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 15:20\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"org.example\")\npublic class MVCConfig {\n    @Bean\n    public RequestMappingHandlerMapping handlerMapping() {\n        return new RequestMappingHandlerMapping();\n    }\n\n    @Bean\n    public RequestMappingHandlerAdapter handlerAdapter() {\n        return new RequestMappingHandlerAdapter();\n    }\n}\n\n```\n\n\n\nSpring MVC初始化\n\n```java\npackage org.example.config;\n\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 15:21\n * Description:\n */\n\npublic class SpringMVCInit extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return new Class[0];\n    }\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class[]{MVCConfig.class};\n    }\n\n    @Override\n    protected String[] getServletMappings() {\n        return new String[]{\"/\"};\n    }\n}\n\n```\n\n启动服务器，在浏览器输入相应URL\n\n`http://localhost:8080/part02/param/data?name=root&age=18`\n\n\n\n![](../images/springMVCPart01/mvc接收参数结果1.png)\n\n### 5.2 注解指定\n\n\n\n**@RequestParam参数**\n\n只加在形参列表，指定请求参数名，或者是否为必须传递，或者非必须传递设置默认值\n\n\n\n*用法如下*\n\n\n\n`String func(@RequestParam(value = \"\"), required = true)`\n\n\n\n1.   `value = \"***\"`：前端传过来的参数名\n2.   `required = true/false`：是否为必须传递项，默认为必须（若不传递会报<font color=\"red\">400</font>异常）\n3.   `defaultValue = \"1\"`：默认值为1\n\n\n\n在`param.ParamController.java`继续添加方法\n\n``` java\n// 2. 注解指定\n// URL:  /param/data1?account=root&page=1\n// 其中account参数为必须传递, page是非必须传递(但是需要有一个默认值)\n@GetMapping(\"/data1\")\n@ResponseBody\npublic String data1(@RequestParam(value = \"account\") String username,\n                    @RequestParam(required = false, defaultValue = \"1\") int page) {\n    System.out.println(\"account(username) = \" + username + \", page = \" + page);\n    return \"account(username) = \" + username + \", page = \" + page;\n}\n```\n\n\n\n\n\n![](../images/springMVCPart01/注解指定结果.png)\n\n### 5.3 特殊值\n\n继续在`ParamController`添加方法\n\n```java\n// 3. 特殊值\n// 一名多值   key=1&key=2  直接使用集合值即可\n// URL:   /param/data2?hobbies=唱&hobbies=跳&hobbies=rap&hobbies=篮球\n@GetMapping(\"/data2\")\n@ResponseBody\npublic String data2(@RequestParam List<String> hobbies) {\n    System.out.println(\"hobbies = \" + hobbies);\n    return hobbies.toString();\n}\n```\n\n>   注意：此处的参数必须要添加@RequestParam，将hobbies对应的一个字符才能直接赋值给集合，报错类型异常。加了此注解之后才可add相应字符串\n\n\n\n<font color=\"red\">下图为不加@RequestParam注解报错的情况</font>\n\n![](../images/springMVCPart01/list不加注解报错.png)\n\n\n\n<font color=\"green\">添加注解之后</font>\n\n![](../images/springMVCPart01/list添加注解但是问号.png)\n\n控制台的输出\n\n![](../images/springMVCPart01/添加注解控制台.png)\n\n现在解决编码的问题\n\n需要将类注解的`@RequestMapping`中增加属性即可。\n\n`@RequestMapping(value = \"/param\", produces = \"text/plain;charset=UTF-8\")`\n\n\n\n\n\n### 5.4 使用实体对象接收值（*）\n\n\n\n创建实体类`pojo.User`\n\n```java\npackage org.example.pojo;\n\nimport org.springframework.stereotype.Component;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 19:59\n * Description:\n */\n\npublic class User {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    \n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n```\n\n\n\n添加方法\n\n```java\n// 4. 实体类\n// 用实体类接收值\n// URL:   /param/data3?name=zhangsan&age=18\n@GetMapping(\"/data3\")\n@ResponseBody\npublic String data3(User user) {  // 属性名等同于前端传的属性\n    System.out.println(user);\n    return user.toString();\n}\n```\n\n\n\n\n\n![](../images/springMVCPart01/实体对象.png)\n\n若传输过来的属性对应不到实体对象，也不会进行赋值。\n\n\n\n\n\n### 5.5 路径传参\n\n新建Controller，`path.Controller`\n\n```java\npackage org.example.path;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 20:11\n * Description:\n */\n\n@Controller\n@RequestMapping(\"path\")\npublic class PathController {\n    \n    // URL:  path/账号/密码\n    // 动态路径设计\n    @GetMapping(\"{account}/{password}\")  // 使用大括号\n    @ResponseBody\n    public String login() {\n        \n    }\n}\n```\n\n**@GetMapping(\"{account}/{password}\")**\n\n等价于`@GetMapping(\"*/*\")`，但是使用星号并不能获取到参数。\n\n若按照如下形式写，代表接收param类型的值\n\n``` java\n@GetMapping(\"{account}/{password}\")  // 使用大括号\n@ResponseBody\npublic String login(String account, String password) {\n\n}\n```\n\n需要使用注解`@PathVariable`在形参前面，其他属性与`@RequestParam`中相同，可以设置不同的名字和是否必须项等。\n\n\n\n\n\n``` java\npackage org.example.path;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 20:11\n * Description:\n */\n\n@Controller\n@RequestMapping(value = \"/path\", produces = \"text/plain;charset=UTF-8\")\npublic class PathController {\n\n    // URL:  path/账号/密码\n    // 动态路径设计\n    @ResponseBody\n    @GetMapping(value = \"/{account}/{password}\")  // 使用大括号\n    public String login(@PathVariable(\"account\") String account,\n                        @PathVariable(\"password\") String password) {\n        System.out.println(\"account = \" + account + \", password = \" + password);\n        return \"account = \" + account + \", password = \" + password;\n    }\n}\n\n```\n\n\n\n\n\n![](../images/springMVCPart01/路径参数.png)\n\n\n\n\n\n### 5.6 JSON接收\n\n新建Controller，`json.JSONController`\n\n```java\npackage org.example.json;\n\nimport org.example.pojo.Person;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * Author: Promise\n * Date: 2024-03-03 20:51\n * Description:\n */\n\n@Controller\n@RequestMapping(\"json\")\n@ResponseBody\npublic class JSONController {\n    // data 通过请求体使用post方法\n\n    @PostMapping(\"data\")\n    public String data(@RequestBody Person person) {\n        System.out.println(\"person = \" + person);\n        return person.toString();\n    }\n}\n```\n\n默认实体类是param类型的，但是想接收JSON格式，需要加入注解`@RequestBody`\n\n\n\n使用Python进行模拟POST请求\n\n``` python\nimport requests\n\nurl = \"http://localhost:8080/part02/json/data\"\nperson = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"gender\": \"male\"\n}\n\nresponse = requests.post(url, data=person)\nprint(response)\n\n```\n\n\n\n\n\n模拟POST请求之后会得到以下报错，<font color=\"red\">415</font>状态码\n\n![](../images/springMVCPart01/415报错.png)\n\n\n\n**415类型错误原因???**\n\n>   因为JSON是前端的格式，而不是Java的格式。Java原生的Web API只支持路径参数和param参数。\n>\n>   如果需要项目支持JSON格式需要以下操作：\n>\n>   -   导入JSON处理相关依赖\n>\n>       ``` xml\n>       <dependency>\n>           <groupId>com.fasterxml.jackson.core</groupId>\n>           <artifactId>jackson-databind</artifactId>\n>           <version>2.15.0</version>\n>       </dependency>\n>       ```\n>\n>       \n>\n>   -   handlerAdapter配置JSON转换器\n>\n>       在`config.MVCConfig.java`中添加类注解`@EnableWebMVC`，给handlerAdapter配置JSON转换器\n>\n>   \n>\n>   但是经过一天的Debug还没找到问题的所在，即使python代码我更改为如下的形式\n>\n>   ``` python\n>   import requests\n>   import json\n>   \n>   url = \"http://localhost:8080/part02/json/data\"\n>   person = {\n>       \"name\": \"John Doe\",\n>       \"age\": 30,\n>       \"gender\": \"male\"\n>   }\n>   \n>   \n>   header = {\n>       \"Content-Type\": \"application/json\"\n>   }\n>   \n>   response = requests.post(url, data=json.dumps(person), headers=header)\n>   print(response.text)\n>   \n>   ```\n>\n>   java代码更改为以下（主要是`@PostMapping`注解添加了属性）\n>\n>   ``` java\n>   @PostMapping(value = \"data\", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)\n>   public String data(@RequestBody Person person) {\n>       System.out.println(\"person = \" + person);\n>       return person.toString();\n>   }\n>   ```\n>\n>   consumes属性是指定接收的字符串格式，这里为`application/json;charset=utf-8`\n>\n>   报的错误为\n>\n>   <font color=\"#6c0000\">org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content-Type 'application/json;charset=UTF-8' is not supported]</font>\n>\n>   \n\n\n\n#### @EnableWebMvc注解\n\n效果等同于在XML配置中，可以使用`<mvc:annotation-driven>`元素\n\n\n\n### 5.7 接收cookie\n\n**@CookieValue**\n\n新建Controller，`cookie.CookieController`\n\n```java\npackage org.example.cookie;\n\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.CookieValue;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * Author: Promise\n * Date: 2024-03-04 21:36\n * Description:\n */\n\n@Controller\n@RequestMapping(\"cookie\")\n@ResponseBody\npublic class CookieController {\n    @GetMapping(\"data\")\n    public String data(@CookieValue(value = \"cookieName\")String value) {\n        System.out.printf(\"value = \" + value);\n        return value;\n    }\n\n    @GetMapping(\"save\")\n    public String save(HttpServletResponse response) {\n        Cookie cookie = new Cookie(\"cookieName\", \"root\");\n        response.addCookie(cookie);\n        return \"ok\";\n    }\n}\n```\n\n先通过`/cookie/save`添加一个cookie，再访问`/cookie/data`返回这个cookie的值\n\n\n\n### 5.8获取请求头\n\n**@RequestHeader**\n\n>   `@Request***`可以查到通过request请求的各种参数\n\n新建Controller，`header.HeaderController`\n\n```java\npackage org.example.header;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestHeader;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * Author: Promise\n * Date: 2024-03-04 21:42\n * Description:\n */\n\n@Controller\n@RequestMapping(\"header\")\n@ResponseBody\npublic class headerController {\n    @GetMapping(\"getHeader\")\n    public String getHeader(@RequestHeader(\"Host\") String host) {\n        System.out.println(\"host = \" + host);\n        return host;\n    }\n}\n```\n\n\n\n","slug":"【study】SpringMVC学习Part01","published":1,"updated":"2024-03-05T07:35:05.188Z","_id":"clte21tws0000rtz863055742","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Spring-MVC学习-Part01\"><a href=\"#Spring-MVC学习-Part01\" class=\"headerlink\" title=\"Spring MVC学习 Part01\"></a>Spring MVC学习 Part01</h1><p><strong>SSM&#x3D;Spring + Spring MVC + MyBatis</strong></p>\n<p>SSM技术栈如下</p>\n<p><img src=\"/../images/springMVCPart01/SSM%E6%8A%80%E6%9C%AF%E6%A0%88.png\"></p>\n<p>表述层</p>\n<p>SSM框架构建起单体项目的技术栈需求！其中Spring MVC负责表述层（控制层）实现简化。</p>\n<p>Spring MVC的作用主要覆盖式表述层，例如：</p>\n<ul>\n<li>请求映射</li>\n<li>数据输入</li>\n<li>视图界面</li>\n<li>请求分发</li>\n<li>表单回显</li>\n<li>会话控制</li>\n<li>过滤拦截</li>\n<li>异步交互</li>\n<li>文件上传</li>\n<li>文件下载</li>\n<li>数据校验</li>\n<li>类型转换</li>\n<li>等等等</li>\n</ul>\n<h2 id=\"1-Spring-MVC处理流程\"><a href=\"#1-Spring-MVC处理流程\" class=\"headerlink\" title=\"1. Spring MVC处理流程\"></a>1. Spring MVC处理流程</h2><p><img src=\"/../images/springMVCPart01/SpringMVC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.png\"></p>\n<ol>\n<li>用户发送请求至前端控制器 DispatcherServlet。</li>\n<li>DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。</li>\n<li>处理器映射器根据请求 url 找到具体的处理器，生成处理器对象及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet。</li>\n<li>DispatcherServlet 通过 HandlerAdapter 处理器适配器调用处理器。</li>\n<li>HandlerAdapter 执行处理器（handler，也叫后端控制器）。</li>\n<li>Controller 执行完成返回 ModelAndView。</li>\n<li>HandlerAdapter 将 handler 执行结果 ModelAndView 返回给 DispatcherServlet</li>\n<li>DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</li>\n<li>ViewReslover 解析后返回具体 View 对象。</li>\n<li>DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中</li>\n<li>DispatcherServlet 响应用户。</li>\n</ol>\n<h3 id=\"Spring-MVC涉及组件理解：\"><a href=\"#Spring-MVC涉及组件理解：\" class=\"headerlink\" title=\"Spring MVC涉及组件理解：\"></a>Spring MVC涉及组件理解：</h3><ol>\n<li><p>DispatcherServlet：Spring MVC提供，需要使用<code>web.xml</code>配置使其生效，它是整个流处理的核心，所有请求都经过它的处理的分发。</p>\n</li>\n<li><p>HandlerMapping：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。它内部缓存handler（Controller方法）和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler</p>\n</li>\n<li><p>HandlerAdapter：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。它可以处理请求参数和处理响应数据。每次DispatcherServlet都是通过handlerAdapter间接调用handler，它是handler和DispatcherServlet之间的适配器</p>\n</li>\n<li><p>Handler：处理器，是Controller类内部方法的简称，由自己定义，用来接收参数，向后调用业务，最终返回响应结果</p>\n</li>\n<li><p>ViewResovler：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。视图解析器主要作用简化模板视图页面查找。<strong>前后端分离项目，后端只返回JSON数据</strong>。视图解析器组件不是必须的。</p>\n</li>\n</ol>\n<h2 id=\"2-新建Spring-MVC项目\"><a href=\"#2-新建Spring-MVC项目\" class=\"headerlink\" title=\"2. 新建Spring MVC项目\"></a>2. 新建Spring MVC项目</h2><p>在父工程的<code>pom.xml</code>文件导入相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.example<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>SpringMVCStudy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">packaging</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">packaging</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modules</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>spring-mvc-part01<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modules</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring.version</span>&gt;</span>6.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring.version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet.api</span>&gt;</span>10.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet.api</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-context<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>jakarta.platform<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;servlet.api&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>provided<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>子模块名<code>spring-mvc-part01</code>，并且将改模块更改为web项目，在“文件—&gt;项目—&gt;项目结构”添加<code>web</code>相关</p>\n<p><img src=\"/../images/springMVCPart01/%E6%9B%B4%E6%94%B9%E4%B8%BAweb%E9%A1%B9%E7%9B%AE.png\"></p>\n<p>添加工件</p>\n<p><img src=\"/../images/springMVCPart01/idea%E6%B7%BB%E5%8A%A0%E5%B7%A5%E4%BB%B6.png\"></p>\n<p>新建Controller，<code>controller.HelloController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.controller;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-01 18:03</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloController</span> &#123;<br><br>    <span class=\"hljs-comment\">// handler: springmvc/hello  return &quot;hello spring mvc!&quot;</span><br>    <span class=\"hljs-comment\">// 对外访问的地址, 到handlerMapping注册的注解</span><br>    <span class=\"hljs-meta\">@RequestMapping(&quot;springmvc/hello&quot;)</span>  <span class=\"hljs-comment\">// 对外访问的地址</span><br>    <span class=\"hljs-meta\">@ResponseBody</span>  <span class=\"hljs-comment\">// 直接返回字符串给前端, 不要查找视图解析器</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">hello</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;HelloController.hello&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello Spring MVC!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建配置类，将Controller配置到IoC容器中，<code>config.MVCConfig.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-01 18:07</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> *  1. Controller配置到IoC容器</span><br><span class=\"hljs-comment\"> *  2. HandlerMapping handlerAdapter加入到IoC容器</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Configuration</span>  <span class=\"hljs-comment\">// 配置类注解</span><br><span class=\"hljs-meta\">@ComponentScan(&quot;org.example.controller&quot;)</span>  <span class=\"hljs-comment\">// 扫描指定包</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MVCConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RequestMappingHandlerMapping <span class=\"hljs-title function_\">handlerMapping</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestMappingHandlerMapping</span>();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RequestMappingHandlerAdapter <span class=\"hljs-title function_\">handlerAdapter</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestMappingHandlerAdapter</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>配置Spring MVC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-01 18:26</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> * Spring MVC提供的接口, 是替代web.xml的方案, 更方便实现完全注解方式ssm处理</span><br><span class=\"hljs-comment\"> * Spring MVC框架会自动检查当前实现类, 会自动加载getRootConfigClasses() / getServletConfigClasses().</span><br><span class=\"hljs-comment\"> * getServletMappings 返回的地址 设置DispatcherServlet对应处理的地址</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringMVCInit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 指定service / mapper 层的配置类</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 指定Spring MVC 的配置类</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]&#123;MVCConfig.class&#125;;  <span class=\"hljs-comment\">// IoC 配置类</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置DispatcherServlet处理路径</span><br><span class=\"hljs-comment\">     * 一般情况下为 / 代表处理所有请求</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> String[] getServletMappings() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 该类等效了以下内容</span><br><span class=\"hljs-comment\">// &lt;web-app&gt;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//  &lt;listener&gt;</span><br><span class=\"hljs-comment\">//     &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class=\"hljs-comment\">//  &lt;/listener&gt;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//  &lt;servlet&gt;</span><br><span class=\"hljs-comment\">//     &lt;servlet-name&gt;app1&lt;/servlet-name&gt;</span><br><span class=\"hljs-comment\">//     &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class=\"hljs-comment\">//     &lt;init-param&gt;</span><br><span class=\"hljs-comment\">//        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"hljs-comment\">//        &lt;param-value&gt;/WEB-INF/web.xml&lt;/param-value&gt;</span><br><span class=\"hljs-comment\">//     &lt;/init-param&gt;</span><br><span class=\"hljs-comment\">//     &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"hljs-comment\">//  &lt;/servlet&gt;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//  &lt;servlet-mapping&gt;</span><br><span class=\"hljs-comment\">//     &lt;servlet-name&gt;app1&lt;/servlet-name&gt;</span><br><span class=\"hljs-comment\">//     &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"hljs-comment\">//  &lt;/servlet-mapping&gt;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//&lt;/web-app&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-搭建Tomcat（macOS下）\"><a href=\"#3-搭建Tomcat（macOS下）\" class=\"headerlink\" title=\"3. 搭建Tomcat（macOS下）\"></a>3. 搭建Tomcat（macOS下）</h2><p><a href=\"https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.19/bin/apache-tomcat-10.1.19.zip\">apache-tomcat-10.1.19.zip</a></p>\n<p>下载tomcat压缩包，进行解压。进入到idea中，将红框内的路径修改为解压后的路径。</p>\n<p><img src=\"/../images/springMVCPart01/tomcat.png\"></p>\n<p>在“部署”栏目中添加之前新建的“工件”，并且上下文更改为<code>/</code></p>\n<p><img src=\"/../images/springMVCPart01/%E9%83%A8%E7%BD%B2.png\"></p>\n<p>到解压路径下，修改<code>*.sh</code>文件的启动权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">chmod u+x *.sh<br></code></pre></td></tr></table></figure>\n\n<p>启动tomcat</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">./startup.sh<br></code></pre></td></tr></table></figure>\n\n<p>关闭tomcat</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">./shutdown.sh<br></code></pre></td></tr></table></figure>\n\n\n\n<p>此时已经可以使用idea来启动Tomcat服务器</p>\n<p>运行，输入URL<code>http://localhost:8080/springmvc/hello</code></p>\n<p><img src=\"/../images/springMVCPart01/helloSpringMVC.png\"></p>\n<h2 id=\"4-Spring-MVC接收数据\"><a href=\"#4-Spring-MVC接收数据\" class=\"headerlink\" title=\"4. Spring MVC接收数据\"></a>4. Spring MVC接收数据</h2><h3 id=\"4-1-访问路径\"><a href=\"#4-1-访问路径\" class=\"headerlink\" title=\"4.1 访问路径\"></a>4.1 访问路径</h3><p><code>@RequestMapping</code>注解的作用是将请求的URL地址和处理请求的方式（handler方法）关联起来，建立映射的关系</p>\n<blockquote>\n<ol>\n<li><p>不同于WebServlet必须要使用<code>/</code>开头，但是在SpringMVC中不一定必须要用<code>/</code>开头</p>\n</li>\n<li><p>支持模糊地址。<code>*</code>：任意一层字符串     <code>**</code>：任意层任意字符串。</p>\n<p><code>/user/*</code>  —&gt;  &#x2F;<code>user/a</code>可以进入，<code>/user/a/b</code>不可以进入</p>\n<p><code>/user/**</code>    —&gt; <code>/user/a/a/a/a/a</code></p>\n</li>\n<li><p>请求方式的指定：使用属性<code>method</code>，若不符合请求方式，会出现<font color=\"red\">405</font>异常</p>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.requestmapping;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 14:16</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> * 类上和方法上添加<span class=\"hljs-doctag\">@RequestsMapping</span>区别</span><br><span class=\"hljs-comment\"> *      类上是提取通用方法的地址(非必须)</span><br><span class=\"hljs-comment\"> *      方法上是具体的handler地址(必须)</span><br><span class=\"hljs-comment\"> *      如下方代码, 如果想访问/user路径, 那么直接写<span class=\"hljs-doctag\">@RequestMapping</span>不加参数即可</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br>    <span class=\"hljs-meta\">@RequestMapping(value = &quot;/login&quot;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span>  <span class=\"hljs-comment\">// 作用注册地址, 将handler注册到handlerMapping上</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@RequestMapping(value = &quot;/register&quot;, method = RequestMethod.POST)</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@RequestMapping</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">index</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><code>@GetMapping</code>和<code>@PostMapping</code>注解</p>\n<p>均继承自<code>@RequestMapping</code>，但是他们只能用于注解方法</p>\n<p><code>@RequestMapping(value = &quot;/register&quot;, method = RequestMethod.POST)</code>等价于<code>@PostRequest(&quot;register&quot;)</code></p>\n<p><code>GET   POST    PUT   DELETE</code>同理</p>\n<h3 id=\"RequestMapping注解\"><a href=\"#RequestMapping注解\" class=\"headerlink\" title=\"@RequestMapping注解\"></a>@RequestMapping注解</h3><ul>\n<li><code>value = &quot;***&quot;</code>：路径</li>\n<li><code>method = RequestMethod.***</code>：请求方法</li>\n</ul>\n<h2 id=\"5-Spring-MVC接收数据\"><a href=\"#5-Spring-MVC接收数据\" class=\"headerlink\" title=\"5. Spring MVC接收数据\"></a>5. Spring MVC接收数据</h2><p>param格式：<code>key1=value1&amp;key2=value2</code></p>\n<p>JSON格式：<code>&#123;&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;&#125;</code></p>\n<p>param格式是ASCII码，JSON为<code>UTF-8</code>。类型方面，param仅支持字符串类型，而JSON可以更复杂</p>\n<p>新建模块<code>spring-mvc-part02</code>，并且按照之前的方法重新配置web项目，部署Tomcat时，“应用程序上下文”更改为<code>/part02</code></p>\n<p><img src=\"/../images/springMVCPart01/tomcat2.png\"></p>\n<p>此处使用三种接收参数方式：</p>\n<ul>\n<li>直接接收</li>\n<li>注解指定：指定任意请求参数名，要求必须传递</li>\n<li>特殊值</li>\n</ul>\n<p>新建Controller，<code>param.ParamController</code></p>\n<h3 id=\"5-1-直接接收\"><a href=\"#5-1-直接接收\" class=\"headerlink\" title=\"5.1 直接接收\"></a>5.1 直接接收</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.param;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.*;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 15:19</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/param&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ParamController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/data&quot;)</span><br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> age)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;name = &quot;</span> + name + <span class=\"hljs-string\">&quot;, age = &quot;</span> + age);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;name = &quot;</span> + name + <span class=\"hljs-string\">&quot;, age = &quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>新建配置类<code>config.MVCConfig</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 15:20</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ComponentScan(&quot;org.example&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MVCConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RequestMappingHandlerMapping <span class=\"hljs-title function_\">handlerMapping</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestMappingHandlerMapping</span>();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RequestMappingHandlerAdapter <span class=\"hljs-title function_\">handlerAdapter</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestMappingHandlerAdapter</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>Spring MVC初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 15:21</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringMVCInit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[<span class=\"hljs-number\">0</span>];<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]&#123;MVCConfig.class&#125;;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> String[] getServletMappings() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>启动服务器，在浏览器输入相应URL</p>\n<p><code>http://localhost:8080/part02/param/data?name=root&amp;age=18</code></p>\n<p><img src=\"/../images/springMVCPart01/mvc%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%9C1.png\"></p>\n<h3 id=\"5-2-注解指定\"><a href=\"#5-2-注解指定\" class=\"headerlink\" title=\"5.2 注解指定\"></a>5.2 注解指定</h3><p><strong>@RequestParam参数</strong></p>\n<p>只加在形参列表，指定请求参数名，或者是否为必须传递，或者非必须传递设置默认值</p>\n<p><em>用法如下</em></p>\n<p><code>String func(@RequestParam(value = &quot;&quot;), required = true)</code></p>\n<ol>\n<li><code>value = &quot;***&quot;</code>：前端传过来的参数名</li>\n<li><code>required = true/false</code>：是否为必须传递项，默认为必须（若不传递会报<font color=\"red\">400</font>异常）</li>\n<li><code>defaultValue = &quot;1&quot;</code>：默认值为1</li>\n</ol>\n<p>在<code>param.ParamController.java</code>继续添加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 2. 注解指定</span><br><span class=\"hljs-comment\">// URL:  /param/data1?account=root&amp;page=1</span><br><span class=\"hljs-comment\">// 其中account参数为必须传递, page是非必须传递(但是需要有一个默认值)</span><br><span class=\"hljs-meta\">@GetMapping(&quot;/data1&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data1</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(value = &quot;account&quot;)</span> String username,</span><br><span class=\"hljs-params\">                    <span class=\"hljs-meta\">@RequestParam(required = false, defaultValue = &quot;1&quot;)</span> <span class=\"hljs-type\">int</span> page)</span> &#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;account(username) = &quot;</span> + username + <span class=\"hljs-string\">&quot;, page = &quot;</span> + page);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;account(username) = &quot;</span> + username + <span class=\"hljs-string\">&quot;, page = &quot;</span> + page;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/../images/springMVCPart01/%E6%B3%A8%E8%A7%A3%E6%8C%87%E5%AE%9A%E7%BB%93%E6%9E%9C.png\"></p>\n<h3 id=\"5-3-特殊值\"><a href=\"#5-3-特殊值\" class=\"headerlink\" title=\"5.3 特殊值\"></a>5.3 特殊值</h3><p>继续在<code>ParamController</code>添加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 3. 特殊值</span><br><span class=\"hljs-comment\">// 一名多值   key=1&amp;key=2  直接使用集合值即可</span><br><span class=\"hljs-comment\">// URL:   /param/data2?hobbies=唱&amp;hobbies=跳&amp;hobbies=rap&amp;hobbies=篮球</span><br><span class=\"hljs-meta\">@GetMapping(&quot;/data2&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data2</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam</span> List&lt;String&gt; hobbies)</span> &#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;hobbies = &quot;</span> + hobbies);<br>    <span class=\"hljs-keyword\">return</span> hobbies.toString();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  注意：此处的参数必须要添加@RequestParam，将hobbies对应的一个字符才能直接赋值给集合，报错类型异常。加了此注解之后才可add相应字符串</p>\n</blockquote>\n<p><font color=\"red\">下图为不加@RequestParam注解报错的情况</font></p>\n<p><img src=\"/../images/springMVCPart01/list%E4%B8%8D%E5%8A%A0%E6%B3%A8%E8%A7%A3%E6%8A%A5%E9%94%99.png\"></p>\n<p><font color=\"green\">添加注解之后</font></p>\n<p><img src=\"/../images/springMVCPart01/list%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3%E4%BD%86%E6%98%AF%E9%97%AE%E5%8F%B7.png\"></p>\n<p>控制台的输出</p>\n<p><img src=\"/../images/springMVCPart01/%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3%E6%8E%A7%E5%88%B6%E5%8F%B0.png\"></p>\n<p>现在解决编码的问题</p>\n<p>需要将类注解的<code>@RequestMapping</code>中增加属性即可。</p>\n<p><code>@RequestMapping(value = &quot;/param&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</code></p>\n<h3 id=\"5-4-使用实体对象接收值（-）\"><a href=\"#5-4-使用实体对象接收值（-）\" class=\"headerlink\" title=\"5.4 使用实体对象接收值（*）\"></a>5.4 使用实体对象接收值（*）</h3><p>创建实体类<code>pojo.User</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.pojo;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 19:59</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>    <br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;User&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>添加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 4. 实体类</span><br><span class=\"hljs-comment\">// 用实体类接收值</span><br><span class=\"hljs-comment\">// URL:   /param/data3?name=zhangsan&amp;age=18</span><br><span class=\"hljs-meta\">@GetMapping(&quot;/data3&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data3</span><span class=\"hljs-params\">(User user)</span> &#123;  <span class=\"hljs-comment\">// 属性名等同于前端传的属性</span><br>    System.out.println(user);<br>    <span class=\"hljs-keyword\">return</span> user.toString();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/../images/springMVCPart01/%E5%AE%9E%E4%BD%93%E5%AF%B9%E8%B1%A1.png\"></p>\n<p>若传输过来的属性对应不到实体对象，也不会进行赋值。</p>\n<h3 id=\"5-5-路径传参\"><a href=\"#5-5-路径传参\" class=\"headerlink\" title=\"5.5 路径传参\"></a>5.5 路径传参</h3><p>新建Controller，<code>path.Controller</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.path;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 20:11</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;path&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PathController</span> &#123;<br>    <br>    <span class=\"hljs-comment\">// URL:  path/账号/密码</span><br>    <span class=\"hljs-comment\">// 动态路径设计</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;&#123;account&#125;/&#123;password&#125;&quot;)</span>  <span class=\"hljs-comment\">// 使用大括号</span><br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">()</span> &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>@GetMapping(“{account}&#x2F;{password}”)</strong></p>\n<p>等价于<code>@GetMapping(&quot;*/*&quot;)</code>，但是使用星号并不能获取到参数。</p>\n<p>若按照如下形式写，代表接收param类型的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@GetMapping(&quot;&#123;account&#125;/&#123;password&#125;&quot;)</span>  <span class=\"hljs-comment\">// 使用大括号</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(String account, String password)</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>需要使用注解<code>@PathVariable</code>在形参前面，其他属性与<code>@RequestParam</code>中相同，可以设置不同的名字和是否必须项等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.path;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.*;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 20:11</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/path&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PathController</span> &#123;<br><br>    <span class=\"hljs-comment\">// URL:  path/账号/密码</span><br>    <span class=\"hljs-comment\">// 动态路径设计</span><br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/&#123;account&#125;/&#123;password&#125;&quot;)</span>  <span class=\"hljs-comment\">// 使用大括号</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable(&quot;account&quot;)</span> String account,</span><br><span class=\"hljs-params\">                        <span class=\"hljs-meta\">@PathVariable(&quot;password&quot;)</span> String password)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;account = &quot;</span> + account + <span class=\"hljs-string\">&quot;, password = &quot;</span> + password);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;account = &quot;</span> + account + <span class=\"hljs-string\">&quot;, password = &quot;</span> + password;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/../images/springMVCPart01/%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0.png\"></p>\n<h3 id=\"5-6-JSON接收\"><a href=\"#5-6-JSON接收\" class=\"headerlink\" title=\"5.6 JSON接收\"></a>5.6 JSON接收</h3><p>新建Controller，<code>json.JSONController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.json;<br><br><span class=\"hljs-keyword\">import</span> org.example.pojo.Person;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 20:51</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;json&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JSONController</span> &#123;<br>    <span class=\"hljs-comment\">// data 通过请求体使用post方法</span><br><br>    <span class=\"hljs-meta\">@PostMapping(&quot;data&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> Person person)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;person = &quot;</span> + person);<br>        <span class=\"hljs-keyword\">return</span> person.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>默认实体类是param类型的，但是想接收JSON格式，需要加入注解<code>@RequestBody</code></p>\n<p>使用Python进行模拟POST请求</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><br>url = <span class=\"hljs-string\">&quot;http://localhost:8080/part02/json/data&quot;</span><br>person = &#123;<br>    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;John Doe&quot;</span>,<br>    <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">30</span>,<br>    <span class=\"hljs-string\">&quot;gender&quot;</span>: <span class=\"hljs-string\">&quot;male&quot;</span><br>&#125;<br><br>response = requests.post(url, data=person)<br><span class=\"hljs-built_in\">print</span>(response)<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>模拟POST请求之后会得到以下报错，<font color=\"red\">415</font>状态码</p>\n<p><img src=\"/../images/springMVCPart01/415%E6%8A%A5%E9%94%99.png\"></p>\n<p><strong>415类型错误原因???</strong></p>\n<blockquote>\n<p>  因为JSON是前端的格式，而不是Java的格式。Java原生的Web API只支持路径参数和param参数。</p>\n<p>  如果需要项目支持JSON格式需要以下操作：</p>\n<ul>\n<li><p>导入JSON处理相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-databind<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.15.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>handlerAdapter配置JSON转换器</p>\n<p>在<code>config.MVCConfig.java</code>中添加类注解<code>@EnableWebMVC</code>，给handlerAdapter配置JSON转换器</p>\n</li>\n</ul>\n<p>  但是经过一天的Debug还没找到问题的所在，即使python代码我更改为如下的形式</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> json<br><br>url = <span class=\"hljs-string\">&quot;http://localhost:8080/part02/json/data&quot;</span><br>person = &#123;<br>    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;John Doe&quot;</span>,<br>    <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">30</span>,<br>    <span class=\"hljs-string\">&quot;gender&quot;</span>: <span class=\"hljs-string\">&quot;male&quot;</span><br>&#125;<br><br><br>header = &#123;<br>    <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span><br>&#125;<br><br>response = requests.post(url, data=json.dumps(person), headers=header)<br><span class=\"hljs-built_in\">print</span>(response.text)<br><br></code></pre></td></tr></table></figure>\n\n<p>  java代码更改为以下（主要是<code>@PostMapping</code>注解添加了属性）</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@PostMapping(value = &quot;data&quot;, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> Person person)</span> &#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;person = &quot;</span> + person);<br>    <span class=\"hljs-keyword\">return</span> person.toString();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  consumes属性是指定接收的字符串格式，这里为<code>application/json;charset=utf-8</code></p>\n<p>  报的错误为</p>\n<p>  <font color=\"#6c0000\">org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content-Type ‘application&#x2F;json;charset&#x3D;UTF-8’ is not supported]</font></p>\n</blockquote>\n<h4 id=\"EnableWebMvc注解\"><a href=\"#EnableWebMvc注解\" class=\"headerlink\" title=\"@EnableWebMvc注解\"></a>@EnableWebMvc注解</h4><p>效果等同于在XML配置中，可以使用<code>&lt;mvc:annotation-driven&gt;</code>元素</p>\n<h3 id=\"5-7-接收cookie\"><a href=\"#5-7-接收cookie\" class=\"headerlink\" title=\"5.7 接收cookie\"></a>5.7 接收cookie</h3><p><strong>@CookieValue</strong></p>\n<p>新建Controller，<code>cookie.CookieController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.cookie;<br><br><span class=\"hljs-keyword\">import</span> jakarta.servlet.http.Cookie;<br><span class=\"hljs-keyword\">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.CookieValue;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-04 21:36</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;cookie&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CookieController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;data&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@CookieValue(value = &quot;cookieName&quot;)</span>String value)</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;value = &quot;</span> + value);<br>        <span class=\"hljs-keyword\">return</span> value;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@GetMapping(&quot;save&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(HttpServletResponse response)</span> &#123;<br>        <span class=\"hljs-type\">Cookie</span> <span class=\"hljs-variable\">cookie</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cookie</span>(<span class=\"hljs-string\">&quot;cookieName&quot;</span>, <span class=\"hljs-string\">&quot;root&quot;</span>);<br>        response.addCookie(cookie);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>先通过<code>/cookie/save</code>添加一个cookie，再访问<code>/cookie/data</code>返回这个cookie的值</p>\n<h3 id=\"5-8获取请求头\"><a href=\"#5-8获取请求头\" class=\"headerlink\" title=\"5.8获取请求头\"></a>5.8获取请求头</h3><p><strong>@RequestHeader</strong></p>\n<blockquote>\n<p>  <code>@Request***</code>可以查到通过request请求的各种参数</p>\n</blockquote>\n<p>新建Controller，<code>header.HeaderController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.header;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestHeader;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-04 21:42</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;header&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">headerController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;getHeader&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getHeader</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestHeader(&quot;Host&quot;)</span> String host)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;host = &quot;</span> + host);<br>        <span class=\"hljs-keyword\">return</span> host;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-MVC学习-Part01\"><a href=\"#Spring-MVC学习-Part01\" class=\"headerlink\" title=\"Spring MVC学习 Part01\"></a>Spring MVC学习 Part01</h1><p><strong>SSM&#x3D;Spring + Spring MVC + MyBatis</strong></p>\n<p>SSM技术栈如下</p>\n<p><img src=\"/../images/springMVCPart01/SSM%E6%8A%80%E6%9C%AF%E6%A0%88.png\"></p>\n<p>表述层</p>\n<p>SSM框架构建起单体项目的技术栈需求！其中Spring MVC负责表述层（控制层）实现简化。</p>\n<p>Spring MVC的作用主要覆盖式表述层，例如：</p>\n<ul>\n<li>请求映射</li>\n<li>数据输入</li>\n<li>视图界面</li>\n<li>请求分发</li>\n<li>表单回显</li>\n<li>会话控制</li>\n<li>过滤拦截</li>\n<li>异步交互</li>\n<li>文件上传</li>\n<li>文件下载</li>\n<li>数据校验</li>\n<li>类型转换</li>\n<li>等等等</li>\n</ul>\n<h2 id=\"1-Spring-MVC处理流程\"><a href=\"#1-Spring-MVC处理流程\" class=\"headerlink\" title=\"1. Spring MVC处理流程\"></a>1. Spring MVC处理流程</h2><p><img src=\"/../images/springMVCPart01/SpringMVC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.png\"></p>\n<ol>\n<li>用户发送请求至前端控制器 DispatcherServlet。</li>\n<li>DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。</li>\n<li>处理器映射器根据请求 url 找到具体的处理器，生成处理器对象及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet。</li>\n<li>DispatcherServlet 通过 HandlerAdapter 处理器适配器调用处理器。</li>\n<li>HandlerAdapter 执行处理器（handler，也叫后端控制器）。</li>\n<li>Controller 执行完成返回 ModelAndView。</li>\n<li>HandlerAdapter 将 handler 执行结果 ModelAndView 返回给 DispatcherServlet</li>\n<li>DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</li>\n<li>ViewReslover 解析后返回具体 View 对象。</li>\n<li>DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中</li>\n<li>DispatcherServlet 响应用户。</li>\n</ol>\n<h3 id=\"Spring-MVC涉及组件理解：\"><a href=\"#Spring-MVC涉及组件理解：\" class=\"headerlink\" title=\"Spring MVC涉及组件理解：\"></a>Spring MVC涉及组件理解：</h3><ol>\n<li><p>DispatcherServlet：Spring MVC提供，需要使用<code>web.xml</code>配置使其生效，它是整个流处理的核心，所有请求都经过它的处理的分发。</p>\n</li>\n<li><p>HandlerMapping：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。它内部缓存handler（Controller方法）和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler</p>\n</li>\n<li><p>HandlerAdapter：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。它可以处理请求参数和处理响应数据。每次DispatcherServlet都是通过handlerAdapter间接调用handler，它是handler和DispatcherServlet之间的适配器</p>\n</li>\n<li><p>Handler：处理器，是Controller类内部方法的简称，由自己定义，用来接收参数，向后调用业务，最终返回响应结果</p>\n</li>\n<li><p>ViewResovler：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。视图解析器主要作用简化模板视图页面查找。<strong>前后端分离项目，后端只返回JSON数据</strong>。视图解析器组件不是必须的。</p>\n</li>\n</ol>\n<h2 id=\"2-新建Spring-MVC项目\"><a href=\"#2-新建Spring-MVC项目\" class=\"headerlink\" title=\"2. 新建Spring MVC项目\"></a>2. 新建Spring MVC项目</h2><p>在父工程的<code>pom.xml</code>文件导入相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.example<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>SpringMVCStudy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">packaging</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">packaging</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modules</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>spring-mvc-part01<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modules</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring.version</span>&gt;</span>6.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring.version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet.api</span>&gt;</span>10.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet.api</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-context<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>jakarta.platform<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;servlet.api&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>provided<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>子模块名<code>spring-mvc-part01</code>，并且将改模块更改为web项目，在“文件—&gt;项目—&gt;项目结构”添加<code>web</code>相关</p>\n<p><img src=\"/../images/springMVCPart01/%E6%9B%B4%E6%94%B9%E4%B8%BAweb%E9%A1%B9%E7%9B%AE.png\"></p>\n<p>添加工件</p>\n<p><img src=\"/../images/springMVCPart01/idea%E6%B7%BB%E5%8A%A0%E5%B7%A5%E4%BB%B6.png\"></p>\n<p>新建Controller，<code>controller.HelloController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.controller;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-01 18:03</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloController</span> &#123;<br><br>    <span class=\"hljs-comment\">// handler: springmvc/hello  return &quot;hello spring mvc!&quot;</span><br>    <span class=\"hljs-comment\">// 对外访问的地址, 到handlerMapping注册的注解</span><br>    <span class=\"hljs-meta\">@RequestMapping(&quot;springmvc/hello&quot;)</span>  <span class=\"hljs-comment\">// 对外访问的地址</span><br>    <span class=\"hljs-meta\">@ResponseBody</span>  <span class=\"hljs-comment\">// 直接返回字符串给前端, 不要查找视图解析器</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">hello</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;HelloController.hello&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello Spring MVC!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>新建配置类，将Controller配置到IoC容器中，<code>config.MVCConfig.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-01 18:07</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> *  1. Controller配置到IoC容器</span><br><span class=\"hljs-comment\"> *  2. HandlerMapping handlerAdapter加入到IoC容器</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Configuration</span>  <span class=\"hljs-comment\">// 配置类注解</span><br><span class=\"hljs-meta\">@ComponentScan(&quot;org.example.controller&quot;)</span>  <span class=\"hljs-comment\">// 扫描指定包</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MVCConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RequestMappingHandlerMapping <span class=\"hljs-title function_\">handlerMapping</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestMappingHandlerMapping</span>();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RequestMappingHandlerAdapter <span class=\"hljs-title function_\">handlerAdapter</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestMappingHandlerAdapter</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>配置Spring MVC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-01 18:26</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> * Spring MVC提供的接口, 是替代web.xml的方案, 更方便实现完全注解方式ssm处理</span><br><span class=\"hljs-comment\"> * Spring MVC框架会自动检查当前实现类, 会自动加载getRootConfigClasses() / getServletConfigClasses().</span><br><span class=\"hljs-comment\"> * getServletMappings 返回的地址 设置DispatcherServlet对应处理的地址</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringMVCInit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 指定service / mapper 层的配置类</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 指定Spring MVC 的配置类</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]&#123;MVCConfig.class&#125;;  <span class=\"hljs-comment\">// IoC 配置类</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置DispatcherServlet处理路径</span><br><span class=\"hljs-comment\">     * 一般情况下为 / 代表处理所有请求</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> String[] getServletMappings() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 该类等效了以下内容</span><br><span class=\"hljs-comment\">// &lt;web-app&gt;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//  &lt;listener&gt;</span><br><span class=\"hljs-comment\">//     &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class=\"hljs-comment\">//  &lt;/listener&gt;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//  &lt;servlet&gt;</span><br><span class=\"hljs-comment\">//     &lt;servlet-name&gt;app1&lt;/servlet-name&gt;</span><br><span class=\"hljs-comment\">//     &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class=\"hljs-comment\">//     &lt;init-param&gt;</span><br><span class=\"hljs-comment\">//        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"hljs-comment\">//        &lt;param-value&gt;/WEB-INF/web.xml&lt;/param-value&gt;</span><br><span class=\"hljs-comment\">//     &lt;/init-param&gt;</span><br><span class=\"hljs-comment\">//     &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"hljs-comment\">//  &lt;/servlet&gt;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//  &lt;servlet-mapping&gt;</span><br><span class=\"hljs-comment\">//     &lt;servlet-name&gt;app1&lt;/servlet-name&gt;</span><br><span class=\"hljs-comment\">//     &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"hljs-comment\">//  &lt;/servlet-mapping&gt;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//&lt;/web-app&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-搭建Tomcat（macOS下）\"><a href=\"#3-搭建Tomcat（macOS下）\" class=\"headerlink\" title=\"3. 搭建Tomcat（macOS下）\"></a>3. 搭建Tomcat（macOS下）</h2><p><a href=\"https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.19/bin/apache-tomcat-10.1.19.zip\">apache-tomcat-10.1.19.zip</a></p>\n<p>下载tomcat压缩包，进行解压。进入到idea中，将红框内的路径修改为解压后的路径。</p>\n<p><img src=\"/../images/springMVCPart01/tomcat.png\"></p>\n<p>在“部署”栏目中添加之前新建的“工件”，并且上下文更改为<code>/</code></p>\n<p><img src=\"/../images/springMVCPart01/%E9%83%A8%E7%BD%B2.png\"></p>\n<p>到解压路径下，修改<code>*.sh</code>文件的启动权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">chmod u+x *.sh<br></code></pre></td></tr></table></figure>\n\n<p>启动tomcat</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">./startup.sh<br></code></pre></td></tr></table></figure>\n\n<p>关闭tomcat</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">./shutdown.sh<br></code></pre></td></tr></table></figure>\n\n\n\n<p>此时已经可以使用idea来启动Tomcat服务器</p>\n<p>运行，输入URL<code>http://localhost:8080/springmvc/hello</code></p>\n<p><img src=\"/../images/springMVCPart01/helloSpringMVC.png\"></p>\n<h2 id=\"4-Spring-MVC接收数据\"><a href=\"#4-Spring-MVC接收数据\" class=\"headerlink\" title=\"4. Spring MVC接收数据\"></a>4. Spring MVC接收数据</h2><h3 id=\"4-1-访问路径\"><a href=\"#4-1-访问路径\" class=\"headerlink\" title=\"4.1 访问路径\"></a>4.1 访问路径</h3><p><code>@RequestMapping</code>注解的作用是将请求的URL地址和处理请求的方式（handler方法）关联起来，建立映射的关系</p>\n<blockquote>\n<ol>\n<li><p>不同于WebServlet必须要使用<code>/</code>开头，但是在SpringMVC中不一定必须要用<code>/</code>开头</p>\n</li>\n<li><p>支持模糊地址。<code>*</code>：任意一层字符串     <code>**</code>：任意层任意字符串。</p>\n<p><code>/user/*</code>  —&gt;  &#x2F;<code>user/a</code>可以进入，<code>/user/a/b</code>不可以进入</p>\n<p><code>/user/**</code>    —&gt; <code>/user/a/a/a/a/a</code></p>\n</li>\n<li><p>请求方式的指定：使用属性<code>method</code>，若不符合请求方式，会出现<font color=\"red\">405</font>异常</p>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.requestmapping;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 14:16</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> * 类上和方法上添加<span class=\"hljs-doctag\">@RequestsMapping</span>区别</span><br><span class=\"hljs-comment\"> *      类上是提取通用方法的地址(非必须)</span><br><span class=\"hljs-comment\"> *      方法上是具体的handler地址(必须)</span><br><span class=\"hljs-comment\"> *      如下方代码, 如果想访问/user路径, 那么直接写<span class=\"hljs-doctag\">@RequestMapping</span>不加参数即可</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br>    <span class=\"hljs-meta\">@RequestMapping(value = &quot;/login&quot;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span>  <span class=\"hljs-comment\">// 作用注册地址, 将handler注册到handlerMapping上</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@RequestMapping(value = &quot;/register&quot;, method = RequestMethod.POST)</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@RequestMapping</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">index</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><code>@GetMapping</code>和<code>@PostMapping</code>注解</p>\n<p>均继承自<code>@RequestMapping</code>，但是他们只能用于注解方法</p>\n<p><code>@RequestMapping(value = &quot;/register&quot;, method = RequestMethod.POST)</code>等价于<code>@PostRequest(&quot;register&quot;)</code></p>\n<p><code>GET   POST    PUT   DELETE</code>同理</p>\n<h3 id=\"RequestMapping注解\"><a href=\"#RequestMapping注解\" class=\"headerlink\" title=\"@RequestMapping注解\"></a>@RequestMapping注解</h3><ul>\n<li><code>value = &quot;***&quot;</code>：路径</li>\n<li><code>method = RequestMethod.***</code>：请求方法</li>\n</ul>\n<h2 id=\"5-Spring-MVC接收数据\"><a href=\"#5-Spring-MVC接收数据\" class=\"headerlink\" title=\"5. Spring MVC接收数据\"></a>5. Spring MVC接收数据</h2><p>param格式：<code>key1=value1&amp;key2=value2</code></p>\n<p>JSON格式：<code>&#123;&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;&#125;</code></p>\n<p>param格式是ASCII码，JSON为<code>UTF-8</code>。类型方面，param仅支持字符串类型，而JSON可以更复杂</p>\n<p>新建模块<code>spring-mvc-part02</code>，并且按照之前的方法重新配置web项目，部署Tomcat时，“应用程序上下文”更改为<code>/part02</code></p>\n<p><img src=\"/../images/springMVCPart01/tomcat2.png\"></p>\n<p>此处使用三种接收参数方式：</p>\n<ul>\n<li>直接接收</li>\n<li>注解指定：指定任意请求参数名，要求必须传递</li>\n<li>特殊值</li>\n</ul>\n<p>新建Controller，<code>param.ParamController</code></p>\n<h3 id=\"5-1-直接接收\"><a href=\"#5-1-直接接收\" class=\"headerlink\" title=\"5.1 直接接收\"></a>5.1 直接接收</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.param;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.*;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 15:19</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/param&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ParamController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/data&quot;)</span><br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> age)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;name = &quot;</span> + name + <span class=\"hljs-string\">&quot;, age = &quot;</span> + age);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;name = &quot;</span> + name + <span class=\"hljs-string\">&quot;, age = &quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>新建配置类<code>config.MVCConfig</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 15:20</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ComponentScan(&quot;org.example&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MVCConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RequestMappingHandlerMapping <span class=\"hljs-title function_\">handlerMapping</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestMappingHandlerMapping</span>();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RequestMappingHandlerAdapter <span class=\"hljs-title function_\">handlerAdapter</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestMappingHandlerAdapter</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>Spring MVC初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 15:21</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringMVCInit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[<span class=\"hljs-number\">0</span>];<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]&#123;MVCConfig.class&#125;;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> String[] getServletMappings() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>启动服务器，在浏览器输入相应URL</p>\n<p><code>http://localhost:8080/part02/param/data?name=root&amp;age=18</code></p>\n<p><img src=\"/../images/springMVCPart01/mvc%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%9C1.png\"></p>\n<h3 id=\"5-2-注解指定\"><a href=\"#5-2-注解指定\" class=\"headerlink\" title=\"5.2 注解指定\"></a>5.2 注解指定</h3><p><strong>@RequestParam参数</strong></p>\n<p>只加在形参列表，指定请求参数名，或者是否为必须传递，或者非必须传递设置默认值</p>\n<p><em>用法如下</em></p>\n<p><code>String func(@RequestParam(value = &quot;&quot;), required = true)</code></p>\n<ol>\n<li><code>value = &quot;***&quot;</code>：前端传过来的参数名</li>\n<li><code>required = true/false</code>：是否为必须传递项，默认为必须（若不传递会报<font color=\"red\">400</font>异常）</li>\n<li><code>defaultValue = &quot;1&quot;</code>：默认值为1</li>\n</ol>\n<p>在<code>param.ParamController.java</code>继续添加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 2. 注解指定</span><br><span class=\"hljs-comment\">// URL:  /param/data1?account=root&amp;page=1</span><br><span class=\"hljs-comment\">// 其中account参数为必须传递, page是非必须传递(但是需要有一个默认值)</span><br><span class=\"hljs-meta\">@GetMapping(&quot;/data1&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data1</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(value = &quot;account&quot;)</span> String username,</span><br><span class=\"hljs-params\">                    <span class=\"hljs-meta\">@RequestParam(required = false, defaultValue = &quot;1&quot;)</span> <span class=\"hljs-type\">int</span> page)</span> &#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;account(username) = &quot;</span> + username + <span class=\"hljs-string\">&quot;, page = &quot;</span> + page);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;account(username) = &quot;</span> + username + <span class=\"hljs-string\">&quot;, page = &quot;</span> + page;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/../images/springMVCPart01/%E6%B3%A8%E8%A7%A3%E6%8C%87%E5%AE%9A%E7%BB%93%E6%9E%9C.png\"></p>\n<h3 id=\"5-3-特殊值\"><a href=\"#5-3-特殊值\" class=\"headerlink\" title=\"5.3 特殊值\"></a>5.3 特殊值</h3><p>继续在<code>ParamController</code>添加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 3. 特殊值</span><br><span class=\"hljs-comment\">// 一名多值   key=1&amp;key=2  直接使用集合值即可</span><br><span class=\"hljs-comment\">// URL:   /param/data2?hobbies=唱&amp;hobbies=跳&amp;hobbies=rap&amp;hobbies=篮球</span><br><span class=\"hljs-meta\">@GetMapping(&quot;/data2&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data2</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam</span> List&lt;String&gt; hobbies)</span> &#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;hobbies = &quot;</span> + hobbies);<br>    <span class=\"hljs-keyword\">return</span> hobbies.toString();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  注意：此处的参数必须要添加@RequestParam，将hobbies对应的一个字符才能直接赋值给集合，报错类型异常。加了此注解之后才可add相应字符串</p>\n</blockquote>\n<p><font color=\"red\">下图为不加@RequestParam注解报错的情况</font></p>\n<p><img src=\"/../images/springMVCPart01/list%E4%B8%8D%E5%8A%A0%E6%B3%A8%E8%A7%A3%E6%8A%A5%E9%94%99.png\"></p>\n<p><font color=\"green\">添加注解之后</font></p>\n<p><img src=\"/../images/springMVCPart01/list%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3%E4%BD%86%E6%98%AF%E9%97%AE%E5%8F%B7.png\"></p>\n<p>控制台的输出</p>\n<p><img src=\"/../images/springMVCPart01/%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3%E6%8E%A7%E5%88%B6%E5%8F%B0.png\"></p>\n<p>现在解决编码的问题</p>\n<p>需要将类注解的<code>@RequestMapping</code>中增加属性即可。</p>\n<p><code>@RequestMapping(value = &quot;/param&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</code></p>\n<h3 id=\"5-4-使用实体对象接收值（-）\"><a href=\"#5-4-使用实体对象接收值（-）\" class=\"headerlink\" title=\"5.4 使用实体对象接收值（*）\"></a>5.4 使用实体对象接收值（*）</h3><p>创建实体类<code>pojo.User</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.pojo;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 19:59</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>    <br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;User&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>添加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 4. 实体类</span><br><span class=\"hljs-comment\">// 用实体类接收值</span><br><span class=\"hljs-comment\">// URL:   /param/data3?name=zhangsan&amp;age=18</span><br><span class=\"hljs-meta\">@GetMapping(&quot;/data3&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data3</span><span class=\"hljs-params\">(User user)</span> &#123;  <span class=\"hljs-comment\">// 属性名等同于前端传的属性</span><br>    System.out.println(user);<br>    <span class=\"hljs-keyword\">return</span> user.toString();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/../images/springMVCPart01/%E5%AE%9E%E4%BD%93%E5%AF%B9%E8%B1%A1.png\"></p>\n<p>若传输过来的属性对应不到实体对象，也不会进行赋值。</p>\n<h3 id=\"5-5-路径传参\"><a href=\"#5-5-路径传参\" class=\"headerlink\" title=\"5.5 路径传参\"></a>5.5 路径传参</h3><p>新建Controller，<code>path.Controller</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.path;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 20:11</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;path&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PathController</span> &#123;<br>    <br>    <span class=\"hljs-comment\">// URL:  path/账号/密码</span><br>    <span class=\"hljs-comment\">// 动态路径设计</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;&#123;account&#125;/&#123;password&#125;&quot;)</span>  <span class=\"hljs-comment\">// 使用大括号</span><br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">()</span> &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>@GetMapping(“{account}&#x2F;{password}”)</strong></p>\n<p>等价于<code>@GetMapping(&quot;*/*&quot;)</code>，但是使用星号并不能获取到参数。</p>\n<p>若按照如下形式写，代表接收param类型的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@GetMapping(&quot;&#123;account&#125;/&#123;password&#125;&quot;)</span>  <span class=\"hljs-comment\">// 使用大括号</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(String account, String password)</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>需要使用注解<code>@PathVariable</code>在形参前面，其他属性与<code>@RequestParam</code>中相同，可以设置不同的名字和是否必须项等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.path;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.*;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 20:11</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/path&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PathController</span> &#123;<br><br>    <span class=\"hljs-comment\">// URL:  path/账号/密码</span><br>    <span class=\"hljs-comment\">// 动态路径设计</span><br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/&#123;account&#125;/&#123;password&#125;&quot;)</span>  <span class=\"hljs-comment\">// 使用大括号</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable(&quot;account&quot;)</span> String account,</span><br><span class=\"hljs-params\">                        <span class=\"hljs-meta\">@PathVariable(&quot;password&quot;)</span> String password)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;account = &quot;</span> + account + <span class=\"hljs-string\">&quot;, password = &quot;</span> + password);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;account = &quot;</span> + account + <span class=\"hljs-string\">&quot;, password = &quot;</span> + password;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/../images/springMVCPart01/%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0.png\"></p>\n<h3 id=\"5-6-JSON接收\"><a href=\"#5-6-JSON接收\" class=\"headerlink\" title=\"5.6 JSON接收\"></a>5.6 JSON接收</h3><p>新建Controller，<code>json.JSONController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.json;<br><br><span class=\"hljs-keyword\">import</span> org.example.pojo.Person;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-03 20:51</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;json&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JSONController</span> &#123;<br>    <span class=\"hljs-comment\">// data 通过请求体使用post方法</span><br><br>    <span class=\"hljs-meta\">@PostMapping(&quot;data&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> Person person)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;person = &quot;</span> + person);<br>        <span class=\"hljs-keyword\">return</span> person.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>默认实体类是param类型的，但是想接收JSON格式，需要加入注解<code>@RequestBody</code></p>\n<p>使用Python进行模拟POST请求</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><br>url = <span class=\"hljs-string\">&quot;http://localhost:8080/part02/json/data&quot;</span><br>person = &#123;<br>    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;John Doe&quot;</span>,<br>    <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">30</span>,<br>    <span class=\"hljs-string\">&quot;gender&quot;</span>: <span class=\"hljs-string\">&quot;male&quot;</span><br>&#125;<br><br>response = requests.post(url, data=person)<br><span class=\"hljs-built_in\">print</span>(response)<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>模拟POST请求之后会得到以下报错，<font color=\"red\">415</font>状态码</p>\n<p><img src=\"/../images/springMVCPart01/415%E6%8A%A5%E9%94%99.png\"></p>\n<p><strong>415类型错误原因???</strong></p>\n<blockquote>\n<p>  因为JSON是前端的格式，而不是Java的格式。Java原生的Web API只支持路径参数和param参数。</p>\n<p>  如果需要项目支持JSON格式需要以下操作：</p>\n<ul>\n<li><p>导入JSON处理相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-databind<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.15.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>handlerAdapter配置JSON转换器</p>\n<p>在<code>config.MVCConfig.java</code>中添加类注解<code>@EnableWebMVC</code>，给handlerAdapter配置JSON转换器</p>\n</li>\n</ul>\n<p>  但是经过一天的Debug还没找到问题的所在，即使python代码我更改为如下的形式</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> json<br><br>url = <span class=\"hljs-string\">&quot;http://localhost:8080/part02/json/data&quot;</span><br>person = &#123;<br>    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;John Doe&quot;</span>,<br>    <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">30</span>,<br>    <span class=\"hljs-string\">&quot;gender&quot;</span>: <span class=\"hljs-string\">&quot;male&quot;</span><br>&#125;<br><br><br>header = &#123;<br>    <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span><br>&#125;<br><br>response = requests.post(url, data=json.dumps(person), headers=header)<br><span class=\"hljs-built_in\">print</span>(response.text)<br><br></code></pre></td></tr></table></figure>\n\n<p>  java代码更改为以下（主要是<code>@PostMapping</code>注解添加了属性）</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@PostMapping(value = &quot;data&quot;, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> Person person)</span> &#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;person = &quot;</span> + person);<br>    <span class=\"hljs-keyword\">return</span> person.toString();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>  consumes属性是指定接收的字符串格式，这里为<code>application/json;charset=utf-8</code></p>\n<p>  报的错误为</p>\n<p>  <font color=\"#6c0000\">org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content-Type ‘application&#x2F;json;charset&#x3D;UTF-8’ is not supported]</font></p>\n</blockquote>\n<h4 id=\"EnableWebMvc注解\"><a href=\"#EnableWebMvc注解\" class=\"headerlink\" title=\"@EnableWebMvc注解\"></a>@EnableWebMvc注解</h4><p>效果等同于在XML配置中，可以使用<code>&lt;mvc:annotation-driven&gt;</code>元素</p>\n<h3 id=\"5-7-接收cookie\"><a href=\"#5-7-接收cookie\" class=\"headerlink\" title=\"5.7 接收cookie\"></a>5.7 接收cookie</h3><p><strong>@CookieValue</strong></p>\n<p>新建Controller，<code>cookie.CookieController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.cookie;<br><br><span class=\"hljs-keyword\">import</span> jakarta.servlet.http.Cookie;<br><span class=\"hljs-keyword\">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.CookieValue;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-04 21:36</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;cookie&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CookieController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;data&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">data</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@CookieValue(value = &quot;cookieName&quot;)</span>String value)</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;value = &quot;</span> + value);<br>        <span class=\"hljs-keyword\">return</span> value;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@GetMapping(&quot;save&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(HttpServletResponse response)</span> &#123;<br>        <span class=\"hljs-type\">Cookie</span> <span class=\"hljs-variable\">cookie</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cookie</span>(<span class=\"hljs-string\">&quot;cookieName&quot;</span>, <span class=\"hljs-string\">&quot;root&quot;</span>);<br>        response.addCookie(cookie);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>先通过<code>/cookie/save</code>添加一个cookie，再访问<code>/cookie/data</code>返回这个cookie的值</p>\n<h3 id=\"5-8获取请求头\"><a href=\"#5-8获取请求头\" class=\"headerlink\" title=\"5.8获取请求头\"></a>5.8获取请求头</h3><p><strong>@RequestHeader</strong></p>\n<blockquote>\n<p>  <code>@Request***</code>可以查到通过request请求的各种参数</p>\n</blockquote>\n<p>新建Controller，<code>header.HeaderController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.header;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestHeader;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-04 21:42</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;header&quot;)</span><br><span class=\"hljs-meta\">@ResponseBody</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">headerController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;getHeader&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getHeader</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestHeader(&quot;Host&quot;)</span> String host)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;host = &quot;</span> + host);<br>        <span class=\"hljs-keyword\">return</span> host;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"【study】SpringMVC学习Part03","abbrlink":"d6c4bac3","date":"2024-03-05T07:38:47.000Z","_content":"\n# Part03 Spring MVC响应数据\n\n\n\n由于上一部分构建代码时构建了`part02`，为了统一名称这里写为part03\n\n\n\n新建模块`spring-mvc-response`\n\n## 开发模式简介\n\n![](../images/springMVCPart03/开发流程.png)\n\n### 1. 混合模式开发\n\n使用JSP返回动态页面。\n\n构建web项目，web目录在`spring-mvc-response.src.main下`\n\n`web`目录中，在`WEB-INF`文件夹下新建视图`views/index.jsp`。\n\n``` jsp\n<%--\n  Created by IntelliJ IDEA.\n  User: promise\n  Date: 2024/3/5\n  Time: 16:07\n  To change this template use File | Settings | File Templates.\n--%>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>Title</title>\n</head>\n<body>\n    <span style=\"color: red;\">${data}</span>\n</body>\n</html>\n\n```\n\n\n\nSpringMVC的配置\n\n新建配置类`config.MVCConfig`\n\n```java\npackage org.example.config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ViewResolverRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * Author: Promise\n * Date: 2024-03-05 16:09\n * Description:\n */\n@Configuration\n@ComponentScan(\"org.example\")\n@EnableWebMvc\npublic class MVCConfig implements WebMvcConfigurer {\n    // 配置视图解析器, 指定前后缀\n\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        registry.jsp(\"/WEB-INF/views/\", \"jsp\");\n\n        // 使用handler 直接返回index即可\n    }\n}\n```\n\n视图需要通过视图解析器进行返回，在这里配置视图解析器，实现`WebMvcConfigurer`接口中的一个方法，配置前后缀，这样可以直接使用该文件夹下的文件，无需额外指定路径等。不需要再使用`@Bean`配置\n\n\n\n配置MVC初始化类`SpringMVCInit.java`\n\n```java\npackage org.example.config;\n\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\n/**\n * Author: Promise\n * Date: 2024-03-05 16:20\n * Description:\n */\n\npublic class SpringMVCInit extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return new Class[0];\n    }\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class[]{MVCConfig.class};\n    }\n\n    @Override\n    protected String[] getServletMappings() {\n        return new String[]{\"/\"};  // 拦截地址\n    }\n}\n```\n","source":"_posts/【study】SpringMVC学习Part03.md","raw":"---\ntitle: 【study】SpringMVC学习Part03\ntags:\n  - Study\n  - Java\n  - Spring MVC框架\nabbrlink: d6c4bac3\ndate: 2024-03-05 15:38:47\n---\n\n# Part03 Spring MVC响应数据\n\n\n\n由于上一部分构建代码时构建了`part02`，为了统一名称这里写为part03\n\n\n\n新建模块`spring-mvc-response`\n\n## 开发模式简介\n\n![](../images/springMVCPart03/开发流程.png)\n\n### 1. 混合模式开发\n\n使用JSP返回动态页面。\n\n构建web项目，web目录在`spring-mvc-response.src.main下`\n\n`web`目录中，在`WEB-INF`文件夹下新建视图`views/index.jsp`。\n\n``` jsp\n<%--\n  Created by IntelliJ IDEA.\n  User: promise\n  Date: 2024/3/5\n  Time: 16:07\n  To change this template use File | Settings | File Templates.\n--%>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>Title</title>\n</head>\n<body>\n    <span style=\"color: red;\">${data}</span>\n</body>\n</html>\n\n```\n\n\n\nSpringMVC的配置\n\n新建配置类`config.MVCConfig`\n\n```java\npackage org.example.config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ViewResolverRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * Author: Promise\n * Date: 2024-03-05 16:09\n * Description:\n */\n@Configuration\n@ComponentScan(\"org.example\")\n@EnableWebMvc\npublic class MVCConfig implements WebMvcConfigurer {\n    // 配置视图解析器, 指定前后缀\n\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        registry.jsp(\"/WEB-INF/views/\", \"jsp\");\n\n        // 使用handler 直接返回index即可\n    }\n}\n```\n\n视图需要通过视图解析器进行返回，在这里配置视图解析器，实现`WebMvcConfigurer`接口中的一个方法，配置前后缀，这样可以直接使用该文件夹下的文件，无需额外指定路径等。不需要再使用`@Bean`配置\n\n\n\n配置MVC初始化类`SpringMVCInit.java`\n\n```java\npackage org.example.config;\n\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\n/**\n * Author: Promise\n * Date: 2024-03-05 16:20\n * Description:\n */\n\npublic class SpringMVCInit extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return new Class[0];\n    }\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class[]{MVCConfig.class};\n    }\n\n    @Override\n    protected String[] getServletMappings() {\n        return new String[]{\"/\"};  // 拦截地址\n    }\n}\n```\n","slug":"【study】SpringMVC学习Part03","published":1,"updated":"2024-03-20T01:08:57.985Z","_id":"cltz3v26z00042tz8hel06jtz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Part03-Spring-MVC响应数据\"><a href=\"#Part03-Spring-MVC响应数据\" class=\"headerlink\" title=\"Part03 Spring MVC响应数据\"></a>Part03 Spring MVC响应数据</h1><p>由于上一部分构建代码时构建了<code>part02</code>，为了统一名称这里写为part03</p>\n<p>新建模块<code>spring-mvc-response</code></p>\n<h2 id=\"开发模式简介\"><a href=\"#开发模式简介\" class=\"headerlink\" title=\"开发模式简介\"></a>开发模式简介</h2><p><img src=\"/../images/springMVCPart03/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.png\"></p>\n<h3 id=\"1-混合模式开发\"><a href=\"#1-混合模式开发\" class=\"headerlink\" title=\"1. 混合模式开发\"></a>1. 混合模式开发</h3><p>使用JSP返回动态页面。</p>\n<p>构建web项目，web目录在<code>spring-mvc-response.src.main下</code></p>\n<p><code>web</code>目录中，在<code>WEB-INF</code>文件夹下新建视图<code>views/index.jsp</code>。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: promise<br>  Date: <span class=\"hljs-number\">2024</span>/<span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">5</span><br>  Time: <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">07</span><br>  To change <span class=\"hljs-built_in\">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class=\"hljs-string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"hljs-string\">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;span style=<span class=\"hljs-string\">&quot;color: red;&quot;</span>&gt;$&#123;data&#125;&lt;/span&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>SpringMVC的配置</p>\n<p>新建配置类<code>config.MVCConfig</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.ViewResolverRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-05 16:09</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ComponentScan(&quot;org.example&quot;)</span><br><span class=\"hljs-meta\">@EnableWebMvc</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MVCConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> &#123;<br>    <span class=\"hljs-comment\">// 配置视图解析器, 指定前后缀</span><br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">configureViewResolvers</span><span class=\"hljs-params\">(ViewResolverRegistry registry)</span> &#123;<br>        registry.jsp(<span class=\"hljs-string\">&quot;/WEB-INF/views/&quot;</span>, <span class=\"hljs-string\">&quot;jsp&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 使用handler 直接返回index即可</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>视图需要通过视图解析器进行返回，在这里配置视图解析器，实现<code>WebMvcConfigurer</code>接口中的一个方法，配置前后缀，这样可以直接使用该文件夹下的文件，无需额外指定路径等。不需要再使用<code>@Bean</code>配置</p>\n<p>配置MVC初始化类<code>SpringMVCInit.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-05 16:20</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringMVCInit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[<span class=\"hljs-number\">0</span>];<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]&#123;MVCConfig.class&#125;;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> String[] getServletMappings() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;/&quot;</span>&#125;;  <span class=\"hljs-comment\">// 拦截地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Part03-Spring-MVC响应数据\"><a href=\"#Part03-Spring-MVC响应数据\" class=\"headerlink\" title=\"Part03 Spring MVC响应数据\"></a>Part03 Spring MVC响应数据</h1><p>由于上一部分构建代码时构建了<code>part02</code>，为了统一名称这里写为part03</p>\n<p>新建模块<code>spring-mvc-response</code></p>\n<h2 id=\"开发模式简介\"><a href=\"#开发模式简介\" class=\"headerlink\" title=\"开发模式简介\"></a>开发模式简介</h2><p><img src=\"/../images/springMVCPart03/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.png\"></p>\n<h3 id=\"1-混合模式开发\"><a href=\"#1-混合模式开发\" class=\"headerlink\" title=\"1. 混合模式开发\"></a>1. 混合模式开发</h3><p>使用JSP返回动态页面。</p>\n<p>构建web项目，web目录在<code>spring-mvc-response.src.main下</code></p>\n<p><code>web</code>目录中，在<code>WEB-INF</code>文件夹下新建视图<code>views/index.jsp</code>。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: promise<br>  Date: <span class=\"hljs-number\">2024</span>/<span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">5</span><br>  Time: <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">07</span><br>  To change <span class=\"hljs-built_in\">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class=\"hljs-string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"hljs-string\">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;span style=<span class=\"hljs-string\">&quot;color: red;&quot;</span>&gt;$&#123;data&#125;&lt;/span&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>SpringMVC的配置</p>\n<p>新建配置类<code>config.MVCConfig</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.ViewResolverRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-05 16:09</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ComponentScan(&quot;org.example&quot;)</span><br><span class=\"hljs-meta\">@EnableWebMvc</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MVCConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> &#123;<br>    <span class=\"hljs-comment\">// 配置视图解析器, 指定前后缀</span><br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">configureViewResolvers</span><span class=\"hljs-params\">(ViewResolverRegistry registry)</span> &#123;<br>        registry.jsp(<span class=\"hljs-string\">&quot;/WEB-INF/views/&quot;</span>, <span class=\"hljs-string\">&quot;jsp&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 使用handler 直接返回index即可</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>视图需要通过视图解析器进行返回，在这里配置视图解析器，实现<code>WebMvcConfigurer</code>接口中的一个方法，配置前后缀，这样可以直接使用该文件夹下的文件，无需额外指定路径等。不需要再使用<code>@Bean</code>配置</p>\n<p>配置MVC初始化类<code>SpringMVCInit.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Author: Promise</span><br><span class=\"hljs-comment\"> * Date: 2024-03-05 16:20</span><br><span class=\"hljs-comment\"> * Description:</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringMVCInit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[<span class=\"hljs-number\">0</span>];<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]&#123;MVCConfig.class&#125;;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> String[] getServletMappings() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;/&quot;</span>&#125;;  <span class=\"hljs-comment\">// 拦截地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"发票识别demo","abbrlink":"3068ab21","date":"2024-03-14T08:48:53.000Z","_content":"\n最近导师让我做一个发票识别的小项目。需要提取出发票上的一些信息。\n\n### 1. 一阶段：github上找一些工具\n\n首先在github上查找相关的项目。发现多数都是使用图像识别的技术。测试了几个发票文件发现识别率不是很高。甚至可能会出现识别不到的情况。在github上我找到了两个项目测试了下，例如下图的情况\n\n![](../images/发票识别/1.png)\n\n\n\n\n\n这里数字是比较密集的。项目一就是识别不到（或者是识别出现了问题，判断的时候直接看做错误用例没有输出，具体原因没有细深究代码）。而项目二“996”就经常识别为“886”。这种错误显然是不可以的。\n\n\n\n两种方法都是借助了神经网络做识别，有些发票数字不是很紧凑识别效果很好，但是一旦出现很紧凑的情况就不太好了。而且项目二的更新时间已经是5年前了，导出的`requirements.txt`文件并没有携带版本号。使用`pip install -r requirements.txt`配置环境会出现不兼容的问题（包括和显卡驱动），降低版本后代码上也会有些冲突。但考虑到最终还是深度学习方法解决问题还是有错误的可能性。\n\n\n\n在想办法解决的时候突然对发票左上角的二维码产生了兴趣\n\n\n\n### 2. 二阶段：发票二维码的秘密\n\n![](../images/发票识别/2.png)\n\n扫描过后会得到这样的一串数据\n\n`01,10,发票代码,发票号码,开票金额,开票日期,校验码,不知道什么的编码`\n\n在网上查到了这篇文章\n\nhttps://zhuanlan.zhihu.com/p/633025591\n\n这就知道了每一位代表什么。这里已经有了我们想要的数据，所以通过识别二维码是可行的。而且识别二维码也不会出错\n\n\n\n### 3. 三阶段：确认需求，开始干活\n\n>   导师需求：识别出来，并且可以导出excel\n>\n>   我自己加了一些需求：需要用起来方便，那就使用前后端\n\n需求蛮简单的，后端我使用了`Spring Boot`解决。前端涉及到了文件上传，我使用了`Bootstrap-fileinput`插件，省去了写CSS和一些交互上的js代码。\n\n[bootstrap-fileinput的github地址](https://github.com/kartik-v/bootstrap-fileinput)\n\n[官方说明文档](https://plugins.krajee.com/file-input)\n\n在examples中选择一个样式进行使用，支持多文件上传，并且可以限制文件上传类型。但是并没有找到如何接收服务端传回来的json，这里我就使用ajax进行前后端传值，只是用了该插件的样式。\n\n\n\n1.   核心功能就是将上传的文件识别出二维码，然后将识别到的字符串处理下即可。\n2.   如果是pdf文件则转换为jpg，然后再识别二维码\n3.   将（批量）上传的文件，识别到一个或多个二维码时，导出到excel，使用UUID进行命名，并下载\n4.   每天12点清理所有文件：上传的文件，转换格式后的文件，表格的xlsx文件等。\n\n\n\n### 4. 四阶段：DEBUG\n\n1.   会出现png格式不识别二维码的情况\n\n     >   解决办法：转换成jpg格式\n\n2.   pdf文件转jpg时，二维码丢失（jpg文件中不显示二维码的情况）\n\n     >   解决办法：pdf转png，png再转jpg\n\n","source":"_posts/【study】发票识别demo.md","raw":"---\ntitle: 发票识别demo\ntags:\n  - Java\n  - Spring Boot\nabbrlink: 3068ab21\ndate: 2024-03-14 16:48:53\n---\n\n最近导师让我做一个发票识别的小项目。需要提取出发票上的一些信息。\n\n### 1. 一阶段：github上找一些工具\n\n首先在github上查找相关的项目。发现多数都是使用图像识别的技术。测试了几个发票文件发现识别率不是很高。甚至可能会出现识别不到的情况。在github上我找到了两个项目测试了下，例如下图的情况\n\n![](../images/发票识别/1.png)\n\n\n\n\n\n这里数字是比较密集的。项目一就是识别不到（或者是识别出现了问题，判断的时候直接看做错误用例没有输出，具体原因没有细深究代码）。而项目二“996”就经常识别为“886”。这种错误显然是不可以的。\n\n\n\n两种方法都是借助了神经网络做识别，有些发票数字不是很紧凑识别效果很好，但是一旦出现很紧凑的情况就不太好了。而且项目二的更新时间已经是5年前了，导出的`requirements.txt`文件并没有携带版本号。使用`pip install -r requirements.txt`配置环境会出现不兼容的问题（包括和显卡驱动），降低版本后代码上也会有些冲突。但考虑到最终还是深度学习方法解决问题还是有错误的可能性。\n\n\n\n在想办法解决的时候突然对发票左上角的二维码产生了兴趣\n\n\n\n### 2. 二阶段：发票二维码的秘密\n\n![](../images/发票识别/2.png)\n\n扫描过后会得到这样的一串数据\n\n`01,10,发票代码,发票号码,开票金额,开票日期,校验码,不知道什么的编码`\n\n在网上查到了这篇文章\n\nhttps://zhuanlan.zhihu.com/p/633025591\n\n这就知道了每一位代表什么。这里已经有了我们想要的数据，所以通过识别二维码是可行的。而且识别二维码也不会出错\n\n\n\n### 3. 三阶段：确认需求，开始干活\n\n>   导师需求：识别出来，并且可以导出excel\n>\n>   我自己加了一些需求：需要用起来方便，那就使用前后端\n\n需求蛮简单的，后端我使用了`Spring Boot`解决。前端涉及到了文件上传，我使用了`Bootstrap-fileinput`插件，省去了写CSS和一些交互上的js代码。\n\n[bootstrap-fileinput的github地址](https://github.com/kartik-v/bootstrap-fileinput)\n\n[官方说明文档](https://plugins.krajee.com/file-input)\n\n在examples中选择一个样式进行使用，支持多文件上传，并且可以限制文件上传类型。但是并没有找到如何接收服务端传回来的json，这里我就使用ajax进行前后端传值，只是用了该插件的样式。\n\n\n\n1.   核心功能就是将上传的文件识别出二维码，然后将识别到的字符串处理下即可。\n2.   如果是pdf文件则转换为jpg，然后再识别二维码\n3.   将（批量）上传的文件，识别到一个或多个二维码时，导出到excel，使用UUID进行命名，并下载\n4.   每天12点清理所有文件：上传的文件，转换格式后的文件，表格的xlsx文件等。\n\n\n\n### 4. 四阶段：DEBUG\n\n1.   会出现png格式不识别二维码的情况\n\n     >   解决办法：转换成jpg格式\n\n2.   pdf文件转jpg时，二维码丢失（jpg文件中不显示二维码的情况）\n\n     >   解决办法：pdf转png，png再转jpg\n\n","slug":"【study】发票识别demo","published":1,"updated":"2024-03-20T01:08:57.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltzhv16y0000c4z8aa066ta5","content":"<p>最近导师让我做一个发票识别的小项目。需要提取出发票上的一些信息。</p>\n<h3 id=\"1-一阶段：github上找一些工具\"><a href=\"#1-一阶段：github上找一些工具\" class=\"headerlink\" title=\"1. 一阶段：github上找一些工具\"></a>1. 一阶段：github上找一些工具</h3><p>首先在github上查找相关的项目。发现多数都是使用图像识别的技术。测试了几个发票文件发现识别率不是很高。甚至可能会出现识别不到的情况。在github上我找到了两个项目测试了下，例如下图的情况</p>\n<p><img src=\"/../images/%E5%8F%91%E7%A5%A8%E8%AF%86%E5%88%AB/1.png\"></p>\n<p>这里数字是比较密集的。项目一就是识别不到（或者是识别出现了问题，判断的时候直接看做错误用例没有输出，具体原因没有细深究代码）。而项目二“996”就经常识别为“886”。这种错误显然是不可以的。</p>\n<p>两种方法都是借助了神经网络做识别，有些发票数字不是很紧凑识别效果很好，但是一旦出现很紧凑的情况就不太好了。而且项目二的更新时间已经是5年前了，导出的<code>requirements.txt</code>文件并没有携带版本号。使用<code>pip install -r requirements.txt</code>配置环境会出现不兼容的问题（包括和显卡驱动），降低版本后代码上也会有些冲突。但考虑到最终还是深度学习方法解决问题还是有错误的可能性。</p>\n<p>在想办法解决的时候突然对发票左上角的二维码产生了兴趣</p>\n<h3 id=\"2-二阶段：发票二维码的秘密\"><a href=\"#2-二阶段：发票二维码的秘密\" class=\"headerlink\" title=\"2. 二阶段：发票二维码的秘密\"></a>2. 二阶段：发票二维码的秘密</h3><p><img src=\"/../images/%E5%8F%91%E7%A5%A8%E8%AF%86%E5%88%AB/2.png\"></p>\n<p>扫描过后会得到这样的一串数据</p>\n<p><code>01,10,发票代码,发票号码,开票金额,开票日期,校验码,不知道什么的编码</code></p>\n<p>在网上查到了这篇文章</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/633025591\">https://zhuanlan.zhihu.com/p/633025591</a></p>\n<p>这就知道了每一位代表什么。这里已经有了我们想要的数据，所以通过识别二维码是可行的。而且识别二维码也不会出错</p>\n<h3 id=\"3-三阶段：确认需求，开始干活\"><a href=\"#3-三阶段：确认需求，开始干活\" class=\"headerlink\" title=\"3. 三阶段：确认需求，开始干活\"></a>3. 三阶段：确认需求，开始干活</h3><blockquote>\n<p>  导师需求：识别出来，并且可以导出excel</p>\n<p>  我自己加了一些需求：需要用起来方便，那就使用前后端</p>\n</blockquote>\n<p>需求蛮简单的，后端我使用了<code>Spring Boot</code>解决。前端涉及到了文件上传，我使用了<code>Bootstrap-fileinput</code>插件，省去了写CSS和一些交互上的js代码。</p>\n<p><a href=\"https://github.com/kartik-v/bootstrap-fileinput\">bootstrap-fileinput的github地址</a></p>\n<p><a href=\"https://plugins.krajee.com/file-input\">官方说明文档</a></p>\n<p>在examples中选择一个样式进行使用，支持多文件上传，并且可以限制文件上传类型。但是并没有找到如何接收服务端传回来的json，这里我就使用ajax进行前后端传值，只是用了该插件的样式。</p>\n<ol>\n<li>核心功能就是将上传的文件识别出二维码，然后将识别到的字符串处理下即可。</li>\n<li>如果是pdf文件则转换为jpg，然后再识别二维码</li>\n<li>将（批量）上传的文件，识别到一个或多个二维码时，导出到excel，使用UUID进行命名，并下载</li>\n<li>每天12点清理所有文件：上传的文件，转换格式后的文件，表格的xlsx文件等。</li>\n</ol>\n<h3 id=\"4-四阶段：DEBUG\"><a href=\"#4-四阶段：DEBUG\" class=\"headerlink\" title=\"4. 四阶段：DEBUG\"></a>4. 四阶段：DEBUG</h3><ol>\n<li><p>会出现png格式不识别二维码的情况</p>\n<blockquote>\n<p>  解决办法：转换成jpg格式</p>\n</blockquote>\n</li>\n<li><p>pdf文件转jpg时，二维码丢失（jpg文件中不显示二维码的情况）</p>\n<blockquote>\n<p>  解决办法：pdf转png，png再转jpg</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>最近导师让我做一个发票识别的小项目。需要提取出发票上的一些信息。</p>\n<h3 id=\"1-一阶段：github上找一些工具\"><a href=\"#1-一阶段：github上找一些工具\" class=\"headerlink\" title=\"1. 一阶段：github上找一些工具\"></a>1. 一阶段：github上找一些工具</h3><p>首先在github上查找相关的项目。发现多数都是使用图像识别的技术。测试了几个发票文件发现识别率不是很高。甚至可能会出现识别不到的情况。在github上我找到了两个项目测试了下，例如下图的情况</p>\n<p><img src=\"/../images/%E5%8F%91%E7%A5%A8%E8%AF%86%E5%88%AB/1.png\"></p>\n<p>这里数字是比较密集的。项目一就是识别不到（或者是识别出现了问题，判断的时候直接看做错误用例没有输出，具体原因没有细深究代码）。而项目二“996”就经常识别为“886”。这种错误显然是不可以的。</p>\n<p>两种方法都是借助了神经网络做识别，有些发票数字不是很紧凑识别效果很好，但是一旦出现很紧凑的情况就不太好了。而且项目二的更新时间已经是5年前了，导出的<code>requirements.txt</code>文件并没有携带版本号。使用<code>pip install -r requirements.txt</code>配置环境会出现不兼容的问题（包括和显卡驱动），降低版本后代码上也会有些冲突。但考虑到最终还是深度学习方法解决问题还是有错误的可能性。</p>\n<p>在想办法解决的时候突然对发票左上角的二维码产生了兴趣</p>\n<h3 id=\"2-二阶段：发票二维码的秘密\"><a href=\"#2-二阶段：发票二维码的秘密\" class=\"headerlink\" title=\"2. 二阶段：发票二维码的秘密\"></a>2. 二阶段：发票二维码的秘密</h3><p><img src=\"/../images/%E5%8F%91%E7%A5%A8%E8%AF%86%E5%88%AB/2.png\"></p>\n<p>扫描过后会得到这样的一串数据</p>\n<p><code>01,10,发票代码,发票号码,开票金额,开票日期,校验码,不知道什么的编码</code></p>\n<p>在网上查到了这篇文章</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/633025591\">https://zhuanlan.zhihu.com/p/633025591</a></p>\n<p>这就知道了每一位代表什么。这里已经有了我们想要的数据，所以通过识别二维码是可行的。而且识别二维码也不会出错</p>\n<h3 id=\"3-三阶段：确认需求，开始干活\"><a href=\"#3-三阶段：确认需求，开始干活\" class=\"headerlink\" title=\"3. 三阶段：确认需求，开始干活\"></a>3. 三阶段：确认需求，开始干活</h3><blockquote>\n<p>  导师需求：识别出来，并且可以导出excel</p>\n<p>  我自己加了一些需求：需要用起来方便，那就使用前后端</p>\n</blockquote>\n<p>需求蛮简单的，后端我使用了<code>Spring Boot</code>解决。前端涉及到了文件上传，我使用了<code>Bootstrap-fileinput</code>插件，省去了写CSS和一些交互上的js代码。</p>\n<p><a href=\"https://github.com/kartik-v/bootstrap-fileinput\">bootstrap-fileinput的github地址</a></p>\n<p><a href=\"https://plugins.krajee.com/file-input\">官方说明文档</a></p>\n<p>在examples中选择一个样式进行使用，支持多文件上传，并且可以限制文件上传类型。但是并没有找到如何接收服务端传回来的json，这里我就使用ajax进行前后端传值，只是用了该插件的样式。</p>\n<ol>\n<li>核心功能就是将上传的文件识别出二维码，然后将识别到的字符串处理下即可。</li>\n<li>如果是pdf文件则转换为jpg，然后再识别二维码</li>\n<li>将（批量）上传的文件，识别到一个或多个二维码时，导出到excel，使用UUID进行命名，并下载</li>\n<li>每天12点清理所有文件：上传的文件，转换格式后的文件，表格的xlsx文件等。</li>\n</ol>\n<h3 id=\"4-四阶段：DEBUG\"><a href=\"#4-四阶段：DEBUG\" class=\"headerlink\" title=\"4. 四阶段：DEBUG\"></a>4. 四阶段：DEBUG</h3><ol>\n<li><p>会出现png格式不识别二维码的情况</p>\n<blockquote>\n<p>  解决办法：转换成jpg格式</p>\n</blockquote>\n</li>\n<li><p>pdf文件转jpg时，二维码丢失（jpg文件中不显示二维码的情况）</p>\n<blockquote>\n<p>  解决办法：pdf转png，png再转jpg</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"【LeetCode】09动态规划Part01","abbrlink":"707fc7db","date":"2024-03-20T07:50:08.000Z","_content":"\n# 【LeetCode】09动态规划Part01  509.斐波那契数、70. 爬楼梯、746. 使用最小花费爬楼梯\n\n\n\n## 动态规划解题步骤\n\n1.   确定dp数组\n\n2.   递推公式\n\n3.   dp数组的初始化\n\n4.   确定遍历顺序\n\n5.   打印dp数组(Debug)\n\n\n\n## 509. 斐波那契数\n\n>   题目链接：https://leetcode.cn/problems/fibonacci-number/description/\n\n### 思路\n\n1.   确定dp数组\n\n     `dp[i]`是前两项之和\n\n2.   递推公式\n\n     `dp[i] = dp[i - 1] + dp[i - 2]`\n\n3.   dp数组的初始化\n\n     `dp[0] = 0`\n     `dp[1] = 1`\n     `dp[i] = 0`\n\n4.   确定遍历顺序\n\n     顺序遍历\n\n5.   打印dp数组(Debug)\n\n\n\n### 代码\n\n``` java\nclass Solution {\n    public int fib(int n) {\n        if (n < 2) {\n            return n;\n        }\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i < n + 1; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];\n    }\n}\n```\n\n\n\n## 70. 爬楼梯\n\n>   题目链接：https://leetcode.cn/problems/climbing-stairs/description/\n\n### 思路\n\n1.   确定dp数组\n\n     第i个台阶有dp[i]种方法可以上来\n\n2.   递推公式\n\n     `dp[i] = dp[i - 1] + dp[i - 2]`\n\n3.   dp数组的初始化\n\n     `dp[0] = 0`\n     \n     `dp[1] = 1`\n     \n     `dp[2] = 2`\n\n     `dp[i] = 0`\n\n4.   确定遍历顺序\n\n     顺序遍历\n\n5.   打印dp数组(Debug)\n\n\n\n### 代码\n\n``` java\nclass Solution {\npublic:\n    public int climbStairs(int n) {\n        if (n < 2) {\n            return n;\n        }\n        int []dp = new int[n + 1];\n        dp[1] = 1;\n        dp[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];\n    }\n}\n```\n\n\n\n\n\n## 746. 使用最小花费爬楼梯\n\n>   题目链接：https://leetcode.cn/problems/min-cost-climbing-stairs/description/\n\n### 思路\n\n这道题描述看的不是很懂，理解之后还是有点模糊这个递推公式，AC之后再看看题解。先判断是否是最后一次上台阶（站在最后一个台阶上是，选择一步还是两步）\n\n\n\n1.   确定dp数组\n\n     第i个台阶最小花费为dp[i]\n\n2.   递推公式\n\n     如果是最后一次上台阶：则`dp[i] = min(dp[i - 1], cost[i] + dp[i - 2]);`\n\n     否则：`dp[i] = cost[i] + min(dp[i - 1], dp[i - 2]);`\n\n3.   dp数组的初始化\n\n     `dp[0] = cost[0]`\n\n     `dp[1] = cost[1]`\n\n4.   确定遍历顺序\n\n     顺序遍历\n\n5.   打印dp数组(Debug)\n\n### 代码\n\n``` java\nclass Solution {\npublic:\n    public int minCostClimbingStairs(int[] cost) {\n        int[] dp = new int[cost.length];\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n        if (cost.length == 2) {\n            return Math.min(dp[0], dp[1]);\n        }\n        for (int i = 2; i < dp.length; i++) {\n            if (i == dp.length - 1) {\n                dp[i] = Math.min(dp[i - 1], cost[i] + dp[i - 2]);\n            } else {\n                dp[i] = cost[i] + Math.min(dp[i - 1], dp[i - 2]);\n            }\n        }\n        return dp[dp.length - 1];\n    }\n}\n```\n\n\n\n### 官方题解\n\n``` cpp\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n        vector<int> dp(n + 1);\n        dp[0] = dp[1] = 0;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);\n        }\n        return dp[n];\n    }\n};\n\n```\n\n主要是对状态转移方程理解的不够透彻\n\n`dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);`\n\n","source":"_posts/【LeetCode】09动态规划Part01.md","raw":"---\ntitle: 【LeetCode】09动态规划Part01\ntags:\n  - 算法\n  - LeetCode\n  - 动态规划\nabbrlink: 707fc7db\ndate: 2024-03-20 15:50:08\n---\n\n# 【LeetCode】09动态规划Part01  509.斐波那契数、70. 爬楼梯、746. 使用最小花费爬楼梯\n\n\n\n## 动态规划解题步骤\n\n1.   确定dp数组\n\n2.   递推公式\n\n3.   dp数组的初始化\n\n4.   确定遍历顺序\n\n5.   打印dp数组(Debug)\n\n\n\n## 509. 斐波那契数\n\n>   题目链接：https://leetcode.cn/problems/fibonacci-number/description/\n\n### 思路\n\n1.   确定dp数组\n\n     `dp[i]`是前两项之和\n\n2.   递推公式\n\n     `dp[i] = dp[i - 1] + dp[i - 2]`\n\n3.   dp数组的初始化\n\n     `dp[0] = 0`\n     `dp[1] = 1`\n     `dp[i] = 0`\n\n4.   确定遍历顺序\n\n     顺序遍历\n\n5.   打印dp数组(Debug)\n\n\n\n### 代码\n\n``` java\nclass Solution {\n    public int fib(int n) {\n        if (n < 2) {\n            return n;\n        }\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i < n + 1; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];\n    }\n}\n```\n\n\n\n## 70. 爬楼梯\n\n>   题目链接：https://leetcode.cn/problems/climbing-stairs/description/\n\n### 思路\n\n1.   确定dp数组\n\n     第i个台阶有dp[i]种方法可以上来\n\n2.   递推公式\n\n     `dp[i] = dp[i - 1] + dp[i - 2]`\n\n3.   dp数组的初始化\n\n     `dp[0] = 0`\n     \n     `dp[1] = 1`\n     \n     `dp[2] = 2`\n\n     `dp[i] = 0`\n\n4.   确定遍历顺序\n\n     顺序遍历\n\n5.   打印dp数组(Debug)\n\n\n\n### 代码\n\n``` java\nclass Solution {\npublic:\n    public int climbStairs(int n) {\n        if (n < 2) {\n            return n;\n        }\n        int []dp = new int[n + 1];\n        dp[1] = 1;\n        dp[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];\n    }\n}\n```\n\n\n\n\n\n## 746. 使用最小花费爬楼梯\n\n>   题目链接：https://leetcode.cn/problems/min-cost-climbing-stairs/description/\n\n### 思路\n\n这道题描述看的不是很懂，理解之后还是有点模糊这个递推公式，AC之后再看看题解。先判断是否是最后一次上台阶（站在最后一个台阶上是，选择一步还是两步）\n\n\n\n1.   确定dp数组\n\n     第i个台阶最小花费为dp[i]\n\n2.   递推公式\n\n     如果是最后一次上台阶：则`dp[i] = min(dp[i - 1], cost[i] + dp[i - 2]);`\n\n     否则：`dp[i] = cost[i] + min(dp[i - 1], dp[i - 2]);`\n\n3.   dp数组的初始化\n\n     `dp[0] = cost[0]`\n\n     `dp[1] = cost[1]`\n\n4.   确定遍历顺序\n\n     顺序遍历\n\n5.   打印dp数组(Debug)\n\n### 代码\n\n``` java\nclass Solution {\npublic:\n    public int minCostClimbingStairs(int[] cost) {\n        int[] dp = new int[cost.length];\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n        if (cost.length == 2) {\n            return Math.min(dp[0], dp[1]);\n        }\n        for (int i = 2; i < dp.length; i++) {\n            if (i == dp.length - 1) {\n                dp[i] = Math.min(dp[i - 1], cost[i] + dp[i - 2]);\n            } else {\n                dp[i] = cost[i] + Math.min(dp[i - 1], dp[i - 2]);\n            }\n        }\n        return dp[dp.length - 1];\n    }\n}\n```\n\n\n\n### 官方题解\n\n``` cpp\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n        vector<int> dp(n + 1);\n        dp[0] = dp[1] = 0;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);\n        }\n        return dp[n];\n    }\n};\n\n```\n\n主要是对状态转移方程理解的不够透彻\n\n`dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);`\n\n","slug":"【LeetCode】09动态规划Part01","published":1,"updated":"2024-03-24T10:36:12.445Z","_id":"clu0ws48b0000snz8edgd64xb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【LeetCode】09动态规划Part01-509-斐波那契数、70-爬楼梯、746-使用最小花费爬楼梯\"><a href=\"#【LeetCode】09动态规划Part01-509-斐波那契数、70-爬楼梯、746-使用最小花费爬楼梯\" class=\"headerlink\" title=\"【LeetCode】09动态规划Part01  509.斐波那契数、70. 爬楼梯、746. 使用最小花费爬楼梯\"></a>【LeetCode】09动态规划Part01  509.斐波那契数、70. 爬楼梯、746. 使用最小花费爬楼梯</h1><h2 id=\"动态规划解题步骤\"><a href=\"#动态规划解题步骤\" class=\"headerlink\" title=\"动态规划解题步骤\"></a>动态规划解题步骤</h2><ol>\n<li><p>确定dp数组</p>\n</li>\n<li><p>递推公式</p>\n</li>\n<li><p>dp数组的初始化</p>\n</li>\n<li><p>确定遍历顺序</p>\n</li>\n<li><p>打印dp数组(Debug)</p>\n</li>\n</ol>\n<h2 id=\"509-斐波那契数\"><a href=\"#509-斐波那契数\" class=\"headerlink\" title=\"509. 斐波那契数\"></a>509. 斐波那契数</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/fibonacci-number/description/\">https://leetcode.cn/problems/fibonacci-number/description/</a></p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li><p>确定dp数组</p>\n<p><code>dp[i]</code>是前两项之和</p>\n</li>\n<li><p>递推公式</p>\n<p><code>dp[i] = dp[i - 1] + dp[i - 2]</code></p>\n</li>\n<li><p>dp数组的初始化</p>\n<p><code>dp[0] = 0</code><br><code>dp[1] = 1</code><br><code>dp[i] = 0</code></p>\n</li>\n<li><p>确定遍历顺序</p>\n<p>顺序遍历</p>\n</li>\n<li><p>打印dp数组(Debug)</p>\n</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> n;<br>        &#125;<br>        <span class=\"hljs-type\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];<br>        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>        dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt; n + <span class=\"hljs-number\">1</span>; i++) &#123;<br>            dp[i] = dp[i - <span class=\"hljs-number\">1</span>] + dp[i - <span class=\"hljs-number\">2</span>];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"70-爬楼梯\"><a href=\"#70-爬楼梯\" class=\"headerlink\" title=\"70. 爬楼梯\"></a>70. 爬楼梯</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/climbing-stairs/description/\">https://leetcode.cn/problems/climbing-stairs/description/</a></p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li><p>确定dp数组</p>\n<p>第i个台阶有dp[i]种方法可以上来</p>\n</li>\n<li><p>递推公式</p>\n<p><code>dp[i] = dp[i - 1] + dp[i - 2]</code></p>\n</li>\n<li><p>dp数组的初始化</p>\n<p><code>dp[0] = 0</code></p>\n<p><code>dp[1] = 1</code></p>\n<p><code>dp[2] = 2</code></p>\n<p><code>dp[i] = 0</code></p>\n</li>\n<li><p>确定遍历顺序</p>\n<p>顺序遍历</p>\n</li>\n<li><p>打印dp数组(Debug)</p>\n</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">climbStairs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> n;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> []dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];<br>        dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>        dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>; i &lt;= n; i++) &#123;<br>            dp[i] = dp[i - <span class=\"hljs-number\">1</span>] + dp[i - <span class=\"hljs-number\">2</span>];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"746-使用最小花费爬楼梯\"><a href=\"#746-使用最小花费爬楼梯\" class=\"headerlink\" title=\"746. 使用最小花费爬楼梯\"></a>746. 使用最小花费爬楼梯</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/min-cost-climbing-stairs/description/\">https://leetcode.cn/problems/min-cost-climbing-stairs/description/</a></p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题描述看的不是很懂，理解之后还是有点模糊这个递推公式，AC之后再看看题解。先判断是否是最后一次上台阶（站在最后一个台阶上是，选择一步还是两步）</p>\n<ol>\n<li><p>确定dp数组</p>\n<p>第i个台阶最小花费为dp[i]</p>\n</li>\n<li><p>递推公式</p>\n<p>如果是最后一次上台阶：则<code>dp[i] = min(dp[i - 1], cost[i] + dp[i - 2]);</code></p>\n<p>否则：<code>dp[i] = cost[i] + min(dp[i - 1], dp[i - 2]);</code></p>\n</li>\n<li><p>dp数组的初始化</p>\n<p><code>dp[0] = cost[0]</code></p>\n<p><code>dp[1] = cost[1]</code></p>\n</li>\n<li><p>确定遍历顺序</p>\n<p>顺序遍历</p>\n</li>\n<li><p>打印dp数组(Debug)</p>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">minCostClimbingStairs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] cost)</span> &#123;<br>        <span class=\"hljs-type\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[cost.length];<br>        dp[<span class=\"hljs-number\">0</span>] = cost[<span class=\"hljs-number\">0</span>];<br>        dp[<span class=\"hljs-number\">1</span>] = cost[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-keyword\">if</span> (cost.length == <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> Math.min(dp[<span class=\"hljs-number\">0</span>], dp[<span class=\"hljs-number\">1</span>]);<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt; dp.length; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (i == dp.length - <span class=\"hljs-number\">1</span>) &#123;<br>                dp[i] = Math.min(dp[i - <span class=\"hljs-number\">1</span>], cost[i] + dp[i - <span class=\"hljs-number\">2</span>]);<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                dp[i] = cost[i] + Math.min(dp[i - <span class=\"hljs-number\">1</span>], dp[i - <span class=\"hljs-number\">2</span>]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[dp.length - <span class=\"hljs-number\">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"官方题解\"><a href=\"#官方题解\" class=\"headerlink\" title=\"官方题解\"></a>官方题解</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minCostClimbingStairs</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; cost)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> n = cost.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n + <span class=\"hljs-number\">1</span>)</span></span>;<br>        dp[<span class=\"hljs-number\">0</span>] = dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++) &#123;<br>            dp[i] = <span class=\"hljs-built_in\">min</span>(dp[i - <span class=\"hljs-number\">1</span>] + cost[i - <span class=\"hljs-number\">1</span>], dp[i - <span class=\"hljs-number\">2</span>] + cost[i - <span class=\"hljs-number\">2</span>]);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n\n<p>主要是对状态转移方程理解的不够透彻</p>\n<p><code>dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【LeetCode】09动态规划Part01-509-斐波那契数、70-爬楼梯、746-使用最小花费爬楼梯\"><a href=\"#【LeetCode】09动态规划Part01-509-斐波那契数、70-爬楼梯、746-使用最小花费爬楼梯\" class=\"headerlink\" title=\"【LeetCode】09动态规划Part01  509.斐波那契数、70. 爬楼梯、746. 使用最小花费爬楼梯\"></a>【LeetCode】09动态规划Part01  509.斐波那契数、70. 爬楼梯、746. 使用最小花费爬楼梯</h1><h2 id=\"动态规划解题步骤\"><a href=\"#动态规划解题步骤\" class=\"headerlink\" title=\"动态规划解题步骤\"></a>动态规划解题步骤</h2><ol>\n<li><p>确定dp数组</p>\n</li>\n<li><p>递推公式</p>\n</li>\n<li><p>dp数组的初始化</p>\n</li>\n<li><p>确定遍历顺序</p>\n</li>\n<li><p>打印dp数组(Debug)</p>\n</li>\n</ol>\n<h2 id=\"509-斐波那契数\"><a href=\"#509-斐波那契数\" class=\"headerlink\" title=\"509. 斐波那契数\"></a>509. 斐波那契数</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/fibonacci-number/description/\">https://leetcode.cn/problems/fibonacci-number/description/</a></p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li><p>确定dp数组</p>\n<p><code>dp[i]</code>是前两项之和</p>\n</li>\n<li><p>递推公式</p>\n<p><code>dp[i] = dp[i - 1] + dp[i - 2]</code></p>\n</li>\n<li><p>dp数组的初始化</p>\n<p><code>dp[0] = 0</code><br><code>dp[1] = 1</code><br><code>dp[i] = 0</code></p>\n</li>\n<li><p>确定遍历顺序</p>\n<p>顺序遍历</p>\n</li>\n<li><p>打印dp数组(Debug)</p>\n</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> n;<br>        &#125;<br>        <span class=\"hljs-type\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];<br>        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>        dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt; n + <span class=\"hljs-number\">1</span>; i++) &#123;<br>            dp[i] = dp[i - <span class=\"hljs-number\">1</span>] + dp[i - <span class=\"hljs-number\">2</span>];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"70-爬楼梯\"><a href=\"#70-爬楼梯\" class=\"headerlink\" title=\"70. 爬楼梯\"></a>70. 爬楼梯</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/climbing-stairs/description/\">https://leetcode.cn/problems/climbing-stairs/description/</a></p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li><p>确定dp数组</p>\n<p>第i个台阶有dp[i]种方法可以上来</p>\n</li>\n<li><p>递推公式</p>\n<p><code>dp[i] = dp[i - 1] + dp[i - 2]</code></p>\n</li>\n<li><p>dp数组的初始化</p>\n<p><code>dp[0] = 0</code></p>\n<p><code>dp[1] = 1</code></p>\n<p><code>dp[2] = 2</code></p>\n<p><code>dp[i] = 0</code></p>\n</li>\n<li><p>确定遍历顺序</p>\n<p>顺序遍历</p>\n</li>\n<li><p>打印dp数组(Debug)</p>\n</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">climbStairs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> n;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> []dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];<br>        dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>        dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>; i &lt;= n; i++) &#123;<br>            dp[i] = dp[i - <span class=\"hljs-number\">1</span>] + dp[i - <span class=\"hljs-number\">2</span>];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"746-使用最小花费爬楼梯\"><a href=\"#746-使用最小花费爬楼梯\" class=\"headerlink\" title=\"746. 使用最小花费爬楼梯\"></a>746. 使用最小花费爬楼梯</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/min-cost-climbing-stairs/description/\">https://leetcode.cn/problems/min-cost-climbing-stairs/description/</a></p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这道题描述看的不是很懂，理解之后还是有点模糊这个递推公式，AC之后再看看题解。先判断是否是最后一次上台阶（站在最后一个台阶上是，选择一步还是两步）</p>\n<ol>\n<li><p>确定dp数组</p>\n<p>第i个台阶最小花费为dp[i]</p>\n</li>\n<li><p>递推公式</p>\n<p>如果是最后一次上台阶：则<code>dp[i] = min(dp[i - 1], cost[i] + dp[i - 2]);</code></p>\n<p>否则：<code>dp[i] = cost[i] + min(dp[i - 1], dp[i - 2]);</code></p>\n</li>\n<li><p>dp数组的初始化</p>\n<p><code>dp[0] = cost[0]</code></p>\n<p><code>dp[1] = cost[1]</code></p>\n</li>\n<li><p>确定遍历顺序</p>\n<p>顺序遍历</p>\n</li>\n<li><p>打印dp数组(Debug)</p>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">minCostClimbingStairs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] cost)</span> &#123;<br>        <span class=\"hljs-type\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[cost.length];<br>        dp[<span class=\"hljs-number\">0</span>] = cost[<span class=\"hljs-number\">0</span>];<br>        dp[<span class=\"hljs-number\">1</span>] = cost[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-keyword\">if</span> (cost.length == <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> Math.min(dp[<span class=\"hljs-number\">0</span>], dp[<span class=\"hljs-number\">1</span>]);<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt; dp.length; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (i == dp.length - <span class=\"hljs-number\">1</span>) &#123;<br>                dp[i] = Math.min(dp[i - <span class=\"hljs-number\">1</span>], cost[i] + dp[i - <span class=\"hljs-number\">2</span>]);<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                dp[i] = cost[i] + Math.min(dp[i - <span class=\"hljs-number\">1</span>], dp[i - <span class=\"hljs-number\">2</span>]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[dp.length - <span class=\"hljs-number\">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"官方题解\"><a href=\"#官方题解\" class=\"headerlink\" title=\"官方题解\"></a>官方题解</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minCostClimbingStairs</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; cost)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> n = cost.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n + <span class=\"hljs-number\">1</span>)</span></span>;<br>        dp[<span class=\"hljs-number\">0</span>] = dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++) &#123;<br>            dp[i] = <span class=\"hljs-built_in\">min</span>(dp[i - <span class=\"hljs-number\">1</span>] + cost[i - <span class=\"hljs-number\">1</span>], dp[i - <span class=\"hljs-number\">2</span>] + cost[i - <span class=\"hljs-number\">2</span>]);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n\n<p>主要是对状态转移方程理解的不够透彻</p>\n<p><code>dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);</code></p>\n"},{"title":"【LeetCode】09动态规划Part02  62. 不同路径、63. 不同路径II","abbrlink":"e9769661","date":"2024-03-21T06:59:23.000Z","_content":"\n# 【LeetCode】09动态规划Part02  62. 不同路径、63. 不同路径II\n\n\n\n## 62. 不同路径\n\n>   题目链接：https://leetcode.cn/problems/unique-paths/description/\n\n### 思路\n\n到达某个非边缘块（第一行或第一列）只有两种可能，要么从其上方来，要么从其左侧来。那么到达这个块一共就有`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`个方法。如果是第一行或第一列只可能有一种方法。\n\n#### 1. 确定dp数组\n\n二维dp，`dp[i][j]`代表第i行第j列这个位置有多少种方法可以到达\n\n#### 2. 递推公式\n\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`\n\n#### 3. dp数组的初始化\n\n第一行、第一列均为1\n\n#### 4. 确定遍历顺序\n\n先行后列\n\n\n\n### 代码\n\n``` java\nclass Solution {\npublic:\n    public int uniquePaths(int m, int n) {\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            dp[i][0] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            dp[0][i] = 1;\n        }\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n        return dp[m - 1][n - 1];\n    }\n}\n```\n\n\n\n## 63. 不同路径II\n\n### 思路\n\n思路基本同上，但是多了一层障碍，需要多一层判断，如果位置`(i, j)`有障碍（即`obstacleGrid[i][j] == 1`），那么`dp[i][j]`的值为0\n\n#### 1. 确定dp数组\n\n二维dp，`dp[i][j]`代表第i行第j列这个位置有多少种方法可以到达\n\n#### 2. 递推公式\n\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`\n\n#### 3. dp数组的初始化\n\n第一行、第一列在没有障碍的位置均为1\n\n#### 4. 确定遍历顺序\n\n先行后列\n\n\n\n### 代码\n\n``` java\nclass Solution {\n    public int uniquePathsWithObstacles(int[][] obstacleGrid) {\n        int n = obstacleGrid.length;\n        int m = obstacleGrid[0].length;\n        int[][] dp = new int[n][m];\n        int flag = 1;\n        for (int i = 0; i < n; i++) {\n            if (obstacleGrid[i][0] == 1) {\n                flag = 0;\n            }\n            dp[i][0] = flag;\n        }\n        flag = 1;\n        for (int i = 0; i < m; i++) {\n            if (obstacleGrid[0][i] == 1) {\n                flag = 0;\n            }\n            dp[0][i] = flag;\n        }\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i][j] = obstacleGrid[i][j] == 0 ? dp[i - 1][j] + dp[i][j - 1] : 0;\n            }\n        }\n        return dp[n - 1][m - 1];\n    }\n};\n```\n\n","source":"_posts/【LeetCode】09动态规划Part02.md","raw":"---\ntitle: 【LeetCode】09动态规划Part02  62. 不同路径、63. 不同路径II\ntags:\n  - 算法\n  - LeetCode\n  - 动态规划\nabbrlink: e9769661\ndate: 2024-03-21 14:59:23\n---\n\n# 【LeetCode】09动态规划Part02  62. 不同路径、63. 不同路径II\n\n\n\n## 62. 不同路径\n\n>   题目链接：https://leetcode.cn/problems/unique-paths/description/\n\n### 思路\n\n到达某个非边缘块（第一行或第一列）只有两种可能，要么从其上方来，要么从其左侧来。那么到达这个块一共就有`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`个方法。如果是第一行或第一列只可能有一种方法。\n\n#### 1. 确定dp数组\n\n二维dp，`dp[i][j]`代表第i行第j列这个位置有多少种方法可以到达\n\n#### 2. 递推公式\n\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`\n\n#### 3. dp数组的初始化\n\n第一行、第一列均为1\n\n#### 4. 确定遍历顺序\n\n先行后列\n\n\n\n### 代码\n\n``` java\nclass Solution {\npublic:\n    public int uniquePaths(int m, int n) {\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            dp[i][0] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            dp[0][i] = 1;\n        }\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n        return dp[m - 1][n - 1];\n    }\n}\n```\n\n\n\n## 63. 不同路径II\n\n### 思路\n\n思路基本同上，但是多了一层障碍，需要多一层判断，如果位置`(i, j)`有障碍（即`obstacleGrid[i][j] == 1`），那么`dp[i][j]`的值为0\n\n#### 1. 确定dp数组\n\n二维dp，`dp[i][j]`代表第i行第j列这个位置有多少种方法可以到达\n\n#### 2. 递推公式\n\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`\n\n#### 3. dp数组的初始化\n\n第一行、第一列在没有障碍的位置均为1\n\n#### 4. 确定遍历顺序\n\n先行后列\n\n\n\n### 代码\n\n``` java\nclass Solution {\n    public int uniquePathsWithObstacles(int[][] obstacleGrid) {\n        int n = obstacleGrid.length;\n        int m = obstacleGrid[0].length;\n        int[][] dp = new int[n][m];\n        int flag = 1;\n        for (int i = 0; i < n; i++) {\n            if (obstacleGrid[i][0] == 1) {\n                flag = 0;\n            }\n            dp[i][0] = flag;\n        }\n        flag = 1;\n        for (int i = 0; i < m; i++) {\n            if (obstacleGrid[0][i] == 1) {\n                flag = 0;\n            }\n            dp[0][i] = flag;\n        }\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i][j] = obstacleGrid[i][j] == 0 ? dp[i - 1][j] + dp[i][j - 1] : 0;\n            }\n        }\n        return dp[n - 1][m - 1];\n    }\n};\n```\n\n","slug":"【LeetCode】09动态规划Part02","published":1,"updated":"2024-03-28T11:40:44.627Z","_id":"clu0ws48d0001snz8d9hxe67a","comments":1,"layout":"post","photos":[],"content":"<h1\nid=\"leetcode09动态规划part02-62.-不同路径63.-不同路径ii\">【LeetCode】09动态规划Part02\n62. 不同路径、63. 不同路径II</h1>\n<h2 id=\"不同路径\">62. 不同路径</h2>\n<blockquote>\n<p>题目链接：https://leetcode.cn/problems/unique-paths/description/</p>\n</blockquote>\n<h3 id=\"思路\">思路</h3>\n<p>到达某个非边缘块（第一行或第一列）只有两种可能，要么从其上方来，要么从其左侧来。那么到达这个块一共就有<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>个方法。如果是第一行或第一列只可能有一种方法。</p>\n<h4 id=\"确定dp数组\">1. 确定dp数组</h4>\n<p>二维dp，<code>dp[i][j]</code>代表第i行第j列这个位置有多少种方法可以到达</p>\n<h4 id=\"递推公式\">2. 递推公式</h4>\n<p><code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code></p>\n<h4 id=\"dp数组的初始化\">3. dp数组的初始化</h4>\n<p>第一行、第一列均为1</p>\n<h4 id=\"确定遍历顺序\">4. 确定遍历顺序</h4>\n<p>先行后列</p>\n<h3 id=\"代码\">代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> &#123;<br>        <span class=\"hljs-type\">int</span>[][] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[m][n];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; m; i++) &#123;<br>            dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>            dp[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; m; i++) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; n; j++) &#123;<br>                dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j] + dp[i][j - <span class=\"hljs-number\">1</span>];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[m - <span class=\"hljs-number\">1</span>][n - <span class=\"hljs-number\">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"不同路径ii\">63. 不同路径II</h2>\n<h3 id=\"思路-1\">思路</h3>\n<p>思路基本同上，但是多了一层障碍，需要多一层判断，如果位置<code>(i, j)</code>有障碍（即<code>obstacleGrid[i][j] == 1</code>），那么<code>dp[i][j]</code>的值为0</p>\n<h4 id=\"确定dp数组-1\">1. 确定dp数组</h4>\n<p>二维dp，<code>dp[i][j]</code>代表第i行第j列这个位置有多少种方法可以到达</p>\n<h4 id=\"递推公式-1\">2. 递推公式</h4>\n<p><code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code></p>\n<h4 id=\"dp数组的初始化-1\">3. dp数组的初始化</h4>\n<p>第一行、第一列在没有障碍的位置均为1</p>\n<h4 id=\"确定遍历顺序-1\">4. 确定遍历顺序</h4>\n<p>先行后列</p>\n<h3 id=\"代码-1\">代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">uniquePathsWithObstacles</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] obstacleGrid)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> obstacleGrid.length;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> obstacleGrid[<span class=\"hljs-number\">0</span>].length;<br>        <span class=\"hljs-type\">int</span>[][] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n][m];<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">flag</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (obstacleGrid[i][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">1</span>) &#123;<br>                flag = <span class=\"hljs-number\">0</span>;<br>            &#125;<br>            dp[i][<span class=\"hljs-number\">0</span>] = flag;<br>        &#125;<br>        flag = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; m; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (obstacleGrid[<span class=\"hljs-number\">0</span>][i] == <span class=\"hljs-number\">1</span>) &#123;<br>                flag = <span class=\"hljs-number\">0</span>;<br>            &#125;<br>            dp[<span class=\"hljs-number\">0</span>][i] = flag;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; n; i++) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; m; j++) &#123;<br>                dp[i][j] = obstacleGrid[i][j] == <span class=\"hljs-number\">0</span> ? dp[i - <span class=\"hljs-number\">1</span>][j] + dp[i][j - <span class=\"hljs-number\">1</span>] : <span class=\"hljs-number\">0</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n - <span class=\"hljs-number\">1</span>][m - <span class=\"hljs-number\">1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1\nid=\"leetcode09动态规划part02-62.-不同路径63.-不同路径ii\">【LeetCode】09动态规划Part02\n62. 不同路径、63. 不同路径II</h1>\n<h2 id=\"不同路径\">62. 不同路径</h2>\n<blockquote>\n<p>题目链接：https://leetcode.cn/problems/unique-paths/description/</p>\n</blockquote>\n<h3 id=\"思路\">思路</h3>\n<p>到达某个非边缘块（第一行或第一列）只有两种可能，要么从其上方来，要么从其左侧来。那么到达这个块一共就有<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>个方法。如果是第一行或第一列只可能有一种方法。</p>\n<h4 id=\"确定dp数组\">1. 确定dp数组</h4>\n<p>二维dp，<code>dp[i][j]</code>代表第i行第j列这个位置有多少种方法可以到达</p>\n<h4 id=\"递推公式\">2. 递推公式</h4>\n<p><code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code></p>\n<h4 id=\"dp数组的初始化\">3. dp数组的初始化</h4>\n<p>第一行、第一列均为1</p>\n<h4 id=\"确定遍历顺序\">4. 确定遍历顺序</h4>\n<p>先行后列</p>\n<h3 id=\"代码\">代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> &#123;<br>        <span class=\"hljs-type\">int</span>[][] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[m][n];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; m; i++) &#123;<br>            dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>            dp[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; m; i++) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; n; j++) &#123;<br>                dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j] + dp[i][j - <span class=\"hljs-number\">1</span>];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[m - <span class=\"hljs-number\">1</span>][n - <span class=\"hljs-number\">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"不同路径ii\">63. 不同路径II</h2>\n<h3 id=\"思路-1\">思路</h3>\n<p>思路基本同上，但是多了一层障碍，需要多一层判断，如果位置<code>(i, j)</code>有障碍（即<code>obstacleGrid[i][j] == 1</code>），那么<code>dp[i][j]</code>的值为0</p>\n<h4 id=\"确定dp数组-1\">1. 确定dp数组</h4>\n<p>二维dp，<code>dp[i][j]</code>代表第i行第j列这个位置有多少种方法可以到达</p>\n<h4 id=\"递推公式-1\">2. 递推公式</h4>\n<p><code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code></p>\n<h4 id=\"dp数组的初始化-1\">3. dp数组的初始化</h4>\n<p>第一行、第一列在没有障碍的位置均为1</p>\n<h4 id=\"确定遍历顺序-1\">4. 确定遍历顺序</h4>\n<p>先行后列</p>\n<h3 id=\"代码-1\">代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">uniquePathsWithObstacles</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] obstacleGrid)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> obstacleGrid.length;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> obstacleGrid[<span class=\"hljs-number\">0</span>].length;<br>        <span class=\"hljs-type\">int</span>[][] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n][m];<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">flag</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (obstacleGrid[i][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">1</span>) &#123;<br>                flag = <span class=\"hljs-number\">0</span>;<br>            &#125;<br>            dp[i][<span class=\"hljs-number\">0</span>] = flag;<br>        &#125;<br>        flag = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; m; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (obstacleGrid[<span class=\"hljs-number\">0</span>][i] == <span class=\"hljs-number\">1</span>) &#123;<br>                flag = <span class=\"hljs-number\">0</span>;<br>            &#125;<br>            dp[<span class=\"hljs-number\">0</span>][i] = flag;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; n; i++) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; m; j++) &#123;<br>                dp[i][j] = obstacleGrid[i][j] == <span class=\"hljs-number\">0</span> ? dp[i - <span class=\"hljs-number\">1</span>][j] + dp[i][j - <span class=\"hljs-number\">1</span>] : <span class=\"hljs-number\">0</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n - <span class=\"hljs-number\">1</span>][m - <span class=\"hljs-number\">1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n"},{"title":"【LeetCode】09动态规划Part03  343. 整数拆分、96. 不同的二叉搜索树","mathjax":"ture","abbrlink":"9e71a6f7","date":"2024-03-24T11:37:38.000Z","_content":"\n# 【LeetCode】09动态规划Part03  343. 整数拆分、96. 不同的二叉搜索树\n\n\n\n## 343. 整数拆分\n\n>   题目链接：https://leetcode.cn/problems/integer-break/description/\n\n### 思路\n\n#### 思路一：贪心算法\n\n根据自己的不断地测试发现，如果一个数n(n>3)，不断地拆出来3，拆到最后会出现3种情况：\n\n1.   `n % 3 == 0`：最大的乘积数为`pow(3, n / 3)`\n2.   `n % 3 == 2`：意味着拆到最后一个数为2，那么最大的乘积数是`pow(3, n / 3) * 2`\n3.   `n % 3 == 1`：意味着拆到最后一个数为1，那么少拆一个3，使其最后乘以4，最大乘积数为`pow(3, n / 3 - 1) * 4`\n\n确实也AC了这道题目，核心思想就是贪更多的3。至于为什么并不是很理解，也没有证明\n\n但是也尝试过很多策略\n\n-   不断地拆出来2，如果是奇数最后一个3则不拆，这样会获得最大的幂指数。但是得不到最大的乘积\n-   不断地拆出来`a = (int)sqrt(n)`，最后一次不足a则加在上一次拆分的结果。同样得不到最大的值\n\n#### 思路二：动态规划\n\n##### 1. 确定dp数组\n\n正整数`i`拆分后得到的最大乘积`dp[i]`。可能是两个数乘积，也可能是多个数的乘积。\n\n\n\n##### 2. 递推公式\n\n-   将`i`拆分成`j`和`i - j `，且`i - j`不能继续拆分，此时乘积为`j x (i - j)`\n-   将`i`拆分成`j`和`i - j `，且`i - j`可以继续拆分，此时乘积为`j x dp[i - j]`\n\n$$\ndp[i] = \\max\\limits_{1\\le j < i}\\{\\max(j\\times (i - j), j \\times dp[i - j])\\}\n$$\n\n>   以n = 6为例\n>\n>   -   `i = 1`，此时`i`并不能拆分出两个正整数，`dp[1] = 0`\n>   -   `i = 2`，此时`i`仅能拆分出$2 = 1 + 1 \\Rightarrow 1\\times 1=1$，`dp[2] = 1`\n>   -   `i = 3`，令`curMax = 0`代表当前拆分出的$\\max(j\\times (i - j), j \\times dp[i - j])$，\n>       $$\n>       \\begin{align*}\n>       &j=1\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=1\\times (3-1) = 2\\\\\\\\\n>       j\\times dp[i-j]=1\\times dp[3-1]=1\\times 1 = 1\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=2\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=2\\times (3-2) = 2\\\\\\\\\n>       j\\times dp[i-j]=2\\times dp[3-2]=2\\times 0 = 0\n>       \\end{cases}\n>       \\end{align*}\n>       $$\n>       综上，`curMax = 2, dp[3] = 2`，也就是当拆分数字3时，最大乘积为2\n>   -   `i = 4`：\n>       $$\n>       \\begin{align*}\n>       &j=1\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=1\\times (4-1) = 3\\\\\\\\\n>       j\\times dp[i-j]=1\\times dp[4-1]=1\\times 2 = 2\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=2\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=2\\times (4-2) = 4\\\\\\\\\n>       j\\times dp[i-j]=2\\times dp[4-2]=2\\times 1 = 2\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=3\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=3\\times (4-3) = 3\\\\\\\\\n>       j\\times dp[i-j]=3\\times dp[4-3]=3\\times 0 = 0\n>       \\end{cases}\n>       \\end{align*}\n>       $$\n>       综上，`curMax = 4, dp[4] = 4`，也就是当拆分数字4时，最大乘积为4\n>   -   `i = 5`：\n>       $$\n>       \\begin{align*}\n>       &j=1\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=1\\times (5-1) = 4\\\\\\\\\n>       j\\times dp[i-j]=1\\times dp[5-1]=1\\times 4 = 4\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=2\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=2\\times (5-2) = 6\\\\\\\\\n>       j\\times dp[i-j]=2\\times dp[5-2]=2\\times 2 = 4\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=3\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=3\\times (5-3) = 6\\\\\\\\\n>       j\\times dp[i-j]=3\\times dp[5-3]=3\\times 1 = 3\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=4\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=4\\times (5-4) = 4\\\\\\\\\n>       j\\times dp[i-j]=4\\times dp[5-4]=4\\times 0 = 0\n>       \\end{cases}\\\\\\\\\n>       \\end{align*}\n>       $$\n>       综上，`curMax = 6, dp[5] = 6`，也就是当拆分数字5时，最大乘积为6\n>   -   `i = 6`：\n>       $$\n>       \\begin{align*}\n>       &j=1\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=1\\times (6-1) = 5\\\\\\\\\n>       j\\times dp[i-j]=1\\times dp[6-1]=1\\times 6 = 6\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=2\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=2\\times (6-2) = 8\\\\\\\\\n>       j\\times dp[i-j]=2\\times dp[6-2]=2\\times 4 = 8\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=3\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=3\\times (6-3) = 9\\\\\\\\\n>       j\\times dp[i-j]=3\\times dp[6-3]=3\\times 2 = 6\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=4\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=4\\times (6-4) = 8\\\\\\\\\n>       j\\times dp[i-j]=4\\times dp[6-4]=4\\times 1 = 4\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=5\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=5\\times (6-5) = 5\\\\\\\\\n>       j\\times dp[i-j]=5\\times dp[6-5]=5\\times 1 = 5\n>       \\end{cases}\\\\\\\\\n>       \\end{align*}\n>       $$\n>       综上，`curMax = 9, dp[6] = 9`，也就是当拆分数字6时，最大乘积为9\n>\n>   返回`dp[n]`\n\n##### 3. dp数组初始化\n\n不需要额外的初始化操作\n\n\n\n##### 4. 确定遍历顺序\n\n顺序遍历\n\n\n\n##### 5. 打印dp数组（Debug）\n\n```java\n// leetcode官解\npublic int integerBreak(int n) {\n    int[] dp = new int[n + 1];\n    for (int i = 2; i <= n; i++) {\n        int curMax = 0;\n        for (int j = 1; j < i; j++) {\n            curMax = Math.max(curMax, Math.max(j * (i - j), j * dp[i - j]));\n        }\n        dp[i] = curMax;\n    }\n    return dp[n];\n}\n```\n\n\n\n## 96. 不同的二叉搜索树\n\n>   题目链接：https://leetcode.cn/problems/unique-binary-search-trees/description/\n\n自己画了几个树，还是没什么思路，看了题解。\n\n### 动态规划\n\n#### 1. 确定dp数组\n\n`dp[i]`代表：`i`个节点的二叉搜索树有`dp[i]`种\n\n\n\n#### 2. 递推公式\n\n假设有3个节点的情况，需要分别考虑1、2、3分别为根节点时，左右子树的情况。\n\n-   当1为根节点时，记做`F[1]`\n\n    左子树为空树，右子树有两个节点，一共`dp[0] * dp[2]`种情况，使用乘法的原因是排列组合\n\n-   当2为根节点时，记做`F[2]`\n\n    左子树有一个节点，右子树有一个节点，一共`dp[1] * dp[1]`种情况\n\n-   当3为根节点时，记做`F[3]`\n\n    左子树有两个节点，右子树为空树，一共`dp[2]*dp[0]`种情况\n\n所以`dp[3] = F[1] + F[2] + F[3]`\n\n推广开来：\n$$\n\\begin{align*}\n&dp[i] = \\sum\\limits_{i=1}^nF[n]\\\\\\\\\n&F[n]=\\prod\\limits_{i=0}^{n-1}dp[i]\\times dp[n-1-i]\n\\end{align*}\n$$\n\n#### 3. 初始化\n\n`dp[0] = 1`，空树也算一种情况\n\n`dp[1] = 1`，只有一个节点的情况\n\n\n\n#### 4. 遍历\n\n顺序遍历\n\n\n\n#### 5. 打印dp数组(debug)\n\n``` java\npublic int numTrees(int n) {\n    int[] dp = new int[n + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        dp[i] = 0;\n        for (int j = 0; j < i; j++) {\n            dp[i] += dp[j] * dp[i - 1 - j];\n        }\n    }\n    return dp[n];\n}\n```\n\n","source":"_posts/【LeetCode】09动态规划Part03.md","raw":"---\ntitle: 【LeetCode】09动态规划Part03  343. 整数拆分、96. 不同的二叉搜索树\ntags:\n  - 算法\n  - 动态规划\n  - LeetCode\nmathjax: ture\nabbrlink: 9e71a6f7\ndate: 2024-03-24 19:37:38\n---\n\n# 【LeetCode】09动态规划Part03  343. 整数拆分、96. 不同的二叉搜索树\n\n\n\n## 343. 整数拆分\n\n>   题目链接：https://leetcode.cn/problems/integer-break/description/\n\n### 思路\n\n#### 思路一：贪心算法\n\n根据自己的不断地测试发现，如果一个数n(n>3)，不断地拆出来3，拆到最后会出现3种情况：\n\n1.   `n % 3 == 0`：最大的乘积数为`pow(3, n / 3)`\n2.   `n % 3 == 2`：意味着拆到最后一个数为2，那么最大的乘积数是`pow(3, n / 3) * 2`\n3.   `n % 3 == 1`：意味着拆到最后一个数为1，那么少拆一个3，使其最后乘以4，最大乘积数为`pow(3, n / 3 - 1) * 4`\n\n确实也AC了这道题目，核心思想就是贪更多的3。至于为什么并不是很理解，也没有证明\n\n但是也尝试过很多策略\n\n-   不断地拆出来2，如果是奇数最后一个3则不拆，这样会获得最大的幂指数。但是得不到最大的乘积\n-   不断地拆出来`a = (int)sqrt(n)`，最后一次不足a则加在上一次拆分的结果。同样得不到最大的值\n\n#### 思路二：动态规划\n\n##### 1. 确定dp数组\n\n正整数`i`拆分后得到的最大乘积`dp[i]`。可能是两个数乘积，也可能是多个数的乘积。\n\n\n\n##### 2. 递推公式\n\n-   将`i`拆分成`j`和`i - j `，且`i - j`不能继续拆分，此时乘积为`j x (i - j)`\n-   将`i`拆分成`j`和`i - j `，且`i - j`可以继续拆分，此时乘积为`j x dp[i - j]`\n\n$$\ndp[i] = \\max\\limits_{1\\le j < i}\\{\\max(j\\times (i - j), j \\times dp[i - j])\\}\n$$\n\n>   以n = 6为例\n>\n>   -   `i = 1`，此时`i`并不能拆分出两个正整数，`dp[1] = 0`\n>   -   `i = 2`，此时`i`仅能拆分出$2 = 1 + 1 \\Rightarrow 1\\times 1=1$，`dp[2] = 1`\n>   -   `i = 3`，令`curMax = 0`代表当前拆分出的$\\max(j\\times (i - j), j \\times dp[i - j])$，\n>       $$\n>       \\begin{align*}\n>       &j=1\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=1\\times (3-1) = 2\\\\\\\\\n>       j\\times dp[i-j]=1\\times dp[3-1]=1\\times 1 = 1\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=2\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=2\\times (3-2) = 2\\\\\\\\\n>       j\\times dp[i-j]=2\\times dp[3-2]=2\\times 0 = 0\n>       \\end{cases}\n>       \\end{align*}\n>       $$\n>       综上，`curMax = 2, dp[3] = 2`，也就是当拆分数字3时，最大乘积为2\n>   -   `i = 4`：\n>       $$\n>       \\begin{align*}\n>       &j=1\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=1\\times (4-1) = 3\\\\\\\\\n>       j\\times dp[i-j]=1\\times dp[4-1]=1\\times 2 = 2\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=2\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=2\\times (4-2) = 4\\\\\\\\\n>       j\\times dp[i-j]=2\\times dp[4-2]=2\\times 1 = 2\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=3\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=3\\times (4-3) = 3\\\\\\\\\n>       j\\times dp[i-j]=3\\times dp[4-3]=3\\times 0 = 0\n>       \\end{cases}\n>       \\end{align*}\n>       $$\n>       综上，`curMax = 4, dp[4] = 4`，也就是当拆分数字4时，最大乘积为4\n>   -   `i = 5`：\n>       $$\n>       \\begin{align*}\n>       &j=1\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=1\\times (5-1) = 4\\\\\\\\\n>       j\\times dp[i-j]=1\\times dp[5-1]=1\\times 4 = 4\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=2\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=2\\times (5-2) = 6\\\\\\\\\n>       j\\times dp[i-j]=2\\times dp[5-2]=2\\times 2 = 4\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=3\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=3\\times (5-3) = 6\\\\\\\\\n>       j\\times dp[i-j]=3\\times dp[5-3]=3\\times 1 = 3\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=4\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=4\\times (5-4) = 4\\\\\\\\\n>       j\\times dp[i-j]=4\\times dp[5-4]=4\\times 0 = 0\n>       \\end{cases}\\\\\\\\\n>       \\end{align*}\n>       $$\n>       综上，`curMax = 6, dp[5] = 6`，也就是当拆分数字5时，最大乘积为6\n>   -   `i = 6`：\n>       $$\n>       \\begin{align*}\n>       &j=1\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=1\\times (6-1) = 5\\\\\\\\\n>       j\\times dp[i-j]=1\\times dp[6-1]=1\\times 6 = 6\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=2\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=2\\times (6-2) = 8\\\\\\\\\n>       j\\times dp[i-j]=2\\times dp[6-2]=2\\times 4 = 8\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=3\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=3\\times (6-3) = 9\\\\\\\\\n>       j\\times dp[i-j]=3\\times dp[6-3]=3\\times 2 = 6\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=4\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=4\\times (6-4) = 8\\\\\\\\\n>       j\\times dp[i-j]=4\\times dp[6-4]=4\\times 1 = 4\n>       \\end{cases}\\\\\\\\\n>       \n>       &j=5\\Rightarrow\n>       \\begin{cases}\n>       j\\times (i-j)=5\\times (6-5) = 5\\\\\\\\\n>       j\\times dp[i-j]=5\\times dp[6-5]=5\\times 1 = 5\n>       \\end{cases}\\\\\\\\\n>       \\end{align*}\n>       $$\n>       综上，`curMax = 9, dp[6] = 9`，也就是当拆分数字6时，最大乘积为9\n>\n>   返回`dp[n]`\n\n##### 3. dp数组初始化\n\n不需要额外的初始化操作\n\n\n\n##### 4. 确定遍历顺序\n\n顺序遍历\n\n\n\n##### 5. 打印dp数组（Debug）\n\n```java\n// leetcode官解\npublic int integerBreak(int n) {\n    int[] dp = new int[n + 1];\n    for (int i = 2; i <= n; i++) {\n        int curMax = 0;\n        for (int j = 1; j < i; j++) {\n            curMax = Math.max(curMax, Math.max(j * (i - j), j * dp[i - j]));\n        }\n        dp[i] = curMax;\n    }\n    return dp[n];\n}\n```\n\n\n\n## 96. 不同的二叉搜索树\n\n>   题目链接：https://leetcode.cn/problems/unique-binary-search-trees/description/\n\n自己画了几个树，还是没什么思路，看了题解。\n\n### 动态规划\n\n#### 1. 确定dp数组\n\n`dp[i]`代表：`i`个节点的二叉搜索树有`dp[i]`种\n\n\n\n#### 2. 递推公式\n\n假设有3个节点的情况，需要分别考虑1、2、3分别为根节点时，左右子树的情况。\n\n-   当1为根节点时，记做`F[1]`\n\n    左子树为空树，右子树有两个节点，一共`dp[0] * dp[2]`种情况，使用乘法的原因是排列组合\n\n-   当2为根节点时，记做`F[2]`\n\n    左子树有一个节点，右子树有一个节点，一共`dp[1] * dp[1]`种情况\n\n-   当3为根节点时，记做`F[3]`\n\n    左子树有两个节点，右子树为空树，一共`dp[2]*dp[0]`种情况\n\n所以`dp[3] = F[1] + F[2] + F[3]`\n\n推广开来：\n$$\n\\begin{align*}\n&dp[i] = \\sum\\limits_{i=1}^nF[n]\\\\\\\\\n&F[n]=\\prod\\limits_{i=0}^{n-1}dp[i]\\times dp[n-1-i]\n\\end{align*}\n$$\n\n#### 3. 初始化\n\n`dp[0] = 1`，空树也算一种情况\n\n`dp[1] = 1`，只有一个节点的情况\n\n\n\n#### 4. 遍历\n\n顺序遍历\n\n\n\n#### 5. 打印dp数组(debug)\n\n``` java\npublic int numTrees(int n) {\n    int[] dp = new int[n + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        dp[i] = 0;\n        for (int j = 0; j < i; j++) {\n            dp[i] += dp[j] * dp[i - 1 - j];\n        }\n    }\n    return dp[n];\n}\n```\n\n","slug":"【LeetCode】09动态规划Part03","published":1,"updated":"2024-04-03T13:27:00.899Z","_id":"clu5gdrno00009yz8437b9ikj","comments":1,"layout":"post","photos":[],"content":"<h1\nid=\"leetcode09动态规划part03-343.-整数拆分96.-不同的二叉搜索树\">【LeetCode】09动态规划Part03\n343. 整数拆分、96. 不同的二叉搜索树</h1>\n<h2 id=\"整数拆分\">343. 整数拆分</h2>\n<blockquote>\n<p>题目链接：https://leetcode.cn/problems/integer-break/description/</p>\n</blockquote>\n<h3 id=\"思路\">思路</h3>\n<h4 id=\"思路一贪心算法\">思路一：贪心算法</h4>\n<p>根据自己的不断地测试发现，如果一个数n(n&gt;3)，不断地拆出来3，拆到最后会出现3种情况：</p>\n<ol type=\"1\">\n<li><code>n % 3 == 0</code>：最大的乘积数为<code>pow(3, n / 3)</code></li>\n<li><code>n % 3 == 2</code>：意味着拆到最后一个数为2，那么最大的乘积数是<code>pow(3, n / 3) * 2</code></li>\n<li><code>n % 3 == 1</code>：意味着拆到最后一个数为1，那么少拆一个3，使其最后乘以4，最大乘积数为<code>pow(3, n / 3 - 1) * 4</code></li>\n</ol>\n<p>确实也AC了这道题目，核心思想就是贪更多的3。至于为什么并不是很理解，也没有证明</p>\n<p>但是也尝试过很多策略</p>\n<ul>\n<li>不断地拆出来2，如果是奇数最后一个3则不拆，这样会获得最大的幂指数。但是得不到最大的乘积</li>\n<li>不断地拆出来<code>a = (int)sqrt(n)</code>，最后一次不足a则加在上一次拆分的结果。同样得不到最大的值</li>\n</ul>\n<h4 id=\"思路二动态规划\">思路二：动态规划</h4>\n<h5 id=\"确定dp数组\">1. 确定dp数组</h5>\n<p>正整数<code>i</code>拆分后得到的最大乘积<code>dp[i]</code>。可能是两个数乘积，也可能是多个数的乘积。</p>\n<h5 id=\"递推公式\">2. 递推公式</h5>\n<ul>\n<li>将<code>i</code>拆分成<code>j</code>和<code>i - j</code>，且<code>i - j</code>不能继续拆分，此时乘积为<code>j x (i - j)</code></li>\n<li>将<code>i</code>拆分成<code>j</code>和<code>i - j</code>，且<code>i - j</code>可以继续拆分，此时乘积为<code>j x dp[i - j]</code></li>\n</ul>\n<p><span class=\"math display\">\\[\ndp[i] = \\max\\limits_{1\\le j &lt; i}\\{\\max(j\\times (i - j), j \\times dp[i\n- j])\\}\n\\]</span></p>\n<blockquote>\n<p>以n = 6为例</p>\n<ul>\n<li><code>i = 1</code>，此时<code>i</code>并不能拆分出两个正整数，<code>dp[1] = 0</code></li>\n<li><code>i = 2</code>，此时<code>i</code>仅能拆分出<span\nclass=\"math inline\">\\(2 = 1 + 1 \\Rightarrow 1\\times\n1=1\\)</span>，<code>dp[2] = 1</code></li>\n<li><code>i = 3</code>，令<code>curMax = 0</code>代表当前拆分出的<span\nclass=\"math inline\">\\(\\max(j\\times (i - j), j \\times dp[i -\nj])\\)</span>， $$ <span class=\"math display\">\\[\\begin{align*}\n&amp;j=1\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=1\\times (3-1) = 2\\\\\\\\\nj\\times dp[i-j]=1\\times dp[3-1]=1\\times 1 = 1\n\\end{cases}\\\\\\\\\n\n&amp;j=2\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=2\\times (3-2) = 2\\\\\\\\\nj\\times dp[i-j]=2\\times dp[3-2]=2\\times 0 = 0\n\\end{cases}\n\\end{align*}\\]</span> $$\n综上，<code>curMax = 2, dp[3] = 2</code>，也就是当拆分数字3时，最大乘积为2</li>\n<li><code>i = 4</code>： $$ <span class=\"math display\">\\[\\begin{align*}\n&amp;j=1\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=1\\times (4-1) = 3\\\\\\\\\nj\\times dp[i-j]=1\\times dp[4-1]=1\\times 2 = 2\n\\end{cases}\\\\\\\\\n\n&amp;j=2\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=2\\times (4-2) = 4\\\\\\\\\nj\\times dp[i-j]=2\\times dp[4-2]=2\\times 1 = 2\n\\end{cases}\\\\\\\\\n\n&amp;j=3\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=3\\times (4-3) = 3\\\\\\\\\nj\\times dp[i-j]=3\\times dp[4-3]=3\\times 0 = 0\n\\end{cases}\n\\end{align*}\\]</span> $$\n综上，<code>curMax = 4, dp[4] = 4</code>，也就是当拆分数字4时，最大乘积为4</li>\n<li><code>i = 5</code>： $$ <span class=\"math display\">\\[\\begin{align*}\n&amp;j=1\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=1\\times (5-1) = 4\\\\\\\\\nj\\times dp[i-j]=1\\times dp[5-1]=1\\times 4 = 4\n\\end{cases}\\\\\\\\\n\n&amp;j=2\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=2\\times (5-2) = 6\\\\\\\\\nj\\times dp[i-j]=2\\times dp[5-2]=2\\times 2 = 4\n\\end{cases}\\\\\\\\\n\n&amp;j=3\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=3\\times (5-3) = 6\\\\\\\\\nj\\times dp[i-j]=3\\times dp[5-3]=3\\times 1 = 3\n\\end{cases}\\\\\\\\\n\n&amp;j=4\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=4\\times (5-4) = 4\\\\\\\\\nj\\times dp[i-j]=4\\times dp[5-4]=4\\times 0 = 0\n\\end{cases}\\\\\\\\\n\\end{align*}\\]</span> $$\n综上，<code>curMax = 6, dp[5] = 6</code>，也就是当拆分数字5时，最大乘积为6</li>\n<li><code>i = 6</code>： $$ <span class=\"math display\">\\[\\begin{align*}\n&amp;j=1\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=1\\times (6-1) = 5\\\\\\\\\nj\\times dp[i-j]=1\\times dp[6-1]=1\\times 6 = 6\n\\end{cases}\\\\\\\\\n\n&amp;j=2\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=2\\times (6-2) = 8\\\\\\\\\nj\\times dp[i-j]=2\\times dp[6-2]=2\\times 4 = 8\n\\end{cases}\\\\\\\\\n\n&amp;j=3\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=3\\times (6-3) = 9\\\\\\\\\nj\\times dp[i-j]=3\\times dp[6-3]=3\\times 2 = 6\n\\end{cases}\\\\\\\\\n\n&amp;j=4\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=4\\times (6-4) = 8\\\\\\\\\nj\\times dp[i-j]=4\\times dp[6-4]=4\\times 1 = 4\n\\end{cases}\\\\\\\\\n\n&amp;j=5\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=5\\times (6-5) = 5\\\\\\\\\nj\\times dp[i-j]=5\\times dp[6-5]=5\\times 1 = 5\n\\end{cases}\\\\\\\\\n\\end{align*}\\]</span> $$\n综上，<code>curMax = 9, dp[6] = 9</code>，也就是当拆分数字6时，最大乘积为9</li>\n</ul>\n<p>返回<code>dp[n]</code></p>\n</blockquote>\n<h5 id=\"dp数组初始化\">3. dp数组初始化</h5>\n<p>不需要额外的初始化操作</p>\n<h5 id=\"确定遍历顺序\">4. 确定遍历顺序</h5>\n<p>顺序遍历</p>\n<h5 id=\"打印dp数组debug\">5. 打印dp数组（Debug）</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// leetcode官解</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">integerBreak</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> &#123;<br>    <span class=\"hljs-type\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= n; i++) &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">curMax</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; i; j++) &#123;<br>            curMax = Math.max(curMax, Math.max(j * (i - j), j * dp[i - j]));<br>        &#125;<br>        dp[i] = curMax;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"不同的二叉搜索树\">96. 不同的二叉搜索树</h2>\n<blockquote>\n<p>题目链接：https://leetcode.cn/problems/unique-binary-search-trees/description/</p>\n</blockquote>\n<p>自己画了几个树，还是没什么思路，看了题解。</p>\n<h3 id=\"动态规划\">动态规划</h3>\n<h4 id=\"确定dp数组-1\">1. 确定dp数组</h4>\n<p><code>dp[i]</code>代表：<code>i</code>个节点的二叉搜索树有<code>dp[i]</code>种</p>\n<h4 id=\"递推公式-1\">2. 递推公式</h4>\n<p>假设有3个节点的情况，需要分别考虑1、2、3分别为根节点时，左右子树的情况。</p>\n<ul>\n<li><p>当1为根节点时，记做<code>F[1]</code></p>\n<p>左子树为空树，右子树有两个节点，一共<code>dp[0] * dp[2]</code>种情况，使用乘法的原因是排列组合</p></li>\n<li><p>当2为根节点时，记做<code>F[2]</code></p>\n<p>左子树有一个节点，右子树有一个节点，一共<code>dp[1] * dp[1]</code>种情况</p></li>\n<li><p>当3为根节点时，记做<code>F[3]</code></p>\n<p>左子树有两个节点，右子树为空树，一共<code>dp[2]*dp[0]</code>种情况</p></li>\n</ul>\n<p>所以<code>dp[3] = F[1] + F[2] + F[3]</code></p>\n<p>推广开来： <span class=\"math display\">\\[\n\\begin{align*}\n&amp;dp[i] = \\sum\\limits_{i=1}^nF[n]\\\\\\\\\n&amp;F[n]=\\prod\\limits_{i=0}^{n-1}dp[i]\\times dp[n-1-i]\n\\end{align*}\n\\]</span></p>\n<h4 id=\"初始化\">3. 初始化</h4>\n<p><code>dp[0] = 1</code>，空树也算一种情况</p>\n<p><code>dp[1] = 1</code>，只有一个节点的情况</p>\n<h4 id=\"遍历\">4. 遍历</h4>\n<p>顺序遍历</p>\n<h4 id=\"打印dp数组debug-1\">5. 打印dp数组(debug)</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numTrees</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> &#123;<br>    <span class=\"hljs-type\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>    dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= n; i++) &#123;<br>        dp[i] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; i; j++) &#123;<br>            dp[i] += dp[j] * dp[i - <span class=\"hljs-number\">1</span> - j];<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1\nid=\"leetcode09动态规划part03-343.-整数拆分96.-不同的二叉搜索树\">【LeetCode】09动态规划Part03\n343. 整数拆分、96. 不同的二叉搜索树</h1>\n<h2 id=\"整数拆分\">343. 整数拆分</h2>\n<blockquote>\n<p>题目链接：https://leetcode.cn/problems/integer-break/description/</p>\n</blockquote>\n<h3 id=\"思路\">思路</h3>\n<h4 id=\"思路一贪心算法\">思路一：贪心算法</h4>\n<p>根据自己的不断地测试发现，如果一个数n(n&gt;3)，不断地拆出来3，拆到最后会出现3种情况：</p>\n<ol type=\"1\">\n<li><code>n % 3 == 0</code>：最大的乘积数为<code>pow(3, n / 3)</code></li>\n<li><code>n % 3 == 2</code>：意味着拆到最后一个数为2，那么最大的乘积数是<code>pow(3, n / 3) * 2</code></li>\n<li><code>n % 3 == 1</code>：意味着拆到最后一个数为1，那么少拆一个3，使其最后乘以4，最大乘积数为<code>pow(3, n / 3 - 1) * 4</code></li>\n</ol>\n<p>确实也AC了这道题目，核心思想就是贪更多的3。至于为什么并不是很理解，也没有证明</p>\n<p>但是也尝试过很多策略</p>\n<ul>\n<li>不断地拆出来2，如果是奇数最后一个3则不拆，这样会获得最大的幂指数。但是得不到最大的乘积</li>\n<li>不断地拆出来<code>a = (int)sqrt(n)</code>，最后一次不足a则加在上一次拆分的结果。同样得不到最大的值</li>\n</ul>\n<h4 id=\"思路二动态规划\">思路二：动态规划</h4>\n<h5 id=\"确定dp数组\">1. 确定dp数组</h5>\n<p>正整数<code>i</code>拆分后得到的最大乘积<code>dp[i]</code>。可能是两个数乘积，也可能是多个数的乘积。</p>\n<h5 id=\"递推公式\">2. 递推公式</h5>\n<ul>\n<li>将<code>i</code>拆分成<code>j</code>和<code>i - j</code>，且<code>i - j</code>不能继续拆分，此时乘积为<code>j x (i - j)</code></li>\n<li>将<code>i</code>拆分成<code>j</code>和<code>i - j</code>，且<code>i - j</code>可以继续拆分，此时乘积为<code>j x dp[i - j]</code></li>\n</ul>\n<p><span class=\"math display\">\\[\ndp[i] = \\max\\limits_{1\\le j &lt; i}\\{\\max(j\\times (i - j), j \\times dp[i\n- j])\\}\n\\]</span></p>\n<blockquote>\n<p>以n = 6为例</p>\n<ul>\n<li><code>i = 1</code>，此时<code>i</code>并不能拆分出两个正整数，<code>dp[1] = 0</code></li>\n<li><code>i = 2</code>，此时<code>i</code>仅能拆分出<span\nclass=\"math inline\">\\(2 = 1 + 1 \\Rightarrow 1\\times\n1=1\\)</span>，<code>dp[2] = 1</code></li>\n<li><code>i = 3</code>，令<code>curMax = 0</code>代表当前拆分出的<span\nclass=\"math inline\">\\(\\max(j\\times (i - j), j \\times dp[i -\nj])\\)</span>， $$ <span class=\"math display\">\\[\\begin{align*}\n&amp;j=1\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=1\\times (3-1) = 2\\\\\\\\\nj\\times dp[i-j]=1\\times dp[3-1]=1\\times 1 = 1\n\\end{cases}\\\\\\\\\n\n&amp;j=2\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=2\\times (3-2) = 2\\\\\\\\\nj\\times dp[i-j]=2\\times dp[3-2]=2\\times 0 = 0\n\\end{cases}\n\\end{align*}\\]</span> $$\n综上，<code>curMax = 2, dp[3] = 2</code>，也就是当拆分数字3时，最大乘积为2</li>\n<li><code>i = 4</code>： $$ <span class=\"math display\">\\[\\begin{align*}\n&amp;j=1\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=1\\times (4-1) = 3\\\\\\\\\nj\\times dp[i-j]=1\\times dp[4-1]=1\\times 2 = 2\n\\end{cases}\\\\\\\\\n\n&amp;j=2\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=2\\times (4-2) = 4\\\\\\\\\nj\\times dp[i-j]=2\\times dp[4-2]=2\\times 1 = 2\n\\end{cases}\\\\\\\\\n\n&amp;j=3\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=3\\times (4-3) = 3\\\\\\\\\nj\\times dp[i-j]=3\\times dp[4-3]=3\\times 0 = 0\n\\end{cases}\n\\end{align*}\\]</span> $$\n综上，<code>curMax = 4, dp[4] = 4</code>，也就是当拆分数字4时，最大乘积为4</li>\n<li><code>i = 5</code>： $$ <span class=\"math display\">\\[\\begin{align*}\n&amp;j=1\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=1\\times (5-1) = 4\\\\\\\\\nj\\times dp[i-j]=1\\times dp[5-1]=1\\times 4 = 4\n\\end{cases}\\\\\\\\\n\n&amp;j=2\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=2\\times (5-2) = 6\\\\\\\\\nj\\times dp[i-j]=2\\times dp[5-2]=2\\times 2 = 4\n\\end{cases}\\\\\\\\\n\n&amp;j=3\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=3\\times (5-3) = 6\\\\\\\\\nj\\times dp[i-j]=3\\times dp[5-3]=3\\times 1 = 3\n\\end{cases}\\\\\\\\\n\n&amp;j=4\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=4\\times (5-4) = 4\\\\\\\\\nj\\times dp[i-j]=4\\times dp[5-4]=4\\times 0 = 0\n\\end{cases}\\\\\\\\\n\\end{align*}\\]</span> $$\n综上，<code>curMax = 6, dp[5] = 6</code>，也就是当拆分数字5时，最大乘积为6</li>\n<li><code>i = 6</code>： $$ <span class=\"math display\">\\[\\begin{align*}\n&amp;j=1\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=1\\times (6-1) = 5\\\\\\\\\nj\\times dp[i-j]=1\\times dp[6-1]=1\\times 6 = 6\n\\end{cases}\\\\\\\\\n\n&amp;j=2\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=2\\times (6-2) = 8\\\\\\\\\nj\\times dp[i-j]=2\\times dp[6-2]=2\\times 4 = 8\n\\end{cases}\\\\\\\\\n\n&amp;j=3\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=3\\times (6-3) = 9\\\\\\\\\nj\\times dp[i-j]=3\\times dp[6-3]=3\\times 2 = 6\n\\end{cases}\\\\\\\\\n\n&amp;j=4\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=4\\times (6-4) = 8\\\\\\\\\nj\\times dp[i-j]=4\\times dp[6-4]=4\\times 1 = 4\n\\end{cases}\\\\\\\\\n\n&amp;j=5\\Rightarrow\n\\begin{cases}\nj\\times (i-j)=5\\times (6-5) = 5\\\\\\\\\nj\\times dp[i-j]=5\\times dp[6-5]=5\\times 1 = 5\n\\end{cases}\\\\\\\\\n\\end{align*}\\]</span> $$\n综上，<code>curMax = 9, dp[6] = 9</code>，也就是当拆分数字6时，最大乘积为9</li>\n</ul>\n<p>返回<code>dp[n]</code></p>\n</blockquote>\n<h5 id=\"dp数组初始化\">3. dp数组初始化</h5>\n<p>不需要额外的初始化操作</p>\n<h5 id=\"确定遍历顺序\">4. 确定遍历顺序</h5>\n<p>顺序遍历</p>\n<h5 id=\"打印dp数组debug\">5. 打印dp数组（Debug）</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// leetcode官解</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">integerBreak</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> &#123;<br>    <span class=\"hljs-type\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= n; i++) &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">curMax</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; i; j++) &#123;<br>            curMax = Math.max(curMax, Math.max(j * (i - j), j * dp[i - j]));<br>        &#125;<br>        dp[i] = curMax;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"不同的二叉搜索树\">96. 不同的二叉搜索树</h2>\n<blockquote>\n<p>题目链接：https://leetcode.cn/problems/unique-binary-search-trees/description/</p>\n</blockquote>\n<p>自己画了几个树，还是没什么思路，看了题解。</p>\n<h3 id=\"动态规划\">动态规划</h3>\n<h4 id=\"确定dp数组-1\">1. 确定dp数组</h4>\n<p><code>dp[i]</code>代表：<code>i</code>个节点的二叉搜索树有<code>dp[i]</code>种</p>\n<h4 id=\"递推公式-1\">2. 递推公式</h4>\n<p>假设有3个节点的情况，需要分别考虑1、2、3分别为根节点时，左右子树的情况。</p>\n<ul>\n<li><p>当1为根节点时，记做<code>F[1]</code></p>\n<p>左子树为空树，右子树有两个节点，一共<code>dp[0] * dp[2]</code>种情况，使用乘法的原因是排列组合</p></li>\n<li><p>当2为根节点时，记做<code>F[2]</code></p>\n<p>左子树有一个节点，右子树有一个节点，一共<code>dp[1] * dp[1]</code>种情况</p></li>\n<li><p>当3为根节点时，记做<code>F[3]</code></p>\n<p>左子树有两个节点，右子树为空树，一共<code>dp[2]*dp[0]</code>种情况</p></li>\n</ul>\n<p>所以<code>dp[3] = F[1] + F[2] + F[3]</code></p>\n<p>推广开来： <span class=\"math display\">\\[\n\\begin{align*}\n&amp;dp[i] = \\sum\\limits_{i=1}^nF[n]\\\\\\\\\n&amp;F[n]=\\prod\\limits_{i=0}^{n-1}dp[i]\\times dp[n-1-i]\n\\end{align*}\n\\]</span></p>\n<h4 id=\"初始化\">3. 初始化</h4>\n<p><code>dp[0] = 1</code>，空树也算一种情况</p>\n<p><code>dp[1] = 1</code>，只有一个节点的情况</p>\n<h4 id=\"遍历\">4. 遍历</h4>\n<p>顺序遍历</p>\n<h4 id=\"打印dp数组debug-1\">5. 打印dp数组(debug)</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numTrees</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> &#123;<br>    <span class=\"hljs-type\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>    dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= n; i++) &#123;<br>        dp[i] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; i; j++) &#123;<br>            dp[i] += dp[j] * dp[i - <span class=\"hljs-number\">1</span> - j];<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cln60vijt0000wvz8e7d7cupe","category_id":"cln60vijy0002wvz81lsohve1","_id":"cln60vik2000bwvz8abvrgx9z"},{"post_id":"cln60vik4000fwvz84nke6dw8","category_id":"cln60vik5000swvz8flt6ccdq","_id":"cln60vik6000ywvz8hggahjpm"},{"post_id":"cln7q7aln0000vswhdo94d4i6","category_id":"cln60vik10007wvz86q5h7fvk","_id":"cln7q7alu0006vswh2mlja9de"},{"post_id":"cln7q7als0001vswhejetbqe1","category_id":"cln60vik10007wvz86q5h7fvk","_id":"cln7q7alv0009vswhhr1rbj9n"},{"post_id":"cln7q7alt0003vswh2kd6gmmb","category_id":"cln60vik10007wvz86q5h7fvk","_id":"cln7q7alw000cvswh4lye72cz"},{"post_id":"cln7q7alu0005vswhctx76rch","category_id":"cln60vik10007wvz86q5h7fvk","_id":"cln7q7alw000fvswheot34zw2"},{"post_id":"cln7q7alv0008vswh1zq3fitx","category_id":"cln60vik10007wvz86q5h7fvk","_id":"cln7q7alx000ivswh7ab9dk93"},{"post_id":"cln7q7alv000bvswh5akb3kmg","category_id":"cln60vik10007wvz86q5h7fvk","_id":"cln7q7aly000lvswh9juoabj1"},{"post_id":"cln7q7alw000evswh5pqt7yew","category_id":"cln60vik10007wvz86q5h7fvk","_id":"cln7q7aly000nvswh0ut27eyl"},{"post_id":"cln7q7alw000hvswha1iihvvl","category_id":"cln60vik10007wvz86q5h7fvk","_id":"cln7q7aly000pvswhfl7bavdw"},{"post_id":"cln7q7alx000kvswh2zt2gd2z","category_id":"cln60vik10007wvz86q5h7fvk","_id":"cln7q7aly000rvswhf1pl7iqb"},{"post_id":"clnaa9ei20000fowh95tf648u","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnaa9ei80003fowh9sfo0xwj"},{"post_id":"clnaazf5b0000r4whg2w0by34","category_id":"clnaazf5i0001r4whe4qy94nz","_id":"clnaazf5l0004r4wh7ta930ev"},{"post_id":"clnbysihy0000zez810crdqln","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnbysihz0003zez84n9vfjnc"},{"post_id":"clneippor0000vez88eiyex1t","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clneippot0003vez87yrw6cie"},{"post_id":"clng3wbhs0000t4whcaffbolr","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clng3wbhx0004t4whdcek4dzq"},{"post_id":"clng3wbhv0001t4wh0pjq02ff","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clng6duwk00021kwhfyo3bnh7"},{"post_id":"clnj3c70v0000puz86u7wb17m","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnj3c70w0003puz8a7rn3ggr"},{"post_id":"clnlur4z20000n4z8e7m66upr","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnlur4z50003n4z83sw92iek"},{"post_id":"clnnb2tpy0000soz8djs5abxe","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnnb2tpz0003soz84djrcww8"},{"post_id":"clnq2vqiy00000zz8hy1x816j","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnq2vqiz00030zz817x94axo"},{"post_id":"clnq6ni1u0000nyz8f4xpd4cu","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnq6ni1w0003nyz8gxnp9paq"},{"post_id":"clnrhjw4f0000lvz81rfb1wjl","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnrhjw4g0003lvz8bu376d32"},{"post_id":"clnscnbxg0000ksz81rnjc7d2","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnscnbxi0003ksz809oddqka"},{"post_id":"clntw9j8r0000t7z8dehhd0d0","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clntw9j8t0003t7z87xm79d6u"},{"post_id":"clnxfhpy00000hxz81t4mc9iy","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnxfhpy20003hxz8g6qy8x9e"},{"post_id":"clnxk984d0000v4z86fi4cgu5","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnxk984g0003v4z83p35a4s0"},{"post_id":"clnyuudme00008wwhhoi0a742","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clnyuudmh00038wwhedujdxp6"},{"post_id":"clo4m6k3d0001swz8ah7gcw60","category_id":"cln60vijy0002wvz81lsohve1","_id":"clo4m6k3f0003swz8b4ou2vfp"},{"post_id":"clo4qi78k000l1cz8awixge04","category_id":"cln60vik10007wvz86q5h7fvk","_id":"clo4qi78m000p1cz88ya28lf7"}],"PostTag":[{"post_id":"cln60vijt0000wvz8e7d7cupe","tag_id":"cln60vijz0003wvz83hs010u0","_id":"cln60vik5000kwvz84od00srs"},{"post_id":"cln60vijt0000wvz8e7d7cupe","tag_id":"cln60vik10008wvz89egq1d4m","_id":"cln60vik5000nwvz89g6e3uma"},{"post_id":"cln60vijt0000wvz8e7d7cupe","tag_id":"cln60vik2000dwvz86kondzp1","_id":"cln60vik5000qwvz83u6ycvof"},{"post_id":"cln60vik4000fwvz84nke6dw8","tag_id":"cln60vik8001uwvz82jld6gtq","_id":"cln60vik8001ywvz85c1ecnwv"},{"post_id":"cln7q7aln0000vswhdo94d4i6","tag_id":"cln60vik4000iwvz85am5d09t","_id":"cln7q7alt0002vswh5eodebzf"},{"post_id":"cln7q7aln0000vswhdo94d4i6","tag_id":"cln60vik5000owvz820bd6i7h","_id":"cln7q7alu0004vswh9czy35ce"},{"post_id":"cln7q7aln0000vswhdo94d4i6","tag_id":"cln60vik10008wvz89egq1d4m","_id":"cln7q7alv0007vswhd0qj4qnv"},{"post_id":"cln7q7als0001vswhejetbqe1","tag_id":"cln60vik4000iwvz85am5d09t","_id":"cln7q7alv000avswh46gmbkig"},{"post_id":"cln7q7als0001vswhejetbqe1","tag_id":"cln60vik5000owvz820bd6i7h","_id":"cln7q7alw000dvswhdlxa1pal"},{"post_id":"cln7q7als0001vswhejetbqe1","tag_id":"cln60vik10008wvz89egq1d4m","_id":"cln7q7alw000gvswh1bfydqgz"},{"post_id":"cln7q7alt0003vswh2kd6gmmb","tag_id":"cln60vik4000iwvz85am5d09t","_id":"cln7q7alx000jvswhbrhf8owb"},{"post_id":"cln7q7alt0003vswh2kd6gmmb","tag_id":"cln60vik5000owvz820bd6i7h","_id":"cln7q7aly000mvswh1znm56ts"},{"post_id":"cln7q7alt0003vswh2kd6gmmb","tag_id":"cln60vik10008wvz89egq1d4m","_id":"cln7q7aly000ovswhh44f9aow"},{"post_id":"cln7q7alu0005vswhctx76rch","tag_id":"cln60vik4000iwvz85am5d09t","_id":"cln7q7aly000qvswh6izfdv4v"},{"post_id":"cln7q7alu0005vswhctx76rch","tag_id":"cln60vik5000owvz820bd6i7h","_id":"cln7q7aly000svswheaxpadwx"},{"post_id":"cln7q7alu0005vswhctx76rch","tag_id":"cln60vik10008wvz89egq1d4m","_id":"cln7q7aly000tvswhcxze0emp"},{"post_id":"cln7q7alv0008vswh1zq3fitx","tag_id":"cln60vik4000iwvz85am5d09t","_id":"cln7q7aly000uvswh3cqihno5"},{"post_id":"cln7q7alv0008vswh1zq3fitx","tag_id":"cln60vik5000owvz820bd6i7h","_id":"cln7q7aly000vvswha0tz7638"},{"post_id":"cln7q7alv0008vswh1zq3fitx","tag_id":"cln60vik10008wvz89egq1d4m","_id":"cln7q7aly000wvswhdcekgws7"},{"post_id":"cln7q7alv000bvswh5akb3kmg","tag_id":"cln60vik4000iwvz85am5d09t","_id":"cln7q7aly000xvswh4w1ub4qn"},{"post_id":"cln7q7alv000bvswh5akb3kmg","tag_id":"cln60vik5000owvz820bd6i7h","_id":"cln7q7aly000yvswhf45xd8m4"},{"post_id":"cln7q7alv000bvswh5akb3kmg","tag_id":"cln60vik10008wvz89egq1d4m","_id":"cln7q7aly000zvswh50gxbcad"},{"post_id":"cln7q7alw000evswh5pqt7yew","tag_id":"cln60vik4000iwvz85am5d09t","_id":"cln7q7aly0010vswh6zwrgotd"},{"post_id":"cln7q7alw000evswh5pqt7yew","tag_id":"cln60vik5000owvz820bd6i7h","_id":"cln7q7aly0011vswh5pqw1hut"},{"post_id":"cln7q7alw000evswh5pqt7yew","tag_id":"cln60vik10008wvz89egq1d4m","_id":"cln7q7aly0012vswhhmwth4uq"},{"post_id":"cln7q7alw000hvswha1iihvvl","tag_id":"cln60vik4000iwvz85am5d09t","_id":"cln7q7aly0013vswh1zmbemn7"},{"post_id":"cln7q7alw000hvswha1iihvvl","tag_id":"cln60vik5000owvz820bd6i7h","_id":"cln7q7aly0014vswh5lxba3fi"},{"post_id":"cln7q7alw000hvswha1iihvvl","tag_id":"cln60vik10008wvz89egq1d4m","_id":"cln7q7aly0015vswhabxbhq86"},{"post_id":"cln7q7alx000kvswh2zt2gd2z","tag_id":"cln60vik4000iwvz85am5d09t","_id":"cln7q7aly0016vswh921fbhce"},{"post_id":"cln7q7alx000kvswh2zt2gd2z","tag_id":"cln60vik5000owvz820bd6i7h","_id":"cln7q7aly0017vswhbqrle1ba"},{"post_id":"cln7q7alx000kvswh2zt2gd2z","tag_id":"cln60vik10008wvz89egq1d4m","_id":"cln7q7aly0018vswhdg195bnw"},{"post_id":"clnaa9ei20000fowh95tf648u","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnaa9ei70001fowh6hlddr8c"},{"post_id":"clnaa9ei20000fowh95tf648u","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnaa9ei80002fowh6it3ds7k"},{"post_id":"clnaa9ei20000fowh95tf648u","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnaa9ei80004fowh2bcwdh4p"},{"post_id":"clnaazf5b0000r4whg2w0by34","tag_id":"clnaazf5k0002r4wh3xm8393l","_id":"clnaazf5l0005r4wh7jchceb7"},{"post_id":"clnaazf5b0000r4whg2w0by34","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnaazf5l0006r4whgc5wgkm2"},{"post_id":"clnaazf5b0000r4whg2w0by34","tag_id":"clnaazf5k0003r4wh62knftzl","_id":"clnaazf5m0007r4wh8k015ep3"},{"post_id":"clnbysihy0000zez810crdqln","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnbysihy0001zez8at3mahdm"},{"post_id":"clnbysihy0000zez810crdqln","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnbysihz0002zez88t8g3s5u"},{"post_id":"clnbysihy0000zez810crdqln","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnbysihz0004zez803sw1xqx"},{"post_id":"clneippor0000vez88eiyex1t","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clneippot0001vez8fnum3tb9"},{"post_id":"clneippor0000vez88eiyex1t","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clneippot0002vez8dgmq1psj"},{"post_id":"clneippor0000vez88eiyex1t","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clneippot0004vez8e9oi1323"},{"post_id":"clng3wbhs0000t4whcaffbolr","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clng3wbhw0002t4wh433cbf01"},{"post_id":"clng3wbhs0000t4whcaffbolr","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clng3wbhw0003t4wh22296nsl"},{"post_id":"clng3wbhs0000t4whcaffbolr","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clng3wbhx0005t4wh8zkxby60"},{"post_id":"clng3wbhv0001t4wh0pjq02ff","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clng6duwj00001kwh2c977abf"},{"post_id":"clng3wbhv0001t4wh0pjq02ff","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clng6duwk00011kwh7i6yc2aj"},{"post_id":"clng3wbhv0001t4wh0pjq02ff","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clng6duwk00031kwh8a1v90ir"},{"post_id":"clnj3c70v0000puz86u7wb17m","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnj3c70w0001puz813hubt62"},{"post_id":"clnj3c70v0000puz86u7wb17m","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnj3c70w0002puz8fut16m5k"},{"post_id":"clnj3c70v0000puz86u7wb17m","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnj3c70w0004puz8h4afg6g8"},{"post_id":"clnlur4z20000n4z8e7m66upr","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnlur4z50001n4z82eigh35a"},{"post_id":"clnlur4z20000n4z8e7m66upr","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnlur4z50002n4z8b9z09h0v"},{"post_id":"clnlur4z20000n4z8e7m66upr","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnlur4z50004n4z89s17f0my"},{"post_id":"clnnb2tpy0000soz8djs5abxe","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnnb2tpz0001soz81dhk53pl"},{"post_id":"clnnb2tpy0000soz8djs5abxe","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnnb2tpz0002soz80o1z2tym"},{"post_id":"clnnb2tpy0000soz8djs5abxe","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnnb2tpz0004soz8039hbk69"},{"post_id":"clnq2vqiy00000zz8hy1x816j","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnq2vqiz00010zz8bs24gxac"},{"post_id":"clnq2vqiy00000zz8hy1x816j","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnq2vqiz00020zz8c1987i3o"},{"post_id":"clnq2vqiy00000zz8hy1x816j","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnq2vqiz00040zz85sgf17p9"},{"post_id":"clnq6ni1u0000nyz8f4xpd4cu","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnq6ni1w0001nyz8469x1ft4"},{"post_id":"clnq6ni1u0000nyz8f4xpd4cu","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnq6ni1w0002nyz86suj3try"},{"post_id":"clnq6ni1u0000nyz8f4xpd4cu","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnq6ni1w0004nyz8809p40io"},{"post_id":"clnrhjw4f0000lvz81rfb1wjl","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnrhjw4g0001lvz8181berx5"},{"post_id":"clnrhjw4f0000lvz81rfb1wjl","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnrhjw4g0002lvz8ahms4tvw"},{"post_id":"clnrhjw4f0000lvz81rfb1wjl","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnrhjw4g0004lvz8165rhyml"},{"post_id":"clnscnbxg0000ksz81rnjc7d2","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnscnbxi0001ksz88qwa9rqb"},{"post_id":"clnscnbxg0000ksz81rnjc7d2","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnscnbxi0002ksz8924y0hbt"},{"post_id":"clnscnbxg0000ksz81rnjc7d2","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnscnbxi0004ksz8ezi1gprh"},{"post_id":"clntw9j8r0000t7z8dehhd0d0","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clntw9j8t0001t7z87basbf0s"},{"post_id":"clntw9j8r0000t7z8dehhd0d0","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clntw9j8t0002t7z867m5afe5"},{"post_id":"clntw9j8r0000t7z8dehhd0d0","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clntw9j8t0004t7z83wu7d5kn"},{"post_id":"clnxfhpy00000hxz81t4mc9iy","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnxfhpy20001hxz8b0b1hzau"},{"post_id":"clnxfhpy00000hxz81t4mc9iy","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnxfhpy20002hxz8b4xi9bkq"},{"post_id":"clnxfhpy00000hxz81t4mc9iy","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnxfhpy20004hxz8beiwefoc"},{"post_id":"clnxk984d0000v4z86fi4cgu5","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnxk984g0001v4z8gul27iqg"},{"post_id":"clnxk984d0000v4z86fi4cgu5","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnxk984g0002v4z892m272vo"},{"post_id":"clnxk984d0000v4z86fi4cgu5","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnxk984g0004v4z881bk7ltl"},{"post_id":"clnyuudme00008wwhhoi0a742","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clnyuudmg00018wwh3gsmc221"},{"post_id":"clnyuudme00008wwhhoi0a742","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clnyuudmg00028wwh4t871qgc"},{"post_id":"clnyuudme00008wwhhoi0a742","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clnyuudmh00048wwh6ker0tm4"},{"post_id":"cln7q7aln0000vswhdo94d4i6","tag_id":"clo4qi77y00001cz85zq34i99","_id":"clo4qi78700021cz82lsfhsxb"},{"post_id":"cln7q7als0001vswhejetbqe1","tag_id":"clo4qi77y00001cz85zq34i99","_id":"clo4qi78900041cz8hgcyefa9"},{"post_id":"cln7q7alu0005vswhctx76rch","tag_id":"clo4qi78800031cz837rw9ewp","_id":"clo4qi78b00061cz8bcxjg6yc"},{"post_id":"cln7q7alt0003vswh2kd6gmmb","tag_id":"clo4qi78800031cz837rw9ewp","_id":"clo4qi78d00081cz89ba9hxsz"},{"post_id":"cln7q7alv0008vswh1zq3fitx","tag_id":"clo4qi78c00071cz8g391cwk1","_id":"clo4qi78e000a1cz81xfegz7c"},{"post_id":"cln7q7alw000hvswha1iihvvl","tag_id":"clo4qi78c00071cz8g391cwk1","_id":"clo4qi78f000c1cz84l3pfehr"},{"post_id":"cln7q7alv000bvswh5akb3kmg","tag_id":"clo4qi78f000b1cz8gbzlhxwy","_id":"clo4qi78h000e1cz8hdq640ux"},{"post_id":"cln7q7alx000kvswh2zt2gd2z","tag_id":"clo4qi78g000d1cz88cqkagzm","_id":"clo4qi78i000g1cz86tvvgqg4"},{"post_id":"clnaa9ei20000fowh95tf648u","tag_id":"clo4qi78g000d1cz88cqkagzm","_id":"clo4qi78j000i1cz8d3n1fdg9"},{"post_id":"cln7q7alw000evswh5pqt7yew","tag_id":"clo4qi78f000b1cz8gbzlhxwy","_id":"clo4qi78k000k1cz808wc7ztj"},{"post_id":"clnbysihy0000zez810crdqln","tag_id":"clo4qi78g000d1cz88cqkagzm","_id":"clo4qi78l000n1cz80jguh8qv"},{"post_id":"clng3wbhs0000t4whcaffbolr","tag_id":"clo4qi78l000m1cz85cvc8dv7","_id":"clo4qi78m000q1cz89ggx76ja"},{"post_id":"clneippor0000vez88eiyex1t","tag_id":"clo4qi78l000m1cz85cvc8dv7","_id":"clo4qi78m000s1cz8fa1t4h6d"},{"post_id":"clng3wbhv0001t4wh0pjq02ff","tag_id":"clo4qi78l000m1cz85cvc8dv7","_id":"clo4qi78n000u1cz85gwsg4sb"},{"post_id":"clnj3c70v0000puz86u7wb17m","tag_id":"clo4qi78l000m1cz85cvc8dv7","_id":"clo4qi78n000w1cz874zt7u3w"},{"post_id":"clnlur4z20000n4z8e7m66upr","tag_id":"clo4qi78l000m1cz85cvc8dv7","_id":"clo4qi78n000y1cz8gzut6kug"},{"post_id":"clnq2vqiy00000zz8hy1x816j","tag_id":"clo4qi78l000m1cz85cvc8dv7","_id":"clo4qi78n00101cz89z2qda4k"},{"post_id":"clnnb2tpy0000soz8djs5abxe","tag_id":"clo4qi78l000m1cz85cvc8dv7","_id":"clo4qi78o00121cz85mvnenq3"},{"post_id":"clnrhjw4f0000lvz81rfb1wjl","tag_id":"clo4qi78l000m1cz85cvc8dv7","_id":"clo4qi78o00141cz87ojqei5r"},{"post_id":"clnscnbxg0000ksz81rnjc7d2","tag_id":"clo4qi78o00131cz8htn8hlie","_id":"clo4qi78o00161cz8e9jpe6db"},{"post_id":"clnq6ni1u0000nyz8f4xpd4cu","tag_id":"clo4qi78l000m1cz85cvc8dv7","_id":"clo4qi78o00181cz831fn7xjk"},{"post_id":"clntw9j8r0000t7z8dehhd0d0","tag_id":"clo4qi78o00131cz8htn8hlie","_id":"clo4qi78p001a1cz8156n92f0"},{"post_id":"clnxfhpy00000hxz81t4mc9iy","tag_id":"clo4qi78o00131cz8htn8hlie","_id":"clo4qi78p001c1cz839j51ipn"},{"post_id":"clnxk984d0000v4z86fi4cgu5","tag_id":"clo4qi78o00131cz8htn8hlie","_id":"clo4qi78p001e1cz8f1li9fmc"},{"post_id":"clnyuudme00008wwhhoi0a742","tag_id":"clo4qi78o00131cz8htn8hlie","_id":"clo4qi78p001g1cz86bxafy06"},{"post_id":"clo4qi78k000l1cz8awixge04","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clo4qi78q001h1cz8bhaegack"},{"post_id":"clo4qi78k000l1cz8awixge04","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clo4qi78q001i1cz8gi5j6mm9"},{"post_id":"clo4qi78k000l1cz8awixge04","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clo4qi78q001j1cz894bs9whu"},{"post_id":"clo4qi78k000l1cz8awixge04","tag_id":"clo4qi78p001f1cz85za1gi4m","_id":"clo4qi78q001k1cz8hya83c58"},{"post_id":"clo4t8jjw000189z8a0pv23hy","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clo4t8jjx000289z8e1oihqoh"},{"post_id":"clo4t8jjw000189z8a0pv23hy","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clo4t8jjx000389z8a726f9vc"},{"post_id":"clo4t8jjw000189z8a0pv23hy","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clo4t8jjx000489z86p7z5333"},{"post_id":"clo4t8jjw000189z8a0pv23hy","tag_id":"clo4qi78p001f1cz85za1gi4m","_id":"clo4t8jjx000589z86o4f87qx"},{"post_id":"clo5kbw9o000044z8en9fc3to","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clo5kbw9r000144z86jda9d79"},{"post_id":"clo5kbw9o000044z8en9fc3to","tag_id":"cln60vik5000owvz820bd6i7h","_id":"clo5kbw9r000244z83zuc193q"},{"post_id":"clo5kbw9o000044z8en9fc3to","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clo5kbw9r000344z8bhpy41p5"},{"post_id":"clo5kbw9o000044z8en9fc3to","tag_id":"clo4qi78p001f1cz85za1gi4m","_id":"clo5kbw9r000444z8drz0cil3"},{"post_id":"clrdpfmta00002gwhbm6l3wwz","tag_id":"clnaazf5k0002r4wh3xm8393l","_id":"clrdpfmtb00012gwh8r858e56"},{"post_id":"clrdpfmta00002gwhbm6l3wwz","tag_id":"clnaazf5k0003r4wh62knftzl","_id":"clrdpfmtb00022gwh3uldaf0g"},{"post_id":"clsbyyuh60001qbgtar2pfx67","tag_id":"clnaazf5k0002r4wh3xm8393l","_id":"clsbyyuh70005qbgt8vw64593"},{"post_id":"clsbyyuh60001qbgtar2pfx67","tag_id":"cln60vik2000dwvz86kondzp1","_id":"clsbyyuh70006qbgt00yx5hgm"},{"post_id":"clsbyyuh60001qbgtar2pfx67","tag_id":"cls4qkb4o0001ahgw7oc75wrv","_id":"clsbyyuh70007qbgt5eddfrgi"},{"post_id":"clsbyyuh70008qbgt6sksamtl","tag_id":"clnaazf5k0002r4wh3xm8393l","_id":"clsbyyuh80009qbgtgb3a55f1"},{"post_id":"clsbyyuh70008qbgt6sksamtl","tag_id":"cln60vik2000dwvz86kondzp1","_id":"clsbyyuh8000aqbgt0d4ybueb"},{"post_id":"clsbyyuh70008qbgt6sksamtl","tag_id":"cls4qkb4o0001ahgw7oc75wrv","_id":"clsbyyuh8000bqbgtfvjtbc3d"},{"post_id":"clshpstx10000jgz8h61t9jtq","tag_id":"clnaazf5k0002r4wh3xm8393l","_id":"clshpstx40002jgz8egq631uk"},{"post_id":"clshpstx10000jgz8h61t9jtq","tag_id":"cln60vik2000dwvz86kondzp1","_id":"clshpstx50003jgz85aoec8fr"},{"post_id":"clshpstx10000jgz8h61t9jtq","tag_id":"cls4qkb4o0001ahgw7oc75wrv","_id":"clshpstx50004jgz897zc7xol"},{"post_id":"clshpstx30001jgz8ai3melli","tag_id":"clnaazf5k0002r4wh3xm8393l","_id":"clshpstx50005jgz849c539qu"},{"post_id":"clshpstx30001jgz8ai3melli","tag_id":"cln60vik2000dwvz86kondzp1","_id":"clshpstx50006jgz8672s7yeb"},{"post_id":"clshpstx30001jgz8ai3melli","tag_id":"cls4qkb4o0001ahgw7oc75wrv","_id":"clshpstx50007jgz85vfhgnaq"},{"post_id":"clt88t16800005kz8cpnp3i6i","tag_id":"clnaazf5k0002r4wh3xm8393l","_id":"clt88t16a00015kz8hwmx0m08"},{"post_id":"clt88t16800005kz8cpnp3i6i","tag_id":"cln60vik2000dwvz86kondzp1","_id":"clt88t16a00025kz85ugh8cit"},{"post_id":"clt88t16800005kz8cpnp3i6i","tag_id":"cls4qkb4o0001ahgw7oc75wrv","_id":"clt88t16a00035kz8eiksbtz1"},{"post_id":"clt88t16a00045kz817bx3ebm","tag_id":"clnaazf5k0002r4wh3xm8393l","_id":"clt88t16a00055kz8hts831cs"},{"post_id":"clt88t16a00045kz817bx3ebm","tag_id":"cln60vik2000dwvz86kondzp1","_id":"clt88t16a00065kz8ada8as8x"},{"post_id":"clt88t16a00045kz817bx3ebm","tag_id":"cls4qkb4o0001ahgw7oc75wrv","_id":"clt88t16a00075kz8cr7qcvlt"},{"post_id":"clte21tws0000rtz863055742","tag_id":"clnaazf5k0002r4wh3xm8393l","_id":"clte21tx00002rtz82bthaf46"},{"post_id":"clte21tws0000rtz863055742","tag_id":"cln60vik2000dwvz86kondzp1","_id":"clte21tx00003rtz81x10807t"},{"post_id":"clte21tws0000rtz863055742","tag_id":"clte21twv0001rtz81qabauu5","_id":"clte21tx00004rtz89lv0d7x3"},{"post_id":"cltz3v26z00042tz8hel06jtz","tag_id":"clnaazf5k0002r4wh3xm8393l","_id":"cltz3v26z00052tz836an74nd"},{"post_id":"cltz3v26z00042tz8hel06jtz","tag_id":"cln60vik2000dwvz86kondzp1","_id":"cltz3v26z00062tz81ukigwzt"},{"post_id":"cltz3v26z00042tz8hel06jtz","tag_id":"clte21twv0001rtz81qabauu5","_id":"cltz3v26z00072tz8h3peg1xp"},{"post_id":"cltzhv16y0000c4z8aa066ta5","tag_id":"cln60vik2000dwvz86kondzp1","_id":"cltzhv1710001c4z87vlae78m"},{"post_id":"cltzhv16y0000c4z8aa066ta5","tag_id":"cltz3v26v00012tz8ch26hbua","_id":"cltzhv1710002c4z8frr3di1s"},{"post_id":"clu0ws48b0000snz8edgd64xb","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clu0ws48i0004snz8hod1907o"},{"post_id":"clu0ws48b0000snz8edgd64xb","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clu0ws48i0005snz84u7ofnhi"},{"post_id":"clu0ws48b0000snz8edgd64xb","tag_id":"clu0ws48e0002snz87zxgaxtq","_id":"clu0ws48i0006snz8gbpbcqb3"},{"post_id":"clu0ws48d0001snz8d9hxe67a","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clu0ws48i0007snz80uxr7h7v"},{"post_id":"clu0ws48d0001snz8d9hxe67a","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clu0ws48i0009snz82atr4esu"},{"post_id":"clu0ws48d0001snz8d9hxe67a","tag_id":"clu0ws48e0002snz87zxgaxtq","_id":"clu0x1qxj00003cz86yy6cght"},{"post_id":"clu5gdrno00009yz8437b9ikj","tag_id":"cln60vik4000iwvz85am5d09t","_id":"clu5gdrnr00019yz89i6u3p6v"},{"post_id":"clu5gdrno00009yz8437b9ikj","tag_id":"clu0ws48e0002snz87zxgaxtq","_id":"clu5gdrnr00029yz82xev0rve"},{"post_id":"clu5gdrno00009yz8437b9ikj","tag_id":"cln60vik10008wvz89egq1d4m","_id":"clu5gdrnr00039yz88icidulz"}],"Tag":[{"name":"Debug","_id":"cln60vijz0003wvz83hs010u0"},{"name":"LeetCode","_id":"cln60vik10008wvz89egq1d4m"},{"name":"Java","_id":"cln60vik2000dwvz86kondzp1"},{"name":"算法","_id":"cln60vik4000iwvz85am5d09t"},{"name":"代码随想录","_id":"cln60vik5000owvz820bd6i7h"},{"name":"教程","_id":"cln60vik8001uwvz82jld6gtq"},{"name":"Study","_id":"clnaazf5k0002r4wh3xm8393l"},{"name":"Go","_id":"clnaazf5k0003r4wh62knftzl"},{"name":"Python","_id":"clo4m6k3f0004swz80e1m0rrs"},{"name":"高并发编程","_id":"clo4m6k3h0006swz8duse7weh"},{"name":"进程","_id":"clo4m6k3i0007swz8cqai1hm6"},{"name":"线程","_id":"clo4m6k3i0008swz89gki8z3s"},{"name":"协程","_id":"clo4m6k3i0009swz8b9li8grc"},{"name":"连接池","_id":"clo4m6k3i000aswz85ryzc0j2"},{"name":"线程池","_id":"clo4m6k3i000bswz88wwzaej0"},{"name":"数组","_id":"clo4qi77y00001cz85zq34i99"},{"name":"链表","_id":"clo4qi78800031cz837rw9ewp"},{"name":"哈希表","_id":"clo4qi78c00071cz8g391cwk1"},{"name":"字符串","_id":"clo4qi78f000b1cz8gbzlhxwy"},{"name":"栈与队列","_id":"clo4qi78g000d1cz88cqkagzm"},{"name":"二叉树","_id":"clo4qi78l000m1cz85cvc8dv7"},{"name":"回溯算法","_id":"clo4qi78o00131cz8htn8hlie"},{"name":"贪心算法","_id":"clo4qi78p001f1cz85za1gi4m"},{"name":"Spring框架","_id":"cls4qkb4o0001ahgw7oc75wrv"},{"name":"Spring MVC框架","_id":"clte21twv0001rtz81qabauu5"},{"name":"Spring Boot","_id":"cltz3v26v00012tz8ch26hbua"},{"name":"动态规划","_id":"clu0ws48e0002snz87zxgaxtq"},{"name":"刷题","_id":"clu0ws48h0003snz8hj3hfk6e"}]}}