{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/image-20230920140818304.png","path":"images/image-20230920140818304.png","modified":0,"renderable":0},{"_id":"source/images/image-20230920152650727.png","path":"images/image-20230920152650727.png","modified":0,"renderable":0},{"_id":"source/images/image-20230920152855240.png","path":"images/image-20230920152855240.png","modified":0,"renderable":0},{"_id":"source/images/image-20230920153829216.png","path":"images/image-20230920153829216.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/images/image-20230921130326208.png","path":"images/image-20230921130326208.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/代码随想录算法训练营第一天-704-二分查找、27-移除元素。.md","hash":"23069878aedb4d5c4a75cb581877e123d1c5c0dc","modified":1695197231012},{"_id":"source/_posts/.DS_Store","hash":"f56912689cc9b14dd55f78e14b213a94fcea8867","modified":1695272638175},{"_id":"source/.DS_Store","hash":"702e72883fd95a2a88deba53885c7990a6e6d29d","modified":1695272638171},{"_id":"source/_posts/搭建博客.md","hash":"8c4e1e9bfdcc15d9882e016ace90f1d9c9fd0794","modified":1695197231011},{"_id":"source/images/image-20230920140818304.png","hash":"bdfe8feaf3bda356eff067e271baa909f1d2e03c","modified":1695190098306},{"_id":"source/images/image-20230920152855240.png","hash":"ca5682d47af90699a8c373f0f39c81615458f540","modified":1695194935241},{"_id":"source/images/image-20230920153829216.png","hash":"86f2ec92f9ec6370210701ebd7faa8d1a3db7e4d","modified":1695195509217},{"_id":"source/images/image-20230920152650727.png","hash":"e826a246f6a13fe01f2bfd7c51d4408b327dcda2","modified":1695194810729},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1695132290000},{"_id":"themes/fluid/_config.yml","hash":"17101716317566968f77a20c93a0f224dff1b147","modified":1695136568000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1695132290000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1695132290000},{"_id":"themes/fluid/package.json","hash":"41983970c0977b3c626c3f1e3c714cf78ac6a04e","modified":1695132290000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1695132290000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1695132290000},{"_id":"themes/fluid/README_en.md","hash":"49541d4ec48c4b517c5b3fe17a2e92d87090d007","modified":1695132290000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1695132290000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1695132290000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1695132290000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1695132290000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1695132290000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1695132290000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1695132290000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1695132290000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1695132290000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1695132290000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1695132290000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1695132290000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1695132290000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1695132290000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1695132290000},{"_id":"themes/fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1695132290000},{"_id":"themes/fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1695132290000},{"_id":"themes/fluid/README.md","hash":"088496f29af0e946055ebd781fa312685335139c","modified":1695132290000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1695132290000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1695132290000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1695132290000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1695132290000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1695132290000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1695132290000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1695132290000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1695132290000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1695132290000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1695132290000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1695132290000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1695132290000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1695132290000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1695132290000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1695132290000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1695132290000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1695132290000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1695132290000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1695132290000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1695132290000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1695132290000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1695132290000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1695132290000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1695132290000},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1695132290000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1695132290000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1695132290000},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1695132290000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1695132290000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1695132290000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1695132290000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1695132290000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1695132290000},{"_id":"public/local-search.xml","hash":"6ba8ae9a320d4b4abf03d078f5858ee5c2ba6a86","modified":1695274079162},{"_id":"public/archives/index.html","hash":"bb6ef334229917579d5a118c3c95dd5e05a73133","modified":1695274004002},{"_id":"public/archives/2023/index.html","hash":"af8ce5c69b9c75d9af881fcec6d794fab08eb0bb","modified":1695274004002},{"_id":"public/archives/2023/09/index.html","hash":"0d8a0bbc7981e1e8a46a90e4c9ae9c9a51fc95ce","modified":1695274004002},{"_id":"public/categories/搭建环境/index.html","hash":"983140c1e350f69892ce241e3da0b34d24dea15b","modified":1695197230839},{"_id":"public/categories/刷题/index.html","hash":"c0919075e13d46f96b0c5a5c09854b3a97d47b32","modified":1695274004002},{"_id":"public/tags/教程/index.html","hash":"6edf9d11ab8e8cb0f8ad1646cd6a79e75a833a46","modified":1695197230839},{"_id":"public/tags/算法/index.html","hash":"6bccd018b22656364aab4255347cfedb257de100","modified":1695274004002},{"_id":"public/tags/代码随想录/index.html","hash":"e74c79fb828821fd379ab57f85f4583da4dbcfc4","modified":1695274004002},{"_id":"public/tags/LeetCode/index.html","hash":"159745c21341cc454a6a1445ee6739dd3ed5c8b9","modified":1695274004002},{"_id":"public/post/7b6fd36a.html","hash":"86a6484be7cafc64e43c09e41e7042c5af623411","modified":1695274004002},{"_id":"public/post/5c83b0d3.html","hash":"a4d1ac20061c43c5b8d8cf0d01bd1a4758e9b963","modified":1695274004002},{"_id":"public/404.html","hash":"8e2e7fbdad623123f803ba1c7f4bf5d5a2cd632d","modified":1695197230839},{"_id":"public/index.html","hash":"d8547967cf00bb0c34a78075c30733bb15c363a5","modified":1695274004002},{"_id":"public/links/index.html","hash":"781d2f12eec5a1cadbfe5ba1264eeab6c91f1f61","modified":1695197230839},{"_id":"public/categories/index.html","hash":"13c055105e3760fd9ca1ea668562c7ab8123e9bc","modified":1695274004002},{"_id":"public/tags/index.html","hash":"80c3b9f5c7fedf1eb74cee48c5e84a5ed539e2c7","modified":1695274004002},{"_id":"public/images/image-20230920153829216.png","hash":"86f2ec92f9ec6370210701ebd7faa8d1a3db7e4d","modified":1695197230839},{"_id":"public/images/image-20230920152855240.png","hash":"ca5682d47af90699a8c373f0f39c81615458f540","modified":1695197230839},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1695197230839},{"_id":"public/images/image-20230920140818304.png","hash":"bdfe8feaf3bda356eff067e271baa909f1d2e03c","modified":1695197230839},{"_id":"public/images/image-20230920152650727.png","hash":"e826a246f6a13fe01f2bfd7c51d4408b327dcda2","modified":1695197230839},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1695197230839},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1695197230839},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1695197230839},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1695197230839},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1695197230839},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1695197230839},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1695197230839},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1695197230839},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1695197230839},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1695197230839},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1695197230839},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1695197230839},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1695197230839},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1695197230839},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1695197230839},{"_id":"public/css/main.css","hash":"526a4522eb54bb51772f51fb98295dc4fe03429f","modified":1695197230839},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1695197230839},{"_id":"source/_posts/代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。.md","hash":"5e6268c1cf99c396590da27107a073a6e7684c8d","modified":1695274072718},{"_id":"source/images/image-20230921130326208.png","hash":"865d4ca858ce0621a307e8d1dc7f5c25155abee9","modified":1695272606210},{"_id":"public/post/b79a1ea.html","hash":"d8310a0b675dd5adf98716a1e4638a93f09dc7d3","modified":1695274079162},{"_id":"public/images/image-20230921130326208.png","hash":"865d4ca858ce0621a307e8d1dc7f5c25155abee9","modified":1695274004002}],"Category":[{"name":"搭建环境","_id":"clmrgnur1000273z820g01ckp"},{"name":"刷题","_id":"clmrgnur2000473z8e2fqfwob"}],"Data":[],"Page":[],"Post":[{"title":"搭建博客","abbrlink":"5c83b0d3","date":"2023-09-19T15:33:25.000Z","_content":"\n# 搭建Hexo博客\n\n根据程序羊的视频搭建而成，整理下步骤和与当时不同之处\n\nhttps://www.bilibili.com/video/BV1Yb411a7ty/\n\n## 1. 安装node.js与npm\n\n略。\n\n有“魔法”的不需要下载`cnpm`包，此后以`npm`为例\n\n## 2. 安装Hexo\n\n`npm install -g hexo-cli`\n\n`hexo -v `查看是否安装成功\n\n## 3. 选址\n\n在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 `blog` ，并且看做根目录），在该路径下开始操作。\n\n- 执行 `hexo init` 初始化，`Linux\\MacOS` 需要 `sudo`权限\n\n- 生成一些文件与文件夹，一些配置在文件 `blog/_config.yml` 中    \n\n## 4. 部署至GitHub的准备工作\n\n1. 在该路径下执行命令: `npm install --save-deployer-git` 安装相关工具\n2. 在GitHub新建仓库，仓库名必须为: `GitHub的用户名.github.io`\n3. 更改`_config.yml`文件中的内容(在最后)：\n\n    ```yaml\n    deploy:\n      type: git\n      repo: git仓库地址\n      branch: master\n    ```\n4. GitHub更新了认证方式，具体操作可以参考这一篇[博客](https://blog.csdn.net/weixin_63031041/article/details/128731242)\n\n## 5. 相关命令\n\n1. 运行(本地预览): `hexo s`\n2. 写新的博客: `hexo n \"文件名\"`\n3. 写好之后生成静态网站: `hexo g`\n4. 清空第三步生成的文件: `hexo clean`\n5. 推送至GitHub(会有一定的延迟): `hexo d`\n\n    使用“魔法”后，GitHub需要设置代理\n\n    `git config --global http.proxy http://127.0.0.1:port`\n\n    `git config --global https.proxy https://127.0.0.1:port`\n\n    \n\n## 6. 更换主题\n\n可以直接在搜索引擎搜索相关关键字，例如`hexo 主题`，以我现在使用的`Fluid`为例\n\nGitHub地址: https://github.com/fluid-dev/hexo-theme-fluid/tree/master\n\n1. 在博客目录下克隆, 至`blog/themes`文件夹下: `git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid`\n2. 更改`blog/_config.yml` 第100行，将`theme: `后改为`fluid`\n3. 更多具体配置参考官方文档: https://hexo.fluid-dev.com/docs/guide/\n4. 大段文字需要换行需要使用`HTML`语法\n\n## 7. 其他\n\n这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。\n\n参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。\n\n很喜欢郭帆导演的一句话，让我放在了首页开屏\n\n==如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！==\n\n","source":"_posts/搭建博客.md","raw":"---\ntitle: 搭建博客\ntags:\n  - 教程\ncategories: 搭建环境\nabbrlink: 5c83b0d3\ndate: 2023-09-19 23:33:25\n---\n\n# 搭建Hexo博客\n\n根据程序羊的视频搭建而成，整理下步骤和与当时不同之处\n\nhttps://www.bilibili.com/video/BV1Yb411a7ty/\n\n## 1. 安装node.js与npm\n\n略。\n\n有“魔法”的不需要下载`cnpm`包，此后以`npm`为例\n\n## 2. 安装Hexo\n\n`npm install -g hexo-cli`\n\n`hexo -v `查看是否安装成功\n\n## 3. 选址\n\n在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 `blog` ，并且看做根目录），在该路径下开始操作。\n\n- 执行 `hexo init` 初始化，`Linux\\MacOS` 需要 `sudo`权限\n\n- 生成一些文件与文件夹，一些配置在文件 `blog/_config.yml` 中    \n\n## 4. 部署至GitHub的准备工作\n\n1. 在该路径下执行命令: `npm install --save-deployer-git` 安装相关工具\n2. 在GitHub新建仓库，仓库名必须为: `GitHub的用户名.github.io`\n3. 更改`_config.yml`文件中的内容(在最后)：\n\n    ```yaml\n    deploy:\n      type: git\n      repo: git仓库地址\n      branch: master\n    ```\n4. GitHub更新了认证方式，具体操作可以参考这一篇[博客](https://blog.csdn.net/weixin_63031041/article/details/128731242)\n\n## 5. 相关命令\n\n1. 运行(本地预览): `hexo s`\n2. 写新的博客: `hexo n \"文件名\"`\n3. 写好之后生成静态网站: `hexo g`\n4. 清空第三步生成的文件: `hexo clean`\n5. 推送至GitHub(会有一定的延迟): `hexo d`\n\n    使用“魔法”后，GitHub需要设置代理\n\n    `git config --global http.proxy http://127.0.0.1:port`\n\n    `git config --global https.proxy https://127.0.0.1:port`\n\n    \n\n## 6. 更换主题\n\n可以直接在搜索引擎搜索相关关键字，例如`hexo 主题`，以我现在使用的`Fluid`为例\n\nGitHub地址: https://github.com/fluid-dev/hexo-theme-fluid/tree/master\n\n1. 在博客目录下克隆, 至`blog/themes`文件夹下: `git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid`\n2. 更改`blog/_config.yml` 第100行，将`theme: `后改为`fluid`\n3. 更多具体配置参考官方文档: https://hexo.fluid-dev.com/docs/guide/\n4. 大段文字需要换行需要使用`HTML`语法\n\n## 7. 其他\n\n这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。\n\n参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。\n\n很喜欢郭帆导演的一句话，让我放在了首页开屏\n\n==如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！==\n\n","slug":"搭建博客","published":1,"updated":"2023-09-20T08:07:11.011Z","_id":"clmrgnuqx000073z85evcasph","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"搭建Hexo博客\"><a href=\"#搭建Hexo博客\" class=\"headerlink\" title=\"搭建Hexo博客\"></a>搭建Hexo博客</h1><p>根据程序羊的视频搭建而成，整理下步骤和与当时不同之处</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Yb411a7ty/\">https://www.bilibili.com/video/BV1Yb411a7ty/</a></p>\n<h2 id=\"1-安装node-js与npm\"><a href=\"#1-安装node-js与npm\" class=\"headerlink\" title=\"1. 安装node.js与npm\"></a>1. 安装node.js与npm</h2><p>略。</p>\n<p>有“魔法”的不需要下载<code>cnpm</code>包，此后以<code>npm</code>为例</p>\n<h2 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2. 安装Hexo\"></a>2. 安装Hexo</h2><p><code>npm install -g hexo-cli</code></p>\n<p><code>hexo -v </code>查看是否安装成功</p>\n<h2 id=\"3-选址\"><a href=\"#3-选址\" class=\"headerlink\" title=\"3. 选址\"></a>3. 选址</h2><p>在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 <code>blog</code> ，并且看做根目录），在该路径下开始操作。</p>\n<ul>\n<li><p>执行 <code>hexo init</code> 初始化，<code>Linux\\MacOS</code> 需要 <code>sudo</code>权限</p>\n</li>\n<li><p>生成一些文件与文件夹，一些配置在文件 <code>blog/_config.yml</code> 中</p>\n</li>\n</ul>\n<h2 id=\"4-部署至GitHub的准备工作\"><a href=\"#4-部署至GitHub的准备工作\" class=\"headerlink\" title=\"4. 部署至GitHub的准备工作\"></a>4. 部署至GitHub的准备工作</h2><ol>\n<li><p>在该路径下执行命令: <code>npm install --save-deployer-git</code> 安装相关工具</p>\n</li>\n<li><p>在GitHub新建仓库，仓库名必须为: <code>GitHub的用户名.github.io</code></p>\n</li>\n<li><p>更改<code>_config.yml</code>文件中的内容(在最后)：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">git仓库地址</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span><br></code></pre></td></tr></table></figure></li>\n<li><p>GitHub更新了认证方式，具体操作可以参考这一篇<a href=\"https://blog.csdn.net/weixin_63031041/article/details/128731242\">博客</a></p>\n</li>\n</ol>\n<h2 id=\"5-相关命令\"><a href=\"#5-相关命令\" class=\"headerlink\" title=\"5. 相关命令\"></a>5. 相关命令</h2><ol>\n<li><p>运行(本地预览): <code>hexo s</code></p>\n</li>\n<li><p>写新的博客: <code>hexo n &quot;文件名&quot;</code></p>\n</li>\n<li><p>写好之后生成静态网站: <code>hexo g</code></p>\n</li>\n<li><p>清空第三步生成的文件: <code>hexo clean</code></p>\n</li>\n<li><p>推送至GitHub(会有一定的延迟): <code>hexo d</code></p>\n<p> 使用“魔法”后，GitHub需要设置代理</p>\n<p> <code>git config --global http.proxy http://127.0.0.1:port</code></p>\n<p> <code>git config --global https.proxy https://127.0.0.1:port</code></p>\n</li>\n</ol>\n<h2 id=\"6-更换主题\"><a href=\"#6-更换主题\" class=\"headerlink\" title=\"6. 更换主题\"></a>6. 更换主题</h2><p>可以直接在搜索引擎搜索相关关键字，例如<code>hexo 主题</code>，以我现在使用的<code>Fluid</code>为例</p>\n<p>GitHub地址: <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/tree/master\">https://github.com/fluid-dev/hexo-theme-fluid/tree/master</a></p>\n<ol>\n<li>在博客目录下克隆, 至<code>blog/themes</code>文件夹下: <code>git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid</code></li>\n<li>更改<code>blog/_config.yml</code> 第100行，将<code>theme: </code>后改为<code>fluid</code></li>\n<li>更多具体配置参考官方文档: <a href=\"https://hexo.fluid-dev.com/docs/guide/\">https://hexo.fluid-dev.com/docs/guide/</a></li>\n<li>大段文字需要换行需要使用<code>HTML</code>语法</li>\n</ol>\n<h2 id=\"7-其他\"><a href=\"#7-其他\" class=\"headerlink\" title=\"7. 其他\"></a>7. 其他</h2><p>这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。</p>\n<p>参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。</p>\n<p>很喜欢郭帆导演的一句话，让我放在了首页开屏</p>\n<p>&#x3D;&#x3D;如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！&#x3D;&#x3D;</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建Hexo博客\"><a href=\"#搭建Hexo博客\" class=\"headerlink\" title=\"搭建Hexo博客\"></a>搭建Hexo博客</h1><p>根据程序羊的视频搭建而成，整理下步骤和与当时不同之处</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Yb411a7ty/\">https://www.bilibili.com/video/BV1Yb411a7ty/</a></p>\n<h2 id=\"1-安装node-js与npm\"><a href=\"#1-安装node-js与npm\" class=\"headerlink\" title=\"1. 安装node.js与npm\"></a>1. 安装node.js与npm</h2><p>略。</p>\n<p>有“魔法”的不需要下载<code>cnpm</code>包，此后以<code>npm</code>为例</p>\n<h2 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2. 安装Hexo\"></a>2. 安装Hexo</h2><p><code>npm install -g hexo-cli</code></p>\n<p><code>hexo -v </code>查看是否安装成功</p>\n<h2 id=\"3-选址\"><a href=\"#3-选址\" class=\"headerlink\" title=\"3. 选址\"></a>3. 选址</h2><p>在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 <code>blog</code> ，并且看做根目录），在该路径下开始操作。</p>\n<ul>\n<li><p>执行 <code>hexo init</code> 初始化，<code>Linux\\MacOS</code> 需要 <code>sudo</code>权限</p>\n</li>\n<li><p>生成一些文件与文件夹，一些配置在文件 <code>blog/_config.yml</code> 中</p>\n</li>\n</ul>\n<h2 id=\"4-部署至GitHub的准备工作\"><a href=\"#4-部署至GitHub的准备工作\" class=\"headerlink\" title=\"4. 部署至GitHub的准备工作\"></a>4. 部署至GitHub的准备工作</h2><ol>\n<li><p>在该路径下执行命令: <code>npm install --save-deployer-git</code> 安装相关工具</p>\n</li>\n<li><p>在GitHub新建仓库，仓库名必须为: <code>GitHub的用户名.github.io</code></p>\n</li>\n<li><p>更改<code>_config.yml</code>文件中的内容(在最后)：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">git仓库地址</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span><br></code></pre></td></tr></table></figure></li>\n<li><p>GitHub更新了认证方式，具体操作可以参考这一篇<a href=\"https://blog.csdn.net/weixin_63031041/article/details/128731242\">博客</a></p>\n</li>\n</ol>\n<h2 id=\"5-相关命令\"><a href=\"#5-相关命令\" class=\"headerlink\" title=\"5. 相关命令\"></a>5. 相关命令</h2><ol>\n<li><p>运行(本地预览): <code>hexo s</code></p>\n</li>\n<li><p>写新的博客: <code>hexo n &quot;文件名&quot;</code></p>\n</li>\n<li><p>写好之后生成静态网站: <code>hexo g</code></p>\n</li>\n<li><p>清空第三步生成的文件: <code>hexo clean</code></p>\n</li>\n<li><p>推送至GitHub(会有一定的延迟): <code>hexo d</code></p>\n<p> 使用“魔法”后，GitHub需要设置代理</p>\n<p> <code>git config --global http.proxy http://127.0.0.1:port</code></p>\n<p> <code>git config --global https.proxy https://127.0.0.1:port</code></p>\n</li>\n</ol>\n<h2 id=\"6-更换主题\"><a href=\"#6-更换主题\" class=\"headerlink\" title=\"6. 更换主题\"></a>6. 更换主题</h2><p>可以直接在搜索引擎搜索相关关键字，例如<code>hexo 主题</code>，以我现在使用的<code>Fluid</code>为例</p>\n<p>GitHub地址: <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/tree/master\">https://github.com/fluid-dev/hexo-theme-fluid/tree/master</a></p>\n<ol>\n<li>在博客目录下克隆, 至<code>blog/themes</code>文件夹下: <code>git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid</code></li>\n<li>更改<code>blog/_config.yml</code> 第100行，将<code>theme: </code>后改为<code>fluid</code></li>\n<li>更多具体配置参考官方文档: <a href=\"https://hexo.fluid-dev.com/docs/guide/\">https://hexo.fluid-dev.com/docs/guide/</a></li>\n<li>大段文字需要换行需要使用<code>HTML</code>语法</li>\n</ol>\n<h2 id=\"7-其他\"><a href=\"#7-其他\" class=\"headerlink\" title=\"7. 其他\"></a>7. 其他</h2><p>这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。</p>\n<p>参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。</p>\n<p>很喜欢郭帆导演的一句话，让我放在了首页开屏</p>\n<p>&#x3D;&#x3D;如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！&#x3D;&#x3D;</p>\n"},{"title":"代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。","abbrlink":"7b6fd36a","date":"2023-09-20T07:41:36.000Z","_content":"\n# 代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\n\n\n\n## 704. 二分查找\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/binary-search/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0704.二分查找.html)\n>\n>   视频讲解：[手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找](https://www.bilibili.com/video/BV1fA4y1o715)\n>\n>   状态：AC\n\n### 思路\n\n看了卡哥的文档，才注意到二分查找也有两种写法。”要**熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法**“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。\n\n### 代码\n\n``` go\nfunc search(nums []int, target int) int {\n\t// 左闭右闭写法\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid - 1\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n\n```\n\n\n\n``` go\nfunc search1(nums []int, target int) int {\n\t// 左闭右开写法\n\tleft := 0\n\tright := len(nums)\n\tvar mid int\n\tfor left < right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n## 27. 移除元素\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/remove-element/ )\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0027.移除元素.html)\n>\n>   视频讲解：[数组中移除元素并不容易！ | LeetCode：27. 移除元素](https://www.bilibili.com/video/BV12A4y1Z7LP )\n>\n>   状态：AC\n\n### 思路\n\n第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 `O(1)` 额外空间并 **原地修改输入数组**“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为`O(n^2)`。再向下看到了示例：\n\n**示例 1：**\n\n\n> 输入：nums = [3,2,2,3], val = 3\n> 输出：2, nums = [2,2]\n> 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n\n\n**示例 2：**\n\n\n> 输入：nums = [0,1,2,2,3,0,4,2], val = 2\n> 输出：5, nums = [0,1,4,0,3]\n> 解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n\n看到这里大概理解了，想到的解法是双指针，方法也有两种。\n\n#### 方法一：\n\n1.   左右指针均从头开始，右指针每次向前一步\n2.   若右指针的值为`val`，那么跳过；否则将右指针的值给左指针，左指针++\n3.   返回左指针所在的索引\n\n#### 方法二：\n\n1.   左指针从前开始，右指针从后开始，左指针找`val`，右指针找非`val`\n2.   右指针的值给左指针\n3.   返回左指针所在的索引\n\n### 代码\n\n``` go\n// 方法一\nfunc removeElement(nums []int, val int) int {\n\tn := len(nums)\n\tleft := 0\n\tfor right := 0; right < n; right++ {\n\t\tif nums[right] != val {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn left\n}\n```\n\n``` go\n// 方法二\nfunc removeElement(nums []int, val int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tfor left <= right {\n\t\t\tif nums[left] == val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tleft++\n\t\t\t}\n\t\t}\n\t\tfor left <= right {\n\t\t\tif nums[right] != val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tright--\n\t\t\t}\n\t\t}\n\t\tif left < right {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t\tright--\n\t\t}\n\t}\n\treturn left\n}\n```\n\n方法二还是的边界条件有点绕的，自己把自己绕进去了\n\n![绕晕了的边界](../images/image-20230920140818304.png)\n\n\n\n## 附加题 35. 搜索插入位置\n\n>   题目链接：[35. 搜索插入位置](https://leetcode.cn/problems/search-insert-position/)\n>\n>   状态：AC\n\n### 思路\n\n查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。\n\n### 代码\n\n``` go\nfunc searchInsert(nums []int, target int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] == target {\n\t\t\treturn mid\n\t\t} else if nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid - 1\n\t\t}\n\t}\n\treturn left\n}\n```\n\n## 附加题34.在排序数组中查找元素的第一个和最后一个位置\n\n>   题目链接：[34.在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/)\n>\n>   状态：AC\n\n### 思路\n\n通过两次二分查找找到`target`在数组中的起始和结束位置，实现了函数`binary`可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：\n\n-   起始：需要判断`num[mid-1]<target`，或者`mid==0`（第0个元素就是起始位置），为了保证不越界，需要先判断`mid==0`的情况\n-   结束：需要判断`mid == len(nums)-1`（最后一个元素是结束位置），或者`nums[mid+1] > target`\n\n如果没有找到该元素，则返回`-1`。由于起始和介绍条件判断有些不同，`binary`函数中使用了`flag`来区分是进行起始元素查找还是结束元素查找的条件。若是`true`则为查找起始元素\n\n### 代码\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n\tresult := []int{}\n    var temp int\n    temp = binary(nums, target, true)\n    if temp == -1 {  // 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行\n        return []int{-1, -1}\n    } else {\n\t\tresult = append(result, temp)\n        result = append(result, binary(nums, target, false))\n        return result\n    }\n}\nfunc binary(nums []int, target int, flag bool) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tmid := left + (right-left)/2\n\t\tif flag {\n\t\t\tif nums[mid] == target && (mid == 0 || nums[mid-1] < target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] < target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t} else {\n\t\t\tif nums[mid] == target && (mid == len(nums)-1 || nums[mid+1] > target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] <= target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n![AC！](../images/image-20230920152650727.png)\n\n### 官方解法\n\n#### Go语言版本\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n    leftmost := sort.SearchInts(nums, target)\n    if leftmost == len(nums) || nums[leftmost] != target {\n        return []int{-1, -1}\n    }\n    rightmost := sort.SearchInts(nums, target + 1) - 1\n    return []int{leftmost, rightmost}\n}\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n`sort.SearchInts()`函数没有接触过，看看源码\n\n<img src=\"../images/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n>   SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。\n>   切片必须按升序排序。\n\n#### C++版本\n\n``` c++\nclass Solution { \npublic:\n    int binarySearch(vector<int>& nums, int target, bool lower) {\n        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n\n    vector<int> searchRange(vector<int>& nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.size() && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return vector<int>{leftIdx, rightIdx};\n        } \n        return vector<int>{-1, -1};\n    }\n};\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的`true`和`false`对条件控制的很巧妙。\n\n## 小结\n\n-   在二分查找时又学到了一种思路，”左闭右开“\n\n-   群里面有位同学说到了这个事情，之前从未注意过：\n\n    <img src=\"../images/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n    看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。\n\n今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！\n\n","source":"_posts/代码随想录算法训练营第一天-704-二分查找、27-移除元素。.md","raw":"---\ntitle: 代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\ncategories: 刷题\nabbrlink: 7b6fd36a\ndate: 2023-09-20 15:41:36\n---\n\n# 代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\n\n\n\n## 704. 二分查找\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/binary-search/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0704.二分查找.html)\n>\n>   视频讲解：[手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找](https://www.bilibili.com/video/BV1fA4y1o715)\n>\n>   状态：AC\n\n### 思路\n\n看了卡哥的文档，才注意到二分查找也有两种写法。”要**熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法**“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。\n\n### 代码\n\n``` go\nfunc search(nums []int, target int) int {\n\t// 左闭右闭写法\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid - 1\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n\n```\n\n\n\n``` go\nfunc search1(nums []int, target int) int {\n\t// 左闭右开写法\n\tleft := 0\n\tright := len(nums)\n\tvar mid int\n\tfor left < right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n## 27. 移除元素\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/remove-element/ )\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0027.移除元素.html)\n>\n>   视频讲解：[数组中移除元素并不容易！ | LeetCode：27. 移除元素](https://www.bilibili.com/video/BV12A4y1Z7LP )\n>\n>   状态：AC\n\n### 思路\n\n第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 `O(1)` 额外空间并 **原地修改输入数组**“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为`O(n^2)`。再向下看到了示例：\n\n**示例 1：**\n\n\n> 输入：nums = [3,2,2,3], val = 3\n> 输出：2, nums = [2,2]\n> 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n\n\n**示例 2：**\n\n\n> 输入：nums = [0,1,2,2,3,0,4,2], val = 2\n> 输出：5, nums = [0,1,4,0,3]\n> 解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n\n看到这里大概理解了，想到的解法是双指针，方法也有两种。\n\n#### 方法一：\n\n1.   左右指针均从头开始，右指针每次向前一步\n2.   若右指针的值为`val`，那么跳过；否则将右指针的值给左指针，左指针++\n3.   返回左指针所在的索引\n\n#### 方法二：\n\n1.   左指针从前开始，右指针从后开始，左指针找`val`，右指针找非`val`\n2.   右指针的值给左指针\n3.   返回左指针所在的索引\n\n### 代码\n\n``` go\n// 方法一\nfunc removeElement(nums []int, val int) int {\n\tn := len(nums)\n\tleft := 0\n\tfor right := 0; right < n; right++ {\n\t\tif nums[right] != val {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn left\n}\n```\n\n``` go\n// 方法二\nfunc removeElement(nums []int, val int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tfor left <= right {\n\t\t\tif nums[left] == val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tleft++\n\t\t\t}\n\t\t}\n\t\tfor left <= right {\n\t\t\tif nums[right] != val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tright--\n\t\t\t}\n\t\t}\n\t\tif left < right {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t\tright--\n\t\t}\n\t}\n\treturn left\n}\n```\n\n方法二还是的边界条件有点绕的，自己把自己绕进去了\n\n![绕晕了的边界](../images/image-20230920140818304.png)\n\n\n\n## 附加题 35. 搜索插入位置\n\n>   题目链接：[35. 搜索插入位置](https://leetcode.cn/problems/search-insert-position/)\n>\n>   状态：AC\n\n### 思路\n\n查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。\n\n### 代码\n\n``` go\nfunc searchInsert(nums []int, target int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] == target {\n\t\t\treturn mid\n\t\t} else if nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid - 1\n\t\t}\n\t}\n\treturn left\n}\n```\n\n## 附加题34.在排序数组中查找元素的第一个和最后一个位置\n\n>   题目链接：[34.在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/)\n>\n>   状态：AC\n\n### 思路\n\n通过两次二分查找找到`target`在数组中的起始和结束位置，实现了函数`binary`可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：\n\n-   起始：需要判断`num[mid-1]<target`，或者`mid==0`（第0个元素就是起始位置），为了保证不越界，需要先判断`mid==0`的情况\n-   结束：需要判断`mid == len(nums)-1`（最后一个元素是结束位置），或者`nums[mid+1] > target`\n\n如果没有找到该元素，则返回`-1`。由于起始和介绍条件判断有些不同，`binary`函数中使用了`flag`来区分是进行起始元素查找还是结束元素查找的条件。若是`true`则为查找起始元素\n\n### 代码\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n\tresult := []int{}\n    var temp int\n    temp = binary(nums, target, true)\n    if temp == -1 {  // 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行\n        return []int{-1, -1}\n    } else {\n\t\tresult = append(result, temp)\n        result = append(result, binary(nums, target, false))\n        return result\n    }\n}\nfunc binary(nums []int, target int, flag bool) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tmid := left + (right-left)/2\n\t\tif flag {\n\t\t\tif nums[mid] == target && (mid == 0 || nums[mid-1] < target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] < target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t} else {\n\t\t\tif nums[mid] == target && (mid == len(nums)-1 || nums[mid+1] > target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] <= target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n![AC！](../images/image-20230920152650727.png)\n\n### 官方解法\n\n#### Go语言版本\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n    leftmost := sort.SearchInts(nums, target)\n    if leftmost == len(nums) || nums[leftmost] != target {\n        return []int{-1, -1}\n    }\n    rightmost := sort.SearchInts(nums, target + 1) - 1\n    return []int{leftmost, rightmost}\n}\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n`sort.SearchInts()`函数没有接触过，看看源码\n\n<img src=\"../images/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n>   SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。\n>   切片必须按升序排序。\n\n#### C++版本\n\n``` c++\nclass Solution { \npublic:\n    int binarySearch(vector<int>& nums, int target, bool lower) {\n        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n\n    vector<int> searchRange(vector<int>& nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.size() && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return vector<int>{leftIdx, rightIdx};\n        } \n        return vector<int>{-1, -1};\n    }\n};\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的`true`和`false`对条件控制的很巧妙。\n\n## 小结\n\n-   在二分查找时又学到了一种思路，”左闭右开“\n\n-   群里面有位同学说到了这个事情，之前从未注意过：\n\n    <img src=\"../images/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n    看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。\n\n今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！\n\n","slug":"代码随想录算法训练营第一天-704-二分查找、27-移除元素。","published":1,"updated":"2023-09-20T08:07:11.012Z","_id":"clmrgnur0000173z87v2h7et0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第一天-704-二分查找、27-移除元素。\"><a href=\"#代码随想录算法训练营第一天-704-二分查找、27-移除元素。\" class=\"headerlink\" title=\"代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\"></a>代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。</h1><h2 id=\"704-二分查找\"><a href=\"#704-二分查找\" class=\"headerlink\" title=\"704. 二分查找\"></a>704. 二分查找</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/binary-search/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1fA4y1o715\">手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>看了卡哥的文档，才注意到二分查找也有两种写法。”要<strong>熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法</strong>“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右闭写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search1</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右开写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"27-移除元素\"><a href=\"#27-移除元素\" class=\"headerlink\" title=\"27. 移除元素\"></a>27. 移除元素</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/remove-element/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV12A4y1Z7LP\">数组中移除元素并不容易！ | LeetCode：27. 移除元素</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地修改输入数组</strong>“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为<code>O(n^2)</code>。再向下看到了示例：</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>\n</blockquote>\n<p>看到这里大概理解了，想到的解法是双指针，方法也有两种。</p>\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><ol>\n<li>左右指针均从头开始，右指针每次向前一步</li>\n<li>若右指针的值为<code>val</code>，那么跳过；否则将右指针的值给左指针，左指针++</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><ol>\n<li>左指针从前开始，右指针从后开始，左指针找<code>val</code>，右指针找非<code>val</code></li>\n<li>右指针的值给左指针</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法一</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tleft := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> right := <span class=\"hljs-number\">0</span>; right &lt; n; right++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法二</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[left] == val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tleft++<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright--<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> left &lt; right &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t\tright--<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>方法二还是的边界条件有点绕的，自己把自己绕进去了</p>\n<p><img src=\"/../images/image-20230920140818304.png\" alt=\"绕晕了的边界\"></p>\n<h2 id=\"附加题-35-搜索插入位置\"><a href=\"#附加题-35-搜索插入位置\" class=\"headerlink\" title=\"附加题 35. 搜索插入位置\"></a>附加题 35. 搜索插入位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/search-insert-position/\">35. 搜索插入位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"附加题34-在排序数组中查找元素的第一个和最后一个位置\"><a href=\"#附加题34-在排序数组中查找元素的第一个和最后一个位置\" class=\"headerlink\" title=\"附加题34.在排序数组中查找元素的第一个和最后一个位置\"></a>附加题34.在排序数组中查找元素的第一个和最后一个位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/\">34.在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>通过两次二分查找找到<code>target</code>在数组中的起始和结束位置，实现了函数<code>binary</code>可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：</p>\n<ul>\n<li>起始：需要判断<code>num[mid-1]&lt;target</code>，或者<code>mid==0</code>（第0个元素就是起始位置），为了保证不越界，需要先判断<code>mid==0</code>的情况</li>\n<li>结束：需要判断<code>mid == len(nums)-1</code>（最后一个元素是结束位置），或者<code>nums[mid+1] &gt; target</code></li>\n</ul>\n<p>如果没有找到该元素，则返回<code>-1</code>。由于起始和介绍条件判断有些不同，<code>binary</code>函数中使用了<code>flag</code>来区分是进行起始元素查找还是结束元素查找的条件。若是<code>true</code>则为查找起始元素</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">var</span> temp <span class=\"hljs-type\">int</span><br>    temp = binary(nums, target, <span class=\"hljs-literal\">true</span>)<br>    <span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-number\">-1</span> &#123;  <span class=\"hljs-comment\">// 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行</span><br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>        result = <span class=\"hljs-built_in\">append</span>(result, binary(nums, target, <span class=\"hljs-literal\">false</span>))<br>        <span class=\"hljs-keyword\">return</span> result<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">binary</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>, flag <span class=\"hljs-type\">bool</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid := left + (right-left)/<span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> flag &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-number\">0</span> || nums[mid<span class=\"hljs-number\">-1</span>] &lt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-1</span> || nums[mid+<span class=\"hljs-number\">1</span>] &gt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt;= target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/image-20230920152650727.png\" alt=\"AC！\"></p>\n<h3 id=\"官方解法\"><a href=\"#官方解法\" class=\"headerlink\" title=\"官方解法\"></a>官方解法</h3><h4 id=\"Go语言版本\"><a href=\"#Go语言版本\" class=\"headerlink\" title=\"Go语言版本\"></a>Go语言版本</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    leftmost := sort.SearchInts(nums, target)<br>    <span class=\"hljs-keyword\">if</span> leftmost == <span class=\"hljs-built_in\">len</span>(nums) || nums[leftmost] != target &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125;<br>    rightmost := sort.SearchInts(nums, target + <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;leftmost, rightmost&#125;<br>&#125;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p><code>sort.SearchInts()</code>函数没有接触过，看看源码</p>\n<img src=\"../images/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>  SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。<br>  切片必须按升序排序。</p>\n</blockquote>\n<h4 id=\"C-版本\"><a href=\"#C-版本\" class=\"headerlink\" title=\"C++版本\"></a>C++版本</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123; <br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target, <span class=\"hljs-type\">bool</span> lower)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>, right = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>, ans = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>            <span class=\"hljs-type\">int</span> mid = (left + right) / <span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-keyword\">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) &#123;<br>                right = mid - <span class=\"hljs-number\">1</span>;<br>                ans = mid;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                left = mid + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br><br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> leftIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-type\">int</span> rightIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">false</span>) - <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (leftIdx &lt;= rightIdx &amp;&amp; rightIdx &lt; nums.<span class=\"hljs-built_in\">size</span>() &amp;&amp; nums[leftIdx] == target &amp;&amp; nums[rightIdx] == target) &#123;<br>            <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;leftIdx, rightIdx&#125;;<br>        &#125; <br>        <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;;<br>    &#125;<br>&#125;;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p>官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的<code>true</code>和<code>false</code>对条件控制的很巧妙。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>在二分查找时又学到了一种思路，”左闭右开“</p>\n</li>\n<li><p>群里面有位同学说到了这个事情，之前从未注意过：</p>\n<img src=\"../images/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n<p>看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。</p>\n</li>\n</ul>\n<p>今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第一天-704-二分查找、27-移除元素。\"><a href=\"#代码随想录算法训练营第一天-704-二分查找、27-移除元素。\" class=\"headerlink\" title=\"代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\"></a>代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。</h1><h2 id=\"704-二分查找\"><a href=\"#704-二分查找\" class=\"headerlink\" title=\"704. 二分查找\"></a>704. 二分查找</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/binary-search/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1fA4y1o715\">手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>看了卡哥的文档，才注意到二分查找也有两种写法。”要<strong>熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法</strong>“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右闭写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search1</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右开写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"27-移除元素\"><a href=\"#27-移除元素\" class=\"headerlink\" title=\"27. 移除元素\"></a>27. 移除元素</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/remove-element/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV12A4y1Z7LP\">数组中移除元素并不容易！ | LeetCode：27. 移除元素</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地修改输入数组</strong>“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为<code>O(n^2)</code>。再向下看到了示例：</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>\n</blockquote>\n<p>看到这里大概理解了，想到的解法是双指针，方法也有两种。</p>\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><ol>\n<li>左右指针均从头开始，右指针每次向前一步</li>\n<li>若右指针的值为<code>val</code>，那么跳过；否则将右指针的值给左指针，左指针++</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><ol>\n<li>左指针从前开始，右指针从后开始，左指针找<code>val</code>，右指针找非<code>val</code></li>\n<li>右指针的值给左指针</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法一</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tleft := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> right := <span class=\"hljs-number\">0</span>; right &lt; n; right++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法二</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[left] == val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tleft++<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright--<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> left &lt; right &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t\tright--<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>方法二还是的边界条件有点绕的，自己把自己绕进去了</p>\n<p><img src=\"/../images/image-20230920140818304.png\" alt=\"绕晕了的边界\"></p>\n<h2 id=\"附加题-35-搜索插入位置\"><a href=\"#附加题-35-搜索插入位置\" class=\"headerlink\" title=\"附加题 35. 搜索插入位置\"></a>附加题 35. 搜索插入位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/search-insert-position/\">35. 搜索插入位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"附加题34-在排序数组中查找元素的第一个和最后一个位置\"><a href=\"#附加题34-在排序数组中查找元素的第一个和最后一个位置\" class=\"headerlink\" title=\"附加题34.在排序数组中查找元素的第一个和最后一个位置\"></a>附加题34.在排序数组中查找元素的第一个和最后一个位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/\">34.在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>通过两次二分查找找到<code>target</code>在数组中的起始和结束位置，实现了函数<code>binary</code>可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：</p>\n<ul>\n<li>起始：需要判断<code>num[mid-1]&lt;target</code>，或者<code>mid==0</code>（第0个元素就是起始位置），为了保证不越界，需要先判断<code>mid==0</code>的情况</li>\n<li>结束：需要判断<code>mid == len(nums)-1</code>（最后一个元素是结束位置），或者<code>nums[mid+1] &gt; target</code></li>\n</ul>\n<p>如果没有找到该元素，则返回<code>-1</code>。由于起始和介绍条件判断有些不同，<code>binary</code>函数中使用了<code>flag</code>来区分是进行起始元素查找还是结束元素查找的条件。若是<code>true</code>则为查找起始元素</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">var</span> temp <span class=\"hljs-type\">int</span><br>    temp = binary(nums, target, <span class=\"hljs-literal\">true</span>)<br>    <span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-number\">-1</span> &#123;  <span class=\"hljs-comment\">// 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行</span><br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>        result = <span class=\"hljs-built_in\">append</span>(result, binary(nums, target, <span class=\"hljs-literal\">false</span>))<br>        <span class=\"hljs-keyword\">return</span> result<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">binary</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>, flag <span class=\"hljs-type\">bool</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid := left + (right-left)/<span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> flag &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-number\">0</span> || nums[mid<span class=\"hljs-number\">-1</span>] &lt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-1</span> || nums[mid+<span class=\"hljs-number\">1</span>] &gt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt;= target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/image-20230920152650727.png\" alt=\"AC！\"></p>\n<h3 id=\"官方解法\"><a href=\"#官方解法\" class=\"headerlink\" title=\"官方解法\"></a>官方解法</h3><h4 id=\"Go语言版本\"><a href=\"#Go语言版本\" class=\"headerlink\" title=\"Go语言版本\"></a>Go语言版本</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    leftmost := sort.SearchInts(nums, target)<br>    <span class=\"hljs-keyword\">if</span> leftmost == <span class=\"hljs-built_in\">len</span>(nums) || nums[leftmost] != target &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125;<br>    rightmost := sort.SearchInts(nums, target + <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;leftmost, rightmost&#125;<br>&#125;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p><code>sort.SearchInts()</code>函数没有接触过，看看源码</p>\n<img src=\"../images/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>  SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。<br>  切片必须按升序排序。</p>\n</blockquote>\n<h4 id=\"C-版本\"><a href=\"#C-版本\" class=\"headerlink\" title=\"C++版本\"></a>C++版本</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123; <br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target, <span class=\"hljs-type\">bool</span> lower)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>, right = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>, ans = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>            <span class=\"hljs-type\">int</span> mid = (left + right) / <span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-keyword\">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) &#123;<br>                right = mid - <span class=\"hljs-number\">1</span>;<br>                ans = mid;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                left = mid + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br><br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> leftIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-type\">int</span> rightIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">false</span>) - <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (leftIdx &lt;= rightIdx &amp;&amp; rightIdx &lt; nums.<span class=\"hljs-built_in\">size</span>() &amp;&amp; nums[leftIdx] == target &amp;&amp; nums[rightIdx] == target) &#123;<br>            <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;leftIdx, rightIdx&#125;;<br>        &#125; <br>        <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;;<br>    &#125;<br>&#125;;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p>官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的<code>true</code>和<code>false</code>对条件控制的很巧妙。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>在二分查找时又学到了一种思路，”左闭右开“</p>\n</li>\n<li><p>群里面有位同学说到了这个事情，之前从未注意过：</p>\n<img src=\"../images/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n<p>看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。</p>\n</li>\n</ul>\n<p>今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！</p>\n"},{"title":"代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。","abbrlink":"b79a1ea","date":"2023-09-21T04:15:07.000Z","_content":"\n# 代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\n\n## 977. 有序数组的平方\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/squares-of-a-sorted-array/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0977.有序数组的平方.html)\n>\n>   视频讲解：[双指针法经典题目 | LeetCode：977.有序数组的平方](https://www.bilibili.com/video/BV1QB4y1D7ep )\n>\n>   状态：AC\n\n### 思路\n\n首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为`O(nlog n)`。但是并不满足题目中要求的`O(n)`，因为有一个条件我们还没有用上：**非递减顺序数组**。看了题解之后才清楚更好的方法：**双指针算法**。\n\n由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。\n\n### 代码\n\n``` go\nfunc sortedSquares(nums []int) []int {\n\tn := len(nums)\n\tresult := make([]int, n)\n\tleft := 0\n\tright := len(nums) - 1\n\tfor i := right; i >= 0; i-- {  // i为result的索引\n\t\tif nums[left]*nums[left] < nums[right]*nums[right] {  // right侧更大\n\t\t\tresult[i] = nums[right] * nums[right]\n\t\t\tright--\n\t\t} else {  // left侧更大\n\t\t\tresult[i] = nums[left] * nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 209.长度最小的子数组\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html)\n>\n>   视频讲解：[拿下滑动窗口！ | LeetCode 209 长度最小的子数组](https://www.bilibili.com/video/BV1tZ4y1q7XE)\n>\n>   状态：AC\n\n### 思路\n\n此题需要找最短连续的一子数组，能想到的是 **滑动窗口** 算法。\n\n1.   设最短子数组长度`minLength`为无穷大，题目规定长度最大为100000，`minLength=100001`即可。\n2.   右侧不断向前，直至这一子数组的和大于 `target`\n3.   子序列和大于target之后，左侧也不断向前，直至子数组和小于 `target`，记录下此刻的序列长度，并与 `minLength` 进行比较。\n4.   循环条件：当右侧到头，并且此时的子数组的和小于`target`\n5.   退出循环后，如果`minLength`依旧等于100001，说明不存在满足要求的子数组，则返回`0`\n\n### 代码\n\n``` go\nfunc minSubArrayLen(target int, nums []int) int {\n\tleft := 0\n\tright := 0\n\tsum := 0\n\tminLength := 100001\n\tlength := len(nums)\n\tfor left <= right && right <= length {\n\t\tif sum < target {\n\t\t\tif right < length {\n\t\t\t\tsum += nums[right]\n\t\t\t\tright++\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tif minLength > right-left {\n\t\t\t\tminLength = right - left\n\t\t\t}\n\t\t\tsum -= nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\tif minLength == 100001 {\n\t\treturn 0\n\t}\n\treturn minLength\n}\n```\n\n## 59.螺旋矩阵II\n\n> 题目链接：[leetcode链接](https://leetcode.cn/problems/spiral-matrix-ii/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0059.螺旋矩阵II.html)\n>\n> 视频讲解：[一入循环深似海 | LeetCode：59.螺旋矩阵II](https://www.bilibili.com/video/BV1SL4y1N7mV/)\n>\n> 状态：AC\n\n### 思路\n\n![image-20230921130326208](../images/image-20230921130326208.png)\n\n1.   循环次数是`n/2`\n\n2.   每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为`results`\n\n3.   各个颜色的范围，注意是从大到小还是从小到大：\n\n     <font color=\"#4664b9\">蓝色的范围：results\\[top\\][left ~ right - 1]</font>\n     <font color=\"#4f7633\">绿色的范围：results\\[top ~ bottom - 1\\][right]</font>\n\n     <font color=\"#b0871e\">黄色的范围：results\\[bottom\\][right ~ left + 1]</font>\n\n     <font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1]\\[left\\]</font>\n\n4.   每一轮过后，`top++`、`bottom--`、`left++`、`right--`\n\n5.   额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。\n\n### 代码\n\n``` go\nfunc generateMatrix(n int) [][]int {\n\ttop := 0\n\tbottom := n - 1\n\tleft := 0\n\tright := n - 1\n\tresult := make([][]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tresult[i] = make([]int, n)\n\t}\n\tnum := 1\n\tfor i := 0; i < n/2; i++ {\n\t\tfor j := left; j < right; j++ {\n\t\t\tresult[top][j] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := top; j < bottom; j++ {\n\t\t\tresult[j][right] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := right; j > left; j-- {\n\t\t\tresult[bottom][j] = num\n\t\t\tnum++\n\t\t}\n\t\tfor j := bottom; j > top; j-- {\n\t\t\tresult[j][left] = num\n\t\t\tnum++\n\t\t}\n\t\ttop++\n\t\tleft++\n\t\tright--\n\t\tbottom--\n\t}\n\tif n%2 == 1 {\n\t\tresult[n/2][n/2] = num\n\t}\n\treturn result\n}\n```\n\n## 小结\n\n-   帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。\n\n-   Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧\n\n    ``` go\n    result := make([][]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = make([]int, n)\n    }\n    ```\n\n    \n\n-   今天还有点别的事情，先写这么多，扩展题先不写了\n-   打卡第二天！\n","source":"_posts/代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。.md","raw":"---\ntitle: 代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\ncategories: 刷题\nabbrlink: b79a1ea\ndate: 2023-09-21 12:15:07\n---\n\n# 代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\n\n## 977. 有序数组的平方\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/squares-of-a-sorted-array/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0977.有序数组的平方.html)\n>\n>   视频讲解：[双指针法经典题目 | LeetCode：977.有序数组的平方](https://www.bilibili.com/video/BV1QB4y1D7ep )\n>\n>   状态：AC\n\n### 思路\n\n首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为`O(nlog n)`。但是并不满足题目中要求的`O(n)`，因为有一个条件我们还没有用上：**非递减顺序数组**。看了题解之后才清楚更好的方法：**双指针算法**。\n\n由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。\n\n### 代码\n\n``` go\nfunc sortedSquares(nums []int) []int {\n\tn := len(nums)\n\tresult := make([]int, n)\n\tleft := 0\n\tright := len(nums) - 1\n\tfor i := right; i >= 0; i-- {  // i为result的索引\n\t\tif nums[left]*nums[left] < nums[right]*nums[right] {  // right侧更大\n\t\t\tresult[i] = nums[right] * nums[right]\n\t\t\tright--\n\t\t} else {  // left侧更大\n\t\t\tresult[i] = nums[left] * nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 209.长度最小的子数组\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html)\n>\n>   视频讲解：[拿下滑动窗口！ | LeetCode 209 长度最小的子数组](https://www.bilibili.com/video/BV1tZ4y1q7XE)\n>\n>   状态：AC\n\n### 思路\n\n此题需要找最短连续的一子数组，能想到的是 **滑动窗口** 算法。\n\n1.   设最短子数组长度`minLength`为无穷大，题目规定长度最大为100000，`minLength=100001`即可。\n2.   右侧不断向前，直至这一子数组的和大于 `target`\n3.   子序列和大于target之后，左侧也不断向前，直至子数组和小于 `target`，记录下此刻的序列长度，并与 `minLength` 进行比较。\n4.   循环条件：当右侧到头，并且此时的子数组的和小于`target`\n5.   退出循环后，如果`minLength`依旧等于100001，说明不存在满足要求的子数组，则返回`0`\n\n### 代码\n\n``` go\nfunc minSubArrayLen(target int, nums []int) int {\n\tleft := 0\n\tright := 0\n\tsum := 0\n\tminLength := 100001\n\tlength := len(nums)\n\tfor left <= right && right <= length {\n\t\tif sum < target {\n\t\t\tif right < length {\n\t\t\t\tsum += nums[right]\n\t\t\t\tright++\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tif minLength > right-left {\n\t\t\t\tminLength = right - left\n\t\t\t}\n\t\t\tsum -= nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\tif minLength == 100001 {\n\t\treturn 0\n\t}\n\treturn minLength\n}\n```\n\n## 59.螺旋矩阵II\n\n> 题目链接：[leetcode链接](https://leetcode.cn/problems/spiral-matrix-ii/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0059.螺旋矩阵II.html)\n>\n> 视频讲解：[一入循环深似海 | LeetCode：59.螺旋矩阵II](https://www.bilibili.com/video/BV1SL4y1N7mV/)\n>\n> 状态：AC\n\n### 思路\n\n![image-20230921130326208](../images/image-20230921130326208.png)\n\n1.   循环次数是`n/2`\n\n2.   每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为`results`\n\n3.   各个颜色的范围，注意是从大到小还是从小到大：\n\n     <font color=\"#4664b9\">蓝色的范围：results\\[top\\][left ~ right - 1]</font>\n     <font color=\"#4f7633\">绿色的范围：results\\[top ~ bottom - 1\\][right]</font>\n\n     <font color=\"#b0871e\">黄色的范围：results\\[bottom\\][right ~ left + 1]</font>\n\n     <font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1]\\[left\\]</font>\n\n4.   每一轮过后，`top++`、`bottom--`、`left++`、`right--`\n\n5.   额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。\n\n### 代码\n\n``` go\nfunc generateMatrix(n int) [][]int {\n\ttop := 0\n\tbottom := n - 1\n\tleft := 0\n\tright := n - 1\n\tresult := make([][]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tresult[i] = make([]int, n)\n\t}\n\tnum := 1\n\tfor i := 0; i < n/2; i++ {\n\t\tfor j := left; j < right; j++ {\n\t\t\tresult[top][j] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := top; j < bottom; j++ {\n\t\t\tresult[j][right] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := right; j > left; j-- {\n\t\t\tresult[bottom][j] = num\n\t\t\tnum++\n\t\t}\n\t\tfor j := bottom; j > top; j-- {\n\t\t\tresult[j][left] = num\n\t\t\tnum++\n\t\t}\n\t\ttop++\n\t\tleft++\n\t\tright--\n\t\tbottom--\n\t}\n\tif n%2 == 1 {\n\t\tresult[n/2][n/2] = num\n\t}\n\treturn result\n}\n```\n\n## 小结\n\n-   帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。\n\n-   Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧\n\n    ``` go\n    result := make([][]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = make([]int, n)\n    }\n    ```\n\n    \n\n-   今天还有点别的事情，先写这么多，扩展题先不写了\n-   打卡第二天！\n","slug":"代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。","published":1,"updated":"2023-09-21T05:27:52.718Z","_id":"clmsqddff0000dcz8et3c42ky","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\"><a href=\"#代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\" class=\"headerlink\" title=\"代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\"></a>代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。</h1><h2 id=\"977-有序数组的平方\"><a href=\"#977-有序数组的平方\" class=\"headerlink\" title=\"977. 有序数组的平方\"></a>977. 有序数组的平方</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1QB4y1D7ep\">双指针法经典题目 | LeetCode：977.有序数组的平方</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为<code>O(nlog n)</code>。但是并不满足题目中要求的<code>O(n)</code>，因为有一个条件我们还没有用上：<strong>非递减顺序数组</strong>。看了题解之后才清楚更好的方法：<strong>双指针算法</strong>。</p>\n<p>由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sortedSquares</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tresult := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := right; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;  <span class=\"hljs-comment\">// i为result的索引</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[left]*nums[left] &lt; nums[right]*nums[right] &#123;  <span class=\"hljs-comment\">// right侧更大</span><br>\t\t\tresult[i] = nums[right] * nums[right]<br>\t\t\tright--<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// left侧更大</span><br>\t\t\tresult[i] = nums[left] * nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"209-长度最小的子数组\"><a href=\"#209-长度最小的子数组\" class=\"headerlink\" title=\"209.长度最小的子数组\"></a>209.长度最小的子数组</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1tZ4y1q7XE\">拿下滑动窗口！ | LeetCode 209 长度最小的子数组</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>此题需要找最短连续的一子数组，能想到的是 <strong>滑动窗口</strong> 算法。</p>\n<ol>\n<li>设最短子数组长度<code>minLength</code>为无穷大，题目规定长度最大为100000，<code>minLength=100001</code>即可。</li>\n<li>右侧不断向前，直至这一子数组的和大于 <code>target</code></li>\n<li>子序列和大于target之后，左侧也不断向前，直至子数组和小于 <code>target</code>，记录下此刻的序列长度，并与 <code>minLength</code> 进行比较。</li>\n<li>循环条件：当右侧到头，并且此时的子数组的和小于<code>target</code></li>\n<li>退出循环后，如果<code>minLength</code>依旧等于100001，说明不存在满足要求的子数组，则返回<code>0</code></li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(target <span class=\"hljs-type\">int</span>, nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-number\">0</span><br>\tsum := <span class=\"hljs-number\">0</span><br>\tminLength := <span class=\"hljs-number\">100001</span><br>\tlength := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &amp;&amp; right &lt;= length &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> sum &lt; target &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> right &lt; length &#123;<br>\t\t\t\tsum += nums[right]<br>\t\t\t\tright++<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> minLength &gt; right-left &#123;<br>\t\t\t\tminLength = right - left<br>\t\t\t&#125;<br>\t\t\tsum -= nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> minLength == <span class=\"hljs-number\">100001</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minLength<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"59-螺旋矩阵II\"><a href=\"#59-螺旋矩阵II\" class=\"headerlink\" title=\"59.螺旋矩阵II\"></a>59.螺旋矩阵II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/spiral-matrix-ii/\">leetcode链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1SL4y1N7mV/\">一入循环深似海 | LeetCode：59.螺旋矩阵II</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../images/image-20230921130326208.png\" alt=\"image-20230921130326208\"></p>\n<ol>\n<li><p>循环次数是<code>n/2</code></p>\n</li>\n<li><p>每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为<code>results</code></p>\n</li>\n<li><p>各个颜色的范围，注意是从大到小还是从小到大：</p>\n<p><font color=\"#4664b9\">蓝色的范围：results[top][left ~ right - 1]</font><br><font color=\"#4f7633\">绿色的范围：results[top ~ bottom - 1][right]</font></p>\n<p><font color=\"#b0871e\">黄色的范围：results[bottom][right ~ left + 1]</font></p>\n<p><font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1][left]</font></p>\n</li>\n<li><p>每一轮过后，<code>top++</code>、<code>bottom--</code>、<code>left++</code>、<code>right--</code></p>\n</li>\n<li><p>额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。</p>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generateMatrix</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\ttop := <span class=\"hljs-number\">0</span><br>\tbottom := n - <span class=\"hljs-number\">1</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := n - <span class=\"hljs-number\">1</span><br>\tresult := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>\t\tresult[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\t&#125;<br>\tnum := <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := left; j &lt; right; j++ &#123;<br>\t\t\tresult[top][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := top; j &lt; bottom; j++ &#123;<br>\t\t\tresult[j][right] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := right; j &gt; left; j-- &#123;<br>\t\t\tresult[bottom][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> j := bottom; j &gt; top; j-- &#123;<br>\t\t\tresult[j][left] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\ttop++<br>\t\tleft++<br>\t\tright--<br>\t\tbottom--<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> n%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> &#123;<br>\t\tresult[n/<span class=\"hljs-number\">2</span>][n/<span class=\"hljs-number\">2</span>] = num<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。</p>\n</li>\n<li><p>Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">result := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br><span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>    result[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>今天还有点别的事情，先写这么多，扩展题先不写了</p>\n</li>\n<li><p>打卡第二天！</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\"><a href=\"#代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\" class=\"headerlink\" title=\"代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\"></a>代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。</h1><h2 id=\"977-有序数组的平方\"><a href=\"#977-有序数组的平方\" class=\"headerlink\" title=\"977. 有序数组的平方\"></a>977. 有序数组的平方</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1QB4y1D7ep\">双指针法经典题目 | LeetCode：977.有序数组的平方</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为<code>O(nlog n)</code>。但是并不满足题目中要求的<code>O(n)</code>，因为有一个条件我们还没有用上：<strong>非递减顺序数组</strong>。看了题解之后才清楚更好的方法：<strong>双指针算法</strong>。</p>\n<p>由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sortedSquares</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tresult := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := right; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;  <span class=\"hljs-comment\">// i为result的索引</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[left]*nums[left] &lt; nums[right]*nums[right] &#123;  <span class=\"hljs-comment\">// right侧更大</span><br>\t\t\tresult[i] = nums[right] * nums[right]<br>\t\t\tright--<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// left侧更大</span><br>\t\t\tresult[i] = nums[left] * nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"209-长度最小的子数组\"><a href=\"#209-长度最小的子数组\" class=\"headerlink\" title=\"209.长度最小的子数组\"></a>209.长度最小的子数组</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1tZ4y1q7XE\">拿下滑动窗口！ | LeetCode 209 长度最小的子数组</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>此题需要找最短连续的一子数组，能想到的是 <strong>滑动窗口</strong> 算法。</p>\n<ol>\n<li>设最短子数组长度<code>minLength</code>为无穷大，题目规定长度最大为100000，<code>minLength=100001</code>即可。</li>\n<li>右侧不断向前，直至这一子数组的和大于 <code>target</code></li>\n<li>子序列和大于target之后，左侧也不断向前，直至子数组和小于 <code>target</code>，记录下此刻的序列长度，并与 <code>minLength</code> 进行比较。</li>\n<li>循环条件：当右侧到头，并且此时的子数组的和小于<code>target</code></li>\n<li>退出循环后，如果<code>minLength</code>依旧等于100001，说明不存在满足要求的子数组，则返回<code>0</code></li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(target <span class=\"hljs-type\">int</span>, nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-number\">0</span><br>\tsum := <span class=\"hljs-number\">0</span><br>\tminLength := <span class=\"hljs-number\">100001</span><br>\tlength := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &amp;&amp; right &lt;= length &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> sum &lt; target &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> right &lt; length &#123;<br>\t\t\t\tsum += nums[right]<br>\t\t\t\tright++<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> minLength &gt; right-left &#123;<br>\t\t\t\tminLength = right - left<br>\t\t\t&#125;<br>\t\t\tsum -= nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> minLength == <span class=\"hljs-number\">100001</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minLength<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"59-螺旋矩阵II\"><a href=\"#59-螺旋矩阵II\" class=\"headerlink\" title=\"59.螺旋矩阵II\"></a>59.螺旋矩阵II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/spiral-matrix-ii/\">leetcode链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1SL4y1N7mV/\">一入循环深似海 | LeetCode：59.螺旋矩阵II</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../images/image-20230921130326208.png\" alt=\"image-20230921130326208\"></p>\n<ol>\n<li><p>循环次数是<code>n/2</code></p>\n</li>\n<li><p>每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为<code>results</code></p>\n</li>\n<li><p>各个颜色的范围，注意是从大到小还是从小到大：</p>\n<p><font color=\"#4664b9\">蓝色的范围：results[top][left ~ right - 1]</font><br><font color=\"#4f7633\">绿色的范围：results[top ~ bottom - 1][right]</font></p>\n<p><font color=\"#b0871e\">黄色的范围：results[bottom][right ~ left + 1]</font></p>\n<p><font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1][left]</font></p>\n</li>\n<li><p>每一轮过后，<code>top++</code>、<code>bottom--</code>、<code>left++</code>、<code>right--</code></p>\n</li>\n<li><p>额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。</p>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generateMatrix</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\ttop := <span class=\"hljs-number\">0</span><br>\tbottom := n - <span class=\"hljs-number\">1</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := n - <span class=\"hljs-number\">1</span><br>\tresult := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>\t\tresult[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\t&#125;<br>\tnum := <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := left; j &lt; right; j++ &#123;<br>\t\t\tresult[top][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := top; j &lt; bottom; j++ &#123;<br>\t\t\tresult[j][right] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := right; j &gt; left; j-- &#123;<br>\t\t\tresult[bottom][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> j := bottom; j &gt; top; j-- &#123;<br>\t\t\tresult[j][left] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\ttop++<br>\t\tleft++<br>\t\tright--<br>\t\tbottom--<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> n%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> &#123;<br>\t\tresult[n/<span class=\"hljs-number\">2</span>][n/<span class=\"hljs-number\">2</span>] = num<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。</p>\n</li>\n<li><p>Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">result := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br><span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>    result[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>今天还有点别的事情，先写这么多，扩展题先不写了</p>\n</li>\n<li><p>打卡第二天！</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clmrgnuqx000073z85evcasph","category_id":"clmrgnur1000273z820g01ckp","_id":"clmrgnur2000773z83tdy7gw6"},{"post_id":"clmrgnur0000173z87v2h7et0","category_id":"clmrgnur2000473z8e2fqfwob","_id":"clmrgnur2000973z87ldgergc"},{"post_id":"clmsqddff0000dcz8et3c42ky","category_id":"clmrgnur2000473z8e2fqfwob","_id":"clmsqddfj0003dcz8bu52g1rg"}],"PostTag":[{"post_id":"clmrgnuqx000073z85evcasph","tag_id":"clmrgnur1000373z8c0xwe89a","_id":"clmrgnur2000673z8exyo0h36"},{"post_id":"clmrgnur0000173z87v2h7et0","tag_id":"clmrgnur2000573z89yy5f829","_id":"clmrgnur3000b73z8cuy0e4rn"},{"post_id":"clmrgnur0000173z87v2h7et0","tag_id":"clmrgnur2000873z8gp9jhq7q","_id":"clmrgnur3000c73z803aq3of9"},{"post_id":"clmrgnur0000173z87v2h7et0","tag_id":"clmrgnur3000a73z88c4tb1rj","_id":"clmrgnur3000d73z8hz0rep17"},{"post_id":"clmsqddff0000dcz8et3c42ky","tag_id":"clmrgnur2000573z89yy5f829","_id":"clmsqddfj0001dcz80xptaj8y"},{"post_id":"clmsqddff0000dcz8et3c42ky","tag_id":"clmrgnur2000873z8gp9jhq7q","_id":"clmsqddfj0002dcz816uoaxi3"},{"post_id":"clmsqddff0000dcz8et3c42ky","tag_id":"clmrgnur3000a73z88c4tb1rj","_id":"clmsqddfj0004dcz8b65t6k6j"}],"Tag":[{"name":"教程","_id":"clmrgnur1000373z8c0xwe89a"},{"name":"算法","_id":"clmrgnur2000573z89yy5f829"},{"name":"代码随想录","_id":"clmrgnur2000873z8gp9jhq7q"},{"name":"LeetCode","_id":"clmrgnur3000a73z88c4tb1rj"}]}}