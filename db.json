{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/image-20230920140818304.png","path":"images/image-20230920140818304.png","modified":0,"renderable":0},{"_id":"source/images/image-20230920152650727.png","path":"images/image-20230920152650727.png","modified":0,"renderable":0},{"_id":"source/images/image-20230920152855240.png","path":"images/image-20230920152855240.png","modified":0,"renderable":0},{"_id":"source/images/image-20230920153829216.png","path":"images/image-20230920153829216.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/images/image-20230921130326208.png","path":"images/image-20230921130326208.png","modified":0,"renderable":0},{"_id":"source/images/142_1.jpeg","path":"images/142_1.jpeg","modified":0,"renderable":0},{"_id":"source/images/160_1.png","path":"images/160_1.png","modified":0,"renderable":0},{"_id":"source/images/160_2.png","path":"images/160_2.png","modified":0,"renderable":0},{"_id":"source/images/160_3.png","path":"images/160_3.png","modified":0,"renderable":0},{"_id":"source/images/IMG_1372.PNG","path":"images/IMG_1372.PNG","modified":0,"renderable":0},{"_id":"source/images/IMG_1373.PNG","path":"images/IMG_1373.PNG","modified":0,"renderable":0},{"_id":"source/images/IMG_2D422EDB0DFC-1.jpeg","path":"images/IMG_2D422EDB0DFC-1.jpeg","modified":0,"renderable":0},{"_id":"source/images/QQ20230923-221152.png","path":"images/QQ20230923-221152.png","modified":0,"renderable":0},{"_id":"source/images/128卡住.png","path":"images/128卡住.png","modified":0,"renderable":0},{"_id":"source/images/26字母.png","path":"images/26字母.png","modified":0,"renderable":0},{"_id":"source/images/26随机字母报错.png","path":"images/26随机字母报错.png","modified":0,"renderable":0},{"_id":"source/images/3000多长度.png","path":"images/3000多长度.png","modified":0,"renderable":0},{"_id":"source/images/6次扩增.png","path":"images/6次扩增.png","modified":0,"renderable":0},{"_id":"source/images/hashST.png","path":"images/hashST.png","modified":0,"renderable":0},{"_id":"source/images/java_map_debug.jpg","path":"images/java_map_debug.jpg","modified":0,"renderable":0},{"_id":"source/images/map源码.png","path":"images/map源码.png","modified":0,"renderable":0},{"_id":"source/images/初步解决.png","path":"images/初步解决.png","modified":0,"renderable":0},{"_id":"source/images/展示代码.png","path":"images/展示代码.png","modified":0,"renderable":0},{"_id":"source/images/断点调试.png","path":"images/断点调试.png","modified":0,"renderable":0},{"_id":"source/images/最后一个127.png","path":"images/最后一个127.png","modified":0,"renderable":0},{"_id":"source/images/短测试用例.png","path":"images/短测试用例.png","modified":0,"renderable":0},{"_id":"source/images/第一个127.png","path":"images/第一个127.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/代码随想录算法训练营第一天-704-二分查找、27-移除元素。.md","hash":"23069878aedb4d5c4a75cb581877e123d1c5c0dc","modified":1695197231012},{"_id":"source/_posts/.DS_Store","hash":"2eddfa66c820a89f817eaad660f597dcf22b4b74","modified":1695649391400},{"_id":"source/.DS_Store","hash":"7dca41f0e5dd97f01b02e1bfe17c4c765ce08862","modified":1695651928158},{"_id":"source/_posts/搭建博客.md","hash":"8c4e1e9bfdcc15d9882e016ace90f1d9c9fd0794","modified":1695197231011},{"_id":"source/images/image-20230920140818304.png","hash":"bdfe8feaf3bda356eff067e271baa909f1d2e03c","modified":1695190098306},{"_id":"source/images/image-20230920152855240.png","hash":"ca5682d47af90699a8c373f0f39c81615458f540","modified":1695194935241},{"_id":"source/images/image-20230920153829216.png","hash":"86f2ec92f9ec6370210701ebd7faa8d1a3db7e4d","modified":1695195509217},{"_id":"source/images/image-20230920152650727.png","hash":"e826a246f6a13fe01f2bfd7c51d4408b327dcda2","modified":1695194810729},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1695132290000},{"_id":"themes/fluid/_config.yml","hash":"17101716317566968f77a20c93a0f224dff1b147","modified":1695136568000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1695132290000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1695132290000},{"_id":"themes/fluid/package.json","hash":"41983970c0977b3c626c3f1e3c714cf78ac6a04e","modified":1695132290000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1695132290000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1695132290000},{"_id":"themes/fluid/README_en.md","hash":"49541d4ec48c4b517c5b3fe17a2e92d87090d007","modified":1695132290000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1695132290000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1695132290000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1695132290000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1695132290000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1695132290000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1695132290000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1695132290000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1695132290000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1695132290000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1695132290000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1695132290000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1695132290000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1695132290000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1695132290000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1695132290000},{"_id":"themes/fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1695132290000},{"_id":"themes/fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1695132290000},{"_id":"themes/fluid/README.md","hash":"088496f29af0e946055ebd781fa312685335139c","modified":1695132290000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1695132290000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1695132290000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1695132290000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1695132290000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1695132290000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1695132290000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1695132290000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1695132290000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1695132290000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1695132290000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1695132290000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1695132290000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1695132290000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1695132290000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1695132290000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1695132290000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1695132290000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1695132290000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1695132290000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1695132290000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1695132290000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1695132290000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1695132290000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1695132290000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1695132290000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1695132290000},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1695132290000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1695132290000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1695132290000},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1695132290000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1695132290000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1695132290000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1695132290000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1695132290000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1695132290000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1695132290000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1695132290000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1695132290000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1695132290000},{"_id":"public/local-search.xml","hash":"0be8095c64557d7af9101bb4e538bfee87e12224","modified":1695655609637},{"_id":"public/archives/index.html","hash":"3d53a42bd98c48a5c047ffe01cbd04857057daa1","modified":1695655200485},{"_id":"public/archives/2023/index.html","hash":"fc4965d7760111f8616fc347057d107063da1c35","modified":1695655200485},{"_id":"public/archives/2023/09/index.html","hash":"ed17ebe00c0d1959aa2c78a25cf2290cdb8f30b5","modified":1695655200485},{"_id":"public/categories/搭建环境/index.html","hash":"983140c1e350f69892ce241e3da0b34d24dea15b","modified":1695197230839},{"_id":"public/categories/刷题/index.html","hash":"2fd79f7398f5bbf83a72250ec9b0db8b16e4d435","modified":1695615513448},{"_id":"public/tags/教程/index.html","hash":"6edf9d11ab8e8cb0f8ad1646cd6a79e75a833a46","modified":1695197230839},{"_id":"public/tags/算法/index.html","hash":"e6efe2f18201d6ee54bdd2429e991ec0afb61471","modified":1695615513448},{"_id":"public/tags/代码随想录/index.html","hash":"358e46ed7cfe6c6a9ee9d50d856239414326bfb7","modified":1695615513448},{"_id":"public/tags/LeetCode/index.html","hash":"d542fbd6a24e4d39374238c63a91c1025f54bbb9","modified":1695655200485},{"_id":"public/post/7b6fd36a.html","hash":"86a6484be7cafc64e43c09e41e7042c5af623411","modified":1695274004002},{"_id":"public/post/5c83b0d3.html","hash":"a4d1ac20061c43c5b8d8cf0d01bd1a4758e9b963","modified":1695274004002},{"_id":"public/404.html","hash":"8e2e7fbdad623123f803ba1c7f4bf5d5a2cd632d","modified":1695197230839},{"_id":"public/index.html","hash":"1ead1e57fd0aab6c0e4b05db1b9a77db00488a4b","modified":1695655609637},{"_id":"public/links/index.html","hash":"781d2f12eec5a1cadbfe5ba1264eeab6c91f1f61","modified":1695197230839},{"_id":"public/categories/index.html","hash":"cacb9ff0f8061d67602d0c745b77ee9e66d0c568","modified":1695655200485},{"_id":"public/tags/index.html","hash":"edebea03400b5747fe1097484ea9f0b801d6b122","modified":1695655200485},{"_id":"public/images/image-20230920153829216.png","hash":"86f2ec92f9ec6370210701ebd7faa8d1a3db7e4d","modified":1695197230839},{"_id":"public/images/image-20230920152855240.png","hash":"ca5682d47af90699a8c373f0f39c81615458f540","modified":1695197230839},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1695197230839},{"_id":"public/images/image-20230920140818304.png","hash":"bdfe8feaf3bda356eff067e271baa909f1d2e03c","modified":1695197230839},{"_id":"public/images/image-20230920152650727.png","hash":"e826a246f6a13fe01f2bfd7c51d4408b327dcda2","modified":1695197230839},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1695197230839},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1695197230839},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1695197230839},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1695197230839},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1695197230839},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1695197230839},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1695197230839},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1695197230839},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1695197230839},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1695197230839},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1695197230839},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1695197230839},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1695197230839},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1695197230839},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1695197230839},{"_id":"public/css/main.css","hash":"526a4522eb54bb51772f51fb98295dc4fe03429f","modified":1695197230839},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1695197230839},{"_id":"source/_posts/代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。.md","hash":"5e6268c1cf99c396590da27107a073a6e7684c8d","modified":1695274072718},{"_id":"source/images/image-20230921130326208.png","hash":"865d4ca858ce0621a307e8d1dc7f5c25155abee9","modified":1695272606210},{"_id":"public/post/b79a1ea.html","hash":"344d86d0ecd24410f2861c7a7e7ad8d2beaf192b","modified":1695482261180},{"_id":"public/images/image-20230921130326208.png","hash":"865d4ca858ce0621a307e8d1dc7f5c25155abee9","modified":1695274004002},{"_id":"source/_posts/代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。.md","hash":"107f677152d7272d12ba9306625278d2cd1d60c2","modified":1695475875582},{"_id":"source/images/.DS_Store","hash":"04705cf34dad8c0d82b2fdb9eb68a2f9e8578121","modified":1695651914339},{"_id":"source/_posts/代码随想录算法训练营第四天 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。.md","hash":"a7e5090f52690c26aef0aa0b8c84e0267034eac7","modified":1695482493498},{"_id":"source/images/160_2.png","hash":"3d3830ce2c2e0944091fe48b20c24654eb0143d9","modified":1695479155340},{"_id":"source/images/160_1.png","hash":"e9db3e4c052ea224f9a661b699f5bb80de937e3b","modified":1695479126871},{"_id":"source/images/160_3.png","hash":"ef60d0dfdd231db0b81d36ee2e3359340ff7a596","modified":1695479177166},{"_id":"source/images/QQ20230923-221152.png","hash":"110563a2562c75533359dc832bcf71ab1cb7d156","modified":1695478324074},{"_id":"source/images/IMG_1372.PNG","hash":"7375e14c158d95e0ec6919f6762fa1c04795dc83","modified":1695477306818},{"_id":"source/images/IMG_1373.PNG","hash":"f19763b2036f15bef073a6779603e43690a006d8","modified":1695477277819},{"_id":"source/images/IMG_2D422EDB0DFC-1.jpeg","hash":"bfeb9a29caec870c972de6b0b94c578ac28cb2c5","modified":1695477944000},{"_id":"source/images/142_1.jpeg","hash":"3a06e3ec4e13da1586faa781edc623e7a7269372","modified":1695480741000},{"_id":"public/post/bd069431.html","hash":"7fc248a3f67e9c64dcd369c262327a07bf353022","modified":1695482261180},{"_id":"public/post/b4e3c0b1.html","hash":"d3851d66a11d5b6328b5320102ae1ea970df640f","modified":1695615513448},{"_id":"public/images/QQ20230923-221152.png","hash":"110563a2562c75533359dc832bcf71ab1cb7d156","modified":1695482261180},{"_id":"public/images/160_2.png","hash":"3d3830ce2c2e0944091fe48b20c24654eb0143d9","modified":1695482261180},{"_id":"public/images/IMG_1372.PNG","hash":"7375e14c158d95e0ec6919f6762fa1c04795dc83","modified":1695482261180},{"_id":"public/images/IMG_1373.PNG","hash":"f19763b2036f15bef073a6779603e43690a006d8","modified":1695482261180},{"_id":"public/images/160_1.png","hash":"e9db3e4c052ea224f9a661b699f5bb80de937e3b","modified":1695482261180},{"_id":"public/images/160_3.png","hash":"ef60d0dfdd231db0b81d36ee2e3359340ff7a596","modified":1695482261180},{"_id":"public/images/IMG_2D422EDB0DFC-1.jpeg","hash":"bfeb9a29caec870c972de6b0b94c578ac28cb2c5","modified":1695482261180},{"_id":"public/images/142_1.jpeg","hash":"3a06e3ec4e13da1586faa781edc623e7a7269372","modified":1695482261180},{"_id":"source/_posts/代码随想录算法训练营第五天 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。.md","hash":"9969c22501407cab197da7682922aed8fbd205f6","modified":1695650879806},{"_id":"public/post/20198d61.html","hash":"36783f82bcfc5316b2122cd6001eee7dcfeef2e4","modified":1695655200485},{"_id":"source/_posts/【debug】Java中的map比较.md","hash":"78d73f92a228fec0a0b36d949ebcd2197008cdb7","modified":1695655603456},{"_id":"source/images/map源码.png","hash":"75e0f8380b27985024419f58e48b09bc1c246bc6","modified":1695654607151},{"_id":"source/images/128卡住.png","hash":"9a61aa70b017f4b7d2d05e42b6cd4da2ab3538f1","modified":1695654120359},{"_id":"source/images/26字母.png","hash":"29271a6f5b3e8ce3c1c52c36e2bca476ab262257","modified":1695653163095},{"_id":"source/images/26随机字母报错.png","hash":"376d09c5dcfd15932ce7a5174c3a16e39e8490fc","modified":1695654391249},{"_id":"source/images/3000多长度.png","hash":"d5a112b8b3478da1ce432aa6d34943ddfa406400","modified":1695653498712},{"_id":"source/images/6次扩增.png","hash":"d12c74116de8b3f08908decb8855ea21b0ab9723","modified":1695653740769},{"_id":"source/images/hashST.png","hash":"92bd46ab15de3ac4a65280be6f4d352bb07a68d4","modified":1695651994489},{"_id":"source/images/初步解决.png","hash":"0ec7279cade8f6a28dea8f547defa86b75b46886","modified":1695652590873},{"_id":"source/images/展示代码.png","hash":"5a52e895d150af19646cb53503bf0bd1216bf8e6","modified":1695654027396},{"_id":"source/images/断点调试.png","hash":"fa347933231e862d859626149f887240b2ebe3ec","modified":1695652276547},{"_id":"source/images/最后一个127.png","hash":"1f4a817e01a2978270c6ec4785d685e9f4bd13ae","modified":1695654758436},{"_id":"source/images/短测试用例.png","hash":"ae307f3a366450efab4e79c9bcca368729169a1c","modified":1695652929890},{"_id":"source/images/第一个127.png","hash":"fbf9261d722577f156e02cfd1a124259312840c8","modified":1695654746801},{"_id":"source/images/java_map_debug.jpg","hash":"02ea44bee15523d5dbebc1de2ec107a7ed6fce1c","modified":1695645182516},{"_id":"public/categories/Debug/index.html","hash":"e953223b7a0a165bbc209bf7c26061dda0da9fe6","modified":1695655200485},{"_id":"public/tags/Java/index.html","hash":"515c9770a0b03e2802bb328e4ba35c6596c2aeb7","modified":1695655200485},{"_id":"public/tags/Debug/index.html","hash":"dc8c55f2a21f3050fb0ca7666091decd35252fd3","modified":1695655200485},{"_id":"public/post/ad5be9d7.html","hash":"27c91d310a1de21d173eb39a7984fa5b4d0b36d6","modified":1695655609637},{"_id":"public/images/map源码.png","hash":"75e0f8380b27985024419f58e48b09bc1c246bc6","modified":1695655200485},{"_id":"public/images/26字母.png","hash":"29271a6f5b3e8ce3c1c52c36e2bca476ab262257","modified":1695655200485},{"_id":"public/images/128卡住.png","hash":"9a61aa70b017f4b7d2d05e42b6cd4da2ab3538f1","modified":1695655200485},{"_id":"public/images/hashST.png","hash":"92bd46ab15de3ac4a65280be6f4d352bb07a68d4","modified":1695655200485},{"_id":"public/images/6次扩增.png","hash":"d12c74116de8b3f08908decb8855ea21b0ab9723","modified":1695655200485},{"_id":"public/images/26随机字母报错.png","hash":"376d09c5dcfd15932ce7a5174c3a16e39e8490fc","modified":1695655200485},{"_id":"public/images/3000多长度.png","hash":"d5a112b8b3478da1ce432aa6d34943ddfa406400","modified":1695655200485},{"_id":"public/images/初步解决.png","hash":"0ec7279cade8f6a28dea8f547defa86b75b46886","modified":1695655200485},{"_id":"public/images/展示代码.png","hash":"5a52e895d150af19646cb53503bf0bd1216bf8e6","modified":1695655200485},{"_id":"public/images/短测试用例.png","hash":"ae307f3a366450efab4e79c9bcca368729169a1c","modified":1695655200485},{"_id":"public/images/断点调试.png","hash":"fa347933231e862d859626149f887240b2ebe3ec","modified":1695655200485},{"_id":"public/images/最后一个127.png","hash":"1f4a817e01a2978270c6ec4785d685e9f4bd13ae","modified":1695655200485},{"_id":"public/images/第一个127.png","hash":"fbf9261d722577f156e02cfd1a124259312840c8","modified":1695655200485},{"_id":"public/images/java_map_debug.jpg","hash":"02ea44bee15523d5dbebc1de2ec107a7ed6fce1c","modified":1695655200485}],"Category":[{"name":"搭建环境","_id":"clmrgnur1000273z820g01ckp"},{"name":"刷题","_id":"clmrgnur2000473z8e2fqfwob"},{"name":"Debug","_id":"clmz1bqj000015kz85hs0hh7a"}],"Data":[],"Page":[],"Post":[{"title":"搭建博客","abbrlink":"5c83b0d3","date":"2023-09-19T15:33:25.000Z","_content":"\n# 搭建Hexo博客\n\n根据程序羊的视频搭建而成，整理下步骤和与当时不同之处\n\nhttps://www.bilibili.com/video/BV1Yb411a7ty/\n\n## 1. 安装node.js与npm\n\n略。\n\n有“魔法”的不需要下载`cnpm`包，此后以`npm`为例\n\n## 2. 安装Hexo\n\n`npm install -g hexo-cli`\n\n`hexo -v `查看是否安装成功\n\n## 3. 选址\n\n在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 `blog` ，并且看做根目录），在该路径下开始操作。\n\n- 执行 `hexo init` 初始化，`Linux\\MacOS` 需要 `sudo`权限\n\n- 生成一些文件与文件夹，一些配置在文件 `blog/_config.yml` 中    \n\n## 4. 部署至GitHub的准备工作\n\n1. 在该路径下执行命令: `npm install --save-deployer-git` 安装相关工具\n2. 在GitHub新建仓库，仓库名必须为: `GitHub的用户名.github.io`\n3. 更改`_config.yml`文件中的内容(在最后)：\n\n    ```yaml\n    deploy:\n      type: git\n      repo: git仓库地址\n      branch: master\n    ```\n4. GitHub更新了认证方式，具体操作可以参考这一篇[博客](https://blog.csdn.net/weixin_63031041/article/details/128731242)\n\n## 5. 相关命令\n\n1. 运行(本地预览): `hexo s`\n2. 写新的博客: `hexo n \"文件名\"`\n3. 写好之后生成静态网站: `hexo g`\n4. 清空第三步生成的文件: `hexo clean`\n5. 推送至GitHub(会有一定的延迟): `hexo d`\n\n    使用“魔法”后，GitHub需要设置代理\n\n    `git config --global http.proxy http://127.0.0.1:port`\n\n    `git config --global https.proxy https://127.0.0.1:port`\n\n    \n\n## 6. 更换主题\n\n可以直接在搜索引擎搜索相关关键字，例如`hexo 主题`，以我现在使用的`Fluid`为例\n\nGitHub地址: https://github.com/fluid-dev/hexo-theme-fluid/tree/master\n\n1. 在博客目录下克隆, 至`blog/themes`文件夹下: `git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid`\n2. 更改`blog/_config.yml` 第100行，将`theme: `后改为`fluid`\n3. 更多具体配置参考官方文档: https://hexo.fluid-dev.com/docs/guide/\n4. 大段文字需要换行需要使用`HTML`语法\n\n## 7. 其他\n\n这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。\n\n参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。\n\n很喜欢郭帆导演的一句话，让我放在了首页开屏\n\n==如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！==\n\n","source":"_posts/搭建博客.md","raw":"---\ntitle: 搭建博客\ntags:\n  - 教程\ncategories: 搭建环境\nabbrlink: 5c83b0d3\ndate: 2023-09-19 23:33:25\n---\n\n# 搭建Hexo博客\n\n根据程序羊的视频搭建而成，整理下步骤和与当时不同之处\n\nhttps://www.bilibili.com/video/BV1Yb411a7ty/\n\n## 1. 安装node.js与npm\n\n略。\n\n有“魔法”的不需要下载`cnpm`包，此后以`npm`为例\n\n## 2. 安装Hexo\n\n`npm install -g hexo-cli`\n\n`hexo -v `查看是否安装成功\n\n## 3. 选址\n\n在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 `blog` ，并且看做根目录），在该路径下开始操作。\n\n- 执行 `hexo init` 初始化，`Linux\\MacOS` 需要 `sudo`权限\n\n- 生成一些文件与文件夹，一些配置在文件 `blog/_config.yml` 中    \n\n## 4. 部署至GitHub的准备工作\n\n1. 在该路径下执行命令: `npm install --save-deployer-git` 安装相关工具\n2. 在GitHub新建仓库，仓库名必须为: `GitHub的用户名.github.io`\n3. 更改`_config.yml`文件中的内容(在最后)：\n\n    ```yaml\n    deploy:\n      type: git\n      repo: git仓库地址\n      branch: master\n    ```\n4. GitHub更新了认证方式，具体操作可以参考这一篇[博客](https://blog.csdn.net/weixin_63031041/article/details/128731242)\n\n## 5. 相关命令\n\n1. 运行(本地预览): `hexo s`\n2. 写新的博客: `hexo n \"文件名\"`\n3. 写好之后生成静态网站: `hexo g`\n4. 清空第三步生成的文件: `hexo clean`\n5. 推送至GitHub(会有一定的延迟): `hexo d`\n\n    使用“魔法”后，GitHub需要设置代理\n\n    `git config --global http.proxy http://127.0.0.1:port`\n\n    `git config --global https.proxy https://127.0.0.1:port`\n\n    \n\n## 6. 更换主题\n\n可以直接在搜索引擎搜索相关关键字，例如`hexo 主题`，以我现在使用的`Fluid`为例\n\nGitHub地址: https://github.com/fluid-dev/hexo-theme-fluid/tree/master\n\n1. 在博客目录下克隆, 至`blog/themes`文件夹下: `git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid`\n2. 更改`blog/_config.yml` 第100行，将`theme: `后改为`fluid`\n3. 更多具体配置参考官方文档: https://hexo.fluid-dev.com/docs/guide/\n4. 大段文字需要换行需要使用`HTML`语法\n\n## 7. 其他\n\n这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。\n\n参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。\n\n很喜欢郭帆导演的一句话，让我放在了首页开屏\n\n==如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！==\n\n","slug":"搭建博客","published":1,"updated":"2023-09-20T08:07:11.011Z","_id":"clmrgnuqx000073z85evcasph","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"搭建Hexo博客\"><a href=\"#搭建Hexo博客\" class=\"headerlink\" title=\"搭建Hexo博客\"></a>搭建Hexo博客</h1><p>根据程序羊的视频搭建而成，整理下步骤和与当时不同之处</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Yb411a7ty/\">https://www.bilibili.com/video/BV1Yb411a7ty/</a></p>\n<h2 id=\"1-安装node-js与npm\"><a href=\"#1-安装node-js与npm\" class=\"headerlink\" title=\"1. 安装node.js与npm\"></a>1. 安装node.js与npm</h2><p>略。</p>\n<p>有“魔法”的不需要下载<code>cnpm</code>包，此后以<code>npm</code>为例</p>\n<h2 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2. 安装Hexo\"></a>2. 安装Hexo</h2><p><code>npm install -g hexo-cli</code></p>\n<p><code>hexo -v </code>查看是否安装成功</p>\n<h2 id=\"3-选址\"><a href=\"#3-选址\" class=\"headerlink\" title=\"3. 选址\"></a>3. 选址</h2><p>在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 <code>blog</code> ，并且看做根目录），在该路径下开始操作。</p>\n<ul>\n<li><p>执行 <code>hexo init</code> 初始化，<code>Linux\\MacOS</code> 需要 <code>sudo</code>权限</p>\n</li>\n<li><p>生成一些文件与文件夹，一些配置在文件 <code>blog/_config.yml</code> 中</p>\n</li>\n</ul>\n<h2 id=\"4-部署至GitHub的准备工作\"><a href=\"#4-部署至GitHub的准备工作\" class=\"headerlink\" title=\"4. 部署至GitHub的准备工作\"></a>4. 部署至GitHub的准备工作</h2><ol>\n<li><p>在该路径下执行命令: <code>npm install --save-deployer-git</code> 安装相关工具</p>\n</li>\n<li><p>在GitHub新建仓库，仓库名必须为: <code>GitHub的用户名.github.io</code></p>\n</li>\n<li><p>更改<code>_config.yml</code>文件中的内容(在最后)：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">git仓库地址</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span><br></code></pre></td></tr></table></figure></li>\n<li><p>GitHub更新了认证方式，具体操作可以参考这一篇<a href=\"https://blog.csdn.net/weixin_63031041/article/details/128731242\">博客</a></p>\n</li>\n</ol>\n<h2 id=\"5-相关命令\"><a href=\"#5-相关命令\" class=\"headerlink\" title=\"5. 相关命令\"></a>5. 相关命令</h2><ol>\n<li><p>运行(本地预览): <code>hexo s</code></p>\n</li>\n<li><p>写新的博客: <code>hexo n &quot;文件名&quot;</code></p>\n</li>\n<li><p>写好之后生成静态网站: <code>hexo g</code></p>\n</li>\n<li><p>清空第三步生成的文件: <code>hexo clean</code></p>\n</li>\n<li><p>推送至GitHub(会有一定的延迟): <code>hexo d</code></p>\n<p> 使用“魔法”后，GitHub需要设置代理</p>\n<p> <code>git config --global http.proxy http://127.0.0.1:port</code></p>\n<p> <code>git config --global https.proxy https://127.0.0.1:port</code></p>\n</li>\n</ol>\n<h2 id=\"6-更换主题\"><a href=\"#6-更换主题\" class=\"headerlink\" title=\"6. 更换主题\"></a>6. 更换主题</h2><p>可以直接在搜索引擎搜索相关关键字，例如<code>hexo 主题</code>，以我现在使用的<code>Fluid</code>为例</p>\n<p>GitHub地址: <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/tree/master\">https://github.com/fluid-dev/hexo-theme-fluid/tree/master</a></p>\n<ol>\n<li>在博客目录下克隆, 至<code>blog/themes</code>文件夹下: <code>git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid</code></li>\n<li>更改<code>blog/_config.yml</code> 第100行，将<code>theme: </code>后改为<code>fluid</code></li>\n<li>更多具体配置参考官方文档: <a href=\"https://hexo.fluid-dev.com/docs/guide/\">https://hexo.fluid-dev.com/docs/guide/</a></li>\n<li>大段文字需要换行需要使用<code>HTML</code>语法</li>\n</ol>\n<h2 id=\"7-其他\"><a href=\"#7-其他\" class=\"headerlink\" title=\"7. 其他\"></a>7. 其他</h2><p>这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。</p>\n<p>参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。</p>\n<p>很喜欢郭帆导演的一句话，让我放在了首页开屏</p>\n<p>&#x3D;&#x3D;如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！&#x3D;&#x3D;</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建Hexo博客\"><a href=\"#搭建Hexo博客\" class=\"headerlink\" title=\"搭建Hexo博客\"></a>搭建Hexo博客</h1><p>根据程序羊的视频搭建而成，整理下步骤和与当时不同之处</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Yb411a7ty/\">https://www.bilibili.com/video/BV1Yb411a7ty/</a></p>\n<h2 id=\"1-安装node-js与npm\"><a href=\"#1-安装node-js与npm\" class=\"headerlink\" title=\"1. 安装node.js与npm\"></a>1. 安装node.js与npm</h2><p>略。</p>\n<p>有“魔法”的不需要下载<code>cnpm</code>包，此后以<code>npm</code>为例</p>\n<h2 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2. 安装Hexo\"></a>2. 安装Hexo</h2><p><code>npm install -g hexo-cli</code></p>\n<p><code>hexo -v </code>查看是否安装成功</p>\n<h2 id=\"3-选址\"><a href=\"#3-选址\" class=\"headerlink\" title=\"3. 选址\"></a>3. 选址</h2><p>在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 <code>blog</code> ，并且看做根目录），在该路径下开始操作。</p>\n<ul>\n<li><p>执行 <code>hexo init</code> 初始化，<code>Linux\\MacOS</code> 需要 <code>sudo</code>权限</p>\n</li>\n<li><p>生成一些文件与文件夹，一些配置在文件 <code>blog/_config.yml</code> 中</p>\n</li>\n</ul>\n<h2 id=\"4-部署至GitHub的准备工作\"><a href=\"#4-部署至GitHub的准备工作\" class=\"headerlink\" title=\"4. 部署至GitHub的准备工作\"></a>4. 部署至GitHub的准备工作</h2><ol>\n<li><p>在该路径下执行命令: <code>npm install --save-deployer-git</code> 安装相关工具</p>\n</li>\n<li><p>在GitHub新建仓库，仓库名必须为: <code>GitHub的用户名.github.io</code></p>\n</li>\n<li><p>更改<code>_config.yml</code>文件中的内容(在最后)：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">git仓库地址</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span><br></code></pre></td></tr></table></figure></li>\n<li><p>GitHub更新了认证方式，具体操作可以参考这一篇<a href=\"https://blog.csdn.net/weixin_63031041/article/details/128731242\">博客</a></p>\n</li>\n</ol>\n<h2 id=\"5-相关命令\"><a href=\"#5-相关命令\" class=\"headerlink\" title=\"5. 相关命令\"></a>5. 相关命令</h2><ol>\n<li><p>运行(本地预览): <code>hexo s</code></p>\n</li>\n<li><p>写新的博客: <code>hexo n &quot;文件名&quot;</code></p>\n</li>\n<li><p>写好之后生成静态网站: <code>hexo g</code></p>\n</li>\n<li><p>清空第三步生成的文件: <code>hexo clean</code></p>\n</li>\n<li><p>推送至GitHub(会有一定的延迟): <code>hexo d</code></p>\n<p> 使用“魔法”后，GitHub需要设置代理</p>\n<p> <code>git config --global http.proxy http://127.0.0.1:port</code></p>\n<p> <code>git config --global https.proxy https://127.0.0.1:port</code></p>\n</li>\n</ol>\n<h2 id=\"6-更换主题\"><a href=\"#6-更换主题\" class=\"headerlink\" title=\"6. 更换主题\"></a>6. 更换主题</h2><p>可以直接在搜索引擎搜索相关关键字，例如<code>hexo 主题</code>，以我现在使用的<code>Fluid</code>为例</p>\n<p>GitHub地址: <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/tree/master\">https://github.com/fluid-dev/hexo-theme-fluid/tree/master</a></p>\n<ol>\n<li>在博客目录下克隆, 至<code>blog/themes</code>文件夹下: <code>git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid</code></li>\n<li>更改<code>blog/_config.yml</code> 第100行，将<code>theme: </code>后改为<code>fluid</code></li>\n<li>更多具体配置参考官方文档: <a href=\"https://hexo.fluid-dev.com/docs/guide/\">https://hexo.fluid-dev.com/docs/guide/</a></li>\n<li>大段文字需要换行需要使用<code>HTML</code>语法</li>\n</ol>\n<h2 id=\"7-其他\"><a href=\"#7-其他\" class=\"headerlink\" title=\"7. 其他\"></a>7. 其他</h2><p>这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。</p>\n<p>参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。</p>\n<p>很喜欢郭帆导演的一句话，让我放在了首页开屏</p>\n<p>&#x3D;&#x3D;如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！&#x3D;&#x3D;</p>\n"},{"title":"代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。","abbrlink":"7b6fd36a","date":"2023-09-20T07:41:36.000Z","_content":"\n# 代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\n\n\n\n## 704. 二分查找\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/binary-search/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0704.二分查找.html)\n>\n>   视频讲解：[手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找](https://www.bilibili.com/video/BV1fA4y1o715)\n>\n>   状态：AC\n\n### 思路\n\n看了卡哥的文档，才注意到二分查找也有两种写法。”要**熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法**“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。\n\n### 代码\n\n``` go\nfunc search(nums []int, target int) int {\n\t// 左闭右闭写法\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid - 1\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n\n```\n\n\n\n``` go\nfunc search1(nums []int, target int) int {\n\t// 左闭右开写法\n\tleft := 0\n\tright := len(nums)\n\tvar mid int\n\tfor left < right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n## 27. 移除元素\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/remove-element/ )\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0027.移除元素.html)\n>\n>   视频讲解：[数组中移除元素并不容易！ | LeetCode：27. 移除元素](https://www.bilibili.com/video/BV12A4y1Z7LP )\n>\n>   状态：AC\n\n### 思路\n\n第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 `O(1)` 额外空间并 **原地修改输入数组**“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为`O(n^2)`。再向下看到了示例：\n\n**示例 1：**\n\n\n> 输入：nums = [3,2,2,3], val = 3\n> 输出：2, nums = [2,2]\n> 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n\n\n**示例 2：**\n\n\n> 输入：nums = [0,1,2,2,3,0,4,2], val = 2\n> 输出：5, nums = [0,1,4,0,3]\n> 解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n\n看到这里大概理解了，想到的解法是双指针，方法也有两种。\n\n#### 方法一：\n\n1.   左右指针均从头开始，右指针每次向前一步\n2.   若右指针的值为`val`，那么跳过；否则将右指针的值给左指针，左指针++\n3.   返回左指针所在的索引\n\n#### 方法二：\n\n1.   左指针从前开始，右指针从后开始，左指针找`val`，右指针找非`val`\n2.   右指针的值给左指针\n3.   返回左指针所在的索引\n\n### 代码\n\n``` go\n// 方法一\nfunc removeElement(nums []int, val int) int {\n\tn := len(nums)\n\tleft := 0\n\tfor right := 0; right < n; right++ {\n\t\tif nums[right] != val {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn left\n}\n```\n\n``` go\n// 方法二\nfunc removeElement(nums []int, val int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tfor left <= right {\n\t\t\tif nums[left] == val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tleft++\n\t\t\t}\n\t\t}\n\t\tfor left <= right {\n\t\t\tif nums[right] != val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tright--\n\t\t\t}\n\t\t}\n\t\tif left < right {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t\tright--\n\t\t}\n\t}\n\treturn left\n}\n```\n\n方法二还是的边界条件有点绕的，自己把自己绕进去了\n\n![绕晕了的边界](../images/image-20230920140818304.png)\n\n\n\n## 附加题 35. 搜索插入位置\n\n>   题目链接：[35. 搜索插入位置](https://leetcode.cn/problems/search-insert-position/)\n>\n>   状态：AC\n\n### 思路\n\n查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。\n\n### 代码\n\n``` go\nfunc searchInsert(nums []int, target int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] == target {\n\t\t\treturn mid\n\t\t} else if nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid - 1\n\t\t}\n\t}\n\treturn left\n}\n```\n\n## 附加题34.在排序数组中查找元素的第一个和最后一个位置\n\n>   题目链接：[34.在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/)\n>\n>   状态：AC\n\n### 思路\n\n通过两次二分查找找到`target`在数组中的起始和结束位置，实现了函数`binary`可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：\n\n-   起始：需要判断`num[mid-1]<target`，或者`mid==0`（第0个元素就是起始位置），为了保证不越界，需要先判断`mid==0`的情况\n-   结束：需要判断`mid == len(nums)-1`（最后一个元素是结束位置），或者`nums[mid+1] > target`\n\n如果没有找到该元素，则返回`-1`。由于起始和介绍条件判断有些不同，`binary`函数中使用了`flag`来区分是进行起始元素查找还是结束元素查找的条件。若是`true`则为查找起始元素\n\n### 代码\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n\tresult := []int{}\n    var temp int\n    temp = binary(nums, target, true)\n    if temp == -1 {  // 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行\n        return []int{-1, -1}\n    } else {\n\t\tresult = append(result, temp)\n        result = append(result, binary(nums, target, false))\n        return result\n    }\n}\nfunc binary(nums []int, target int, flag bool) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tmid := left + (right-left)/2\n\t\tif flag {\n\t\t\tif nums[mid] == target && (mid == 0 || nums[mid-1] < target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] < target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t} else {\n\t\t\tif nums[mid] == target && (mid == len(nums)-1 || nums[mid+1] > target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] <= target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n![AC！](../images/image-20230920152650727.png)\n\n### 官方解法\n\n#### Go语言版本\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n    leftmost := sort.SearchInts(nums, target)\n    if leftmost == len(nums) || nums[leftmost] != target {\n        return []int{-1, -1}\n    }\n    rightmost := sort.SearchInts(nums, target + 1) - 1\n    return []int{leftmost, rightmost}\n}\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n`sort.SearchInts()`函数没有接触过，看看源码\n\n<img src=\"../images/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n>   SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。\n>   切片必须按升序排序。\n\n#### C++版本\n\n``` c++\nclass Solution { \npublic:\n    int binarySearch(vector<int>& nums, int target, bool lower) {\n        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n\n    vector<int> searchRange(vector<int>& nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.size() && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return vector<int>{leftIdx, rightIdx};\n        } \n        return vector<int>{-1, -1};\n    }\n};\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的`true`和`false`对条件控制的很巧妙。\n\n## 小结\n\n-   在二分查找时又学到了一种思路，”左闭右开“\n\n-   群里面有位同学说到了这个事情，之前从未注意过：\n\n    <img src=\"../images/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n    看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。\n\n今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！\n\n","source":"_posts/代码随想录算法训练营第一天-704-二分查找、27-移除元素。.md","raw":"---\ntitle: 代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\ncategories: 刷题\nabbrlink: 7b6fd36a\ndate: 2023-09-20 15:41:36\n---\n\n# 代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\n\n\n\n## 704. 二分查找\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/binary-search/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0704.二分查找.html)\n>\n>   视频讲解：[手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找](https://www.bilibili.com/video/BV1fA4y1o715)\n>\n>   状态：AC\n\n### 思路\n\n看了卡哥的文档，才注意到二分查找也有两种写法。”要**熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法**“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。\n\n### 代码\n\n``` go\nfunc search(nums []int, target int) int {\n\t// 左闭右闭写法\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid - 1\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n\n```\n\n\n\n``` go\nfunc search1(nums []int, target int) int {\n\t// 左闭右开写法\n\tleft := 0\n\tright := len(nums)\n\tvar mid int\n\tfor left < right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if nums[mid] > target {\n\t\t\tright = mid\n\t\t} else {\n\t\t\treturn mid\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n## 27. 移除元素\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/remove-element/ )\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0027.移除元素.html)\n>\n>   视频讲解：[数组中移除元素并不容易！ | LeetCode：27. 移除元素](https://www.bilibili.com/video/BV12A4y1Z7LP )\n>\n>   状态：AC\n\n### 思路\n\n第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 `O(1)` 额外空间并 **原地修改输入数组**“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为`O(n^2)`。再向下看到了示例：\n\n**示例 1：**\n\n\n> 输入：nums = [3,2,2,3], val = 3\n> 输出：2, nums = [2,2]\n> 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n\n\n**示例 2：**\n\n\n> 输入：nums = [0,1,2,2,3,0,4,2], val = 2\n> 输出：5, nums = [0,1,4,0,3]\n> 解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n\n看到这里大概理解了，想到的解法是双指针，方法也有两种。\n\n#### 方法一：\n\n1.   左右指针均从头开始，右指针每次向前一步\n2.   若右指针的值为`val`，那么跳过；否则将右指针的值给左指针，左指针++\n3.   返回左指针所在的索引\n\n#### 方法二：\n\n1.   左指针从前开始，右指针从后开始，左指针找`val`，右指针找非`val`\n2.   右指针的值给左指针\n3.   返回左指针所在的索引\n\n### 代码\n\n``` go\n// 方法一\nfunc removeElement(nums []int, val int) int {\n\tn := len(nums)\n\tleft := 0\n\tfor right := 0; right < n; right++ {\n\t\tif nums[right] != val {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn left\n}\n```\n\n``` go\n// 方法二\nfunc removeElement(nums []int, val int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tfor left <= right {\n\t\t\tif nums[left] == val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tleft++\n\t\t\t}\n\t\t}\n\t\tfor left <= right {\n\t\t\tif nums[right] != val {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tright--\n\t\t\t}\n\t\t}\n\t\tif left < right {\n\t\t\tnums[left] = nums[right]\n\t\t\tleft++\n\t\t\tright--\n\t\t}\n\t}\n\treturn left\n}\n```\n\n方法二还是的边界条件有点绕的，自己把自己绕进去了\n\n![绕晕了的边界](../images/image-20230920140818304.png)\n\n\n\n## 附加题 35. 搜索插入位置\n\n>   题目链接：[35. 搜索插入位置](https://leetcode.cn/problems/search-insert-position/)\n>\n>   状态：AC\n\n### 思路\n\n查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。\n\n### 代码\n\n``` go\nfunc searchInsert(nums []int, target int) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tvar mid int\n\tfor left <= right {\n\t\tmid = (left + right) / 2\n\t\tif nums[mid] == target {\n\t\t\treturn mid\n\t\t} else if nums[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid - 1\n\t\t}\n\t}\n\treturn left\n}\n```\n\n## 附加题34.在排序数组中查找元素的第一个和最后一个位置\n\n>   题目链接：[34.在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/)\n>\n>   状态：AC\n\n### 思路\n\n通过两次二分查找找到`target`在数组中的起始和结束位置，实现了函数`binary`可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：\n\n-   起始：需要判断`num[mid-1]<target`，或者`mid==0`（第0个元素就是起始位置），为了保证不越界，需要先判断`mid==0`的情况\n-   结束：需要判断`mid == len(nums)-1`（最后一个元素是结束位置），或者`nums[mid+1] > target`\n\n如果没有找到该元素，则返回`-1`。由于起始和介绍条件判断有些不同，`binary`函数中使用了`flag`来区分是进行起始元素查找还是结束元素查找的条件。若是`true`则为查找起始元素\n\n### 代码\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n\tresult := []int{}\n    var temp int\n    temp = binary(nums, target, true)\n    if temp == -1 {  // 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行\n        return []int{-1, -1}\n    } else {\n\t\tresult = append(result, temp)\n        result = append(result, binary(nums, target, false))\n        return result\n    }\n}\nfunc binary(nums []int, target int, flag bool) int {\n\tleft := 0\n\tright := len(nums) - 1\n\tfor left <= right {\n\t\tmid := left + (right-left)/2\n\t\tif flag {\n\t\t\tif nums[mid] == target && (mid == 0 || nums[mid-1] < target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] < target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t} else {\n\t\t\tif nums[mid] == target && (mid == len(nums)-1 || nums[mid+1] > target) {\n\t\t\t\treturn mid\n\t\t\t} else if nums[mid] <= target {\n\t\t\t\tleft = mid + 1\n\t\t\t} else {\n\t\t\t\tright = mid - 1\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\n```\n\n![AC！](../images/image-20230920152650727.png)\n\n### 官方解法\n\n#### Go语言版本\n\n``` go\nfunc searchRange(nums []int, target int) []int {\n    leftmost := sort.SearchInts(nums, target)\n    if leftmost == len(nums) || nums[leftmost] != target {\n        return []int{-1, -1}\n    }\n    rightmost := sort.SearchInts(nums, target + 1) - 1\n    return []int{leftmost, rightmost}\n}\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n`sort.SearchInts()`函数没有接触过，看看源码\n\n<img src=\"../images/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n>   SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。\n>   切片必须按升序排序。\n\n#### C++版本\n\n``` c++\nclass Solution { \npublic:\n    int binarySearch(vector<int>& nums, int target, bool lower) {\n        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n\n    vector<int> searchRange(vector<int>& nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.size() && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return vector<int>{leftIdx, rightIdx};\n        } \n        return vector<int>{-1, -1};\n    }\n};\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的`true`和`false`对条件控制的很巧妙。\n\n## 小结\n\n-   在二分查找时又学到了一种思路，”左闭右开“\n\n-   群里面有位同学说到了这个事情，之前从未注意过：\n\n    <img src=\"../images/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n    看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。\n\n今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！\n\n","slug":"代码随想录算法训练营第一天-704-二分查找、27-移除元素。","published":1,"updated":"2023-09-20T08:07:11.012Z","_id":"clmrgnur0000173z87v2h7et0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第一天-704-二分查找、27-移除元素。\"><a href=\"#代码随想录算法训练营第一天-704-二分查找、27-移除元素。\" class=\"headerlink\" title=\"代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\"></a>代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。</h1><h2 id=\"704-二分查找\"><a href=\"#704-二分查找\" class=\"headerlink\" title=\"704. 二分查找\"></a>704. 二分查找</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/binary-search/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1fA4y1o715\">手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>看了卡哥的文档，才注意到二分查找也有两种写法。”要<strong>熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法</strong>“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右闭写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search1</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右开写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"27-移除元素\"><a href=\"#27-移除元素\" class=\"headerlink\" title=\"27. 移除元素\"></a>27. 移除元素</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/remove-element/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV12A4y1Z7LP\">数组中移除元素并不容易！ | LeetCode：27. 移除元素</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地修改输入数组</strong>“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为<code>O(n^2)</code>。再向下看到了示例：</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>\n</blockquote>\n<p>看到这里大概理解了，想到的解法是双指针，方法也有两种。</p>\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><ol>\n<li>左右指针均从头开始，右指针每次向前一步</li>\n<li>若右指针的值为<code>val</code>，那么跳过；否则将右指针的值给左指针，左指针++</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><ol>\n<li>左指针从前开始，右指针从后开始，左指针找<code>val</code>，右指针找非<code>val</code></li>\n<li>右指针的值给左指针</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法一</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tleft := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> right := <span class=\"hljs-number\">0</span>; right &lt; n; right++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法二</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[left] == val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tleft++<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright--<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> left &lt; right &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t\tright--<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>方法二还是的边界条件有点绕的，自己把自己绕进去了</p>\n<p><img src=\"/../images/image-20230920140818304.png\" alt=\"绕晕了的边界\"></p>\n<h2 id=\"附加题-35-搜索插入位置\"><a href=\"#附加题-35-搜索插入位置\" class=\"headerlink\" title=\"附加题 35. 搜索插入位置\"></a>附加题 35. 搜索插入位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/search-insert-position/\">35. 搜索插入位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"附加题34-在排序数组中查找元素的第一个和最后一个位置\"><a href=\"#附加题34-在排序数组中查找元素的第一个和最后一个位置\" class=\"headerlink\" title=\"附加题34.在排序数组中查找元素的第一个和最后一个位置\"></a>附加题34.在排序数组中查找元素的第一个和最后一个位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/\">34.在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>通过两次二分查找找到<code>target</code>在数组中的起始和结束位置，实现了函数<code>binary</code>可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：</p>\n<ul>\n<li>起始：需要判断<code>num[mid-1]&lt;target</code>，或者<code>mid==0</code>（第0个元素就是起始位置），为了保证不越界，需要先判断<code>mid==0</code>的情况</li>\n<li>结束：需要判断<code>mid == len(nums)-1</code>（最后一个元素是结束位置），或者<code>nums[mid+1] &gt; target</code></li>\n</ul>\n<p>如果没有找到该元素，则返回<code>-1</code>。由于起始和介绍条件判断有些不同，<code>binary</code>函数中使用了<code>flag</code>来区分是进行起始元素查找还是结束元素查找的条件。若是<code>true</code>则为查找起始元素</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">var</span> temp <span class=\"hljs-type\">int</span><br>    temp = binary(nums, target, <span class=\"hljs-literal\">true</span>)<br>    <span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-number\">-1</span> &#123;  <span class=\"hljs-comment\">// 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行</span><br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>        result = <span class=\"hljs-built_in\">append</span>(result, binary(nums, target, <span class=\"hljs-literal\">false</span>))<br>        <span class=\"hljs-keyword\">return</span> result<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">binary</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>, flag <span class=\"hljs-type\">bool</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid := left + (right-left)/<span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> flag &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-number\">0</span> || nums[mid<span class=\"hljs-number\">-1</span>] &lt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-1</span> || nums[mid+<span class=\"hljs-number\">1</span>] &gt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt;= target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/image-20230920152650727.png\" alt=\"AC！\"></p>\n<h3 id=\"官方解法\"><a href=\"#官方解法\" class=\"headerlink\" title=\"官方解法\"></a>官方解法</h3><h4 id=\"Go语言版本\"><a href=\"#Go语言版本\" class=\"headerlink\" title=\"Go语言版本\"></a>Go语言版本</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    leftmost := sort.SearchInts(nums, target)<br>    <span class=\"hljs-keyword\">if</span> leftmost == <span class=\"hljs-built_in\">len</span>(nums) || nums[leftmost] != target &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125;<br>    rightmost := sort.SearchInts(nums, target + <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;leftmost, rightmost&#125;<br>&#125;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p><code>sort.SearchInts()</code>函数没有接触过，看看源码</p>\n<img src=\"../images/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>  SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。<br>  切片必须按升序排序。</p>\n</blockquote>\n<h4 id=\"C-版本\"><a href=\"#C-版本\" class=\"headerlink\" title=\"C++版本\"></a>C++版本</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123; <br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target, <span class=\"hljs-type\">bool</span> lower)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>, right = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>, ans = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>            <span class=\"hljs-type\">int</span> mid = (left + right) / <span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-keyword\">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) &#123;<br>                right = mid - <span class=\"hljs-number\">1</span>;<br>                ans = mid;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                left = mid + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br><br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> leftIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-type\">int</span> rightIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">false</span>) - <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (leftIdx &lt;= rightIdx &amp;&amp; rightIdx &lt; nums.<span class=\"hljs-built_in\">size</span>() &amp;&amp; nums[leftIdx] == target &amp;&amp; nums[rightIdx] == target) &#123;<br>            <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;leftIdx, rightIdx&#125;;<br>        &#125; <br>        <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;;<br>    &#125;<br>&#125;;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p>官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的<code>true</code>和<code>false</code>对条件控制的很巧妙。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>在二分查找时又学到了一种思路，”左闭右开“</p>\n</li>\n<li><p>群里面有位同学说到了这个事情，之前从未注意过：</p>\n<img src=\"../images/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n<p>看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。</p>\n</li>\n</ul>\n<p>今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第一天-704-二分查找、27-移除元素。\"><a href=\"#代码随想录算法训练营第一天-704-二分查找、27-移除元素。\" class=\"headerlink\" title=\"代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。\"></a>代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。</h1><h2 id=\"704-二分查找\"><a href=\"#704-二分查找\" class=\"headerlink\" title=\"704. 二分查找\"></a>704. 二分查找</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/binary-search/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1fA4y1o715\">手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>看了卡哥的文档，才注意到二分查找也有两种写法。”要<strong>熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法</strong>“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右闭写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">search1</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-comment\">// 左闭右开写法</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt; right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &gt; target &#123;<br>\t\t\tright = mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"27-移除元素\"><a href=\"#27-移除元素\" class=\"headerlink\" title=\"27. 移除元素\"></a>27. 移除元素</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/remove-element/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV12A4y1Z7LP\">数组中移除元素并不容易！ | LeetCode：27. 移除元素</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地修改输入数组</strong>“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为<code>O(n^2)</code>。再向下看到了示例：</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>\n</blockquote>\n<p>看到这里大概理解了，想到的解法是双指针，方法也有两种。</p>\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><ol>\n<li>左右指针均从头开始，右指针每次向前一步</li>\n<li>若右指针的值为<code>val</code>，那么跳过；否则将右指针的值给左指针，左指针++</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><ol>\n<li>左指针从前开始，右指针从后开始，左指针找<code>val</code>，右指针找非<code>val</code></li>\n<li>右指针的值给左指针</li>\n<li>返回左指针所在的索引</li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法一</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tleft := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> right := <span class=\"hljs-number\">0</span>; right &lt; n; right++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 方法二</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[left] == val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tleft++<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[right] != val &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright--<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> left &lt; right &#123;<br>\t\t\tnums[left] = nums[right]<br>\t\t\tleft++<br>\t\t\tright--<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>方法二还是的边界条件有点绕的，自己把自己绕进去了</p>\n<p><img src=\"/../images/image-20230920140818304.png\" alt=\"绕晕了的边界\"></p>\n<h2 id=\"附加题-35-搜索插入位置\"><a href=\"#附加题-35-搜索插入位置\" class=\"headerlink\" title=\"附加题 35. 搜索插入位置\"></a>附加题 35. 搜索插入位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/search-insert-position/\">35. 搜索插入位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">var</span> mid <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid = (left + right) / <span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"附加题34-在排序数组中查找元素的第一个和最后一个位置\"><a href=\"#附加题34-在排序数组中查找元素的第一个和最后一个位置\" class=\"headerlink\" title=\"附加题34.在排序数组中查找元素的第一个和最后一个位置\"></a>附加题34.在排序数组中查找元素的第一个和最后一个位置</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/\">34.在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>通过两次二分查找找到<code>target</code>在数组中的起始和结束位置，实现了函数<code>binary</code>可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：</p>\n<ul>\n<li>起始：需要判断<code>num[mid-1]&lt;target</code>，或者<code>mid==0</code>（第0个元素就是起始位置），为了保证不越界，需要先判断<code>mid==0</code>的情况</li>\n<li>结束：需要判断<code>mid == len(nums)-1</code>（最后一个元素是结束位置），或者<code>nums[mid+1] &gt; target</code></li>\n</ul>\n<p>如果没有找到该元素，则返回<code>-1</code>。由于起始和介绍条件判断有些不同，<code>binary</code>函数中使用了<code>flag</code>来区分是进行起始元素查找还是结束元素查找的条件。若是<code>true</code>则为查找起始元素</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tresult := []<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">var</span> temp <span class=\"hljs-type\">int</span><br>    temp = binary(nums, target, <span class=\"hljs-literal\">true</span>)<br>    <span class=\"hljs-keyword\">if</span> temp == <span class=\"hljs-number\">-1</span> &#123;  <span class=\"hljs-comment\">// 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行</span><br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tresult = <span class=\"hljs-built_in\">append</span>(result, temp)<br>        result = <span class=\"hljs-built_in\">append</span>(result, binary(nums, target, <span class=\"hljs-literal\">false</span>))<br>        <span class=\"hljs-keyword\">return</span> result<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">binary</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>, flag <span class=\"hljs-type\">bool</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &#123;<br>\t\tmid := left + (right-left)/<span class=\"hljs-number\">2</span><br>\t\t<span class=\"hljs-keyword\">if</span> flag &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-number\">0</span> || nums[mid<span class=\"hljs-number\">-1</span>] &lt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> nums[mid] == target &amp;&amp; (mid == <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-1</span> || nums[mid+<span class=\"hljs-number\">1</span>] &gt; target) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> mid<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> nums[mid] &lt;= target &#123;<br>\t\t\t\tleft = mid + <span class=\"hljs-number\">1</span><br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tright = mid - <span class=\"hljs-number\">1</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/image-20230920152650727.png\" alt=\"AC！\"></p>\n<h3 id=\"官方解法\"><a href=\"#官方解法\" class=\"headerlink\" title=\"官方解法\"></a>官方解法</h3><h4 id=\"Go语言版本\"><a href=\"#Go语言版本\" class=\"headerlink\" title=\"Go语言版本\"></a>Go语言版本</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    leftmost := sort.SearchInts(nums, target)<br>    <span class=\"hljs-keyword\">if</span> leftmost == <span class=\"hljs-built_in\">len</span>(nums) || nums[leftmost] != target &#123;<br>        <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;<br>    &#125;<br>    rightmost := sort.SearchInts(nums, target + <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;leftmost, rightmost&#125;<br>&#125;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p><code>sort.SearchInts()</code>函数没有接触过，看看源码</p>\n<img src=\"../images/image-20230920152855240.png\" alt=\"sort.SearchInts()源码\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>  SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。<br>  切片必须按升序排序。</p>\n</blockquote>\n<h4 id=\"C-版本\"><a href=\"#C-版本\" class=\"headerlink\" title=\"C++版本\"></a>C++版本</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123; <br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target, <span class=\"hljs-type\">bool</span> lower)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>, right = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>, ans = (<span class=\"hljs-type\">int</span>)nums.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>            <span class=\"hljs-type\">int</span> mid = (left + right) / <span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-keyword\">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) &#123;<br>                right = mid - <span class=\"hljs-number\">1</span>;<br>                ans = mid;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                left = mid + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br><br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">searchRange</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> leftIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-type\">int</span> rightIdx = <span class=\"hljs-built_in\">binarySearch</span>(nums, target, <span class=\"hljs-literal\">false</span>) - <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (leftIdx &lt;= rightIdx &amp;&amp; rightIdx &lt; nums.<span class=\"hljs-built_in\">size</span>() &amp;&amp; nums[leftIdx] == target &amp;&amp; nums[rightIdx] == target) &#123;<br>            <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;leftIdx, rightIdx&#125;;<br>        &#125; <br>        <span class=\"hljs-keyword\">return</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&#123;<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&#125;;<br>    &#125;<br>&#125;;<br><br>作者：力扣官方题解<br>链接：https:<span class=\"hljs-comment\">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>\n\n<p>官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的<code>true</code>和<code>false</code>对条件控制的很巧妙。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>在二分查找时又学到了一种思路，”左闭右开“</p>\n</li>\n<li><p>群里面有位同学说到了这个事情，之前从未注意过：</p>\n<img src=\"../images/image-20230920153829216.png\" alt=\"群友聊天\" style=\"zoom:80%;\" />\n\n<p>看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。</p>\n</li>\n</ul>\n<p>今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！</p>\n"},{"title":"代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。","abbrlink":"b79a1ea","date":"2023-09-21T04:15:07.000Z","_content":"\n# 代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\n\n## 977. 有序数组的平方\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/squares-of-a-sorted-array/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0977.有序数组的平方.html)\n>\n>   视频讲解：[双指针法经典题目 | LeetCode：977.有序数组的平方](https://www.bilibili.com/video/BV1QB4y1D7ep )\n>\n>   状态：AC\n\n### 思路\n\n首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为`O(nlog n)`。但是并不满足题目中要求的`O(n)`，因为有一个条件我们还没有用上：**非递减顺序数组**。看了题解之后才清楚更好的方法：**双指针算法**。\n\n由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。\n\n### 代码\n\n``` go\nfunc sortedSquares(nums []int) []int {\n\tn := len(nums)\n\tresult := make([]int, n)\n\tleft := 0\n\tright := len(nums) - 1\n\tfor i := right; i >= 0; i-- {  // i为result的索引\n\t\tif nums[left]*nums[left] < nums[right]*nums[right] {  // right侧更大\n\t\t\tresult[i] = nums[right] * nums[right]\n\t\t\tright--\n\t\t} else {  // left侧更大\n\t\t\tresult[i] = nums[left] * nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 209.长度最小的子数组\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html)\n>\n>   视频讲解：[拿下滑动窗口！ | LeetCode 209 长度最小的子数组](https://www.bilibili.com/video/BV1tZ4y1q7XE)\n>\n>   状态：AC\n\n### 思路\n\n此题需要找最短连续的一子数组，能想到的是 **滑动窗口** 算法。\n\n1.   设最短子数组长度`minLength`为无穷大，题目规定长度最大为100000，`minLength=100001`即可。\n2.   右侧不断向前，直至这一子数组的和大于 `target`\n3.   子序列和大于target之后，左侧也不断向前，直至子数组和小于 `target`，记录下此刻的序列长度，并与 `minLength` 进行比较。\n4.   循环条件：当右侧到头，并且此时的子数组的和小于`target`\n5.   退出循环后，如果`minLength`依旧等于100001，说明不存在满足要求的子数组，则返回`0`\n\n### 代码\n\n``` go\nfunc minSubArrayLen(target int, nums []int) int {\n\tleft := 0\n\tright := 0\n\tsum := 0\n\tminLength := 100001\n\tlength := len(nums)\n\tfor left <= right && right <= length {\n\t\tif sum < target {\n\t\t\tif right < length {\n\t\t\t\tsum += nums[right]\n\t\t\t\tright++\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tif minLength > right-left {\n\t\t\t\tminLength = right - left\n\t\t\t}\n\t\t\tsum -= nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\tif minLength == 100001 {\n\t\treturn 0\n\t}\n\treturn minLength\n}\n```\n\n## 59.螺旋矩阵II\n\n> 题目链接：[leetcode链接](https://leetcode.cn/problems/spiral-matrix-ii/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0059.螺旋矩阵II.html)\n>\n> 视频讲解：[一入循环深似海 | LeetCode：59.螺旋矩阵II](https://www.bilibili.com/video/BV1SL4y1N7mV/)\n>\n> 状态：AC\n\n### 思路\n\n![image-20230921130326208](../images/image-20230921130326208.png)\n\n1.   循环次数是`n/2`\n\n2.   每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为`results`\n\n3.   各个颜色的范围，注意是从大到小还是从小到大：\n\n     <font color=\"#4664b9\">蓝色的范围：results\\[top\\][left ~ right - 1]</font>\n     <font color=\"#4f7633\">绿色的范围：results\\[top ~ bottom - 1\\][right]</font>\n\n     <font color=\"#b0871e\">黄色的范围：results\\[bottom\\][right ~ left + 1]</font>\n\n     <font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1]\\[left\\]</font>\n\n4.   每一轮过后，`top++`、`bottom--`、`left++`、`right--`\n\n5.   额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。\n\n### 代码\n\n``` go\nfunc generateMatrix(n int) [][]int {\n\ttop := 0\n\tbottom := n - 1\n\tleft := 0\n\tright := n - 1\n\tresult := make([][]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tresult[i] = make([]int, n)\n\t}\n\tnum := 1\n\tfor i := 0; i < n/2; i++ {\n\t\tfor j := left; j < right; j++ {\n\t\t\tresult[top][j] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := top; j < bottom; j++ {\n\t\t\tresult[j][right] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := right; j > left; j-- {\n\t\t\tresult[bottom][j] = num\n\t\t\tnum++\n\t\t}\n\t\tfor j := bottom; j > top; j-- {\n\t\t\tresult[j][left] = num\n\t\t\tnum++\n\t\t}\n\t\ttop++\n\t\tleft++\n\t\tright--\n\t\tbottom--\n\t}\n\tif n%2 == 1 {\n\t\tresult[n/2][n/2] = num\n\t}\n\treturn result\n}\n```\n\n## 小结\n\n-   帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。\n\n-   Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧\n\n    ``` go\n    result := make([][]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = make([]int, n)\n    }\n    ```\n\n    \n\n-   今天还有点别的事情，先写这么多，扩展题先不写了\n-   打卡第二天！\n","source":"_posts/代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。.md","raw":"---\ntitle: 代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\ncategories: 刷题\nabbrlink: b79a1ea\ndate: 2023-09-21 12:15:07\n---\n\n# 代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\n\n## 977. 有序数组的平方\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/squares-of-a-sorted-array/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0977.有序数组的平方.html)\n>\n>   视频讲解：[双指针法经典题目 | LeetCode：977.有序数组的平方](https://www.bilibili.com/video/BV1QB4y1D7ep )\n>\n>   状态：AC\n\n### 思路\n\n首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为`O(nlog n)`。但是并不满足题目中要求的`O(n)`，因为有一个条件我们还没有用上：**非递减顺序数组**。看了题解之后才清楚更好的方法：**双指针算法**。\n\n由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。\n\n### 代码\n\n``` go\nfunc sortedSquares(nums []int) []int {\n\tn := len(nums)\n\tresult := make([]int, n)\n\tleft := 0\n\tright := len(nums) - 1\n\tfor i := right; i >= 0; i-- {  // i为result的索引\n\t\tif nums[left]*nums[left] < nums[right]*nums[right] {  // right侧更大\n\t\t\tresult[i] = nums[right] * nums[right]\n\t\t\tright--\n\t\t} else {  // left侧更大\n\t\t\tresult[i] = nums[left] * nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 209.长度最小的子数组\n\n>   题目链接：[leetcode链接](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html)\n>\n>   视频讲解：[拿下滑动窗口！ | LeetCode 209 长度最小的子数组](https://www.bilibili.com/video/BV1tZ4y1q7XE)\n>\n>   状态：AC\n\n### 思路\n\n此题需要找最短连续的一子数组，能想到的是 **滑动窗口** 算法。\n\n1.   设最短子数组长度`minLength`为无穷大，题目规定长度最大为100000，`minLength=100001`即可。\n2.   右侧不断向前，直至这一子数组的和大于 `target`\n3.   子序列和大于target之后，左侧也不断向前，直至子数组和小于 `target`，记录下此刻的序列长度，并与 `minLength` 进行比较。\n4.   循环条件：当右侧到头，并且此时的子数组的和小于`target`\n5.   退出循环后，如果`minLength`依旧等于100001，说明不存在满足要求的子数组，则返回`0`\n\n### 代码\n\n``` go\nfunc minSubArrayLen(target int, nums []int) int {\n\tleft := 0\n\tright := 0\n\tsum := 0\n\tminLength := 100001\n\tlength := len(nums)\n\tfor left <= right && right <= length {\n\t\tif sum < target {\n\t\t\tif right < length {\n\t\t\t\tsum += nums[right]\n\t\t\t\tright++\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tif minLength > right-left {\n\t\t\t\tminLength = right - left\n\t\t\t}\n\t\t\tsum -= nums[left]\n\t\t\tleft++\n\t\t}\n\t}\n\tif minLength == 100001 {\n\t\treturn 0\n\t}\n\treturn minLength\n}\n```\n\n## 59.螺旋矩阵II\n\n> 题目链接：[leetcode链接](https://leetcode.cn/problems/spiral-matrix-ii/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0059.螺旋矩阵II.html)\n>\n> 视频讲解：[一入循环深似海 | LeetCode：59.螺旋矩阵II](https://www.bilibili.com/video/BV1SL4y1N7mV/)\n>\n> 状态：AC\n\n### 思路\n\n![image-20230921130326208](../images/image-20230921130326208.png)\n\n1.   循环次数是`n/2`\n\n2.   每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为`results`\n\n3.   各个颜色的范围，注意是从大到小还是从小到大：\n\n     <font color=\"#4664b9\">蓝色的范围：results\\[top\\][left ~ right - 1]</font>\n     <font color=\"#4f7633\">绿色的范围：results\\[top ~ bottom - 1\\][right]</font>\n\n     <font color=\"#b0871e\">黄色的范围：results\\[bottom\\][right ~ left + 1]</font>\n\n     <font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1]\\[left\\]</font>\n\n4.   每一轮过后，`top++`、`bottom--`、`left++`、`right--`\n\n5.   额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。\n\n### 代码\n\n``` go\nfunc generateMatrix(n int) [][]int {\n\ttop := 0\n\tbottom := n - 1\n\tleft := 0\n\tright := n - 1\n\tresult := make([][]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tresult[i] = make([]int, n)\n\t}\n\tnum := 1\n\tfor i := 0; i < n/2; i++ {\n\t\tfor j := left; j < right; j++ {\n\t\t\tresult[top][j] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := top; j < bottom; j++ {\n\t\t\tresult[j][right] = num\n\t\t\tnum++\n\t\t}\n\n\t\tfor j := right; j > left; j-- {\n\t\t\tresult[bottom][j] = num\n\t\t\tnum++\n\t\t}\n\t\tfor j := bottom; j > top; j-- {\n\t\t\tresult[j][left] = num\n\t\t\tnum++\n\t\t}\n\t\ttop++\n\t\tleft++\n\t\tright--\n\t\tbottom--\n\t}\n\tif n%2 == 1 {\n\t\tresult[n/2][n/2] = num\n\t}\n\treturn result\n}\n```\n\n## 小结\n\n-   帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。\n\n-   Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧\n\n    ``` go\n    result := make([][]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = make([]int, n)\n    }\n    ```\n\n    \n\n-   今天还有点别的事情，先写这么多，扩展题先不写了\n-   打卡第二天！\n","slug":"代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。","published":1,"updated":"2023-09-21T05:27:52.718Z","_id":"clmsqddff0000dcz8et3c42ky","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\"><a href=\"#代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\" class=\"headerlink\" title=\"代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\"></a>代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。</h1><h2 id=\"977-有序数组的平方\"><a href=\"#977-有序数组的平方\" class=\"headerlink\" title=\"977. 有序数组的平方\"></a>977. 有序数组的平方</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1QB4y1D7ep\">双指针法经典题目 | LeetCode：977.有序数组的平方</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为<code>O(nlog n)</code>。但是并不满足题目中要求的<code>O(n)</code>，因为有一个条件我们还没有用上：<strong>非递减顺序数组</strong>。看了题解之后才清楚更好的方法：<strong>双指针算法</strong>。</p>\n<p>由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sortedSquares</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tresult := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := right; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;  <span class=\"hljs-comment\">// i为result的索引</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[left]*nums[left] &lt; nums[right]*nums[right] &#123;  <span class=\"hljs-comment\">// right侧更大</span><br>\t\t\tresult[i] = nums[right] * nums[right]<br>\t\t\tright--<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// left侧更大</span><br>\t\t\tresult[i] = nums[left] * nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"209-长度最小的子数组\"><a href=\"#209-长度最小的子数组\" class=\"headerlink\" title=\"209.长度最小的子数组\"></a>209.长度最小的子数组</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1tZ4y1q7XE\">拿下滑动窗口！ | LeetCode 209 长度最小的子数组</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>此题需要找最短连续的一子数组，能想到的是 <strong>滑动窗口</strong> 算法。</p>\n<ol>\n<li>设最短子数组长度<code>minLength</code>为无穷大，题目规定长度最大为100000，<code>minLength=100001</code>即可。</li>\n<li>右侧不断向前，直至这一子数组的和大于 <code>target</code></li>\n<li>子序列和大于target之后，左侧也不断向前，直至子数组和小于 <code>target</code>，记录下此刻的序列长度，并与 <code>minLength</code> 进行比较。</li>\n<li>循环条件：当右侧到头，并且此时的子数组的和小于<code>target</code></li>\n<li>退出循环后，如果<code>minLength</code>依旧等于100001，说明不存在满足要求的子数组，则返回<code>0</code></li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(target <span class=\"hljs-type\">int</span>, nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-number\">0</span><br>\tsum := <span class=\"hljs-number\">0</span><br>\tminLength := <span class=\"hljs-number\">100001</span><br>\tlength := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &amp;&amp; right &lt;= length &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> sum &lt; target &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> right &lt; length &#123;<br>\t\t\t\tsum += nums[right]<br>\t\t\t\tright++<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> minLength &gt; right-left &#123;<br>\t\t\t\tminLength = right - left<br>\t\t\t&#125;<br>\t\t\tsum -= nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> minLength == <span class=\"hljs-number\">100001</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minLength<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"59-螺旋矩阵II\"><a href=\"#59-螺旋矩阵II\" class=\"headerlink\" title=\"59.螺旋矩阵II\"></a>59.螺旋矩阵II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/spiral-matrix-ii/\">leetcode链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1SL4y1N7mV/\">一入循环深似海 | LeetCode：59.螺旋矩阵II</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../images/image-20230921130326208.png\" alt=\"image-20230921130326208\"></p>\n<ol>\n<li><p>循环次数是<code>n/2</code></p>\n</li>\n<li><p>每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为<code>results</code></p>\n</li>\n<li><p>各个颜色的范围，注意是从大到小还是从小到大：</p>\n<p><font color=\"#4664b9\">蓝色的范围：results[top][left ~ right - 1]</font><br><font color=\"#4f7633\">绿色的范围：results[top ~ bottom - 1][right]</font></p>\n<p><font color=\"#b0871e\">黄色的范围：results[bottom][right ~ left + 1]</font></p>\n<p><font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1][left]</font></p>\n</li>\n<li><p>每一轮过后，<code>top++</code>、<code>bottom--</code>、<code>left++</code>、<code>right--</code></p>\n</li>\n<li><p>额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。</p>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generateMatrix</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\ttop := <span class=\"hljs-number\">0</span><br>\tbottom := n - <span class=\"hljs-number\">1</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := n - <span class=\"hljs-number\">1</span><br>\tresult := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>\t\tresult[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\t&#125;<br>\tnum := <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := left; j &lt; right; j++ &#123;<br>\t\t\tresult[top][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := top; j &lt; bottom; j++ &#123;<br>\t\t\tresult[j][right] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := right; j &gt; left; j-- &#123;<br>\t\t\tresult[bottom][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> j := bottom; j &gt; top; j-- &#123;<br>\t\t\tresult[j][left] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\ttop++<br>\t\tleft++<br>\t\tright--<br>\t\tbottom--<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> n%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> &#123;<br>\t\tresult[n/<span class=\"hljs-number\">2</span>][n/<span class=\"hljs-number\">2</span>] = num<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。</p>\n</li>\n<li><p>Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">result := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br><span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>    result[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>今天还有点别的事情，先写这么多，扩展题先不写了</p>\n</li>\n<li><p>打卡第二天！</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\"><a href=\"#代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。\" class=\"headerlink\" title=\"代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。\"></a>代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。</h1><h2 id=\"977-有序数组的平方\"><a href=\"#977-有序数组的平方\" class=\"headerlink\" title=\"977. 有序数组的平方\"></a>977. 有序数组的平方</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1QB4y1D7ep\">双指针法经典题目 | LeetCode：977.有序数组的平方</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为<code>O(nlog n)</code>。但是并不满足题目中要求的<code>O(n)</code>，因为有一个条件我们还没有用上：<strong>非递减顺序数组</strong>。看了题解之后才清楚更好的方法：<strong>双指针算法</strong>。</p>\n<p>由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sortedSquares</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tn := <span class=\"hljs-built_in\">len</span>(nums)<br>\tresult := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := right; i &gt;= <span class=\"hljs-number\">0</span>; i-- &#123;  <span class=\"hljs-comment\">// i为result的索引</span><br>\t\t<span class=\"hljs-keyword\">if</span> nums[left]*nums[left] &lt; nums[right]*nums[right] &#123;  <span class=\"hljs-comment\">// right侧更大</span><br>\t\t\tresult[i] = nums[right] * nums[right]<br>\t\t\tright--<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// left侧更大</span><br>\t\t\tresult[i] = nums[left] * nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"209-长度最小的子数组\"><a href=\"#209-长度最小的子数组\" class=\"headerlink\" title=\"209.长度最小的子数组\"></a>209.长度最小的子数组</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">leetcode链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1tZ4y1q7XE\">拿下滑动窗口！ | LeetCode 209 长度最小的子数组</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>此题需要找最短连续的一子数组，能想到的是 <strong>滑动窗口</strong> 算法。</p>\n<ol>\n<li>设最短子数组长度<code>minLength</code>为无穷大，题目规定长度最大为100000，<code>minLength=100001</code>即可。</li>\n<li>右侧不断向前，直至这一子数组的和大于 <code>target</code></li>\n<li>子序列和大于target之后，左侧也不断向前，直至子数组和小于 <code>target</code>，记录下此刻的序列长度，并与 <code>minLength</code> 进行比较。</li>\n<li>循环条件：当右侧到头，并且此时的子数组的和小于<code>target</code></li>\n<li>退出循环后，如果<code>minLength</code>依旧等于100001，说明不存在满足要求的子数组，则返回<code>0</code></li>\n</ol>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(target <span class=\"hljs-type\">int</span>, nums []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := <span class=\"hljs-number\">0</span><br>\tsum := <span class=\"hljs-number\">0</span><br>\tminLength := <span class=\"hljs-number\">100001</span><br>\tlength := <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">for</span> left &lt;= right &amp;&amp; right &lt;= length &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> sum &lt; target &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> right &lt; length &#123;<br>\t\t\t\tsum += nums[right]<br>\t\t\t\tright++<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> minLength &gt; right-left &#123;<br>\t\t\t\tminLength = right - left<br>\t\t\t&#125;<br>\t\t\tsum -= nums[left]<br>\t\t\tleft++<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> minLength == <span class=\"hljs-number\">100001</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> minLength<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"59-螺旋矩阵II\"><a href=\"#59-螺旋矩阵II\" class=\"headerlink\" title=\"59.螺旋矩阵II\"></a>59.螺旋矩阵II</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/spiral-matrix-ii/\">leetcode链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1SL4y1N7mV/\">一入循环深似海 | LeetCode：59.螺旋矩阵II</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../images/image-20230921130326208.png\" alt=\"image-20230921130326208\"></p>\n<ol>\n<li><p>循环次数是<code>n/2</code></p>\n</li>\n<li><p>每次循环时候按照<font color=\"#4664b9\">蓝色</font>、<font color=\"#4f7633\">绿色</font>、<font color=\"#b0871e\">黄色</font>、<font color=\"#622a93\">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为<code>results</code></p>\n</li>\n<li><p>各个颜色的范围，注意是从大到小还是从小到大：</p>\n<p><font color=\"#4664b9\">蓝色的范围：results[top][left ~ right - 1]</font><br><font color=\"#4f7633\">绿色的范围：results[top ~ bottom - 1][right]</font></p>\n<p><font color=\"#b0871e\">黄色的范围：results[bottom][right ~ left + 1]</font></p>\n<p><font color=\"#622a93\">紫色的范围：results[bottom ~ top + 1][left]</font></p>\n</li>\n<li><p>每一轮过后，<code>top++</code>、<code>bottom--</code>、<code>left++</code>、<code>right--</code></p>\n</li>\n<li><p>额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。</p>\n</li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generateMatrix</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> &#123;<br>\ttop := <span class=\"hljs-number\">0</span><br>\tbottom := n - <span class=\"hljs-number\">1</span><br>\tleft := <span class=\"hljs-number\">0</span><br>\tright := n - <span class=\"hljs-number\">1</span><br>\tresult := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>\t\tresult[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>\t&#125;<br>\tnum := <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n/<span class=\"hljs-number\">2</span>; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := left; j &lt; right; j++ &#123;<br>\t\t\tresult[top][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := top; j &lt; bottom; j++ &#123;<br>\t\t\tresult[j][right] = num<br>\t\t\tnum++<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> j := right; j &gt; left; j-- &#123;<br>\t\t\tresult[bottom][j] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> j := bottom; j &gt; top; j-- &#123;<br>\t\t\tresult[j][left] = num<br>\t\t\tnum++<br>\t\t&#125;<br>\t\ttop++<br>\t\tleft++<br>\t\tright--<br>\t\tbottom--<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> n%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> &#123;<br>\t\tresult[n/<span class=\"hljs-number\">2</span>][n/<span class=\"hljs-number\">2</span>] = num<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。</p>\n</li>\n<li><p>Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">result := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)<br><span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ &#123;<br>    result[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>今天还有点别的事情，先写这么多，扩展题先不写了</p>\n</li>\n<li><p>打卡第二天！</p>\n</li>\n</ul>\n"},{"title":"代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。","abbrlink":"bd069431","date":"2023-09-22T16:08:21.000Z","_content":"\n# 代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。\n\n## 203. 移除链表元素\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/remove-linked-list-elements/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html)\n>\n> 视频讲解：[链表基础操作| LeetCode：203.移除链表元素](https://www.bilibili.com/video/BV18B4y1s7R9)\n>\n> 状态：AC\n\n### 思路\n\n删除元素还是比较简单的，假设`q = p.Next`，如果删除`q`则是`p.Next = p.Next.Next`，考虑下`p.Next.Next`是否存在即可\n\n### 代码\n\n``` go\nfunc removeElements(head *ListNode, val int) *ListNode {\n\tnewHead := new(ListNode)\n\tnewHead.Next = head\n\tp := newHead\n\tfor p.Next != nil {\n\t\tif p.Next.Val == val {\n\t\t\tp.Next = p.Next.Next\n\t\t} else {\n\t\t\tp = p.Next\n\t\t}\n\t}\n\treturn newHead.Next\n}\n```\n\n\n\n## 707. 设计链表\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/design-linked-list/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html)\n>\n> 视频讲解：[帮你把链表操作学个通透！LeetCode：707.设计链表](https://www.bilibili.com/video/BV1FU4y1X7WD)\n>\n> 状态：半AC（AC了但是也没完全AC）\n\n### 思路\n\n- `(this *MyLinkedList)get(index int) int`: 先判断index是否合法，所以需要引入一个新的成员对象`size`在`MyLinkedList`中\n- `(this *MyLinkedList)AddAtHead(val int)`: 头插法只需要在新的头之后接入一个新的节点，然后`size++`\n- `(this *MyLinkedList)AddAtTail(val int)`: 尾插法只需要在整个链表之后接入一个新的节点，然后`size++`\n- `(this *MyLinkedList)DeleteAtIndex(index int)`: 删除一个元素类似上一题，只不过要判断index是否合法\n- `(this *MyLinkedList)AddAtIndex(index int, val)`: 先判断index是否合法，找到正确位置进行插入\n\n### 代码\n\n``` go\n\ntype LinkList struct {\n\tVal  int\n\tNext *LinkList\n}\n\ntype MyLinkedList struct {\n\tsize    int\n\tnewHead *LinkList\n}\n\nfunc Constructor() MyLinkedList {\n\t//return MyLinkedList{}\n\tnode := &LinkList{\n\t\tVal:  0,\n\t\tNext: nil,\n\t}\n\treturn MyLinkedList{\n\t\tnewHead: node,\n\t\tsize:    0,\n\t}\n}\n\nfunc (this *MyLinkedList) Get(index int) int {\n\tif index < 0 || index >= this.size || this == nil {\n\t\treturn -1\n\t}\n\tp := this.newHead.Next\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\treturn p.Val\n}\n\nfunc (this *MyLinkedList) AddAtHead(val int) {\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: this.newHead.Next,\n\t}\n\tthis.newHead.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) AddAtTail(val int) {\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: nil,\n\t}\n\tp := this.newHead\n\tfor p.Next != nil {\n\t\tp = p.Next\n\t}\n\tp.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) AddAtIndex(index int, val int) {\n\tif index < 0 {\n\t\tindex = 0\n\t} else if index > this.size {\n\t\treturn\n\t}\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: nil,\n\t}\n\tp := this.newHead\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\tnewNode.Next = p.Next\n\tp.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) DeleteAtIndex(index int) {\n\tif index < 0 || index >= this.size {\n\t\treturn\n\t}\n\tp := this.newHead\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\tif p.Next != nil {\n\t\tp.Next = p.Next.Next\n\t}\n\tthis.size--\n}\n\n```\n\n\n\n\n## 206. 反转链表\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/reverse-linked-list/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html)\n>\n> 视频讲解：[帮你拿下反转链表 | LeetCode：206.反转链表](https://www.bilibili.com/video/BV1nB4y1i7eL)\n>\n> 状态：AC\n\n### 思路\n\n1. 建立新的头结点`newHead` ，使其`newHead.Next = head`。\n2. 定义指针`p = head.Next`(先判断head是否为单节点)，然后手动断链，`head.Next = nil`\n3. 指针`p`不断向后，每遍历到一个元素，将这个元素保存到新的节点`newNode`，并且不断头插到`newHead`\n\n### 代码\n\n``` go\nfunc addAtHead(head *ListNode, val int) *ListNode {\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tnewNode := &ListNode{\n\t\tVal:  val,\n\t\tNext: newHead.Next,\n\t}\n\tnewHead.Next = newNode\n\treturn newHead.Next\n}\n\nfunc reverseList(head *ListNode) *ListNode {\n\tif head == nil {\n\t\treturn head\n\t}\n\tp := head.Next\n\thead.Next = nil\n\tfor p != nil {\n\t\thead = addAtHead(head, p.Val)\n\t\tp = p.Next\n\t}\n\treturn head\n}\n```\n\n\n\n## 小结\n\n- leetcode上的链表的题都是无头链表，所谓的 `head` 被叫做 `虚拟头`。我感觉还是叫做无头链表好一些，新建一个头先链接无头链表\n\n- 以前写过的都是有头链表，换到了无头链表刚开始有点不知所措、插入时候感觉怪怪的，其实都一样\n\n- `Go`的`new`相关或者初始化成员变量有了新的理解\n\n    ``` go\n    type SSS struct {\n        Val int\n    }\n    \n    //初始化的方式1\n    a := new SSS(1)\n    a.Val = 1\n    \n    //初始化的方式2\n    a := &SSS{\n        Val: 1\n    }\n    \n    ```\n\n- `Go`的构造函数看起来还有点懵\n- 最近事情太多了，周六上午招聘会、下午学校组织的求职训练营、晚上继续leetcode；周日上午训练营结课、下午再重写下链表、搞搞课题；周一还有个小活动。加油！\n","source":"_posts/代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。.md","raw":"---\ntitle: 代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\ncategories: 刷题\nabbrlink: bd069431\ndate: 2023-09-23 00:08:21\n---\n\n# 代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。\n\n## 203. 移除链表元素\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/remove-linked-list-elements/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html)\n>\n> 视频讲解：[链表基础操作| LeetCode：203.移除链表元素](https://www.bilibili.com/video/BV18B4y1s7R9)\n>\n> 状态：AC\n\n### 思路\n\n删除元素还是比较简单的，假设`q = p.Next`，如果删除`q`则是`p.Next = p.Next.Next`，考虑下`p.Next.Next`是否存在即可\n\n### 代码\n\n``` go\nfunc removeElements(head *ListNode, val int) *ListNode {\n\tnewHead := new(ListNode)\n\tnewHead.Next = head\n\tp := newHead\n\tfor p.Next != nil {\n\t\tif p.Next.Val == val {\n\t\t\tp.Next = p.Next.Next\n\t\t} else {\n\t\t\tp = p.Next\n\t\t}\n\t}\n\treturn newHead.Next\n}\n```\n\n\n\n## 707. 设计链表\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/design-linked-list/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html)\n>\n> 视频讲解：[帮你把链表操作学个通透！LeetCode：707.设计链表](https://www.bilibili.com/video/BV1FU4y1X7WD)\n>\n> 状态：半AC（AC了但是也没完全AC）\n\n### 思路\n\n- `(this *MyLinkedList)get(index int) int`: 先判断index是否合法，所以需要引入一个新的成员对象`size`在`MyLinkedList`中\n- `(this *MyLinkedList)AddAtHead(val int)`: 头插法只需要在新的头之后接入一个新的节点，然后`size++`\n- `(this *MyLinkedList)AddAtTail(val int)`: 尾插法只需要在整个链表之后接入一个新的节点，然后`size++`\n- `(this *MyLinkedList)DeleteAtIndex(index int)`: 删除一个元素类似上一题，只不过要判断index是否合法\n- `(this *MyLinkedList)AddAtIndex(index int, val)`: 先判断index是否合法，找到正确位置进行插入\n\n### 代码\n\n``` go\n\ntype LinkList struct {\n\tVal  int\n\tNext *LinkList\n}\n\ntype MyLinkedList struct {\n\tsize    int\n\tnewHead *LinkList\n}\n\nfunc Constructor() MyLinkedList {\n\t//return MyLinkedList{}\n\tnode := &LinkList{\n\t\tVal:  0,\n\t\tNext: nil,\n\t}\n\treturn MyLinkedList{\n\t\tnewHead: node,\n\t\tsize:    0,\n\t}\n}\n\nfunc (this *MyLinkedList) Get(index int) int {\n\tif index < 0 || index >= this.size || this == nil {\n\t\treturn -1\n\t}\n\tp := this.newHead.Next\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\treturn p.Val\n}\n\nfunc (this *MyLinkedList) AddAtHead(val int) {\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: this.newHead.Next,\n\t}\n\tthis.newHead.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) AddAtTail(val int) {\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: nil,\n\t}\n\tp := this.newHead\n\tfor p.Next != nil {\n\t\tp = p.Next\n\t}\n\tp.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) AddAtIndex(index int, val int) {\n\tif index < 0 {\n\t\tindex = 0\n\t} else if index > this.size {\n\t\treturn\n\t}\n\tnewNode := &LinkList{\n\t\tVal:  val,\n\t\tNext: nil,\n\t}\n\tp := this.newHead\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\tnewNode.Next = p.Next\n\tp.Next = newNode\n\tthis.size++\n}\n\nfunc (this *MyLinkedList) DeleteAtIndex(index int) {\n\tif index < 0 || index >= this.size {\n\t\treturn\n\t}\n\tp := this.newHead\n\tfor i := 0; i < index; i++ {\n\t\tp = p.Next\n\t}\n\tif p.Next != nil {\n\t\tp.Next = p.Next.Next\n\t}\n\tthis.size--\n}\n\n```\n\n\n\n\n## 206. 反转链表\n\n> 题目链接：[leetcode题目链接](https://leetcode.cn/problems/reverse-linked-list/)\n>\n> 文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html)\n>\n> 视频讲解：[帮你拿下反转链表 | LeetCode：206.反转链表](https://www.bilibili.com/video/BV1nB4y1i7eL)\n>\n> 状态：AC\n\n### 思路\n\n1. 建立新的头结点`newHead` ，使其`newHead.Next = head`。\n2. 定义指针`p = head.Next`(先判断head是否为单节点)，然后手动断链，`head.Next = nil`\n3. 指针`p`不断向后，每遍历到一个元素，将这个元素保存到新的节点`newNode`，并且不断头插到`newHead`\n\n### 代码\n\n``` go\nfunc addAtHead(head *ListNode, val int) *ListNode {\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tnewNode := &ListNode{\n\t\tVal:  val,\n\t\tNext: newHead.Next,\n\t}\n\tnewHead.Next = newNode\n\treturn newHead.Next\n}\n\nfunc reverseList(head *ListNode) *ListNode {\n\tif head == nil {\n\t\treturn head\n\t}\n\tp := head.Next\n\thead.Next = nil\n\tfor p != nil {\n\t\thead = addAtHead(head, p.Val)\n\t\tp = p.Next\n\t}\n\treturn head\n}\n```\n\n\n\n## 小结\n\n- leetcode上的链表的题都是无头链表，所谓的 `head` 被叫做 `虚拟头`。我感觉还是叫做无头链表好一些，新建一个头先链接无头链表\n\n- 以前写过的都是有头链表，换到了无头链表刚开始有点不知所措、插入时候感觉怪怪的，其实都一样\n\n- `Go`的`new`相关或者初始化成员变量有了新的理解\n\n    ``` go\n    type SSS struct {\n        Val int\n    }\n    \n    //初始化的方式1\n    a := new SSS(1)\n    a.Val = 1\n    \n    //初始化的方式2\n    a := &SSS{\n        Val: 1\n    }\n    \n    ```\n\n- `Go`的构造函数看起来还有点懵\n- 最近事情太多了，周六上午招聘会、下午学校组织的求职训练营、晚上继续leetcode；周日上午训练营结课、下午再重写下链表、搞搞课题；周一还有个小活动。加油！\n","slug":"代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。","published":1,"updated":"2023-09-23T13:31:15.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmw2kzfl0000enz89qz0eekl","content":"<h1 id=\"代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。\"><a href=\"#代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。\" class=\"headerlink\" title=\"代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。\"></a>代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。</h1><h2 id=\"203-移除链表元素\"><a href=\"#203-移除链表元素\" class=\"headerlink\" title=\"203. 移除链表元素\"></a>203. 移除链表元素</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV18B4y1s7R9\">链表基础操作| LeetCode：203.移除链表元素</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>删除元素还是比较简单的，假设<code>q = p.Next</code>，如果删除<code>q</code>则是<code>p.Next = p.Next.Next</code>，考虑下<code>p.Next.Next</code>是否存在即可</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElements</span><span class=\"hljs-params\">(head *ListNode, val <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := <span class=\"hljs-built_in\">new</span>(ListNode)<br>\tnewHead.Next = head<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> p.Next.Val == val &#123;<br>\t\t\tp.Next = p.Next.Next<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tp = p.Next<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"707-设计链表\"><a href=\"#707-设计链表\" class=\"headerlink\" title=\"707. 设计链表\"></a>707. 设计链表</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/design-linked-list/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1FU4y1X7WD\">帮你把链表操作学个通透！LeetCode：707.设计链表</a></p>\n<p>状态：半AC（AC了但是也没完全AC）</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><code>(this *MyLinkedList)get(index int) int</code>: 先判断index是否合法，所以需要引入一个新的成员对象<code>size</code>在<code>MyLinkedList</code>中</li>\n<li><code>(this *MyLinkedList)AddAtHead(val int)</code>: 头插法只需要在新的头之后接入一个新的节点，然后<code>size++</code></li>\n<li><code>(this *MyLinkedList)AddAtTail(val int)</code>: 尾插法只需要在整个链表之后接入一个新的节点，然后<code>size++</code></li>\n<li><code>(this *MyLinkedList)DeleteAtIndex(index int)</code>: 删除一个元素类似上一题，只不过要判断index是否合法</li>\n<li><code>(this *MyLinkedList)AddAtIndex(index int, val)</code>: 先判断index是否合法，找到正确位置进行插入</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-keyword\">type</span> LinkList <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal  <span class=\"hljs-type\">int</span><br>\tNext *LinkList<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> MyLinkedList <span class=\"hljs-keyword\">struct</span> &#123;<br>\tsize    <span class=\"hljs-type\">int</span><br>\tnewHead *LinkList<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> MyLinkedList &#123;<br>\t<span class=\"hljs-comment\">//return MyLinkedList&#123;&#125;</span><br>\tnode := &amp;LinkList&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> MyLinkedList&#123;<br>\t\tnewHead: node,<br>\t\tsize:    <span class=\"hljs-number\">0</span>,<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> Get(index <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> || index &gt;= this.size || this == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125;<br>\tp := this.newHead.Next<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> p.Val<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtHead(val <span class=\"hljs-type\">int</span>) &#123;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: this.newHead.Next,<br>\t&#125;<br>\tthis.newHead.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtTail(val <span class=\"hljs-type\">int</span>) &#123;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tp.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtIndex(index <span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tindex = <span class=\"hljs-number\">0</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> index &gt; this.size &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tnewNode.Next = p.Next<br>\tp.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> DeleteAtIndex(index <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> || index &gt;= this.size &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp.Next = p.Next.Next<br>\t&#125;<br>\tthis.size--<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"206-反转链表\"><a href=\"#206-反转链表\" class=\"headerlink\" title=\"206. 反转链表\"></a>206. 反转链表</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-linked-list/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1nB4y1i7eL\">帮你拿下反转链表 | LeetCode：206.反转链表</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>建立新的头结点<code>newHead</code> ，使其<code>newHead.Next = head</code>。</li>\n<li>定义指针<code>p = head.Next</code>(先判断head是否为单节点)，然后手动断链，<code>head.Next = nil</code></li>\n<li>指针<code>p</code>不断向后，每遍历到一个元素，将这个元素保存到新的节点<code>newNode</code>，并且不断头插到<code>newHead</code></li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addAtHead</span><span class=\"hljs-params\">(head *ListNode, val <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tnewNode := &amp;ListNode&#123;<br>\t\tVal:  val,<br>\t\tNext: newHead.Next,<br>\t&#125;<br>\tnewHead.Next = newNode<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverseList</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> head == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> head<br>\t&#125;<br>\tp := head.Next<br>\thead.Next = <span class=\"hljs-literal\">nil</span><br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\thead = addAtHead(head, p.Val)<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> head<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>leetcode上的链表的题都是无头链表，所谓的 <code>head</code> 被叫做 <code>虚拟头</code>。我感觉还是叫做无头链表好一些，新建一个头先链接无头链表</p>\n</li>\n<li><p>以前写过的都是有头链表，换到了无头链表刚开始有点不知所措、插入时候感觉怪怪的，其实都一样</p>\n</li>\n<li><p><code>Go</code>的<code>new</code>相关或者初始化成员变量有了新的理解</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> SSS <span class=\"hljs-keyword\">struct</span> &#123;<br>    Val <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-comment\">//初始化的方式1</span><br>a := <span class=\"hljs-built_in\">new</span> SSS(<span class=\"hljs-number\">1</span>)<br>a.Val = <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-comment\">//初始化的方式2</span><br>a := &amp;SSS&#123;<br>    Val: <span class=\"hljs-number\">1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>Go</code>的构造函数看起来还有点懵</p>\n</li>\n<li><p>最近事情太多了，周六上午招聘会、下午学校组织的求职训练营、晚上继续leetcode；周日上午训练营结课、下午再重写下链表、搞搞课题；周一还有个小活动。加油！</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。\"><a href=\"#代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。\" class=\"headerlink\" title=\"代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。\"></a>代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。</h1><h2 id=\"203-移除链表元素\"><a href=\"#203-移除链表元素\" class=\"headerlink\" title=\"203. 移除链表元素\"></a>203. 移除链表元素</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV18B4y1s7R9\">链表基础操作| LeetCode：203.移除链表元素</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>删除元素还是比较简单的，假设<code>q = p.Next</code>，如果删除<code>q</code>则是<code>p.Next = p.Next.Next</code>，考虑下<code>p.Next.Next</code>是否存在即可</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeElements</span><span class=\"hljs-params\">(head *ListNode, val <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := <span class=\"hljs-built_in\">new</span>(ListNode)<br>\tnewHead.Next = head<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> p.Next.Val == val &#123;<br>\t\t\tp.Next = p.Next.Next<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tp = p.Next<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"707-设计链表\"><a href=\"#707-设计链表\" class=\"headerlink\" title=\"707. 设计链表\"></a>707. 设计链表</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/design-linked-list/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1FU4y1X7WD\">帮你把链表操作学个通透！LeetCode：707.设计链表</a></p>\n<p>状态：半AC（AC了但是也没完全AC）</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><code>(this *MyLinkedList)get(index int) int</code>: 先判断index是否合法，所以需要引入一个新的成员对象<code>size</code>在<code>MyLinkedList</code>中</li>\n<li><code>(this *MyLinkedList)AddAtHead(val int)</code>: 头插法只需要在新的头之后接入一个新的节点，然后<code>size++</code></li>\n<li><code>(this *MyLinkedList)AddAtTail(val int)</code>: 尾插法只需要在整个链表之后接入一个新的节点，然后<code>size++</code></li>\n<li><code>(this *MyLinkedList)DeleteAtIndex(index int)</code>: 删除一个元素类似上一题，只不过要判断index是否合法</li>\n<li><code>(this *MyLinkedList)AddAtIndex(index int, val)</code>: 先判断index是否合法，找到正确位置进行插入</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-keyword\">type</span> LinkList <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal  <span class=\"hljs-type\">int</span><br>\tNext *LinkList<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> MyLinkedList <span class=\"hljs-keyword\">struct</span> &#123;<br>\tsize    <span class=\"hljs-type\">int</span><br>\tnewHead *LinkList<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Constructor</span><span class=\"hljs-params\">()</span></span> MyLinkedList &#123;<br>\t<span class=\"hljs-comment\">//return MyLinkedList&#123;&#125;</span><br>\tnode := &amp;LinkList&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> MyLinkedList&#123;<br>\t\tnewHead: node,<br>\t\tsize:    <span class=\"hljs-number\">0</span>,<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> Get(index <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">int</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> || index &gt;= this.size || this == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span><br>\t&#125;<br>\tp := this.newHead.Next<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> p.Val<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtHead(val <span class=\"hljs-type\">int</span>) &#123;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: this.newHead.Next,<br>\t&#125;<br>\tthis.newHead.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtTail(val <span class=\"hljs-type\">int</span>) &#123;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tp.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> AddAtIndex(index <span class=\"hljs-type\">int</span>, val <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tindex = <span class=\"hljs-number\">0</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> index &gt; this.size &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tnewNode := &amp;LinkList&#123;<br>\t\tVal:  val,<br>\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tnewNode.Next = p.Next<br>\tp.Next = newNode<br>\tthis.size++<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(this *MyLinkedList)</span></span> DeleteAtIndex(index <span class=\"hljs-type\">int</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> || index &gt;= this.size &#123;<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\tp := this.newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; index; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> p.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp.Next = p.Next.Next<br>\t&#125;<br>\tthis.size--<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"206-反转链表\"><a href=\"#206-反转链表\" class=\"headerlink\" title=\"206. 反转链表\"></a>206. 反转链表</h2><blockquote>\n<p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-linked-list/\">leetcode题目链接</a></p>\n<p>文章讲解：<a href=\"https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html\">代码随想录(programmercarl.com)</a></p>\n<p>视频讲解：<a href=\"https://www.bilibili.com/video/BV1nB4y1i7eL\">帮你拿下反转链表 | LeetCode：206.反转链表</a></p>\n<p>状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>建立新的头结点<code>newHead</code> ，使其<code>newHead.Next = head</code>。</li>\n<li>定义指针<code>p = head.Next</code>(先判断head是否为单节点)，然后手动断链，<code>head.Next = nil</code></li>\n<li>指针<code>p</code>不断向后，每遍历到一个元素，将这个元素保存到新的节点<code>newNode</code>，并且不断头插到<code>newHead</code></li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addAtHead</span><span class=\"hljs-params\">(head *ListNode, val <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tnewNode := &amp;ListNode&#123;<br>\t\tVal:  val,<br>\t\tNext: newHead.Next,<br>\t&#125;<br>\tnewHead.Next = newNode<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">reverseList</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> head == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> head<br>\t&#125;<br>\tp := head.Next<br>\thead.Next = <span class=\"hljs-literal\">nil</span><br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\thead = addAtHead(head, p.Val)<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> head<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>leetcode上的链表的题都是无头链表，所谓的 <code>head</code> 被叫做 <code>虚拟头</code>。我感觉还是叫做无头链表好一些，新建一个头先链接无头链表</p>\n</li>\n<li><p>以前写过的都是有头链表，换到了无头链表刚开始有点不知所措、插入时候感觉怪怪的，其实都一样</p>\n</li>\n<li><p><code>Go</code>的<code>new</code>相关或者初始化成员变量有了新的理解</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> SSS <span class=\"hljs-keyword\">struct</span> &#123;<br>    Val <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-comment\">//初始化的方式1</span><br>a := <span class=\"hljs-built_in\">new</span> SSS(<span class=\"hljs-number\">1</span>)<br>a.Val = <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-comment\">//初始化的方式2</span><br>a := &amp;SSS&#123;<br>    Val: <span class=\"hljs-number\">1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>Go</code>的构造函数看起来还有点懵</p>\n</li>\n<li><p>最近事情太多了，周六上午招聘会、下午学校组织的求职训练营、晚上继续leetcode；周日上午训练营结课、下午再重写下链表、搞搞课题；周一还有个小活动。加油！</p>\n</li>\n</ul>\n"},{"title":"代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。","abbrlink":"b4e3c0b1","date":"2023-09-23T13:32:23.000Z","_content":"\n# 代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。\n\n## 24.两两交换链表中的节点\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/swap-nodes-in-pairs/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0024.两两交换链表中的节点.html)\n>\n>   视频讲解：[帮你把链表细节学清楚！ | LeetCode：24. 两两交换链表中的节点](https://www.bilibili.com/video/BV1YT411g7br)\n>\n>   状态：AC\n\n### 思路\n\n1.   定义新的头结点，定义指针`p = newHead`，定义两个新的结点`tempNode1.Val = 2`，`tempNode2.Val = 1`（这里的值`1`和`2`是为了简化描述）\n\n<img src=\"../images/IMG_1372.PNG\" alt=\"链表相关指针（变量说明）\" style=\"zoom:80%;\" />\n\n2.   使用新的结点重新进行连接，并且`p`前进到下一个位置（注意连接顺序，防止断链）\n     -   `tempNode2.Next = p.Next.Next.Next`\n     -   `tempNode1.Next = tempNode2`\n     -   `p.Next = tempNode1`\n     -   `p = p.Next.Next`\n\n<img src=\"../images/IMG_1373.PNG\" alt=\"IMG_1373\" style=\"zoom:80%;\" />\n\n### 代码\n\n``` go\nfunc swapPairs(head *ListNode) *ListNode {\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tp := newHead\n\tfor p.Next != nil && p.Next.Next != nil {\n\t\ttempNode1 := &ListNode{\n\t\t\tVal:  p.Next.Next.Val,\n\t\t\tNext: nil,\n\t\t}\n\t\ttempNode2 := &ListNode{\n\t\t\tVal:  p.Next.Val,\n\t\t\tNext: p.Next.Next.Next,\n\t\t}\n\t\ttempNode1.Next = tempNode2\n\t\tp.Next = tempNode1\n\t\tp = p.Next.Next\n\t}\n\treturn newHead.Next\n}\n```\n\n\n\n## 19.删除链表的倒数第N个节点\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/remove-nth-node-from-end-of-list/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF)\n>\n>   视频讲解：[链表遍历学清楚！ | LeetCode：19.删除链表倒数第N个节点](https://www.bilibili.com/video/BV1vW4y1U7Gf)\n>\n>   状态：AC\n\n### 思路\n\n定义两个指针`p`和`q`，指针`p`先出发，指针`q`保持与`p`距离为`n`之后再出发，这样`q.Next`则是待删除的元素。\n\n>   会不会出现`n`大于链表长度的情况（例如链表长度为5，删除倒数第8个元素）：不会，leetcode题解中给出。\n>\n>   <img src=\"../images/QQ20230923-221152.png\" alt=\"题目说明\" style=\"zoom:80%;\" />\n\n<img src=\"../images/IMG_2D422EDB0DFC-1.jpeg\" alt=\"图解\" style=\"zoom:80%;\" />\n\n### 代码\n\n``` go\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n\tif head == nil {\n\t\treturn head\n\t}\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tp := newHead\n\tfor i := 0; i <= n; i++ {\n\t\tp = p.Next\n\t}\n\tq := newHead\n\tfor p != nil {\n\t\tp = p.Next\n\t\tq = q.Next\n\t}\n\tif q.Next.Next != nil {\n\t\tq.Next = q.Next.Next\n\t} else {\n\t\tq.Next = nil\n\t}\n\n\treturn newHead.Next\n}\n```\n\n## 面试题02.07.链表相交\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html)\n>\n>   状态：AC\n\n### 思路\n\n假设是两个一维数组（只是为了方便逻辑上描述），查看是否相交，那么需要“尾部对齐”。假设长的链表开始的索引为0，我们需要从短的数组的开始。大意如下图\n\n<img src=\"../images/160_1.png\" alt=\"判断第一组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/160_2.png\" alt=\"判断第二组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/160_3.png\" alt=\"判断第三组结点\" style=\"zoom:80%;\" />\n\n走到末尾都没发现有相同地址的节点则不存在相交的情况。\n\n-   尾部对齐操作：遍历两个链表（一组指针`p = newHeadA.Next`和`q = newHeadB.Next`），求各自的长度。\n-   重新定义一组指针（`p1 = newHeadA.Next`和`q1 = newHeadB.Next`），让其中更长的链表的指针移动到和短的同步位置<font color=\"#bdbdbd\">（这里可能是Go语言的特性？C语言不需要此操作，不重新定义指针p和q回不到起始位置）</font>\n-   同时向前移动，判断是否地址相同\n\n### 代码\n\n``` go\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode {\n    // 定义两个新的头，指向传参的头\n    newHeadA := &ListNode {\n        Val: 0,\n        Next: headA,\n    }\n    newHeadB := &ListNode {\n        Val: 0,\n        Next: headB,\n    }\n    // 求两个链表各自的长度\n    p := newHeadA.Next\n    lenA := 0\n    q := newHeadB.Next\n    lenB := 0\n    for p != nil {\n        p = p.Next\n        lenA++\n    }\n    for q != nil {\n        q = q.Next\n        lenB++\n    }\n    \n    // 定义两个新的指针，进行“对齐”操作\n    p1 := newHeadA.Next\n    q1 := newHeadB.Next\n    if lenA < lenB {\n        for i := 0; i < lenB - lenA; i++ {\n            q1 = q1.Next\n        }\n    } else {\n        for i := 0; i < lenA - lenB; i++ {\n            p1 = p1.Next\n        }\n    }\n    // 对齐后向前查找，找到了返回结点，否则为nil\n    for p1 != nil && q1 != nil {\n        if p1 == q1 {\n            return p1\n        } else {\n            p1 = p1.Next\n            q1 = q1.Next\n        }\n    }\n    return nil\n}\n```\n\n## 142. 环形链表II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/linked-list-cycle-ii/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html)\n>\n>   视频讲解：[把环形链表讲清楚！| LeetCode:142.环形链表II](https://www.bilibili.com/video/BV1if4y1d7ob)\n>\n>   状态：想不出思路后看了卡哥的讲解恍然大悟，AC！\n\n### 思路\n\n<s><font color=\"#FF0000\">最开始没有审题，当成了这道题是在问是否存在环，后来发现这只是第一问</font></s>\n\n这道题需要返回的是：如果链表有环，那么返回最后一个结点链接到了哪个结点上。\n\n1.   首先要找到，链表是否有环，这里使用的是快慢指针的算法，快指针速度为2，慢指针速度为1。若快指针走到了终点说明没有环；如果两个指针相遇说明有环。\n\n     >   因为相对速度差1，所以二者必相遇\n\n2.   找到入口：（卡哥视频讲的很好，如果有疑问一定**看完视频**再提问）\n\n<img src=\"../images/142_1.jpeg\" alt=\"142_1\" style=\"zoom:80%;\" />\n\n为什么一圈必定会追上：假设他们同时进入入口（整个链表就是个环），慢指针走一圈后，快指针走两圈。如果快指针先进入，那么追上慢指针必定走不到一圈。\n\n最后推出来x=z，意味着此时的快指针降速（速度变为1），同时新定义的指针从头开始运动，两者必定在入口处相遇\n\n### 代码\n\n``` go\nfunc detectCycle(head *ListNode) *ListNode {\n    fast := head\n    slow := head\n    p := head\n    // 这层for寻找环\n    for fast != nil {\n        slow = slow.Next\n        fast = fast.Next\n        if fast != nil {\n            fast = fast.Next\n            if slow == fast {  // 两指针相遇说明有环\n            for p != fast {  // 这层for执行的是公式中x=z的一步\n                p = p.Next\n                fast = fast.Next\n            }\n            return p\n            }\n        } else {\n            break\n        }        \n    }\n    return nil\n}\n```\n\n## 小结\n\n-   今天重新写了下链表的实现（主要是vscode没有装调试leetcode插件），部分题都是自己在GoLand中自己写函数构造的链表，最后单独写了个文件保存这部分代码（主要就是新建链表和打印链表），新建链表是通过一个数组传要初始化的值。当然了，今天的也只有两道题可以用，后两道直接在leetcode的网页上写了，看起来挺复杂的还担心不好debug，理清思路之后写起来很快，也不会出错。\n\n    ``` go\n    package InitLinkList\n    \n    import \"fmt\"\n    \n    type ListNode struct {\n    \tVal  int\n    \tNext *ListNode\n    }\n    \n    func InsertElem(head *ListNode, nums []int) *ListNode {\n    \tnewHead := &ListNode{\n    \t\tVal:  0,\n    \t\tNext: head,\n    \t}\n    \tp := newHead\n    \tfor _, v := range nums {\n    \t\tp.Next = &ListNode{\n    \t\t\tVal:  v,\n    \t\t\tNext: nil,\n    \t\t}\n    \t\tp = p.Next\n    \t}\n    \treturn newHead.Next\n    }\n    \n    func PrintList(head *ListNode) {\n    \tp := head\n    \tfor p != nil {\n    \t\tfmt.Printf(\"%d\\t\", p.Val)\n    \t\tp = p.Next\n    \t}\n    \tfmt.Println()\n    }\n    \n    ```\n\n-   Go有些语法还不是很了解，今天发现了跨文件调用需要将`变量名`和`函数名`首字母大写，也叫作导出。从一些语法来看Go现在给我的感觉他就不想Java那种强面向对象编程。这点还挺好的（对我个人而言），很灵活，调用的时候也不需要实例化（也没这一种说法）。\n\n-   后三道题（最后一道题指的求是否存在环的过程）考研复习408的时候已经见过，只不过这次的身份发生了变化，面对这道题状态也不同。考研复习时候遇到手撕代码的题首先想到的是如何拿分，没思路就暴力算法。有额外时间再考虑优化。如果再试卷上我可能会使用空间复杂度更大的算法，空间换时间。但是现在在求职中，要好好的理解每一道题，每一种优化的思路，题干加以限制：`空间复杂度为O(1)`。真的需要认真思考，链表相交没有想出来，看了卡哥的讲解理解了。\n-   现在的刷题状态是这样的：多给自己思考的时间争取想到最优的解法。无论是否解出来再去看看卡哥的讲解和代码，看看别人写的和自己写的差距在哪。我的代码现在经常出现这种逻辑，对于个别情况需要单独判断，而别人的则不需要，因为自己在边界情况考虑的欠妥。明天周日休息一天。但是事情还是挺多的。\n\n<font color=\"#3914a5\">第一周打卡结束！4天结束！</font>\n","source":"_posts/代码随想录算法训练营第四天 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。.md","raw":"---\ntitle: 代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\ncategories: 刷题\nabbrlink: b4e3c0b1\ndate: 2023-09-23 21:32:23\n---\n\n# 代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。\n\n## 24.两两交换链表中的节点\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/swap-nodes-in-pairs/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0024.两两交换链表中的节点.html)\n>\n>   视频讲解：[帮你把链表细节学清楚！ | LeetCode：24. 两两交换链表中的节点](https://www.bilibili.com/video/BV1YT411g7br)\n>\n>   状态：AC\n\n### 思路\n\n1.   定义新的头结点，定义指针`p = newHead`，定义两个新的结点`tempNode1.Val = 2`，`tempNode2.Val = 1`（这里的值`1`和`2`是为了简化描述）\n\n<img src=\"../images/IMG_1372.PNG\" alt=\"链表相关指针（变量说明）\" style=\"zoom:80%;\" />\n\n2.   使用新的结点重新进行连接，并且`p`前进到下一个位置（注意连接顺序，防止断链）\n     -   `tempNode2.Next = p.Next.Next.Next`\n     -   `tempNode1.Next = tempNode2`\n     -   `p.Next = tempNode1`\n     -   `p = p.Next.Next`\n\n<img src=\"../images/IMG_1373.PNG\" alt=\"IMG_1373\" style=\"zoom:80%;\" />\n\n### 代码\n\n``` go\nfunc swapPairs(head *ListNode) *ListNode {\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tp := newHead\n\tfor p.Next != nil && p.Next.Next != nil {\n\t\ttempNode1 := &ListNode{\n\t\t\tVal:  p.Next.Next.Val,\n\t\t\tNext: nil,\n\t\t}\n\t\ttempNode2 := &ListNode{\n\t\t\tVal:  p.Next.Val,\n\t\t\tNext: p.Next.Next.Next,\n\t\t}\n\t\ttempNode1.Next = tempNode2\n\t\tp.Next = tempNode1\n\t\tp = p.Next.Next\n\t}\n\treturn newHead.Next\n}\n```\n\n\n\n## 19.删除链表的倒数第N个节点\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/remove-nth-node-from-end-of-list/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF)\n>\n>   视频讲解：[链表遍历学清楚！ | LeetCode：19.删除链表倒数第N个节点](https://www.bilibili.com/video/BV1vW4y1U7Gf)\n>\n>   状态：AC\n\n### 思路\n\n定义两个指针`p`和`q`，指针`p`先出发，指针`q`保持与`p`距离为`n`之后再出发，这样`q.Next`则是待删除的元素。\n\n>   会不会出现`n`大于链表长度的情况（例如链表长度为5，删除倒数第8个元素）：不会，leetcode题解中给出。\n>\n>   <img src=\"../images/QQ20230923-221152.png\" alt=\"题目说明\" style=\"zoom:80%;\" />\n\n<img src=\"../images/IMG_2D422EDB0DFC-1.jpeg\" alt=\"图解\" style=\"zoom:80%;\" />\n\n### 代码\n\n``` go\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n\tif head == nil {\n\t\treturn head\n\t}\n\tnewHead := &ListNode{\n\t\tVal:  0,\n\t\tNext: head,\n\t}\n\tp := newHead\n\tfor i := 0; i <= n; i++ {\n\t\tp = p.Next\n\t}\n\tq := newHead\n\tfor p != nil {\n\t\tp = p.Next\n\t\tq = q.Next\n\t}\n\tif q.Next.Next != nil {\n\t\tq.Next = q.Next.Next\n\t} else {\n\t\tq.Next = nil\n\t}\n\n\treturn newHead.Next\n}\n```\n\n## 面试题02.07.链表相交\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html)\n>\n>   状态：AC\n\n### 思路\n\n假设是两个一维数组（只是为了方便逻辑上描述），查看是否相交，那么需要“尾部对齐”。假设长的链表开始的索引为0，我们需要从短的数组的开始。大意如下图\n\n<img src=\"../images/160_1.png\" alt=\"判断第一组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/160_2.png\" alt=\"判断第二组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/160_3.png\" alt=\"判断第三组结点\" style=\"zoom:80%;\" />\n\n走到末尾都没发现有相同地址的节点则不存在相交的情况。\n\n-   尾部对齐操作：遍历两个链表（一组指针`p = newHeadA.Next`和`q = newHeadB.Next`），求各自的长度。\n-   重新定义一组指针（`p1 = newHeadA.Next`和`q1 = newHeadB.Next`），让其中更长的链表的指针移动到和短的同步位置<font color=\"#bdbdbd\">（这里可能是Go语言的特性？C语言不需要此操作，不重新定义指针p和q回不到起始位置）</font>\n-   同时向前移动，判断是否地址相同\n\n### 代码\n\n``` go\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode {\n    // 定义两个新的头，指向传参的头\n    newHeadA := &ListNode {\n        Val: 0,\n        Next: headA,\n    }\n    newHeadB := &ListNode {\n        Val: 0,\n        Next: headB,\n    }\n    // 求两个链表各自的长度\n    p := newHeadA.Next\n    lenA := 0\n    q := newHeadB.Next\n    lenB := 0\n    for p != nil {\n        p = p.Next\n        lenA++\n    }\n    for q != nil {\n        q = q.Next\n        lenB++\n    }\n    \n    // 定义两个新的指针，进行“对齐”操作\n    p1 := newHeadA.Next\n    q1 := newHeadB.Next\n    if lenA < lenB {\n        for i := 0; i < lenB - lenA; i++ {\n            q1 = q1.Next\n        }\n    } else {\n        for i := 0; i < lenA - lenB; i++ {\n            p1 = p1.Next\n        }\n    }\n    // 对齐后向前查找，找到了返回结点，否则为nil\n    for p1 != nil && q1 != nil {\n        if p1 == q1 {\n            return p1\n        } else {\n            p1 = p1.Next\n            q1 = q1.Next\n        }\n    }\n    return nil\n}\n```\n\n## 142. 环形链表II\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/linked-list-cycle-ii/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html)\n>\n>   视频讲解：[把环形链表讲清楚！| LeetCode:142.环形链表II](https://www.bilibili.com/video/BV1if4y1d7ob)\n>\n>   状态：想不出思路后看了卡哥的讲解恍然大悟，AC！\n\n### 思路\n\n<s><font color=\"#FF0000\">最开始没有审题，当成了这道题是在问是否存在环，后来发现这只是第一问</font></s>\n\n这道题需要返回的是：如果链表有环，那么返回最后一个结点链接到了哪个结点上。\n\n1.   首先要找到，链表是否有环，这里使用的是快慢指针的算法，快指针速度为2，慢指针速度为1。若快指针走到了终点说明没有环；如果两个指针相遇说明有环。\n\n     >   因为相对速度差1，所以二者必相遇\n\n2.   找到入口：（卡哥视频讲的很好，如果有疑问一定**看完视频**再提问）\n\n<img src=\"../images/142_1.jpeg\" alt=\"142_1\" style=\"zoom:80%;\" />\n\n为什么一圈必定会追上：假设他们同时进入入口（整个链表就是个环），慢指针走一圈后，快指针走两圈。如果快指针先进入，那么追上慢指针必定走不到一圈。\n\n最后推出来x=z，意味着此时的快指针降速（速度变为1），同时新定义的指针从头开始运动，两者必定在入口处相遇\n\n### 代码\n\n``` go\nfunc detectCycle(head *ListNode) *ListNode {\n    fast := head\n    slow := head\n    p := head\n    // 这层for寻找环\n    for fast != nil {\n        slow = slow.Next\n        fast = fast.Next\n        if fast != nil {\n            fast = fast.Next\n            if slow == fast {  // 两指针相遇说明有环\n            for p != fast {  // 这层for执行的是公式中x=z的一步\n                p = p.Next\n                fast = fast.Next\n            }\n            return p\n            }\n        } else {\n            break\n        }        \n    }\n    return nil\n}\n```\n\n## 小结\n\n-   今天重新写了下链表的实现（主要是vscode没有装调试leetcode插件），部分题都是自己在GoLand中自己写函数构造的链表，最后单独写了个文件保存这部分代码（主要就是新建链表和打印链表），新建链表是通过一个数组传要初始化的值。当然了，今天的也只有两道题可以用，后两道直接在leetcode的网页上写了，看起来挺复杂的还担心不好debug，理清思路之后写起来很快，也不会出错。\n\n    ``` go\n    package InitLinkList\n    \n    import \"fmt\"\n    \n    type ListNode struct {\n    \tVal  int\n    \tNext *ListNode\n    }\n    \n    func InsertElem(head *ListNode, nums []int) *ListNode {\n    \tnewHead := &ListNode{\n    \t\tVal:  0,\n    \t\tNext: head,\n    \t}\n    \tp := newHead\n    \tfor _, v := range nums {\n    \t\tp.Next = &ListNode{\n    \t\t\tVal:  v,\n    \t\t\tNext: nil,\n    \t\t}\n    \t\tp = p.Next\n    \t}\n    \treturn newHead.Next\n    }\n    \n    func PrintList(head *ListNode) {\n    \tp := head\n    \tfor p != nil {\n    \t\tfmt.Printf(\"%d\\t\", p.Val)\n    \t\tp = p.Next\n    \t}\n    \tfmt.Println()\n    }\n    \n    ```\n\n-   Go有些语法还不是很了解，今天发现了跨文件调用需要将`变量名`和`函数名`首字母大写，也叫作导出。从一些语法来看Go现在给我的感觉他就不想Java那种强面向对象编程。这点还挺好的（对我个人而言），很灵活，调用的时候也不需要实例化（也没这一种说法）。\n\n-   后三道题（最后一道题指的求是否存在环的过程）考研复习408的时候已经见过，只不过这次的身份发生了变化，面对这道题状态也不同。考研复习时候遇到手撕代码的题首先想到的是如何拿分，没思路就暴力算法。有额外时间再考虑优化。如果再试卷上我可能会使用空间复杂度更大的算法，空间换时间。但是现在在求职中，要好好的理解每一道题，每一种优化的思路，题干加以限制：`空间复杂度为O(1)`。真的需要认真思考，链表相交没有想出来，看了卡哥的讲解理解了。\n-   现在的刷题状态是这样的：多给自己思考的时间争取想到最优的解法。无论是否解出来再去看看卡哥的讲解和代码，看看别人写的和自己写的差距在哪。我的代码现在经常出现这种逻辑，对于个别情况需要单独判断，而别人的则不需要，因为自己在边界情况考虑的欠妥。明天周日休息一天。但是事情还是挺多的。\n\n<font color=\"#3914a5\">第一周打卡结束！4天结束！</font>\n","slug":"代码随想录算法训练营第四天 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。","published":1,"updated":"2023-09-23T15:21:33.498Z","_id":"clmw6d1nf0000kxz8ae60f0m2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第四天-24-两两交换链表中的节点、19-删除链表的倒数第N个节点、面试题02-07-链表相交、142-环形链表II。\"><a href=\"#代码随想录算法训练营第四天-24-两两交换链表中的节点、19-删除链表的倒数第N个节点、面试题02-07-链表相交、142-环形链表II。\" class=\"headerlink\" title=\"代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。\"></a>代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。</h1><h2 id=\"24-两两交换链表中的节点\"><a href=\"#24-两两交换链表中的节点\" class=\"headerlink\" title=\"24.两两交换链表中的节点\"></a>24.两两交换链表中的节点</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/swap-nodes-in-pairs/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0024.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1YT411g7br\">帮你把链表细节学清楚！ | LeetCode：24. 两两交换链表中的节点</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>定义新的头结点，定义指针<code>p = newHead</code>，定义两个新的结点<code>tempNode1.Val = 2</code>，<code>tempNode2.Val = 1</code>（这里的值<code>1</code>和<code>2</code>是为了简化描述）</li>\n</ol>\n<img src=\"../images/IMG_1372.PNG\" alt=\"链表相关指针（变量说明）\" style=\"zoom:80%;\" />\n\n<ol start=\"2\">\n<li>使用新的结点重新进行连接，并且<code>p</code>前进到下一个位置（注意连接顺序，防止断链）<ul>\n<li><code>tempNode2.Next = p.Next.Next.Next</code></li>\n<li><code>tempNode1.Next = tempNode2</code></li>\n<li><code>p.Next = tempNode1</code></li>\n<li><code>p = p.Next.Next</code></li>\n</ul>\n</li>\n</ol>\n<img src=\"../images/IMG_1373.PNG\" alt=\"IMG_1373\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">swapPairs</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &amp;&amp; p.Next.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\ttempNode1 := &amp;ListNode&#123;<br>\t\t\tVal:  p.Next.Next.Val,<br>\t\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t\t&#125;<br>\t\ttempNode2 := &amp;ListNode&#123;<br>\t\t\tVal:  p.Next.Val,<br>\t\t\tNext: p.Next.Next.Next,<br>\t\t&#125;<br>\t\ttempNode1.Next = tempNode2<br>\t\tp.Next = tempNode1<br>\t\tp = p.Next.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"19-删除链表的倒数第N个节点\"><a href=\"#19-删除链表的倒数第N个节点\" class=\"headerlink\" title=\"19.删除链表的倒数第N个节点\"></a>19.删除链表的倒数第N个节点</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1vW4y1U7Gf\">链表遍历学清楚！ | LeetCode：19.删除链表倒数第N个节点</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>定义两个指针<code>p</code>和<code>q</code>，指针<code>p</code>先出发，指针<code>q</code>保持与<code>p</code>距离为<code>n</code>之后再出发，这样<code>q.Next</code>则是待删除的元素。</p>\n<blockquote>\n<p>  会不会出现<code>n</code>大于链表长度的情况（例如链表长度为5，删除倒数第8个元素）：不会，leetcode题解中给出。</p>\n  <img src=\"../images/QQ20230923-221152.png\" alt=\"题目说明\" style=\"zoom:80%;\" />\n</blockquote>\n<img src=\"../images/IMG_2D422EDB0DFC-1.jpeg\" alt=\"图解\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeNthFromEnd</span><span class=\"hljs-params\">(head *ListNode, n <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> head == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> head<br>\t&#125;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt;= n; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tq := newHead<br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp = p.Next<br>\t\tq = q.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> q.Next.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tq.Next = q.Next.Next<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tq.Next = <span class=\"hljs-literal\">nil</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"面试题02-07-链表相交\"><a href=\"#面试题02-07-链表相交\" class=\"headerlink\" title=\"面试题02.07.链表相交\"></a>面试题02.07.链表相交</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>假设是两个一维数组（只是为了方便逻辑上描述），查看是否相交，那么需要“尾部对齐”。假设长的链表开始的索引为0，我们需要从短的数组的开始。大意如下图</p>\n<img src=\"../images/160_1.png\" alt=\"判断第一组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/160_2.png\" alt=\"判断第二组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/160_3.png\" alt=\"判断第三组结点\" style=\"zoom:80%;\" />\n\n<p>走到末尾都没发现有相同地址的节点则不存在相交的情况。</p>\n<ul>\n<li>尾部对齐操作：遍历两个链表（一组指针<code>p = newHeadA.Next</code>和<code>q = newHeadB.Next</code>），求各自的长度。</li>\n<li>重新定义一组指针（<code>p1 = newHeadA.Next</code>和<code>q1 = newHeadB.Next</code>），让其中更长的链表的指针移动到和短的同步位置<font color=\"#bdbdbd\">（这里可能是Go语言的特性？C语言不需要此操作，不重新定义指针p和q回不到起始位置）</font></li>\n<li>同时向前移动，判断是否地址相同</li>\n</ul>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getIntersectionNode</span><span class=\"hljs-params\">(headA, headB *ListNode)</span></span> *ListNode &#123;<br>    <span class=\"hljs-comment\">// 定义两个新的头，指向传参的头</span><br>    newHeadA := &amp;ListNode &#123;<br>        Val: <span class=\"hljs-number\">0</span>,<br>        Next: headA,<br>    &#125;<br>    newHeadB := &amp;ListNode &#123;<br>        Val: <span class=\"hljs-number\">0</span>,<br>        Next: headB,<br>    &#125;<br>    <span class=\"hljs-comment\">// 求两个链表各自的长度</span><br>    p := newHeadA.Next<br>    lenA := <span class=\"hljs-number\">0</span><br>    q := newHeadB.Next<br>    lenB := <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>        p = p.Next<br>        lenA++<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> q != <span class=\"hljs-literal\">nil</span> &#123;<br>        q = q.Next<br>        lenB++<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">// 定义两个新的指针，进行“对齐”操作</span><br>    p1 := newHeadA.Next<br>    q1 := newHeadB.Next<br>    <span class=\"hljs-keyword\">if</span> lenA &lt; lenB &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; lenB - lenA; i++ &#123;<br>            q1 = q1.Next<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; lenA - lenB; i++ &#123;<br>            p1 = p1.Next<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 对齐后向前查找，找到了返回结点，否则为nil</span><br>    <span class=\"hljs-keyword\">for</span> p1 != <span class=\"hljs-literal\">nil</span> &amp;&amp; q1 != <span class=\"hljs-literal\">nil</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> p1 == q1 &#123;<br>            <span class=\"hljs-keyword\">return</span> p1<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            p1 = p1.Next<br>            q1 = q1.Next<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"142-环形链表II\"><a href=\"#142-环形链表II\" class=\"headerlink\" title=\"142. 环形链表II\"></a>142. 环形链表II</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1if4y1d7ob\">把环形链表讲清楚！| LeetCode:142.环形链表II</a></p>\n<p>  状态：想不出思路后看了卡哥的讲解恍然大悟，AC！</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><s><font color=\"#FF0000\">最开始没有审题，当成了这道题是在问是否存在环，后来发现这只是第一问</font></s></p>\n<p>这道题需要返回的是：如果链表有环，那么返回最后一个结点链接到了哪个结点上。</p>\n<ol>\n<li><p>首先要找到，链表是否有环，这里使用的是快慢指针的算法，快指针速度为2，慢指针速度为1。若快指针走到了终点说明没有环；如果两个指针相遇说明有环。</p>\n<blockquote>\n<p>  因为相对速度差1，所以二者必相遇</p>\n</blockquote>\n</li>\n<li><p>找到入口：（卡哥视频讲的很好，如果有疑问一定<strong>看完视频</strong>再提问）</p>\n</li>\n</ol>\n<img src=\"../images/142_1.jpeg\" alt=\"142_1\" style=\"zoom:80%;\" />\n\n<p>为什么一圈必定会追上：假设他们同时进入入口（整个链表就是个环），慢指针走一圈后，快指针走两圈。如果快指针先进入，那么追上慢指针必定走不到一圈。</p>\n<p>最后推出来x&#x3D;z，意味着此时的快指针降速（速度变为1），同时新定义的指针从头开始运动，两者必定在入口处相遇</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">detectCycle</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>    fast := head<br>    slow := head<br>    p := head<br>    <span class=\"hljs-comment\">// 这层for寻找环</span><br>    <span class=\"hljs-keyword\">for</span> fast != <span class=\"hljs-literal\">nil</span> &#123;<br>        slow = slow.Next<br>        fast = fast.Next<br>        <span class=\"hljs-keyword\">if</span> fast != <span class=\"hljs-literal\">nil</span> &#123;<br>            fast = fast.Next<br>            <span class=\"hljs-keyword\">if</span> slow == fast &#123;  <span class=\"hljs-comment\">// 两指针相遇说明有环</span><br>            <span class=\"hljs-keyword\">for</span> p != fast &#123;  <span class=\"hljs-comment\">// 这层for执行的是公式中x=z的一步</span><br>                p = p.Next<br>                fast = fast.Next<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> p<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;        <br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>今天重新写了下链表的实现（主要是vscode没有装调试leetcode插件），部分题都是自己在GoLand中自己写函数构造的链表，最后单独写了个文件保存这部分代码（主要就是新建链表和打印链表），新建链表是通过一个数组传要初始化的值。当然了，今天的也只有两道题可以用，后两道直接在leetcode的网页上写了，看起来挺复杂的还担心不好debug，理清思路之后写起来很快，也不会出错。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> InitLinkList<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-keyword\">type</span> ListNode <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal  <span class=\"hljs-type\">int</span><br>\tNext *ListNode<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">InsertElem</span><span class=\"hljs-params\">(head *ListNode, nums []<span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\tp.Next = &amp;ListNode&#123;<br>\t\t\tVal:  v,<br>\t\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t\t&#125;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">PrintList</span><span class=\"hljs-params\">(head *ListNode)</span></span> &#123;<br>\tp := head<br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>, p.Val)<br>\t\tp = p.Next<br>\t&#125;<br>\tfmt.Println()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Go有些语法还不是很了解，今天发现了跨文件调用需要将<code>变量名</code>和<code>函数名</code>首字母大写，也叫作导出。从一些语法来看Go现在给我的感觉他就不想Java那种强面向对象编程。这点还挺好的（对我个人而言），很灵活，调用的时候也不需要实例化（也没这一种说法）。</p>\n</li>\n<li><p>后三道题（最后一道题指的求是否存在环的过程）考研复习408的时候已经见过，只不过这次的身份发生了变化，面对这道题状态也不同。考研复习时候遇到手撕代码的题首先想到的是如何拿分，没思路就暴力算法。有额外时间再考虑优化。如果再试卷上我可能会使用空间复杂度更大的算法，空间换时间。但是现在在求职中，要好好的理解每一道题，每一种优化的思路，题干加以限制：<code>空间复杂度为O(1)</code>。真的需要认真思考，链表相交没有想出来，看了卡哥的讲解理解了。</p>\n</li>\n<li><p>现在的刷题状态是这样的：多给自己思考的时间争取想到最优的解法。无论是否解出来再去看看卡哥的讲解和代码，看看别人写的和自己写的差距在哪。我的代码现在经常出现这种逻辑，对于个别情况需要单独判断，而别人的则不需要，因为自己在边界情况考虑的欠妥。明天周日休息一天。但是事情还是挺多的。</p>\n</li>\n</ul>\n<p><font color=\"#3914a5\">第一周打卡结束！4天结束！</font></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第四天-24-两两交换链表中的节点、19-删除链表的倒数第N个节点、面试题02-07-链表相交、142-环形链表II。\"><a href=\"#代码随想录算法训练营第四天-24-两两交换链表中的节点、19-删除链表的倒数第N个节点、面试题02-07-链表相交、142-环形链表II。\" class=\"headerlink\" title=\"代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。\"></a>代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。</h1><h2 id=\"24-两两交换链表中的节点\"><a href=\"#24-两两交换链表中的节点\" class=\"headerlink\" title=\"24.两两交换链表中的节点\"></a>24.两两交换链表中的节点</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/swap-nodes-in-pairs/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0024.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1YT411g7br\">帮你把链表细节学清楚！ | LeetCode：24. 两两交换链表中的节点</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>定义新的头结点，定义指针<code>p = newHead</code>，定义两个新的结点<code>tempNode1.Val = 2</code>，<code>tempNode2.Val = 1</code>（这里的值<code>1</code>和<code>2</code>是为了简化描述）</li>\n</ol>\n<img src=\"../images/IMG_1372.PNG\" alt=\"链表相关指针（变量说明）\" style=\"zoom:80%;\" />\n\n<ol start=\"2\">\n<li>使用新的结点重新进行连接，并且<code>p</code>前进到下一个位置（注意连接顺序，防止断链）<ul>\n<li><code>tempNode2.Next = p.Next.Next.Next</code></li>\n<li><code>tempNode1.Next = tempNode2</code></li>\n<li><code>p.Next = tempNode1</code></li>\n<li><code>p = p.Next.Next</code></li>\n</ul>\n</li>\n</ol>\n<img src=\"../images/IMG_1373.PNG\" alt=\"IMG_1373\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">swapPairs</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> p.Next != <span class=\"hljs-literal\">nil</span> &amp;&amp; p.Next.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\ttempNode1 := &amp;ListNode&#123;<br>\t\t\tVal:  p.Next.Next.Val,<br>\t\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t\t&#125;<br>\t\ttempNode2 := &amp;ListNode&#123;<br>\t\t\tVal:  p.Next.Val,<br>\t\t\tNext: p.Next.Next.Next,<br>\t\t&#125;<br>\t\ttempNode1.Next = tempNode2<br>\t\tp.Next = tempNode1<br>\t\tp = p.Next.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"19-删除链表的倒数第N个节点\"><a href=\"#19-删除链表的倒数第N个节点\" class=\"headerlink\" title=\"19.删除链表的倒数第N个节点\"></a>19.删除链表的倒数第N个节点</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1vW4y1U7Gf\">链表遍历学清楚！ | LeetCode：19.删除链表倒数第N个节点</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>定义两个指针<code>p</code>和<code>q</code>，指针<code>p</code>先出发，指针<code>q</code>保持与<code>p</code>距离为<code>n</code>之后再出发，这样<code>q.Next</code>则是待删除的元素。</p>\n<blockquote>\n<p>  会不会出现<code>n</code>大于链表长度的情况（例如链表长度为5，删除倒数第8个元素）：不会，leetcode题解中给出。</p>\n  <img src=\"../images/QQ20230923-221152.png\" alt=\"题目说明\" style=\"zoom:80%;\" />\n</blockquote>\n<img src=\"../images/IMG_2D422EDB0DFC-1.jpeg\" alt=\"图解\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">removeNthFromEnd</span><span class=\"hljs-params\">(head *ListNode, n <span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\t<span class=\"hljs-keyword\">if</span> head == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> head<br>\t&#125;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt;= n; i++ &#123;<br>\t\tp = p.Next<br>\t&#125;<br>\tq := newHead<br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tp = p.Next<br>\t\tq = q.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> q.Next.Next != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tq.Next = q.Next.Next<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tq.Next = <span class=\"hljs-literal\">nil</span><br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"面试题02-07-链表相交\"><a href=\"#面试题02-07-链表相交\" class=\"headerlink\" title=\"面试题02.07.链表相交\"></a>面试题02.07.链表相交</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>假设是两个一维数组（只是为了方便逻辑上描述），查看是否相交，那么需要“尾部对齐”。假设长的链表开始的索引为0，我们需要从短的数组的开始。大意如下图</p>\n<img src=\"../images/160_1.png\" alt=\"判断第一组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/160_2.png\" alt=\"判断第二组结点\" style=\"zoom:80%;\" />\n\n<img src=\"../images/160_3.png\" alt=\"判断第三组结点\" style=\"zoom:80%;\" />\n\n<p>走到末尾都没发现有相同地址的节点则不存在相交的情况。</p>\n<ul>\n<li>尾部对齐操作：遍历两个链表（一组指针<code>p = newHeadA.Next</code>和<code>q = newHeadB.Next</code>），求各自的长度。</li>\n<li>重新定义一组指针（<code>p1 = newHeadA.Next</code>和<code>q1 = newHeadB.Next</code>），让其中更长的链表的指针移动到和短的同步位置<font color=\"#bdbdbd\">（这里可能是Go语言的特性？C语言不需要此操作，不重新定义指针p和q回不到起始位置）</font></li>\n<li>同时向前移动，判断是否地址相同</li>\n</ul>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getIntersectionNode</span><span class=\"hljs-params\">(headA, headB *ListNode)</span></span> *ListNode &#123;<br>    <span class=\"hljs-comment\">// 定义两个新的头，指向传参的头</span><br>    newHeadA := &amp;ListNode &#123;<br>        Val: <span class=\"hljs-number\">0</span>,<br>        Next: headA,<br>    &#125;<br>    newHeadB := &amp;ListNode &#123;<br>        Val: <span class=\"hljs-number\">0</span>,<br>        Next: headB,<br>    &#125;<br>    <span class=\"hljs-comment\">// 求两个链表各自的长度</span><br>    p := newHeadA.Next<br>    lenA := <span class=\"hljs-number\">0</span><br>    q := newHeadB.Next<br>    lenB := <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>        p = p.Next<br>        lenA++<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> q != <span class=\"hljs-literal\">nil</span> &#123;<br>        q = q.Next<br>        lenB++<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">// 定义两个新的指针，进行“对齐”操作</span><br>    p1 := newHeadA.Next<br>    q1 := newHeadB.Next<br>    <span class=\"hljs-keyword\">if</span> lenA &lt; lenB &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; lenB - lenA; i++ &#123;<br>            q1 = q1.Next<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; lenA - lenB; i++ &#123;<br>            p1 = p1.Next<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 对齐后向前查找，找到了返回结点，否则为nil</span><br>    <span class=\"hljs-keyword\">for</span> p1 != <span class=\"hljs-literal\">nil</span> &amp;&amp; q1 != <span class=\"hljs-literal\">nil</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> p1 == q1 &#123;<br>            <span class=\"hljs-keyword\">return</span> p1<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            p1 = p1.Next<br>            q1 = q1.Next<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"142-环形链表II\"><a href=\"#142-环形链表II\" class=\"headerlink\" title=\"142. 环形链表II\"></a>142. 环形链表II</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1if4y1d7ob\">把环形链表讲清楚！| LeetCode:142.环形链表II</a></p>\n<p>  状态：想不出思路后看了卡哥的讲解恍然大悟，AC！</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><s><font color=\"#FF0000\">最开始没有审题，当成了这道题是在问是否存在环，后来发现这只是第一问</font></s></p>\n<p>这道题需要返回的是：如果链表有环，那么返回最后一个结点链接到了哪个结点上。</p>\n<ol>\n<li><p>首先要找到，链表是否有环，这里使用的是快慢指针的算法，快指针速度为2，慢指针速度为1。若快指针走到了终点说明没有环；如果两个指针相遇说明有环。</p>\n<blockquote>\n<p>  因为相对速度差1，所以二者必相遇</p>\n</blockquote>\n</li>\n<li><p>找到入口：（卡哥视频讲的很好，如果有疑问一定<strong>看完视频</strong>再提问）</p>\n</li>\n</ol>\n<img src=\"../images/142_1.jpeg\" alt=\"142_1\" style=\"zoom:80%;\" />\n\n<p>为什么一圈必定会追上：假设他们同时进入入口（整个链表就是个环），慢指针走一圈后，快指针走两圈。如果快指针先进入，那么追上慢指针必定走不到一圈。</p>\n<p>最后推出来x&#x3D;z，意味着此时的快指针降速（速度变为1），同时新定义的指针从头开始运动，两者必定在入口处相遇</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">detectCycle</span><span class=\"hljs-params\">(head *ListNode)</span></span> *ListNode &#123;<br>    fast := head<br>    slow := head<br>    p := head<br>    <span class=\"hljs-comment\">// 这层for寻找环</span><br>    <span class=\"hljs-keyword\">for</span> fast != <span class=\"hljs-literal\">nil</span> &#123;<br>        slow = slow.Next<br>        fast = fast.Next<br>        <span class=\"hljs-keyword\">if</span> fast != <span class=\"hljs-literal\">nil</span> &#123;<br>            fast = fast.Next<br>            <span class=\"hljs-keyword\">if</span> slow == fast &#123;  <span class=\"hljs-comment\">// 两指针相遇说明有环</span><br>            <span class=\"hljs-keyword\">for</span> p != fast &#123;  <span class=\"hljs-comment\">// 这层for执行的是公式中x=z的一步</span><br>                p = p.Next<br>                fast = fast.Next<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> p<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;        <br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>今天重新写了下链表的实现（主要是vscode没有装调试leetcode插件），部分题都是自己在GoLand中自己写函数构造的链表，最后单独写了个文件保存这部分代码（主要就是新建链表和打印链表），新建链表是通过一个数组传要初始化的值。当然了，今天的也只有两道题可以用，后两道直接在leetcode的网页上写了，看起来挺复杂的还担心不好debug，理清思路之后写起来很快，也不会出错。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> InitLinkList<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-keyword\">type</span> ListNode <span class=\"hljs-keyword\">struct</span> &#123;<br>\tVal  <span class=\"hljs-type\">int</span><br>\tNext *ListNode<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">InsertElem</span><span class=\"hljs-params\">(head *ListNode, nums []<span class=\"hljs-type\">int</span>)</span></span> *ListNode &#123;<br>\tnewHead := &amp;ListNode&#123;<br>\t\tVal:  <span class=\"hljs-number\">0</span>,<br>\t\tNext: head,<br>\t&#125;<br>\tp := newHead<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\tp.Next = &amp;ListNode&#123;<br>\t\t\tVal:  v,<br>\t\t\tNext: <span class=\"hljs-literal\">nil</span>,<br>\t\t&#125;<br>\t\tp = p.Next<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> newHead.Next<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">PrintList</span><span class=\"hljs-params\">(head *ListNode)</span></span> &#123;<br>\tp := head<br>\t<span class=\"hljs-keyword\">for</span> p != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>, p.Val)<br>\t\tp = p.Next<br>\t&#125;<br>\tfmt.Println()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Go有些语法还不是很了解，今天发现了跨文件调用需要将<code>变量名</code>和<code>函数名</code>首字母大写，也叫作导出。从一些语法来看Go现在给我的感觉他就不想Java那种强面向对象编程。这点还挺好的（对我个人而言），很灵活，调用的时候也不需要实例化（也没这一种说法）。</p>\n</li>\n<li><p>后三道题（最后一道题指的求是否存在环的过程）考研复习408的时候已经见过，只不过这次的身份发生了变化，面对这道题状态也不同。考研复习时候遇到手撕代码的题首先想到的是如何拿分，没思路就暴力算法。有额外时间再考虑优化。如果再试卷上我可能会使用空间复杂度更大的算法，空间换时间。但是现在在求职中，要好好的理解每一道题，每一种优化的思路，题干加以限制：<code>空间复杂度为O(1)</code>。真的需要认真思考，链表相交没有想出来，看了卡哥的讲解理解了。</p>\n</li>\n<li><p>现在的刷题状态是这样的：多给自己思考的时间争取想到最优的解法。无论是否解出来再去看看卡哥的讲解和代码，看看别人写的和自己写的差距在哪。我的代码现在经常出现这种逻辑，对于个别情况需要单独判断，而别人的则不需要，因为自己在边界情况考虑的欠妥。明天周日休息一天。但是事情还是挺多的。</p>\n</li>\n</ul>\n<p><font color=\"#3914a5\">第一周打卡结束！4天结束！</font></p>\n"},{"title":"代码随想录算法训练营第五天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。","abbrlink":"20198d61","date":"2023-09-25T02:09:40.000Z","_content":"\n# 代码随想录算法训练营第五天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。\n\n## 242.有效的字母异位词\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/valid-anagram/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html)\n>\n>   视频讲解：[学透哈希表，数组使用有技巧！Leetcode：242.有效的字母异位词](https://www.bilibili.com/video/BV1YG411p7BA)\n>\n>   状态：AC\n\n### 思路\n\n-   方法一：使用`map`即可。键是字母的`ASCII`码、值为频率。分别用两个串构建两个`map`，再比较两个`map`是否相同。\n\n-   方法二：看了卡哥给的代码发现优化空间还是很大的，使用一个`map`即可，存放`s`的情况。异位词满足两个条件：\n    -   两个串等长。\n    -   两个串中字母出现的频率相同。这一点可以用`s`串的`map`的`value`自减。\n\n### 代码\n\n``` go\n//麻烦的方法\nfunc isAnagram(s string, t string) bool {\n\twords1 := map[byte]int{}\n\twords2 := map[byte]int{}\n\tfor i := 0; i < len(s); i++ {\n\t\t_, ok := words1[s[i]]\n\t\tif ok {\n\t\t\twords1[s[i]] += 1\n\t\t} else {\n\t\t\twords1[s[i]] = 1\n\t\t}\n\t}\n\tfor i := 0; i < len(t); i++ {\n\t\t_, ok := words2[t[i]]\n\t\tif ok {\n\t\t\twords2[t[i]] += 1\n\t\t} else {\n\t\t\twords2[t[i]] = 1\n\t\t}\n\t}\n\n\treturn reflect.DeepEqual(words1, words2)\n}\n```\n\n``` go\n// 简单的代码\nfunc isAnagram(s, t string) bool {\n\tif len(s) != len(t) {\n\t\treturn false\n\t}\n\tcnt := map[rune]int{}\n\tfor _, ch := range s {\n\t\tcnt[ch]++\n\t}\n\tfor _, ch := range t {\n\t\tcnt[ch]--\n\t\tif cnt[ch] < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n```\n\n\n\n## 349. 两个数组的交集\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/intersection-of-two-arrays/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html)\n>\n>   视频讲解：[学透哈希表，set使用有技巧！Leetcode：349. 两个数组的交集](https://www.bilibili.com/video/BV1ba411S7wu)\n>\n>   状态：AC\n\n### 思路\n\n从求交集可以看出是要使用集合的结构，但是在Go语言中<font color=\"#ff0000\">并没有</font>集合，所以我使用了`map`（并不是用map模拟set）。map中，键为`nums1`的每个元素，值只有三种状态：第一次出现是`0`，多次出现是`1`，在`nums2`也出现过是`2`，最后遍历map，找到值为2的key。\n\n利用const和iota模拟枚举类型。\n\n### 代码\n\n``` go\n\nconst (\n\tNEW = iota\n\tEXIST1\n\tEXIST2\n)\n\nfunc intersection(nums1 []int, nums2 []int) []int {\n\tset := map[int]int{}  //类集合操作\n\tfor _, v := range nums1 {\n\t\tif _, ok := set[v]; !ok {\n\t\t\tset[v] = NEW  // 第一个出现\n\t\t} else {  // 多次出现\n\t\t\tset[v] = EXIST1\n\t\t}\n\t}\n\tfor _, v := range nums2 {\n\t\tif _, ok := set[v]; ok {  // nums2也出现\n\t\t\tset[v] = EXIST2\n\t\t}\n\t}\n\tvar result []int\n\tfor k, v := range set {\n\t\tif v == EXIST2 {\n\t\t\tresult = append(result, k)\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 202. 快乐数\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/happy-number/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html#%E6%80%9D%E8%B7%AF)\n>\n>   状态：AC\n\n### 思路\n\n1.   构造一个集合，用于存放每一次拆数求平方和的结果\n2.   拆数\n3.   判断结果是否是1，如果是`return true`\n4.   如果不是1，判断结果是否在集合中，如果存在则说明出现了循环，`return false`\n\n\n\n### 代码\n\n``` go\nfunc isHappy(n int) bool {\n\tset := map[int]bool{}  // 模拟集合\n\tfor {\n\t\tsum := 0\n        //拆数求平方和\n\t\tfor n > 0 {\n\t\t\tsum += (n % 10) * (n % 10)\n\t\t\tn /= 10\n\t\t}\n        //得到正确答案\n\t\tif sum == 1 {\n\t\t\treturn true\n\t\t}\n        \n        //结果不在集合中则放入集合\n\t\tif _, ok := set[sum]; !ok {\n\t\t\tset[sum] = true\n\t\t} else {// 否则退出循环 return false\n\t\t\tbreak\n\t\t}\n\t\tn = sum // 新一轮的数\n\t}\n\treturn false\n}\n```\n\n## 1.两数之和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/two-sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html)\n>\n>   视频讲解：[梦开始的地方，Leetcode：1.两数之和](https://www.bilibili.com/video/BV1aT41177mK)\n>\n>   状态：AC\n\n### 思路\n\n1.   遍历`nums`将元素存为`map`的`key`，将元素的索引存放为`map`的`value`；\n2.   再遍历`nums`，查看`target - v`是否在`key`中，并返回两个值：`nums`元素的索引和`map[target-v]`\n\n遍历两次还是思路上走弯路了，一次即可。\n\n### 代码\n\n```go\n//遍历两次\nfunc twoSum(nums []int, target int) []int {\n    mapNums := map[int]int{}\n    for i, v := range nums {\n       mapNums[v] = i\n    }\n    var result []int\n    for i, v := range nums {\n       if _, ok := mapNums[target-v]; ok && mapNums[target-v] != i {\n          result = append(result, i)\n          result = append(result, mapNums[target-v])\n          break\n       }\n    }\n    return result\n}\n```\n\n``` go\nfunc twoSum(nums []int, target int) []int {\n\tmapNums := map[int]int{}\n\tfor i, v := range nums {\n\t\tif value, ok := mapNums[target-v]; ok {\n\t\t\treturn []int{i, value}\n\t\t} else {\n\t\t\tmapNums[v] = i\n\t\t}\n\t}\n\treturn []int{}\n}\n```\n\n## 小结\n\n-   这次的题目不算很难，做起来就很快，算上写博客的时间不到两个小时\n\n-   对Go语言的map有了新的理解：\n\n    ``` go\n    test = map[int]int{}\n    if value, ok := test[key]; ok {\n    \t// key存在的情况\n    } else {\n    \t// key不存在的情况\n    }\n    ```\n\n    ``` go\n    // 使用反射来判断两个map是否相等\n    import reflect\n    reflect.DeepEqual(map1, map2)\n    ```\n\n    ``` go\n    test = map[int]int{}\n    test[1]--  // 即使不存在1，默认新增键值对{1:0}，然后再自减\n    ```\n\n    \n\n-   第一次使用Go模拟枚举\n\n    ``` go\n    const (\n    \tA iota\n        B\n        C\n    )\n    ```\n\n    \n","source":"_posts/代码随想录算法训练营第五天 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。.md","raw":"---\ntitle: 代码随想录算法训练营第五天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。\ntags:\n  - 算法\n  - 代码随想录\n  - LeetCode\ncategories: 刷题\nabbrlink: 20198d61\ndate: 2023-09-25 10:09:40\n---\n\n# 代码随想录算法训练营第五天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。\n\n## 242.有效的字母异位词\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/valid-anagram/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html)\n>\n>   视频讲解：[学透哈希表，数组使用有技巧！Leetcode：242.有效的字母异位词](https://www.bilibili.com/video/BV1YG411p7BA)\n>\n>   状态：AC\n\n### 思路\n\n-   方法一：使用`map`即可。键是字母的`ASCII`码、值为频率。分别用两个串构建两个`map`，再比较两个`map`是否相同。\n\n-   方法二：看了卡哥给的代码发现优化空间还是很大的，使用一个`map`即可，存放`s`的情况。异位词满足两个条件：\n    -   两个串等长。\n    -   两个串中字母出现的频率相同。这一点可以用`s`串的`map`的`value`自减。\n\n### 代码\n\n``` go\n//麻烦的方法\nfunc isAnagram(s string, t string) bool {\n\twords1 := map[byte]int{}\n\twords2 := map[byte]int{}\n\tfor i := 0; i < len(s); i++ {\n\t\t_, ok := words1[s[i]]\n\t\tif ok {\n\t\t\twords1[s[i]] += 1\n\t\t} else {\n\t\t\twords1[s[i]] = 1\n\t\t}\n\t}\n\tfor i := 0; i < len(t); i++ {\n\t\t_, ok := words2[t[i]]\n\t\tif ok {\n\t\t\twords2[t[i]] += 1\n\t\t} else {\n\t\t\twords2[t[i]] = 1\n\t\t}\n\t}\n\n\treturn reflect.DeepEqual(words1, words2)\n}\n```\n\n``` go\n// 简单的代码\nfunc isAnagram(s, t string) bool {\n\tif len(s) != len(t) {\n\t\treturn false\n\t}\n\tcnt := map[rune]int{}\n\tfor _, ch := range s {\n\t\tcnt[ch]++\n\t}\n\tfor _, ch := range t {\n\t\tcnt[ch]--\n\t\tif cnt[ch] < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n```\n\n\n\n## 349. 两个数组的交集\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/intersection-of-two-arrays/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html)\n>\n>   视频讲解：[学透哈希表，set使用有技巧！Leetcode：349. 两个数组的交集](https://www.bilibili.com/video/BV1ba411S7wu)\n>\n>   状态：AC\n\n### 思路\n\n从求交集可以看出是要使用集合的结构，但是在Go语言中<font color=\"#ff0000\">并没有</font>集合，所以我使用了`map`（并不是用map模拟set）。map中，键为`nums1`的每个元素，值只有三种状态：第一次出现是`0`，多次出现是`1`，在`nums2`也出现过是`2`，最后遍历map，找到值为2的key。\n\n利用const和iota模拟枚举类型。\n\n### 代码\n\n``` go\n\nconst (\n\tNEW = iota\n\tEXIST1\n\tEXIST2\n)\n\nfunc intersection(nums1 []int, nums2 []int) []int {\n\tset := map[int]int{}  //类集合操作\n\tfor _, v := range nums1 {\n\t\tif _, ok := set[v]; !ok {\n\t\t\tset[v] = NEW  // 第一个出现\n\t\t} else {  // 多次出现\n\t\t\tset[v] = EXIST1\n\t\t}\n\t}\n\tfor _, v := range nums2 {\n\t\tif _, ok := set[v]; ok {  // nums2也出现\n\t\t\tset[v] = EXIST2\n\t\t}\n\t}\n\tvar result []int\n\tfor k, v := range set {\n\t\tif v == EXIST2 {\n\t\t\tresult = append(result, k)\n\t\t}\n\t}\n\treturn result\n}\n```\n\n## 202. 快乐数\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/happy-number/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html#%E6%80%9D%E8%B7%AF)\n>\n>   状态：AC\n\n### 思路\n\n1.   构造一个集合，用于存放每一次拆数求平方和的结果\n2.   拆数\n3.   判断结果是否是1，如果是`return true`\n4.   如果不是1，判断结果是否在集合中，如果存在则说明出现了循环，`return false`\n\n\n\n### 代码\n\n``` go\nfunc isHappy(n int) bool {\n\tset := map[int]bool{}  // 模拟集合\n\tfor {\n\t\tsum := 0\n        //拆数求平方和\n\t\tfor n > 0 {\n\t\t\tsum += (n % 10) * (n % 10)\n\t\t\tn /= 10\n\t\t}\n        //得到正确答案\n\t\tif sum == 1 {\n\t\t\treturn true\n\t\t}\n        \n        //结果不在集合中则放入集合\n\t\tif _, ok := set[sum]; !ok {\n\t\t\tset[sum] = true\n\t\t} else {// 否则退出循环 return false\n\t\t\tbreak\n\t\t}\n\t\tn = sum // 新一轮的数\n\t}\n\treturn false\n}\n```\n\n## 1.两数之和\n\n>   题目链接：[力扣题目链接](https://leetcode.cn/problems/two-sum/)\n>\n>   文章讲解：[代码随想录(programmercarl.com)](https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html)\n>\n>   视频讲解：[梦开始的地方，Leetcode：1.两数之和](https://www.bilibili.com/video/BV1aT41177mK)\n>\n>   状态：AC\n\n### 思路\n\n1.   遍历`nums`将元素存为`map`的`key`，将元素的索引存放为`map`的`value`；\n2.   再遍历`nums`，查看`target - v`是否在`key`中，并返回两个值：`nums`元素的索引和`map[target-v]`\n\n遍历两次还是思路上走弯路了，一次即可。\n\n### 代码\n\n```go\n//遍历两次\nfunc twoSum(nums []int, target int) []int {\n    mapNums := map[int]int{}\n    for i, v := range nums {\n       mapNums[v] = i\n    }\n    var result []int\n    for i, v := range nums {\n       if _, ok := mapNums[target-v]; ok && mapNums[target-v] != i {\n          result = append(result, i)\n          result = append(result, mapNums[target-v])\n          break\n       }\n    }\n    return result\n}\n```\n\n``` go\nfunc twoSum(nums []int, target int) []int {\n\tmapNums := map[int]int{}\n\tfor i, v := range nums {\n\t\tif value, ok := mapNums[target-v]; ok {\n\t\t\treturn []int{i, value}\n\t\t} else {\n\t\t\tmapNums[v] = i\n\t\t}\n\t}\n\treturn []int{}\n}\n```\n\n## 小结\n\n-   这次的题目不算很难，做起来就很快，算上写博客的时间不到两个小时\n\n-   对Go语言的map有了新的理解：\n\n    ``` go\n    test = map[int]int{}\n    if value, ok := test[key]; ok {\n    \t// key存在的情况\n    } else {\n    \t// key不存在的情况\n    }\n    ```\n\n    ``` go\n    // 使用反射来判断两个map是否相等\n    import reflect\n    reflect.DeepEqual(map1, map2)\n    ```\n\n    ``` go\n    test = map[int]int{}\n    test[1]--  // 即使不存在1，默认新增键值对{1:0}，然后再自减\n    ```\n\n    \n\n-   第一次使用Go模拟枚举\n\n    ``` go\n    const (\n    \tA iota\n        B\n        C\n    )\n    ```\n\n    \n","slug":"代码随想录算法训练营第五天 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。","published":1,"updated":"2023-09-25T14:07:59.806Z","_id":"clmydp3qz0000ncz8g3mb14ej","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码随想录算法训练营第五天-242-有效的字母异位词、349-两个数组的交集、202-快乐数、1-两数之和-。\"><a href=\"#代码随想录算法训练营第五天-242-有效的字母异位词、349-两个数组的交集、202-快乐数、1-两数之和-。\" class=\"headerlink\" title=\"代码随想录算法训练营第五天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。\"></a>代码随想录算法训练营第五天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。</h1><h2 id=\"242-有效的字母异位词\"><a href=\"#242-有效的字母异位词\" class=\"headerlink\" title=\"242.有效的字母异位词\"></a>242.有效的字母异位词</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/valid-anagram/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1YG411p7BA\">学透哈希表，数组使用有技巧！Leetcode：242.有效的字母异位词</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><p>方法一：使用<code>map</code>即可。键是字母的<code>ASCII</code>码、值为频率。分别用两个串构建两个<code>map</code>，再比较两个<code>map</code>是否相同。</p>\n</li>\n<li><p>方法二：看了卡哥给的代码发现优化空间还是很大的，使用一个<code>map</code>即可，存放<code>s</code>的情况。异位词满足两个条件：</p>\n<ul>\n<li>两个串等长。</li>\n<li>两个串中字母出现的频率相同。这一点可以用<code>s</code>串的<code>map</code>的<code>value</code>自减。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//麻烦的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isAnagram</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>, t <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\twords1 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\twords2 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\t_, ok := words1[s[i]]<br>\t\t<span class=\"hljs-keyword\">if</span> ok &#123;<br>\t\t\twords1[s[i]] += <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\twords1[s[i]] = <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(t); i++ &#123;<br>\t\t_, ok := words2[t[i]]<br>\t\t<span class=\"hljs-keyword\">if</span> ok &#123;<br>\t\t\twords2[t[i]] += <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\twords2[t[i]] = <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> reflect.DeepEqual(words1, words2)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 简单的代码</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isAnagram</span><span class=\"hljs-params\">(s, t <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s) != <span class=\"hljs-built_in\">len</span>(t) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\tcnt := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">rune</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> s &#123;<br>\t\tcnt[ch]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> t &#123;<br>\t\tcnt[ch]--<br>\t\t<span class=\"hljs-keyword\">if</span> cnt[ch] &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"349-两个数组的交集\"><a href=\"#349-两个数组的交集\" class=\"headerlink\" title=\"349. 两个数组的交集\"></a>349. 两个数组的交集</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-arrays/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1ba411S7wu\">学透哈希表，set使用有技巧！Leetcode：349. 两个数组的交集</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>从求交集可以看出是要使用集合的结构，但是在Go语言中<font color=\"#ff0000\">并没有</font>集合，所以我使用了<code>map</code>（并不是用map模拟set）。map中，键为<code>nums1</code>的每个元素，值只有三种状态：第一次出现是<code>0</code>，多次出现是<code>1</code>，在<code>nums2</code>也出现过是<code>2</code>，最后遍历map，找到值为2的key。</p>\n<p>利用const和iota模拟枚举类型。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-keyword\">const</span> (<br>\tNEW = <span class=\"hljs-literal\">iota</span><br>\tEXIST1<br>\tEXIST2<br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">intersection</span><span class=\"hljs-params\">(nums1 []<span class=\"hljs-type\">int</span>, nums2 []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tset := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;  <span class=\"hljs-comment\">//类集合操作</span><br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums1 &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[v]; !ok &#123;<br>\t\t\tset[v] = NEW  <span class=\"hljs-comment\">// 第一个出现</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// 多次出现</span><br>\t\t\tset[v] = EXIST1<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums2 &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[v]; ok &#123;  <span class=\"hljs-comment\">// nums2也出现</span><br>\t\t\tset[v] = EXIST2<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> set &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v == EXIST2 &#123;<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, k)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"202-快乐数\"><a href=\"#202-快乐数\" class=\"headerlink\" title=\"202. 快乐数\"></a>202. 快乐数</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/happy-number/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html#%E6%80%9D%E8%B7%AF\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>构造一个集合，用于存放每一次拆数求平方和的结果</li>\n<li>拆数</li>\n<li>判断结果是否是1，如果是<code>return true</code></li>\n<li>如果不是1，判断结果是否在集合中，如果存在则说明出现了循环，<code>return false</code></li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isHappy</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\tset := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">bool</span>&#123;&#125;  <span class=\"hljs-comment\">// 模拟集合</span><br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tsum := <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-comment\">//拆数求平方和</span><br>\t\t<span class=\"hljs-keyword\">for</span> n &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tsum += (n % <span class=\"hljs-number\">10</span>) * (n % <span class=\"hljs-number\">10</span>)<br>\t\t\tn /= <span class=\"hljs-number\">10</span><br>\t\t&#125;<br>        <span class=\"hljs-comment\">//得到正确答案</span><br>\t\t<span class=\"hljs-keyword\">if</span> sum == <span class=\"hljs-number\">1</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br>        <br>        <span class=\"hljs-comment\">//结果不在集合中则放入集合</span><br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[sum]; !ok &#123;<br>\t\t\tset[sum] = <span class=\"hljs-literal\">true</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<span class=\"hljs-comment\">// 否则退出循环 return false</span><br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t\tn = sum <span class=\"hljs-comment\">// 新一轮的数</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1.两数之和\"></a>1.两数之和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/two-sum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1aT41177mK\">梦开始的地方，Leetcode：1.两数之和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>遍历<code>nums</code>将元素存为<code>map</code>的<code>key</code>，将元素的索引存放为<code>map</code>的<code>value</code>；</li>\n<li>再遍历<code>nums</code>，查看<code>target - v</code>是否在<code>key</code>中，并返回两个值：<code>nums</code>元素的索引和<code>map[target-v]</code></li>\n</ol>\n<p>遍历两次还是思路上走弯路了，一次即可。</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//遍历两次</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">twoSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    mapNums := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>       mapNums[v] = i<br>    &#125;<br>    <span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>    <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>       <span class=\"hljs-keyword\">if</span> _, ok := mapNums[target-v]; ok &amp;&amp; mapNums[target-v] != i &#123;<br>          result = <span class=\"hljs-built_in\">append</span>(result, i)<br>          result = <span class=\"hljs-built_in\">append</span>(result, mapNums[target-v])<br>          <span class=\"hljs-keyword\">break</span><br>       &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">twoSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tmapNums := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> value, ok := mapNums[target-v]; ok &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;i, value&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tmapNums[v] = i<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>这次的题目不算很难，做起来就很快，算上写博客的时间不到两个小时</p>\n</li>\n<li><p>对Go语言的map有了新的理解：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">test = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br><span class=\"hljs-keyword\">if</span> value, ok := test[key]; ok &#123;<br>\t<span class=\"hljs-comment\">// key存在的情况</span><br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t<span class=\"hljs-comment\">// key不存在的情况</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 使用反射来判断两个map是否相等</span><br><span class=\"hljs-keyword\">import</span> reflect<br>reflect.DeepEqual(map1, map2)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">test = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>test[<span class=\"hljs-number\">1</span>]--  <span class=\"hljs-comment\">// 即使不存在1，默认新增键值对&#123;1:0&#125;，然后再自减</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>第一次使用Go模拟枚举</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">const</span> (<br>\tA <span class=\"hljs-literal\">iota</span><br>    B<br>    C<br>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码随想录算法训练营第五天-242-有效的字母异位词、349-两个数组的交集、202-快乐数、1-两数之和-。\"><a href=\"#代码随想录算法训练营第五天-242-有效的字母异位词、349-两个数组的交集、202-快乐数、1-两数之和-。\" class=\"headerlink\" title=\"代码随想录算法训练营第五天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。\"></a>代码随想录算法训练营第五天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。</h1><h2 id=\"242-有效的字母异位词\"><a href=\"#242-有效的字母异位词\" class=\"headerlink\" title=\"242.有效的字母异位词\"></a>242.有效的字母异位词</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/valid-anagram/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1YG411p7BA\">学透哈希表，数组使用有技巧！Leetcode：242.有效的字母异位词</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li><p>方法一：使用<code>map</code>即可。键是字母的<code>ASCII</code>码、值为频率。分别用两个串构建两个<code>map</code>，再比较两个<code>map</code>是否相同。</p>\n</li>\n<li><p>方法二：看了卡哥给的代码发现优化空间还是很大的，使用一个<code>map</code>即可，存放<code>s</code>的情况。异位词满足两个条件：</p>\n<ul>\n<li>两个串等长。</li>\n<li>两个串中字母出现的频率相同。这一点可以用<code>s</code>串的<code>map</code>的<code>value</code>自减。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//麻烦的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isAnagram</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>, t <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\twords1 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\twords2 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">byte</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ &#123;<br>\t\t_, ok := words1[s[i]]<br>\t\t<span class=\"hljs-keyword\">if</span> ok &#123;<br>\t\t\twords1[s[i]] += <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\twords1[s[i]] = <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(t); i++ &#123;<br>\t\t_, ok := words2[t[i]]<br>\t\t<span class=\"hljs-keyword\">if</span> ok &#123;<br>\t\t\twords2[t[i]] += <span class=\"hljs-number\">1</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\twords2[t[i]] = <span class=\"hljs-number\">1</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> reflect.DeepEqual(words1, words2)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 简单的代码</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isAnagram</span><span class=\"hljs-params\">(s, t <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s) != <span class=\"hljs-built_in\">len</span>(t) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\tcnt := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">rune</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> s &#123;<br>\t\tcnt[ch]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> t &#123;<br>\t\tcnt[ch]--<br>\t\t<span class=\"hljs-keyword\">if</span> cnt[ch] &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"349-两个数组的交集\"><a href=\"#349-两个数组的交集\" class=\"headerlink\" title=\"349. 两个数组的交集\"></a>349. 两个数组的交集</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-arrays/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1ba411S7wu\">学透哈希表，set使用有技巧！Leetcode：349. 两个数组的交集</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>从求交集可以看出是要使用集合的结构，但是在Go语言中<font color=\"#ff0000\">并没有</font>集合，所以我使用了<code>map</code>（并不是用map模拟set）。map中，键为<code>nums1</code>的每个元素，值只有三种状态：第一次出现是<code>0</code>，多次出现是<code>1</code>，在<code>nums2</code>也出现过是<code>2</code>，最后遍历map，找到值为2的key。</p>\n<p>利用const和iota模拟枚举类型。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br><span class=\"hljs-keyword\">const</span> (<br>\tNEW = <span class=\"hljs-literal\">iota</span><br>\tEXIST1<br>\tEXIST2<br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">intersection</span><span class=\"hljs-params\">(nums1 []<span class=\"hljs-type\">int</span>, nums2 []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tset := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;  <span class=\"hljs-comment\">//类集合操作</span><br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums1 &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[v]; !ok &#123;<br>\t\t\tset[v] = NEW  <span class=\"hljs-comment\">// 第一个出现</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// 多次出现</span><br>\t\t\tset[v] = EXIST1<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> nums2 &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[v]; ok &#123;  <span class=\"hljs-comment\">// nums2也出现</span><br>\t\t\tset[v] = EXIST2<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> set &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> v == EXIST2 &#123;<br>\t\t\tresult = <span class=\"hljs-built_in\">append</span>(result, k)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"202-快乐数\"><a href=\"#202-快乐数\" class=\"headerlink\" title=\"202. 快乐数\"></a>202. 快乐数</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/happy-number/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html#%E6%80%9D%E8%B7%AF\">代码随想录(programmercarl.com)</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>构造一个集合，用于存放每一次拆数求平方和的结果</li>\n<li>拆数</li>\n<li>判断结果是否是1，如果是<code>return true</code></li>\n<li>如果不是1，判断结果是否在集合中，如果存在则说明出现了循环，<code>return false</code></li>\n</ol>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isHappy</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> &#123;<br>\tset := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">bool</span>&#123;&#125;  <span class=\"hljs-comment\">// 模拟集合</span><br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\tsum := <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-comment\">//拆数求平方和</span><br>\t\t<span class=\"hljs-keyword\">for</span> n &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tsum += (n % <span class=\"hljs-number\">10</span>) * (n % <span class=\"hljs-number\">10</span>)<br>\t\t\tn /= <span class=\"hljs-number\">10</span><br>\t\t&#125;<br>        <span class=\"hljs-comment\">//得到正确答案</span><br>\t\t<span class=\"hljs-keyword\">if</span> sum == <span class=\"hljs-number\">1</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br>        <br>        <span class=\"hljs-comment\">//结果不在集合中则放入集合</span><br>\t\t<span class=\"hljs-keyword\">if</span> _, ok := set[sum]; !ok &#123;<br>\t\t\tset[sum] = <span class=\"hljs-literal\">true</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<span class=\"hljs-comment\">// 否则退出循环 return false</span><br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t\tn = sum <span class=\"hljs-comment\">// 新一轮的数</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1.两数之和\"></a>1.两数之和</h2><blockquote>\n<p>  题目链接：<a href=\"https://leetcode.cn/problems/two-sum/\">力扣题目链接</a></p>\n<p>  文章讲解：<a href=\"https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\">代码随想录(programmercarl.com)</a></p>\n<p>  视频讲解：<a href=\"https://www.bilibili.com/video/BV1aT41177mK\">梦开始的地方，Leetcode：1.两数之和</a></p>\n<p>  状态：AC</p>\n</blockquote>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>遍历<code>nums</code>将元素存为<code>map</code>的<code>key</code>，将元素的索引存放为<code>map</code>的<code>value</code>；</li>\n<li>再遍历<code>nums</code>，查看<code>target - v</code>是否在<code>key</code>中，并返回两个值：<code>nums</code>元素的索引和<code>map[target-v]</code></li>\n</ol>\n<p>遍历两次还是思路上走弯路了，一次即可。</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">//遍历两次</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">twoSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>    mapNums := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>    <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>       mapNums[v] = i<br>    &#125;<br>    <span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-type\">int</span><br>    <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>       <span class=\"hljs-keyword\">if</span> _, ok := mapNums[target-v]; ok &amp;&amp; mapNums[target-v] != i &#123;<br>          result = <span class=\"hljs-built_in\">append</span>(result, i)<br>          result = <span class=\"hljs-built_in\">append</span>(result, mapNums[target-v])<br>          <span class=\"hljs-keyword\">break</span><br>       &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">twoSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>, target <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> &#123;<br>\tmapNums := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>\t<span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> value, ok := mapNums[target-v]; ok &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;i, value&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tmapNums[v] = i<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-type\">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>这次的题目不算很难，做起来就很快，算上写博客的时间不到两个小时</p>\n</li>\n<li><p>对Go语言的map有了新的理解：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">test = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br><span class=\"hljs-keyword\">if</span> value, ok := test[key]; ok &#123;<br>\t<span class=\"hljs-comment\">// key存在的情况</span><br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t<span class=\"hljs-comment\">// key不存在的情况</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 使用反射来判断两个map是否相等</span><br><span class=\"hljs-keyword\">import</span> reflect<br>reflect.DeepEqual(map1, map2)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">test = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>&#123;&#125;<br>test[<span class=\"hljs-number\">1</span>]--  <span class=\"hljs-comment\">// 即使不存在1，默认新增键值对&#123;1:0&#125;，然后再自减</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>第一次使用Go模拟枚举</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">const</span> (<br>\tA <span class=\"hljs-literal\">iota</span><br>    B<br>    C<br>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"【debug】Java中的map比较","abbrlink":"ad5be9d7","date":"2023-09-25T14:10:40.000Z","_content":"\n# 【debug】Java中的map比较\n\n题目链接：[242. 有效的字母异位词](https://leetcode.cn/problems/valid-anagram/)\n\n事情起因：（由于自己对Java了解不深、有表达错误的请指出，感谢！）\n\n<img src=\"../images/java_map_debug.jpg\" alt=\"报错截图\" style=\"zoom:100%;\" />\n\n\n\n群友发了一张代码截图，觉得自己写的代码并没有错，但是不能通过测试用例。\n\n他的算法我简单说一下，有点麻烦，但算法不是这篇博客的重点。\n\n1.   两个Map：`hashS`、`hashT`分别用于存放字符串`s`和`t`中字母出现的频率(19行之前)；\n2.   遍历长的字符串对应的Map，假设是`hashS`，判断`hashS`与`hashT`相同的字母频率是否一样，如果不一样则`return false`\n\n当时我是在外面，看到了这段代码，理解了他的想法之后好像真的没什么问题。\n\n\n\n### 复现Bug与初步解决\n\n回来之后代码放到idea里面跑了一下，发现这个测试用例长度为50000位，而且每个字母出现的频率是一样的\n\n<img src=\"../images/hashST.png\" alt=\"两个Map的内容\" style=\"zoom:67%;\" />\n\n\n\n打上断点继续向下走，看看是哪一步出现了问题。\n\n<img src=\"../images/断点调试.png\" alt=\"断点调试\" style=\"zoom:67%;\" />\n\n\n\n没想到第一次循环就出错了，`hashT.get(c)`与`hashS.get(c)`的值都是1913，但是地址不一样，一个是`{Integer@531}`，一个是`{Integer@587}`。看来这里的`!=`判断的是地址而不是值，使用`equal()`方法即可，如下：\n\n<img src=\"../images/初步解决.png\" alt=\"初步解决\" style=\"zoom:67%;\" />\n\n\n\n### 深层探索\n\n事情并没有真正的解决，既然群友能通过一些测试用例，说明了一些情况使用`!=`是可以用的，那几个测试用例都是用了很短的字符串，我也看下是什么情况，`s=\"anagram\"`，`t=\"nagaram\"`，这是个正确的用例，debug的结果是这样\n\n<img src=\"../images/短测试用例.png\" alt=\"短测试用例\" style=\"zoom:80%;\" />\n\n\n\n这可就是玄学了呀，短的数据不会出现问题，而长的会出现。\n\n#### 猜想一：与Map的大小有关\n\n因为长的测试用例有26个键值对（每个字母均出现），而短的只出现了5个字母。我设置测试用例`s = t = \"abcdefghijklmnopqrstuvwxyz\"`（以下简称字母表），让每个字母都出现一次。\n\n<img src=\"../images/26字母.png\" alt=\"26字母\" style=\"zoom:80%;\" />\n\n\n\n还是正常的，<font color=\"#ff0000\">猜想错误</font>\n\n#### 猜想二：与测试用例的长度有关\n\n接着我就多复制些字母表，出错误的是在50000的长度，我把字母表长度先放到3000多，\n\n``` java\n// 扩增字符串代码代码\nString s = \"abcdefghijklmnopqrstuvwxyz\";\nString t = \"abcdefghijklmnopqrstuvwxyz\";\nfor (int i = 0; i < 7; i++) {\n    s += s;\n    t += t;\n}\n```\n\n\n\n<img src=\"../images/3000多长度.png\" alt=\"长度为3328\" style=\"zoom:80%;\" />\n\n\n\n还是有错误，继续缩短长度，将扩增代码循环6次，减少一次再看看\n\n<img src=\"../images/6次扩增.png\" alt=\"6次扩增\" style=\"zoom:80%;\" />\n\n\n\n这次竟然又不出错了，玄学！妥妥的玄学！\n\n我换了种思路，这次不用字母表了，只是用一个变量看看会不会触发这个BUG，如果依然触发，每次长度增加1，那么很快就会得到到底在多长的时候会出现。25行打上断点，被执行前一定会卡住。\n\n<img src=\"../images/展示代码.png\" alt=\"展示代码\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/128卡住.png\" alt=\"字母a出现了128次时候开始报错\" style=\"zoom:80%;\" />\n\n\n\n最后做一次验证，是不是Map中，只要有val超过128就会发生地址改变的情况。这次的测试用例使用随机字母\n\n``` java\nString s = \"\";\nString t = \"\";\nRandom random = new Random();\nwhile (true) {\n    int temp = random.nextInt(26) + 97;\n    s += (char)temp;\n    t += (char)temp;\n    System.out.println(isAnagram(s, t));\n}\n```\n\n<img src=\"../images/26随机字母报错.png\" alt=\"字母a出现了128次的时候开始报错\" style=\"zoom:80%\"/>\n\n\n\n\n很好！当字母w出现了超过128次时候地址发生了变化。128这个数字相信大家一定很敏感，那么这个范围很可能是[-128, 127]。那么则需要看看底层源码是怎么说的，去看看`Map.java`，搜索`127`，并没有发现相关说明。\n\n<img src=\"../images/map源码.png\" alt=\"map源码\" style=\"zoom:80%;\" />\n\n\n\n`{Integer@***}`这里面经常变得数字就是星号部分，那么去`Ieteger.java`里面看看有什么发现。\n\n<img src=\"../images/第一个127.png\" alt=\"搜索结果1\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/最后一个127.png\" alt=\"搜索结果2\" style=\"zoom:80%;\" />\n\n\n\n### 结论\n\n结合这两段我悟了，果然有这么个范围，在初始化值的时候，[-128, 127]这个范围的数是在缓存里面，所以当`Map`中的`value`小于128时候读取的是缓存中的数，所以他们地址是一样的，也就是`hashS.get(c)==hashT.get(c)`的原因。当超过这个范围，则会在新的地方存放一个值，尽管`hashS.get(c)`和`hashT.get(c)`均为128，但是使用`==`或`!=`判断的时候，判断的是**地址**，得到`hashS.get(c)!=hashT.get(c)`。\n\n#### 所以一定要写equal()方法进行判断\n\n#### 所以一定要写equal()方法进行判断\n\n#### 所以一定要写equal()方法进行判断\n\n`hashS.get(c).equal(hashT.get(c))`，这样判断的才是值而不是地址\n\n\n\n","source":"_posts/【debug】Java中的map比较.md","raw":"---\ntitle: 【debug】Java中的map比较\ntags:\n  - Debug\n  - LeetCode\n  - Java\ncategories: Debug\nabbrlink: ad5be9d7\ndate: 2023-09-25 22:10:40\n---\n\n# 【debug】Java中的map比较\n\n题目链接：[242. 有效的字母异位词](https://leetcode.cn/problems/valid-anagram/)\n\n事情起因：（由于自己对Java了解不深、有表达错误的请指出，感谢！）\n\n<img src=\"../images/java_map_debug.jpg\" alt=\"报错截图\" style=\"zoom:100%;\" />\n\n\n\n群友发了一张代码截图，觉得自己写的代码并没有错，但是不能通过测试用例。\n\n他的算法我简单说一下，有点麻烦，但算法不是这篇博客的重点。\n\n1.   两个Map：`hashS`、`hashT`分别用于存放字符串`s`和`t`中字母出现的频率(19行之前)；\n2.   遍历长的字符串对应的Map，假设是`hashS`，判断`hashS`与`hashT`相同的字母频率是否一样，如果不一样则`return false`\n\n当时我是在外面，看到了这段代码，理解了他的想法之后好像真的没什么问题。\n\n\n\n### 复现Bug与初步解决\n\n回来之后代码放到idea里面跑了一下，发现这个测试用例长度为50000位，而且每个字母出现的频率是一样的\n\n<img src=\"../images/hashST.png\" alt=\"两个Map的内容\" style=\"zoom:67%;\" />\n\n\n\n打上断点继续向下走，看看是哪一步出现了问题。\n\n<img src=\"../images/断点调试.png\" alt=\"断点调试\" style=\"zoom:67%;\" />\n\n\n\n没想到第一次循环就出错了，`hashT.get(c)`与`hashS.get(c)`的值都是1913，但是地址不一样，一个是`{Integer@531}`，一个是`{Integer@587}`。看来这里的`!=`判断的是地址而不是值，使用`equal()`方法即可，如下：\n\n<img src=\"../images/初步解决.png\" alt=\"初步解决\" style=\"zoom:67%;\" />\n\n\n\n### 深层探索\n\n事情并没有真正的解决，既然群友能通过一些测试用例，说明了一些情况使用`!=`是可以用的，那几个测试用例都是用了很短的字符串，我也看下是什么情况，`s=\"anagram\"`，`t=\"nagaram\"`，这是个正确的用例，debug的结果是这样\n\n<img src=\"../images/短测试用例.png\" alt=\"短测试用例\" style=\"zoom:80%;\" />\n\n\n\n这可就是玄学了呀，短的数据不会出现问题，而长的会出现。\n\n#### 猜想一：与Map的大小有关\n\n因为长的测试用例有26个键值对（每个字母均出现），而短的只出现了5个字母。我设置测试用例`s = t = \"abcdefghijklmnopqrstuvwxyz\"`（以下简称字母表），让每个字母都出现一次。\n\n<img src=\"../images/26字母.png\" alt=\"26字母\" style=\"zoom:80%;\" />\n\n\n\n还是正常的，<font color=\"#ff0000\">猜想错误</font>\n\n#### 猜想二：与测试用例的长度有关\n\n接着我就多复制些字母表，出错误的是在50000的长度，我把字母表长度先放到3000多，\n\n``` java\n// 扩增字符串代码代码\nString s = \"abcdefghijklmnopqrstuvwxyz\";\nString t = \"abcdefghijklmnopqrstuvwxyz\";\nfor (int i = 0; i < 7; i++) {\n    s += s;\n    t += t;\n}\n```\n\n\n\n<img src=\"../images/3000多长度.png\" alt=\"长度为3328\" style=\"zoom:80%;\" />\n\n\n\n还是有错误，继续缩短长度，将扩增代码循环6次，减少一次再看看\n\n<img src=\"../images/6次扩增.png\" alt=\"6次扩增\" style=\"zoom:80%;\" />\n\n\n\n这次竟然又不出错了，玄学！妥妥的玄学！\n\n我换了种思路，这次不用字母表了，只是用一个变量看看会不会触发这个BUG，如果依然触发，每次长度增加1，那么很快就会得到到底在多长的时候会出现。25行打上断点，被执行前一定会卡住。\n\n<img src=\"../images/展示代码.png\" alt=\"展示代码\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/128卡住.png\" alt=\"字母a出现了128次时候开始报错\" style=\"zoom:80%;\" />\n\n\n\n最后做一次验证，是不是Map中，只要有val超过128就会发生地址改变的情况。这次的测试用例使用随机字母\n\n``` java\nString s = \"\";\nString t = \"\";\nRandom random = new Random();\nwhile (true) {\n    int temp = random.nextInt(26) + 97;\n    s += (char)temp;\n    t += (char)temp;\n    System.out.println(isAnagram(s, t));\n}\n```\n\n<img src=\"../images/26随机字母报错.png\" alt=\"字母a出现了128次的时候开始报错\" style=\"zoom:80%\"/>\n\n\n\n\n很好！当字母w出现了超过128次时候地址发生了变化。128这个数字相信大家一定很敏感，那么这个范围很可能是[-128, 127]。那么则需要看看底层源码是怎么说的，去看看`Map.java`，搜索`127`，并没有发现相关说明。\n\n<img src=\"../images/map源码.png\" alt=\"map源码\" style=\"zoom:80%;\" />\n\n\n\n`{Integer@***}`这里面经常变得数字就是星号部分，那么去`Ieteger.java`里面看看有什么发现。\n\n<img src=\"../images/第一个127.png\" alt=\"搜索结果1\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/最后一个127.png\" alt=\"搜索结果2\" style=\"zoom:80%;\" />\n\n\n\n### 结论\n\n结合这两段我悟了，果然有这么个范围，在初始化值的时候，[-128, 127]这个范围的数是在缓存里面，所以当`Map`中的`value`小于128时候读取的是缓存中的数，所以他们地址是一样的，也就是`hashS.get(c)==hashT.get(c)`的原因。当超过这个范围，则会在新的地方存放一个值，尽管`hashS.get(c)`和`hashT.get(c)`均为128，但是使用`==`或`!=`判断的时候，判断的是**地址**，得到`hashS.get(c)!=hashT.get(c)`。\n\n#### 所以一定要写equal()方法进行判断\n\n#### 所以一定要写equal()方法进行判断\n\n#### 所以一定要写equal()方法进行判断\n\n`hashS.get(c).equal(hashT.get(c))`，这样判断的才是值而不是地址\n\n\n\n","slug":"【debug】Java中的map比较","published":1,"updated":"2023-09-25T15:26:43.456Z","_id":"clmz1bqiv00005kz8dnqf1ejs","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【debug】Java中的map比较\"><a href=\"#【debug】Java中的map比较\" class=\"headerlink\" title=\"【debug】Java中的map比较\"></a>【debug】Java中的map比较</h1><p>题目链接：<a href=\"https://leetcode.cn/problems/valid-anagram/\">242. 有效的字母异位词</a></p>\n<p>事情起因：（由于自己对Java了解不深、有表达错误的请指出，感谢！）</p>\n<img src=\"../images/java_map_debug.jpg\" alt=\"报错截图\" style=\"zoom:100%;\" />\n\n\n\n<p>群友发了一张代码截图，觉得自己写的代码并没有错，但是不能通过测试用例。</p>\n<p>他的算法我简单说一下，有点麻烦，但算法不是这篇博客的重点。</p>\n<ol>\n<li>两个Map：<code>hashS</code>、<code>hashT</code>分别用于存放字符串<code>s</code>和<code>t</code>中字母出现的频率(19行之前)；</li>\n<li>遍历长的字符串对应的Map，假设是<code>hashS</code>，判断<code>hashS</code>与<code>hashT</code>相同的字母频率是否一样，如果不一样则<code>return false</code></li>\n</ol>\n<p>当时我是在外面，看到了这段代码，理解了他的想法之后好像真的没什么问题。</p>\n<h3 id=\"复现Bug与初步解决\"><a href=\"#复现Bug与初步解决\" class=\"headerlink\" title=\"复现Bug与初步解决\"></a>复现Bug与初步解决</h3><p>回来之后代码放到idea里面跑了一下，发现这个测试用例长度为50000位，而且每个字母出现的频率是一样的</p>\n<img src=\"../images/hashST.png\" alt=\"两个Map的内容\" style=\"zoom:67%;\" />\n\n\n\n<p>打上断点继续向下走，看看是哪一步出现了问题。</p>\n<img src=\"../images/断点调试.png\" alt=\"断点调试\" style=\"zoom:67%;\" />\n\n\n\n<p>没想到第一次循环就出错了，<code>hashT.get(c)</code>与<code>hashS.get(c)</code>的值都是1913，但是地址不一样，一个是<code>&#123;Integer@531&#125;</code>，一个是<code>&#123;Integer@587&#125;</code>。看来这里的<code>!=</code>判断的是地址而不是值，使用<code>equal()</code>方法即可，如下：</p>\n<img src=\"../images/初步解决.png\" alt=\"初步解决\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"深层探索\"><a href=\"#深层探索\" class=\"headerlink\" title=\"深层探索\"></a>深层探索</h3><p>事情并没有真正的解决，既然群友能通过一些测试用例，说明了一些情况使用<code>!=</code>是可以用的，那几个测试用例都是用了很短的字符串，我也看下是什么情况，<code>s=&quot;anagram&quot;</code>，<code>t=&quot;nagaram&quot;</code>，这是个正确的用例，debug的结果是这样</p>\n<img src=\"../images/短测试用例.png\" alt=\"短测试用例\" style=\"zoom:80%;\" />\n\n\n\n<p>这可就是玄学了呀，短的数据不会出现问题，而长的会出现。</p>\n<h4 id=\"猜想一：与Map的大小有关\"><a href=\"#猜想一：与Map的大小有关\" class=\"headerlink\" title=\"猜想一：与Map的大小有关\"></a>猜想一：与Map的大小有关</h4><p>因为长的测试用例有26个键值对（每个字母均出现），而短的只出现了5个字母。我设置测试用例<code>s = t = &quot;abcdefghijklmnopqrstuvwxyz&quot;</code>（以下简称字母表），让每个字母都出现一次。</p>\n<img src=\"../images/26字母.png\" alt=\"26字母\" style=\"zoom:80%;\" />\n\n\n\n<p>还是正常的，<font color=\"#ff0000\">猜想错误</font></p>\n<h4 id=\"猜想二：与测试用例的长度有关\"><a href=\"#猜想二：与测试用例的长度有关\" class=\"headerlink\" title=\"猜想二：与测试用例的长度有关\"></a>猜想二：与测试用例的长度有关</h4><p>接着我就多复制些字母表，出错误的是在50000的长度，我把字母表长度先放到3000多，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 扩增字符串代码代码</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">7</span>; i++) &#123;<br>    s += s;<br>    t += t;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<img src=\"../images/3000多长度.png\" alt=\"长度为3328\" style=\"zoom:80%;\" />\n\n\n\n<p>还是有错误，继续缩短长度，将扩增代码循环6次，减少一次再看看</p>\n<img src=\"../images/6次扩增.png\" alt=\"6次扩增\" style=\"zoom:80%;\" />\n\n\n\n<p>这次竟然又不出错了，玄学！妥妥的玄学！</p>\n<p>我换了种思路，这次不用字母表了，只是用一个变量看看会不会触发这个BUG，如果依然触发，每次长度增加1，那么很快就会得到到底在多长的时候会出现。25行打上断点，被执行前一定会卡住。</p>\n<img src=\"../images/展示代码.png\" alt=\"展示代码\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/128卡住.png\" alt=\"字母a出现了128次时候开始报错\" style=\"zoom:80%;\" />\n\n\n\n<p>最后做一次验证，是不是Map中，只要有val超过128就会发生地址改变的情况。这次的测试用例使用随机字母</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> random.nextInt(<span class=\"hljs-number\">26</span>) + <span class=\"hljs-number\">97</span>;<br>    s += (<span class=\"hljs-type\">char</span>)temp;<br>    t += (<span class=\"hljs-type\">char</span>)temp;<br>    System.out.println(isAnagram(s, t));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"../images/26随机字母报错.png\" alt=\"字母a出现了128次的时候开始报错\" style=\"zoom:80%\"/>\n\n\n\n\n<p>很好！当字母w出现了超过128次时候地址发生了变化。128这个数字相信大家一定很敏感，那么这个范围很可能是[-128, 127]。那么则需要看看底层源码是怎么说的，去看看<code>Map.java</code>，搜索<code>127</code>，并没有发现相关说明。</p>\n<img src=\"../images/map源码.png\" alt=\"map源码\" style=\"zoom:80%;\" />\n\n\n\n<p><code>&#123;Integer@***&#125;</code>这里面经常变得数字就是星号部分，那么去<code>Ieteger.java</code>里面看看有什么发现。</p>\n<img src=\"../images/第一个127.png\" alt=\"搜索结果1\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/最后一个127.png\" alt=\"搜索结果2\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>结合这两段我悟了，果然有这么个范围，在初始化值的时候，[-128, 127]这个范围的数是在缓存里面，所以当<code>Map</code>中的<code>value</code>小于128时候读取的是缓存中的数，所以他们地址是一样的，也就是<code>hashS.get(c)==hashT.get(c)</code>的原因。当超过这个范围，则会在新的地方存放一个值，尽管<code>hashS.get(c)</code>和<code>hashT.get(c)</code>均为128，但是使用<code>==</code>或<code>!=</code>判断的时候，判断的是<strong>地址</strong>，得到<code>hashS.get(c)!=hashT.get(c)</code>。</p>\n<h4 id=\"所以一定要写equal-方法进行判断\"><a href=\"#所以一定要写equal-方法进行判断\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><h4 id=\"所以一定要写equal-方法进行判断-1\"><a href=\"#所以一定要写equal-方法进行判断-1\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><h4 id=\"所以一定要写equal-方法进行判断-2\"><a href=\"#所以一定要写equal-方法进行判断-2\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><p><code>hashS.get(c).equal(hashT.get(c))</code>，这样判断的才是值而不是地址</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【debug】Java中的map比较\"><a href=\"#【debug】Java中的map比较\" class=\"headerlink\" title=\"【debug】Java中的map比较\"></a>【debug】Java中的map比较</h1><p>题目链接：<a href=\"https://leetcode.cn/problems/valid-anagram/\">242. 有效的字母异位词</a></p>\n<p>事情起因：（由于自己对Java了解不深、有表达错误的请指出，感谢！）</p>\n<img src=\"../images/java_map_debug.jpg\" alt=\"报错截图\" style=\"zoom:100%;\" />\n\n\n\n<p>群友发了一张代码截图，觉得自己写的代码并没有错，但是不能通过测试用例。</p>\n<p>他的算法我简单说一下，有点麻烦，但算法不是这篇博客的重点。</p>\n<ol>\n<li>两个Map：<code>hashS</code>、<code>hashT</code>分别用于存放字符串<code>s</code>和<code>t</code>中字母出现的频率(19行之前)；</li>\n<li>遍历长的字符串对应的Map，假设是<code>hashS</code>，判断<code>hashS</code>与<code>hashT</code>相同的字母频率是否一样，如果不一样则<code>return false</code></li>\n</ol>\n<p>当时我是在外面，看到了这段代码，理解了他的想法之后好像真的没什么问题。</p>\n<h3 id=\"复现Bug与初步解决\"><a href=\"#复现Bug与初步解决\" class=\"headerlink\" title=\"复现Bug与初步解决\"></a>复现Bug与初步解决</h3><p>回来之后代码放到idea里面跑了一下，发现这个测试用例长度为50000位，而且每个字母出现的频率是一样的</p>\n<img src=\"../images/hashST.png\" alt=\"两个Map的内容\" style=\"zoom:67%;\" />\n\n\n\n<p>打上断点继续向下走，看看是哪一步出现了问题。</p>\n<img src=\"../images/断点调试.png\" alt=\"断点调试\" style=\"zoom:67%;\" />\n\n\n\n<p>没想到第一次循环就出错了，<code>hashT.get(c)</code>与<code>hashS.get(c)</code>的值都是1913，但是地址不一样，一个是<code>&#123;Integer@531&#125;</code>，一个是<code>&#123;Integer@587&#125;</code>。看来这里的<code>!=</code>判断的是地址而不是值，使用<code>equal()</code>方法即可，如下：</p>\n<img src=\"../images/初步解决.png\" alt=\"初步解决\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"深层探索\"><a href=\"#深层探索\" class=\"headerlink\" title=\"深层探索\"></a>深层探索</h3><p>事情并没有真正的解决，既然群友能通过一些测试用例，说明了一些情况使用<code>!=</code>是可以用的，那几个测试用例都是用了很短的字符串，我也看下是什么情况，<code>s=&quot;anagram&quot;</code>，<code>t=&quot;nagaram&quot;</code>，这是个正确的用例，debug的结果是这样</p>\n<img src=\"../images/短测试用例.png\" alt=\"短测试用例\" style=\"zoom:80%;\" />\n\n\n\n<p>这可就是玄学了呀，短的数据不会出现问题，而长的会出现。</p>\n<h4 id=\"猜想一：与Map的大小有关\"><a href=\"#猜想一：与Map的大小有关\" class=\"headerlink\" title=\"猜想一：与Map的大小有关\"></a>猜想一：与Map的大小有关</h4><p>因为长的测试用例有26个键值对（每个字母均出现），而短的只出现了5个字母。我设置测试用例<code>s = t = &quot;abcdefghijklmnopqrstuvwxyz&quot;</code>（以下简称字母表），让每个字母都出现一次。</p>\n<img src=\"../images/26字母.png\" alt=\"26字母\" style=\"zoom:80%;\" />\n\n\n\n<p>还是正常的，<font color=\"#ff0000\">猜想错误</font></p>\n<h4 id=\"猜想二：与测试用例的长度有关\"><a href=\"#猜想二：与测试用例的长度有关\" class=\"headerlink\" title=\"猜想二：与测试用例的长度有关\"></a>猜想二：与测试用例的长度有关</h4><p>接着我就多复制些字母表，出错误的是在50000的长度，我把字母表长度先放到3000多，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 扩增字符串代码代码</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">7</span>; i++) &#123;<br>    s += s;<br>    t += t;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<img src=\"../images/3000多长度.png\" alt=\"长度为3328\" style=\"zoom:80%;\" />\n\n\n\n<p>还是有错误，继续缩短长度，将扩增代码循环6次，减少一次再看看</p>\n<img src=\"../images/6次扩增.png\" alt=\"6次扩增\" style=\"zoom:80%;\" />\n\n\n\n<p>这次竟然又不出错了，玄学！妥妥的玄学！</p>\n<p>我换了种思路，这次不用字母表了，只是用一个变量看看会不会触发这个BUG，如果依然触发，每次长度增加1，那么很快就会得到到底在多长的时候会出现。25行打上断点，被执行前一定会卡住。</p>\n<img src=\"../images/展示代码.png\" alt=\"展示代码\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/128卡住.png\" alt=\"字母a出现了128次时候开始报错\" style=\"zoom:80%;\" />\n\n\n\n<p>最后做一次验证，是不是Map中，只要有val超过128就会发生地址改变的情况。这次的测试用例使用随机字母</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> random.nextInt(<span class=\"hljs-number\">26</span>) + <span class=\"hljs-number\">97</span>;<br>    s += (<span class=\"hljs-type\">char</span>)temp;<br>    t += (<span class=\"hljs-type\">char</span>)temp;<br>    System.out.println(isAnagram(s, t));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"../images/26随机字母报错.png\" alt=\"字母a出现了128次的时候开始报错\" style=\"zoom:80%\"/>\n\n\n\n\n<p>很好！当字母w出现了超过128次时候地址发生了变化。128这个数字相信大家一定很敏感，那么这个范围很可能是[-128, 127]。那么则需要看看底层源码是怎么说的，去看看<code>Map.java</code>，搜索<code>127</code>，并没有发现相关说明。</p>\n<img src=\"../images/map源码.png\" alt=\"map源码\" style=\"zoom:80%;\" />\n\n\n\n<p><code>&#123;Integer@***&#125;</code>这里面经常变得数字就是星号部分，那么去<code>Ieteger.java</code>里面看看有什么发现。</p>\n<img src=\"../images/第一个127.png\" alt=\"搜索结果1\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"../images/最后一个127.png\" alt=\"搜索结果2\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>结合这两段我悟了，果然有这么个范围，在初始化值的时候，[-128, 127]这个范围的数是在缓存里面，所以当<code>Map</code>中的<code>value</code>小于128时候读取的是缓存中的数，所以他们地址是一样的，也就是<code>hashS.get(c)==hashT.get(c)</code>的原因。当超过这个范围，则会在新的地方存放一个值，尽管<code>hashS.get(c)</code>和<code>hashT.get(c)</code>均为128，但是使用<code>==</code>或<code>!=</code>判断的时候，判断的是<strong>地址</strong>，得到<code>hashS.get(c)!=hashT.get(c)</code>。</p>\n<h4 id=\"所以一定要写equal-方法进行判断\"><a href=\"#所以一定要写equal-方法进行判断\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><h4 id=\"所以一定要写equal-方法进行判断-1\"><a href=\"#所以一定要写equal-方法进行判断-1\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><h4 id=\"所以一定要写equal-方法进行判断-2\"><a href=\"#所以一定要写equal-方法进行判断-2\" class=\"headerlink\" title=\"所以一定要写equal()方法进行判断\"></a>所以一定要写equal()方法进行判断</h4><p><code>hashS.get(c).equal(hashT.get(c))</code>，这样判断的才是值而不是地址</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clmrgnuqx000073z85evcasph","category_id":"clmrgnur1000273z820g01ckp","_id":"clmrgnur2000773z83tdy7gw6"},{"post_id":"clmrgnur0000173z87v2h7et0","category_id":"clmrgnur2000473z8e2fqfwob","_id":"clmrgnur2000973z87ldgergc"},{"post_id":"clmsqddff0000dcz8et3c42ky","category_id":"clmrgnur2000473z8e2fqfwob","_id":"clmsqddfj0003dcz8bu52g1rg"},{"post_id":"clmw2kzfl0000enz89qz0eekl","category_id":"clmrgnur2000473z8e2fqfwob","_id":"clmw2kzfo0003enz812ywhj12"},{"post_id":"clmw6d1nf0000kxz8ae60f0m2","category_id":"clmrgnur2000473z8e2fqfwob","_id":"clmw6d1ni0003kxz8hf593s7n"},{"post_id":"clmydp3qz0000ncz8g3mb14ej","category_id":"clmrgnur2000473z8e2fqfwob","_id":"clmydp3r20003ncz81x4c3pkt"},{"post_id":"clmz1bqiv00005kz8dnqf1ejs","category_id":"clmz1bqj000015kz85hs0hh7a","_id":"clmz1bqj200045kz863jl846c"}],"PostTag":[{"post_id":"clmrgnuqx000073z85evcasph","tag_id":"clmrgnur1000373z8c0xwe89a","_id":"clmrgnur2000673z8exyo0h36"},{"post_id":"clmrgnur0000173z87v2h7et0","tag_id":"clmrgnur2000573z89yy5f829","_id":"clmrgnur3000b73z8cuy0e4rn"},{"post_id":"clmrgnur0000173z87v2h7et0","tag_id":"clmrgnur2000873z8gp9jhq7q","_id":"clmrgnur3000c73z803aq3of9"},{"post_id":"clmrgnur0000173z87v2h7et0","tag_id":"clmrgnur3000a73z88c4tb1rj","_id":"clmrgnur3000d73z8hz0rep17"},{"post_id":"clmsqddff0000dcz8et3c42ky","tag_id":"clmrgnur2000573z89yy5f829","_id":"clmsqddfj0001dcz80xptaj8y"},{"post_id":"clmsqddff0000dcz8et3c42ky","tag_id":"clmrgnur2000873z8gp9jhq7q","_id":"clmsqddfj0002dcz816uoaxi3"},{"post_id":"clmsqddff0000dcz8et3c42ky","tag_id":"clmrgnur3000a73z88c4tb1rj","_id":"clmsqddfj0004dcz8b65t6k6j"},{"post_id":"clmw2kzfl0000enz89qz0eekl","tag_id":"clmrgnur2000573z89yy5f829","_id":"clmw2kzfo0001enz84cgx3nq8"},{"post_id":"clmw2kzfl0000enz89qz0eekl","tag_id":"clmrgnur2000873z8gp9jhq7q","_id":"clmw2kzfo0002enz860hjal24"},{"post_id":"clmw2kzfl0000enz89qz0eekl","tag_id":"clmrgnur3000a73z88c4tb1rj","_id":"clmw2kzfo0004enz8fekfd99y"},{"post_id":"clmw6d1nf0000kxz8ae60f0m2","tag_id":"clmrgnur2000573z89yy5f829","_id":"clmw6d1ni0001kxz88a4k4d9n"},{"post_id":"clmw6d1nf0000kxz8ae60f0m2","tag_id":"clmrgnur2000873z8gp9jhq7q","_id":"clmw6d1ni0002kxz87hzh3z08"},{"post_id":"clmw6d1nf0000kxz8ae60f0m2","tag_id":"clmrgnur3000a73z88c4tb1rj","_id":"clmw6d1ni0004kxz8az9tefoq"},{"post_id":"clmydp3qz0000ncz8g3mb14ej","tag_id":"clmrgnur2000573z89yy5f829","_id":"clmydp3r20001ncz8d1dl34yu"},{"post_id":"clmydp3qz0000ncz8g3mb14ej","tag_id":"clmrgnur2000873z8gp9jhq7q","_id":"clmydp3r20002ncz8662l3fri"},{"post_id":"clmydp3qz0000ncz8g3mb14ej","tag_id":"clmrgnur3000a73z88c4tb1rj","_id":"clmydp3r20004ncz8hq463p4b"},{"post_id":"clmz1bqiv00005kz8dnqf1ejs","tag_id":"clmz1bqj100025kz89b9nbnt6","_id":"clmz1bqj200055kz8c2je6zbk"},{"post_id":"clmz1bqiv00005kz8dnqf1ejs","tag_id":"clmrgnur3000a73z88c4tb1rj","_id":"clmz1bqj200065kz8eqbccneq"},{"post_id":"clmz1bqiv00005kz8dnqf1ejs","tag_id":"clmz1bqj200035kz84e7qa9kb","_id":"clmz1bqj200075kz8ercf7v79"}],"Tag":[{"name":"教程","_id":"clmrgnur1000373z8c0xwe89a"},{"name":"算法","_id":"clmrgnur2000573z89yy5f829"},{"name":"代码随想录","_id":"clmrgnur2000873z8gp9jhq7q"},{"name":"LeetCode","_id":"clmrgnur3000a73z88c4tb1rj"},{"name":"Debug","_id":"clmz1bqj100025kz89b9nbnt6"},{"name":"Java","_id":"clmz1bqj200035kz84e7qa9kb"}]}}