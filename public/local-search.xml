<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【study】SpringMVC学习Part01</title>
    <link href="/post/38cadbef.html"/>
    <url>/post/38cadbef.html</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC学习-Part01"><a href="#Spring-MVC学习-Part01" class="headerlink" title="Spring MVC学习 Part01"></a>Spring MVC学习 Part01</h1><p><strong>SSM&#x3D;Spring + Spring MVC + MyBatis</strong></p><p>SSM技术栈如下</p><p><img src="/../images/springMVCPart01/SSM%E6%8A%80%E6%9C%AF%E6%A0%88.png"></p><p>表述层</p><p>SSM框架构建起单体项目的技术栈需求！其中Spring MVC负责表述层（控制层）实现简化。</p><p>Spring MVC的作用主要覆盖式表述层，例如：</p><ul><li>请求映射</li><li>数据输入</li><li>视图界面</li><li>请求分发</li><li>表单回显</li><li>会话控制</li><li>过滤拦截</li><li>异步交互</li><li>文件上传</li><li>文件下载</li><li>数据校验</li><li>类型转换</li><li>等等等</li></ul><h2 id="1-Spring-MVC处理流程"><a href="#1-Spring-MVC处理流程" class="headerlink" title="1. Spring MVC处理流程"></a>1. Spring MVC处理流程</h2><p><img src="/../images/springMVCPart01/SpringMVC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.png"></p><ol><li>用户发送请求至前端控制器 DispatcherServlet。</li><li>DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。</li><li>处理器映射器根据请求 url 找到具体的处理器，生成处理器对象及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet。</li><li>DispatcherServlet 通过 HandlerAdapter 处理器适配器调用处理器。</li><li>HandlerAdapter 执行处理器（handler，也叫后端控制器）。</li><li>Controller 执行完成返回 ModelAndView。</li><li>HandlerAdapter 将 handler 执行结果 ModelAndView 返回给 DispatcherServlet</li><li>DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</li><li>ViewReslover 解析后返回具体 View 对象。</li><li>DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中</li><li>DispatcherServlet 响应用户。</li></ol><h3 id="Spring-MVC涉及组件理解："><a href="#Spring-MVC涉及组件理解：" class="headerlink" title="Spring MVC涉及组件理解："></a>Spring MVC涉及组件理解：</h3><ol><li><p>DispatcherServlet：Spring MVC提供，需要使用<code>web.xml</code>配置使其生效，它是整个流处理的核心，所有请求都经过它的处理的分发。</p></li><li><p>HandlerMapping：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。它内部缓存handler（Controller方法）和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler</p></li><li><p>HandlerAdapter：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。它可以处理请求参数和处理响应数据。每次DispatcherServlet都是通过handlerAdapter间接调用handler，它是handler和DispatcherServlet之间的适配器</p></li><li><p>Handler：处理器，是Controller类内部方法的简称，由自己定义，用来接收参数，向后调用业务，最终返回响应结果</p></li><li><p>ViewResovler：Spring MVC提供，需要进行IoC配置使其加入IoC容器方可生效。视图解析器主要作用简化模板视图页面查找。<strong>前后端分离项目，后端只返回JSON数据</strong>。视图解析器组件不是必须的。</p></li></ol><h2 id="2-新建Spring-MVC项目"><a href="#2-新建Spring-MVC项目" class="headerlink" title="2. 新建Spring MVC项目"></a>2. 新建Spring MVC项目</h2><p>在父工程的<code>pom.xml</code>文件导入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringMVCStudy<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>spring-mvc-part01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>6.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet.api</span>&gt;</span>10.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">servlet.api</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.platform<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;servlet.api&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子模块名<code>spring-mvc-part01</code>，并且将改模块更改为web项目，在“文件—&gt;项目—&gt;项目结构”添加<code>web</code>相关</p><p><img src="/../images/springMVCPart01/%E6%9B%B4%E6%94%B9%E4%B8%BAweb%E9%A1%B9%E7%9B%AE.png"></p><p>添加工件</p><p><img src="/../images/springMVCPart01/idea%E6%B7%BB%E5%8A%A0%E5%B7%A5%E4%BB%B6.png"></p><p>新建Controller，<code>controller.HelloController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-01 18:03</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-comment">// handler: springmvc/hello  return &quot;hello spring mvc!&quot;</span><br>    <span class="hljs-comment">// 对外访问的地址, 到handlerMapping注册的注解</span><br>    <span class="hljs-meta">@RequestMapping(&quot;springmvc/hello&quot;)</span>  <span class="hljs-comment">// 对外访问的地址</span><br>    <span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">// 直接返回字符串给前端, 不要查找视图解析器</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;HelloController.hello&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Spring MVC!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建配置类，将Controller配置到IoC容器中，<code>config.MVCConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-01 18:07</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *  1. Controller配置到IoC容器</span><br><span class="hljs-comment"> *  2. HandlerMapping handlerAdapter加入到IoC容器</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">// 配置类注解</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example.controller&quot;)</span>  <span class="hljs-comment">// 扫描指定包</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MVCConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RequestMappingHandlerMapping <span class="hljs-title function_">handlerMapping</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingHandlerMapping</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RequestMappingHandlerAdapter <span class="hljs-title function_">handlerAdapter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置Spring MVC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-01 18:26</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> * Spring MVC提供的接口, 是替代web.xml的方案, 更方便实现完全注解方式ssm处理</span><br><span class="hljs-comment"> * Spring MVC框架会自动检查当前实现类, 会自动加载getRootConfigClasses() / getServletConfigClasses().</span><br><span class="hljs-comment"> * getServletMappings 返回的地址 设置DispatcherServlet对应处理的地址</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMVCInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定service / mapper 层的配置类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定Spring MVC 的配置类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;MVCConfig.class&#125;;  <span class="hljs-comment">// IoC 配置类</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置DispatcherServlet处理路径</span><br><span class="hljs-comment">     * 一般情况下为 / 代表处理所有请求</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 该类等效了以下内容</span><br><span class="hljs-comment">// &lt;web-app&gt;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  &lt;listener&gt;</span><br><span class="hljs-comment">//     &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="hljs-comment">//  &lt;/listener&gt;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  &lt;servlet&gt;</span><br><span class="hljs-comment">//     &lt;servlet-name&gt;app1&lt;/servlet-name&gt;</span><br><span class="hljs-comment">//     &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="hljs-comment">//     &lt;init-param&gt;</span><br><span class="hljs-comment">//        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="hljs-comment">//        &lt;param-value&gt;/WEB-INF/web.xml&lt;/param-value&gt;</span><br><span class="hljs-comment">//     &lt;/init-param&gt;</span><br><span class="hljs-comment">//     &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="hljs-comment">//  &lt;/servlet&gt;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  &lt;servlet-mapping&gt;</span><br><span class="hljs-comment">//     &lt;servlet-name&gt;app1&lt;/servlet-name&gt;</span><br><span class="hljs-comment">//     &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="hljs-comment">//  &lt;/servlet-mapping&gt;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//&lt;/web-app&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-搭建Tomcat（macOS下）"><a href="#3-搭建Tomcat（macOS下）" class="headerlink" title="3. 搭建Tomcat（macOS下）"></a>3. 搭建Tomcat（macOS下）</h2><p><a href="https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.19/bin/apache-tomcat-10.1.19.zip">apache-tomcat-10.1.19.zip</a></p><p>下载tomcat压缩包，进行解压。进入到idea中，将红框内的路径修改为解压后的路径。</p><p><img src="/../images/springMVCPart01/tomcat.png"></p><p>在“部署”栏目中添加之前新建的“工件”，并且上下文更改为<code>/</code></p><p><img src="/../images/springMVCPart01/%E9%83%A8%E7%BD%B2.png"></p><p>到解压路径下，修改<code>*.sh</code>文件的启动权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod u+x *.sh<br></code></pre></td></tr></table></figure><p>启动tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./startup.sh<br></code></pre></td></tr></table></figure><p>关闭tomcat</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./shutdown.sh<br></code></pre></td></tr></table></figure><p>此时已经可以使用idea来启动Tomcat服务器</p><p>运行，输入URL<code>http://localhost:8080/springmvc/hello</code></p><p><img src="/../images/springMVCPart01/helloSpringMVC.png"></p><h2 id="4-Spring-MVC接收数据"><a href="#4-Spring-MVC接收数据" class="headerlink" title="4. Spring MVC接收数据"></a>4. Spring MVC接收数据</h2><h3 id="4-1-访问路径"><a href="#4-1-访问路径" class="headerlink" title="4.1 访问路径"></a>4.1 访问路径</h3><p><code>@RequestMapping</code>注解的作用是将请求的URL地址和处理请求的方式（handler方法）关联起来，建立映射的关系</p><blockquote><ol><li><p>不同于WebServlet必须要使用<code>/</code>开头，但是在SpringMVC中不一定必须要用<code>/</code>开头</p></li><li><p>支持模糊地址。<code>*</code>：任意一层字符串     <code>**</code>：任意层任意字符串。</p><p><code>/user/*</code>  —&gt;  &#x2F;<code>user/a</code>可以进入，<code>/user/a/b</code>不可以进入</p><p><code>/user/**</code>    —&gt; <code>/user/a/a/a/a/a</code></p></li><li><p>请求方式的指定：使用属性<code>method</code>，若不符合请求方式，会出现<font color="red">405</font>异常</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.requestmapping;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-03 14:16</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> * 类上和方法上添加<span class="hljs-doctag">@RequestsMapping</span>区别</span><br><span class="hljs-comment"> *      类上是提取通用方法的地址(非必须)</span><br><span class="hljs-comment"> *      方法上是具体的handler地址(必须)</span><br><span class="hljs-comment"> *      如下方代码, 如果想访问/user路径, 那么直接写<span class="hljs-doctag">@RequestMapping</span>不加参数即可</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/login&quot;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span>  <span class="hljs-comment">// 作用注册地址, 将handler注册到handlerMapping上</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/register&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>@GetMapping</code>和<code>@PostMapping</code>注解</p><p>均继承自<code>@RequestMapping</code>，但是他们只能用于注解方法</p><p><code>@RequestMapping(value = &quot;/register&quot;, method = RequestMethod.POST)</code>等价于<code>@PostRequest(&quot;register&quot;)</code></p><p><code>GET   POST    PUT   DELETE</code>同理</p><h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h3><ul><li><code>value = &quot;***&quot;</code>：路径</li><li><code>method = RequestMethod.***</code>：请求方法</li></ul><h2 id="5-Spring-MVC接收数据"><a href="#5-Spring-MVC接收数据" class="headerlink" title="5. Spring MVC接收数据"></a>5. Spring MVC接收数据</h2><p>param格式：<code>key1=value1&amp;key2=value2</code></p><p>JSON格式：<code>&#123;&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;&#125;</code></p><p>param格式是ASCII码，JSON为<code>UTF-8</code>。类型方面，param仅支持字符串类型，而JSON可以更复杂</p><p>新建模块<code>spring-mvc-part02</code>，并且按照之前的方法重新配置web项目，部署Tomcat时，“应用程序上下文”更改为<code>/part02</code></p><p><img src="/../images/springMVCPart01/tomcat2.png"></p><p>此处使用三种接收参数方式：</p><ul><li>直接接收</li><li>注解指定：指定任意请求参数名，要求必须传递</li><li>特殊值</li></ul><p>新建Controller，<code>param.ParamController</code></p><h3 id="5-1-直接接收"><a href="#5-1-直接接收" class="headerlink" title="5.1 直接接收"></a>5.1 直接接收</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.param;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-03 15:19</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/param&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/data&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">data</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建配置类<code>config.MVCConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-03 15:20</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MVCConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RequestMappingHandlerMapping <span class="hljs-title function_">handlerMapping</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingHandlerMapping</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RequestMappingHandlerAdapter <span class="hljs-title function_">handlerAdapter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Spring MVC初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-03 15:21</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMVCInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;MVCConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>启动服务器，在浏览器输入相应URL</p><p><code>http://localhost:8080/part02/param/data?name=root&amp;age=18</code></p><p><img src="/../images/springMVCPart01/mvc%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%9C1.png"></p><h3 id="5-2-注解指定"><a href="#5-2-注解指定" class="headerlink" title="5.2 注解指定"></a>5.2 注解指定</h3><p><strong>@RequestParam参数</strong></p><p>只加在形参列表，指定请求参数名，或者是否为必须传递，或者非必须传递设置默认值</p><p><em>用法如下</em></p><p><code>String func(@RequestParam(value = &quot;&quot;), required = true)</code></p><ol><li><code>value = &quot;***&quot;</code>：前端传过来的参数名</li><li><code>required = true/false</code>：是否为必须传递项，默认为必须（若不传递会报<font color="red">400</font>异常）</li><li><code>defaultValue = &quot;1&quot;</code>：默认值为1</li></ol><p>在<code>param.ParamController.java</code>继续添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2. 注解指定</span><br><span class="hljs-comment">// URL:  /param/data1?account=root&amp;page=1</span><br><span class="hljs-comment">// 其中account参数为必须传递, page是非必须传递(但是需要有一个默认值)</span><br><span class="hljs-meta">@GetMapping(&quot;/data1&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">data1</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;account&quot;)</span> String username,</span><br><span class="hljs-params">                    <span class="hljs-meta">@RequestParam(required = false, defaultValue = &quot;1&quot;)</span> <span class="hljs-type">int</span> page)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;account(username) = &quot;</span> + username + <span class="hljs-string">&quot;, page = &quot;</span> + page);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;account(username) = &quot;</span> + username + <span class="hljs-string">&quot;, page = &quot;</span> + page;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springMVCPart01/%E6%B3%A8%E8%A7%A3%E6%8C%87%E5%AE%9A%E7%BB%93%E6%9E%9C.png"></p><h3 id="5-3-特殊值"><a href="#5-3-特殊值" class="headerlink" title="5.3 特殊值"></a>5.3 特殊值</h3><p>继续在<code>ParamController</code>添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3. 特殊值</span><br><span class="hljs-comment">// 一名多值   key=1&amp;key=2  直接使用集合值即可</span><br><span class="hljs-comment">// URL:   /param/data2?hobbies=唱&amp;hobbies=跳&amp;hobbies=rap&amp;hobbies=篮球</span><br><span class="hljs-meta">@GetMapping(&quot;/data2&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">data2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;String&gt; hobbies)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;hobbies = &quot;</span> + hobbies);<br>    <span class="hljs-keyword">return</span> hobbies.toString();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>  注意：此处的参数必须要添加@RequestParam，将hobbies对应的一个字符才能直接赋值给集合，报错类型异常。加了此注解之后才可add相应字符串</p></blockquote><p><font color="red">下图为不加@RequestParam注解报错的情况</font></p><p><img src="/../images/springMVCPart01/list%E4%B8%8D%E5%8A%A0%E6%B3%A8%E8%A7%A3%E6%8A%A5%E9%94%99.png"></p><p><font color="green">添加注解之后</font></p><p><img src="/../images/springMVCPart01/list%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3%E4%BD%86%E6%98%AF%E9%97%AE%E5%8F%B7.png"></p><p>控制台的输出</p><p><img src="/../images/springMVCPart01/%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3%E6%8E%A7%E5%88%B6%E5%8F%B0.png"></p><p>现在解决编码的问题</p><p>需要将类注解的<code>@RequestMapping</code>中增加属性即可。</p><p><code>@RequestMapping(value = &quot;/param&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</code></p><h3 id="5-4-使用实体对象接收值（-）"><a href="#5-4-使用实体对象接收值（-）" class="headerlink" title="5.4 使用实体对象接收值（*）"></a>5.4 使用实体对象接收值（*）</h3><p>创建实体类<code>pojo.User</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-03 19:59</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 4. 实体类</span><br><span class="hljs-comment">// 用实体类接收值</span><br><span class="hljs-comment">// URL:   /param/data3?name=zhangsan&amp;age=18</span><br><span class="hljs-meta">@GetMapping(&quot;/data3&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">data3</span><span class="hljs-params">(User user)</span> &#123;  <span class="hljs-comment">// 属性名等同于前端传的属性</span><br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> user.toString();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springMVCPart01/%E5%AE%9E%E4%BD%93%E5%AF%B9%E8%B1%A1.png"></p><p>若传输过来的属性对应不到实体对象，也不会进行赋值。</p><h3 id="5-5-路径传参"><a href="#5-5-路径传参" class="headerlink" title="5.5 路径传参"></a>5.5 路径传参</h3><p>新建Controller，<code>path.Controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.path;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-03 20:11</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;path&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PathController</span> &#123;<br>    <br>    <span class="hljs-comment">// URL:  path/账号/密码</span><br>    <span class="hljs-comment">// 动态路径设计</span><br>    <span class="hljs-meta">@GetMapping(&quot;&#123;account&#125;/&#123;password&#125;&quot;)</span>  <span class="hljs-comment">// 使用大括号</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@GetMapping(“{account}&#x2F;{password}”)</strong></p><p>等价于<code>@GetMapping(&quot;*/*&quot;)</code>，但是使用星号并不能获取到参数。</p><p>若按照如下形式写，代表接收param类型的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;&#123;account&#125;/&#123;password&#125;&quot;)</span>  <span class="hljs-comment">// 使用大括号</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String account, String password)</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>需要使用注解<code>@PathVariable</code>在形参前面，其他属性与<code>@RequestParam</code>中相同，可以设置不同的名字和是否必须项等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.path;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-03 20:11</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/path&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PathController</span> &#123;<br><br>    <span class="hljs-comment">// URL:  path/账号/密码</span><br>    <span class="hljs-comment">// 动态路径设计</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/&#123;account&#125;/&#123;password&#125;&quot;)</span>  <span class="hljs-comment">// 使用大括号</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;account&quot;)</span> String account,</span><br><span class="hljs-params">                        <span class="hljs-meta">@PathVariable(&quot;password&quot;)</span> String password)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;account = &quot;</span> + account + <span class="hljs-string">&quot;, password = &quot;</span> + password);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;account = &quot;</span> + account + <span class="hljs-string">&quot;, password = &quot;</span> + password;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../images/springMVCPart01/%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0.png"></p><h3 id="5-6-JSON接收"><a href="#5-6-JSON接收" class="headerlink" title="5.6 JSON接收"></a>5.6 JSON接收</h3><p>新建Controller，<code>json.JSONController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.json;<br><br><span class="hljs-keyword">import</span> org.example.pojo.Person;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-03 20:51</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;json&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JSONController</span> &#123;<br>    <span class="hljs-comment">// data 通过请求体使用post方法</span><br><br>    <span class="hljs-meta">@PostMapping(&quot;data&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">data</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Person person)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;person = &quot;</span> + person);<br>        <span class="hljs-keyword">return</span> person.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>默认实体类是param类型的，但是想接收JSON格式，需要加入注解<code>@RequestBody</code></p><p>使用Python进行模拟POST请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://localhost:8080/part02/json/data&quot;</span><br>person = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>,<br>    <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;male&quot;</span><br>&#125;<br><br>response = requests.post(url, data=person)<br><span class="hljs-built_in">print</span>(response)<br><br></code></pre></td></tr></table></figure><p>模拟POST请求之后会得到以下报错，<font color="red">415</font>状态码</p><p><img src="/../images/springMVCPart01/415%E6%8A%A5%E9%94%99.png"></p><p><strong>415类型错误原因???</strong></p><blockquote><p>  因为JSON是前端的格式，而不是Java的格式。Java原生的Web API只支持路径参数和param参数。</p><p>  如果需要项目支持JSON格式需要以下操作：</p><ul><li><p>导入JSON处理相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.15.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>handlerAdapter配置JSON转换器</p><p>在<code>config.MVCConfig.java</code>中添加类注解<code>@EnableWebMVC</code>，给handlerAdapter配置JSON转换器</p></li></ul><p>  但是经过一天的Debug还没找到问题的所在，即使python代码我更改为如下的形式</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>url = <span class="hljs-string">&quot;http://localhost:8080/part02/json/data&quot;</span><br>person = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>,<br>    <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;male&quot;</span><br>&#125;<br><br><br>header = &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>&#125;<br><br>response = requests.post(url, data=json.dumps(person), headers=header)<br><span class="hljs-built_in">print</span>(response.text)<br><br></code></pre></td></tr></table></figure><p>  java代码更改为以下（主要是<code>@PostMapping</code>注解添加了属性）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;data&quot;, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">data</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Person person)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;person = &quot;</span> + person);<br>    <span class="hljs-keyword">return</span> person.toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>  consumes属性是指定接收的字符串格式，这里为<code>application/json;charset=utf-8</code></p><p>  报的错误为</p><p>  <font color="#6c0000">org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content-Type ‘application&#x2F;json;charset&#x3D;UTF-8’ is not supported]</font></p></blockquote><h4 id="EnableWebMvc注解"><a href="#EnableWebMvc注解" class="headerlink" title="@EnableWebMvc注解"></a>@EnableWebMvc注解</h4><p>效果等同于在XML配置中，可以使用<code>&lt;mvc:annotation-driven&gt;</code>元素</p><h3 id="5-7-接收cookie"><a href="#5-7-接收cookie" class="headerlink" title="5.7 接收cookie"></a>5.7 接收cookie</h3><p><strong>@CookieValue</strong></p><p>新建Controller，<code>cookie.CookieController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.cookie;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.CookieValue;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-04 21:36</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;cookie&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CookieController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;data&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">data</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(value = &quot;cookieName&quot;)</span>String value)</span> &#123;<br>        System.out.printf(<span class="hljs-string">&quot;value = &quot;</span> + value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;save&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;cookieName&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        response.addCookie(cookie);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先通过<code>/cookie/save</code>添加一个cookie，再访问<code>/cookie/data</code>返回这个cookie的值</p><h3 id="5-8获取请求头"><a href="#5-8获取请求头" class="headerlink" title="5.8获取请求头"></a>5.8获取请求头</h3><p><strong>@RequestHeader</strong></p><blockquote><p>  <code>@Request***</code>可以查到通过request请求的各种参数</p></blockquote><p>新建Controller，<code>header.HeaderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.header;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestHeader;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-03-04 21:42</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;header&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">headerController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;getHeader&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHeader</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;Host&quot;)</span> String host)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;host = &quot;</span> + host);<br>        <span class="hljs-keyword">return</span> host;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
      <tag>Spring MVC框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【study】Spring学习part06</title>
    <link href="/post/988b16ce.html"/>
    <url>/post/988b16ce.html</url>
    
    <content type="html"><![CDATA[<h1 id="Spring学习part06"><a href="#Spring学习part06" class="headerlink" title="Spring学习part06"></a>Spring学习part06</h1><p>macOS启动MySQL命令</p><p><code>sudo /usr/local/mysql/support-files/mysql.server start</code></p><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><p>引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建数据库<code>spring</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_emp` (<br>    `id` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    `age` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    `sex` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>, <br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><p>新建jdbc相关配置<code>jdbc.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">11111111</span><br></code></pre></td></tr></table></figure><p>新建bean，<code>beans.xml</code>，并配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入外部属性文件, 创建数据源对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--创建jdbcTemplate对象, 注入数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-CRUD操作"><a href="#1-CRUD操作" class="headerlink" title="1. CRUD操作"></a>1. CRUD操作</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>新建测试类<code>jdbc.JdbcTemplateTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.jdbc;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-02-19 18:50</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcTemplateTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 添加</span><br>        <span class="hljs-comment">// 1.1 编写SQL语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO t_emp VALUES (NULL, ?, ?, ?)&quot;</span>;<br>        <span class="hljs-comment">// 1.2 调用jdbcTemplate方法, 传入相关参数</span><br>        <span class="hljs-comment">// int rows = jdbcTemplate.update(sql, &quot;张三&quot;, 20, &quot;男&quot;);  // 影响行数</span><br>        <span class="hljs-comment">// System.out.println(rows);</span><br><br>        <span class="hljs-comment">// Object[] role = &#123;&quot;李四&quot;, 30, &quot;女&quot;&#125;;  // 等价于上面写法</span><br>        <span class="hljs-comment">// System.out.println(jdbcTemplate.update(sql, role));</span><br><br>        Object[] role = &#123;<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-string">&quot;女&quot;</span>&#125;;<br>        System.out.println(jdbcTemplate.update(sql, role));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>新增一条查看MySQL结果</p><p><img src="/../images/springPart06/%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AEMySQL%E7%BB%93%E6%9E%9C.png"></p><p>查看spring输出结果</p><p><img src="/../images/springPart06/%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AEspring%E7%BB%93%E6%9E%9C.png" alt="新增数据spring结果"></p><p>多插入两条数据</p><p><img src="/../images/springPart06/MySQL%E6%96%B0%E5%A2%9E%E5%87%A0%E6%9D%A1%E6%95%B0%E6%8D%AE.png" alt="MySQL新增几条数据"></p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>继续添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 2. 修改</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE t_emp SET name=? WHERE id=?&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, <span class="hljs-string">&quot;Wang Wu&quot;</span>, <span class="hljs-number">3</span>);<br>    System.out.println(rows);<br>&#125;<br></code></pre></td></tr></table></figure><p>MySQL结果如下</p><p><img src="/../images/springPart06/%E4%BF%AE%E6%94%B9MySQL%E7%BB%93%E6%9E%9C.png"></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>添加删除测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 3. 删除</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DELETE from t_emp where id=?&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, <span class="hljs-number">3</span>);<br>    System.out.println(rows);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springPart06/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AEMySQL%E7%BB%93%E6%9E%9C.png"></p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><h5 id="查询：返回对象"><a href="#查询：返回对象" class="headerlink" title="查询：返回对象"></a>查询：返回对象</h5><p>新建员工类<code>Emp.java</code>，并且生成<code>getter</code>、<code>setter</code>、<code>toString()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.jdbc;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Date: 2024-02-26 21:03</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="写法一：自行封装"><a href="#写法一：自行封装" class="headerlink" title="写法一：自行封装"></a>写法一：自行封装</h6><p>测试方法，查看id为1的用户相关信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReturnObject</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 4.1 查询: 返回对象   写法1</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM t_emp WHERE id=?&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, (rs, rowNum) -&gt; &#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setName(rs.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>        emp.setAge(rs.getInt(<span class="hljs-string">&quot;age&quot;</span>));<br>        emp.setSex(rs.getString(<span class="hljs-string">&quot;sex&quot;</span>));<br>        <span class="hljs-keyword">return</span> emp;<br>    &#125;, <span class="hljs-number">1</span>);<br>    System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用的是<code>public &lt;T&gt; T queryForObject(String sql, RowMapper&lt;T&gt; rowMapper, @Nullable Object... args) throws DataAccessException</code>，使用lambda表达式。</p><p><code>RowMapper&lt;T&gt; rowMapper</code>接口实现源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RowMapper</span>&lt;T&gt; &#123;<br>    <span class="hljs-meta">@Nullable</span><br>    T <span class="hljs-title function_">mapRow</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> rowNum)</span> <span class="hljs-keyword">throws</span> SQLException;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><code>rs</code>是返回的结果</li><li><code>rowNum</code>是返回的行数</li></ul><p><img src="/../images/springPart06/%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B.png"></p><p>若不对相关属性赋值返回为<code>null</code></p><h6 id="写法二：使用BeanPropertyRowMapper"><a href="#写法二：使用BeanPropertyRowMapper" class="headerlink" title="写法二：使用BeanPropertyRowMapper"></a>写法二：使用BeanPropertyRowMapper</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReturnObject2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 4.1 查询: 返回对象  写法2</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM t_emp WHERE id=?&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class), <span class="hljs-number">1</span>);<br>    System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>BeanPropertyRowMapper</code>实现了相关方法，在参数中放入<code>Emp.class</code>可以直接映射到<code>Emp</code>实体类中。</p><h5 id="查询：返回list"><a href="#查询：返回list" class="headerlink" title="查询：返回list"></a>查询：返回list</h5><p>查询所有表数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReturnList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 4.2 查询: 返回List</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM t_emp&quot;</span>;<br>    List&lt;Emp&gt; result = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springPart06/%E8%BF%94%E5%9B%9EList%E7%B1%BB%E5%9E%8B.png"></p><h5 id="查询：返回单个值"><a href="#查询：返回单个值" class="headerlink" title="查询：返回单个值"></a>查询：返回单个值</h5><p>查询共多少条记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReturnValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT COUNT(*) FROM t_emp&quot;</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);<br>    System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3><p>相关伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> ...;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 开启事务： 关闭事务的自动提交；</span><br>    conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>    <br>    <span class="hljs-comment">// 核心操作</span><br>    <span class="hljs-comment">// TODO</span><br>    <br>    <span class="hljs-comment">// 提交事务</span><br>    conn.commit();<br>    <br>&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br><span class="hljs-comment">// 回滚事务</span><br>    conn.rollBack();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 释放数据库连接</span><br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>编程式实现事务的缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出，每次实现功能都需要自己编写代码，代码并没有得到复用</li></ul><hr><p>不使用事务会产生的问题：demo</p><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><h4 id="基于注解的声明式事务"><a href="#基于注解的声明式事务" class="headerlink" title="基于注解的声明式事务"></a>基于注解的声明式事务</h4><p>需求：用户购买图书的时候，数据库中对书的数量进行变动，用户表对余额进行变动。</p><p>创建两个表，<code>t_book</code>和<code>t_user</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_book`(  <br>    `book_id` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    `book_name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;图书名称&#x27;</span>,<br>    `price` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;价格&#x27;</span>,<br>    `stock` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) UNSIGNED <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;库存(无符号)&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`book_id`)<br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">3</span>;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user` (<br>    `user_id` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    `username` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    `balance` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) UNSIGNED <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;余额(无符号)&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`user_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><br></code></pre></td></tr></table></figure><p>在图书表插入几条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_book` (`book_id`, `book_name`, `price`, `stock`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;三体&#x27;</span>, <span class="hljs-number">80</span>, <span class="hljs-number">100</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_book` (`book_id`, `book_name`, `price`, `stock`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;流浪地球&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">200</span>);<br></code></pre></td></tr></table></figure><p>在用户表插入一条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_user` (`user_id`, `username`, `balance`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-number">50</span>);<br></code></pre></td></tr></table></figure><p>实现Controller层, Service层与DAO层</p><h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.tx.controller;<br><br><span class="hljs-keyword">import</span> org.example.tx.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-02-29 14:51</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 购买书的方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bookId 图书id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId 用户id</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>        <span class="hljs-comment">// 调用Service方法</span><br>        bookService.buyBook(bookId, userId);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Service层与实现类"><a href="#Service层与实现类" class="headerlink" title="Service层与实现类"></a>Service层与实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.tx.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.tx.service.impl;<br><br><span class="hljs-keyword">import</span> org.example.tx.dao.BookDao;<br><span class="hljs-keyword">import</span> org.example.tx.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-02-29 14:53</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>        <span class="hljs-comment">// 1. 根据图书id查询图书价格</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getBookPriceByBookId(bookId);<br><br>        <span class="hljs-comment">// 2. 更新图书表的库存量</span><br>        bookDao.updateStock(bookId);<br><br>        <span class="hljs-comment">// 3. 更新用户表的用户余额</span><br>        bookDao.updateUserBalance(userId, price);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="DAO层与实现类"><a href="#DAO层与实现类" class="headerlink" title="DAO层与实现类"></a>DAO层与实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.tx.dao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-02-29 14:53</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    Integer <span class="hljs-title function_">getBookPriceByBookId</span><span class="hljs-params">(Integer bookId)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStock</span><span class="hljs-params">(Integer bookId)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUserBalance</span><span class="hljs-params">(Integer userId, Integer price)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.tx.dao.impl;<br><br><span class="hljs-keyword">import</span> org.example.tx.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-02-29 14:54</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getBookPriceByBookId</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT price FROM t_book WHERE book_id=?&quot;</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStock</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE t_book SET stock=stock-1 WHERE book_id=?&quot;</span>;<br>        jdbcTemplate.update(sql, bookId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUserBalance</span><span class="hljs-params">(Integer userId, Integer price)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE t_user set balance=balance-? WHERE user_id=?&quot;</span>;<br>        jdbcTemplate.update(sql, price, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.example.tx.controller.BookController;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-02-29 15:13</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBookTx</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookController bookController;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBuyBook</span><span class="hljs-params">()</span> &#123;<br>        bookController.buyBook(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>图书表更新后结果</p><p><img src="/../images/springPart06/%E5%9B%BE%E4%B9%A6%E8%A1%A8%E7%BB%93%E6%9E%9C1.png"></p><p>用户表更新后结果</p><p>![用户表结果1](&#x2F;Users&#x2F;promise&#x2F;Promise Code&#x2F;blog&#x2F;source&#x2F;images&#x2F;springPart06&#x2F;用户表结果1.png)</p><h4 id="当前存在问题"><a href="#当前存在问题" class="headerlink" title="当前存在问题"></a>当前存在问题</h4><p>新增一本书《三体2》，售价800元。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_book` (`book_id`, `book_name`, `price`, `stock`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;三体2&#x27;</span>, <span class="hljs-number">800</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>用户想购买《三体2》但是余额不足会发生什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBuyBook</span><span class="hljs-params">()</span> &#123;<br>    bookController.buyBook(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>报错信息如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; <span class="hljs-keyword">SQL</span> [<span class="hljs-keyword">UPDATE</span> t_user <span class="hljs-keyword">set</span> balance=balance-? <span class="hljs-keyword">WHERE</span> user_id=?]; Data truncation: <span class="hljs-type">BIGINT</span> UNSIGNED <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> range <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;(`spring`.`t_user`.`balance` - 800)&#x27;</span><br><br></code></pre></td></tr></table></figure><p>因为余额使用的是无符号数，此时余额还有420元不足以支付800元的书籍。在数据库中报错。</p><p>但是图书表数量发生了变化</p><p><img src="/../images/springPart06/%E5%9B%BE%E4%B9%A6%E8%A1%A8%E7%BB%93%E6%9E%9C2.png"></p><p><strong>所以在此需要添加事务进行操作</strong></p><h4 id="添加事务"><a href="#添加事务" class="headerlink" title="添加事务"></a>添加事务</h4><p>配置bean，在<code>bean.xml</code>文件中，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/tx</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--引入外部属性文件, 创建数据源对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--创建jdbcTemplate对象, 注入数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.tx&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        开启事务的注解驱动</span><br><span class="hljs-comment">        通过注解@Transactional所标识的方法或标识的类中所有的方法, 都会被事务管理器管理事务</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--transaction-manager属性值是transactionManager, 如果事务管理器bean的id正好是默认值, 可以省略这个属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在实现类前加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>    <span class="hljs-comment">// 1. 根据图书id查询图书价格</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getBookPriceByBookId(bookId);<br><br>    <span class="hljs-comment">// 2. 更新图书表的库存量</span><br>    bookDao.updateStock(bookId);<br><br>    <span class="hljs-comment">// 3. 更新用户表的用户余额</span><br>    bookDao.updateUserBalance(userId, price);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>@Transactional</code>注解标识的位置</p><ul><li><code>@Transactional</code>标识在方法上，则只会影响该方法</li><li><code>@Transactional</code>标识在类上，则会影响类中的所有方法</li></ul><h4 id="Transactional属性"><a href="#Transactional属性" class="headerlink" title="@Transactional属性"></a>@Transactional属性</h4><ul><li><p><code>readOnly</code>是否只读：如果设置为只读属性，只能进行查询操作，不能进行修改、添加、删除操作</p></li><li><p><code>timeout</code>超时（单位是秒）：在设置超时时间之内没有完成，抛出异常回滚。默认值<code>-1</code>（不超时）</p></li><li><p>回滚策略：设置哪些异常不回滚，哪些异常进行回滚。</p><ul><li><code>rollbackFor</code>：需要设置一个Class类型对象</li><li><code>rollbackForClassName</code>：需要设置一个字符串类型的全类名</li><li><code>noRollbackFor</code>：需要设置一个Class类型对象</li><li><code>noRollbackForClassName</code>：需要设置一个字符串类型的全类名</li></ul></li><li><p><code>isolation</code>隔离级别：读问题（脏读、幻读、重复读等）</p><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p><ul><li>READ UNCOMMITTED：读未提交，允许Transaction01读取Transaction02未提交的修改</li><li>READ COMMITTED：读已提交，要求Transaction01只能读取Transaction02已提交的修改</li><li>REPEATABLE READ：可重复读，确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新</li><li>SERIALIZABLE：串行化，确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下</li></ul><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p>各种数据库产品对事务隔离级别支持程度</p><table><thead><tr><th align="center">隔离级别</th><th align="center">Oracle</th><th align="center">MySQL</th></tr></thead><tbody><tr><td align="center">READ UNCOMMITTED</td><td align="center">❌</td><td align="center">✅</td></tr><tr><td align="center">READ COMMITTED</td><td align="center">✅（默认）</td><td align="center">✅</td></tr><tr><td align="center">REPEATABLE READ</td><td align="center">❌</td><td align="center">✅（默认）</td></tr><tr><td align="center">SERIALIZABLE</td><td align="center">✅</td><td align="center">✅</td></tr></tbody></table><p>使用方式：<code>@Transactional(isolation = Isolation.READ_UNCOMMITTED)</code></p></li><li><p><code>propagation</code>传播行为：事务方法之间的调用，事务该如何进行使用</p><p>什么是事务的传播行为？</p><p>在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，</p><p>事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</p><p>一共有七种传播行为：</p><ul><li><p>REQUIRED：支持当前事务，如果不存在就新建一个（默认）【没有就新建，有就加入】</p></li><li><p>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行【有就加入，没有就不管了】</p></li><li><p>MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常【有就加入，没有就抛异常】</p></li><li><p>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存任，则特这个存在的事务挂起 【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】</p></li><li><p>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务【不支持事务，存在就挂起】</p></li><li><p>NEVER：以非事务方式运行，如果有事务存在，抛出异常【不支持事务，存在就抛异常】</p></li><li><p>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样】。</p></li></ul></li></ul><h2 id="使用全注解配置事务"><a href="#使用全注解配置事务" class="headerlink" title="使用全注解配置事务"></a>使用全注解配置事务</h2><p>创建配置类，同时需要注释掉<code>bean.xml</code>内所有<code>bean</code>标签内容，否则会引起冲突</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.tx.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Promise</span><br><span class="hljs-comment"> * Date: 2024-02-29 20:49</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example.tx&quot;)</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        druidDataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        druidDataSource.setPassword(<span class="hljs-string">&quot;11111111&quot;</span>);<br>        druidDataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false&quot;</span>);<br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;jdbcTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dataSourceTransactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【study】Spring学习part05</title>
    <link href="/post/1824774.html"/>
    <url>/post/1824774.html</url>
    
    <content type="html"><![CDATA[<h1 id="【study】Spring学习part05"><a href="#【study】Spring学习part05" class="headerlink" title="【study】Spring学习part05"></a>【study】Spring学习part05</h1><h2 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h2><p>需求：制作一个计算器，包括加减乘除。还需要日志在核心业务前后做输出</p><p>代码实现</p><p>新建计算器类接口<code>Calculator</code>，定义四则运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定义接口实现<code>CalculatorImpl</code>，实现四则运算的简单操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demo.impl;<br><br><span class="hljs-keyword">import</span> org.example.demo.Calculator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-09 13:12</span><br><span class="hljs-comment"> * Description: 基本的实现类, 实现四则运算</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a + b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a - b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a * b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a / b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定义接口实现<code>CalculatorLogImpl</code>，增加日志输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demo.impl;<br><br><span class="hljs-keyword">import</span> org.example.demo.Calculator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-09 13:20</span><br><span class="hljs-comment"> * Description: 含有日志的实现类, 包含四则运算</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorLogImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.printf(<span class="hljs-string">&quot;[日志] add方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a + b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class="hljs-string">&quot;[日志] add方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.printf(<span class="hljs-string">&quot;[日志] sub方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a - b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class="hljs-string">&quot;[日志] sub方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.printf(<span class="hljs-string">&quot;[日志] mul方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a * b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class="hljs-string">&quot;[日志] mul方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.printf(<span class="hljs-string">&quot;[日志] div方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a / b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        System.out.printf(<span class="hljs-string">&quot;[日志] div方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>目前存在的问题</strong></p><ol><li><p>日志功能混合到一定，代码耦合度高，维护起来不方便</p><blockquote><p>  日志功能和核心业务能否分离？</p><ul><li>如果将日志功能抽象出工具类并不能做到，因为还是耦合在了业务中。</li></ul></blockquote></li></ol><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>设计模式中的一种，是<strong>结构型模式</strong>。作用是通过提供一个代理类，让我们在调用目标的方法时，不再是直接对目标方法进行调用，而是通过代理类<strong>间接调用</strong>，让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起有利于统一维护。</p><p><img src="/../images/springPart05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.jpeg"></p><ul><li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li><li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li></ul><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>新建静态代理类<code>proxy.CalculatorStaticProxy.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demo.proxy;<br><br><span class="hljs-keyword">import</span> org.example.demo.Calculator;<br><br><span class="hljs-keyword">import</span> java.lang.ref.PhantomReference;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-10 19:13</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorStaticProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <br>    <span class="hljs-comment">// 被代理的目标对象传递过来</span><br>    <span class="hljs-keyword">private</span> Calculator calculator;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CalculatorStaticProxy</span><span class="hljs-params">(Calculator calculator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.calculator = calculator;<br>    &#125;<br>    <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-comment">// 输出日志</span><br>        System.out.printf(<span class="hljs-string">&quot;[日志] add方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br>        <br>        <span class="hljs-comment">// 调用目标对象的方法实现核心业务</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.add(a, b);<br>        <br>        <span class="hljs-comment">// 输出日志</span><br>        System.out.printf(<span class="hljs-string">&quot;[日志] add方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-comment">// 输出日志</span><br>        System.out.printf(<span class="hljs-string">&quot;[日志] sub方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br><br>        <span class="hljs-comment">// 调用目标对象的方法实现核心业务</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.sub(a, b);<br><br>        <span class="hljs-comment">// 输出日志</span><br>        System.out.printf(<span class="hljs-string">&quot;[日志] sub方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-comment">// 输出日志</span><br>        System.out.printf(<span class="hljs-string">&quot;[日志] mul方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br><br>        <span class="hljs-comment">// 调用目标对象的方法实现核心业务</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.mul(a, b);<br><br>        <span class="hljs-comment">// 输出日志</span><br>        System.out.printf(<span class="hljs-string">&quot;[日志] mul方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-comment">// 输出日志</span><br>        System.out.printf(<span class="hljs-string">&quot;[日志] div方法开始执行, 参数是:%d, %d&quot;</span>, a, b);<br><br>        <span class="hljs-comment">// 调用目标对象的方法实现核心业务</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.div(a, b);<br><br>        <span class="hljs-comment">// 输出日志</span><br>        System.out.printf(<span class="hljs-string">&quot;[日志] div方法执行结束, 结果是:%d&quot;</span>, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当前存在问题，日志功能并没有抽取出来，不具备灵活性。将来有任何日志需求都需要一个代理类来实现。</p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>定义代理工厂<code>ProxyFactory</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demo.proxy;<br><br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-10 19:29</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br><br>    <span class="hljs-comment">// 目标对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建一个方法, 返回代理对象(动态)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * @param ClassLoader: 加载动态生成代理类的类加载器</span><br><span class="hljs-comment">         * @param interfaces: 目标对象实现所有接口类型的class</span><br><span class="hljs-comment">         * @param InvocationHandler: 设置代理对象实现目标对象方法的过程</span><br><span class="hljs-comment">         * */</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> target.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> proxy 代理对象</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> method 需要重写目标对象的方法</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> args method方法中所需要的参数</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@return</span> Object</span><br><span class="hljs-comment">             * */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-comment">// 调用目标方法</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class="hljs-string">&quot;, 参数: &quot;</span> + Arrays.toString(args));<br>                    result = method.invoke(target, args);<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class="hljs-string">&quot;, 结果: &quot;</span> + result);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class="hljs-string">&quot;, 异常: &quot;</span> + e.getMessage());<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span> + method.getName() + <span class="hljs-string">&quot;, 方法执行完毕&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试单元</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCalculator</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1. 创建代理对象(动态)</span><br>    <span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">proxyFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CalculatorImpl</span>());<br>    <span class="hljs-type">Calculator</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Calculator) proxyFactory.getProxy();<br>    proxy.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><p><img src="/../images/springPart05/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png"></p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP (Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，<strong>在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术</strong>。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之问的耦合降低，提高程序的可重用性，同时提高了开发的效率。</p><h4 id="1-横切关注点"><a href="#1-横切关注点" class="headerlink" title="1. 横切关注点"></a>1. 横切关注点</h4><p>分散在每个、各个模块中解决同一样的问题，例如用户验证、日志管理、事务处理、数据缓存都属于<strong>横切关注点</strong>。</p><p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p><p><img src="/../images/springPart05/%E6%A8%AA%E5%88%87%E5%85%B3%E6%B3%A8%E7%82%B9.png"></p><h4 id="2-通知（增强）"><a href="#2-通知（增强）" class="headerlink" title="2. 通知（增强）"></a>2. 通知（增强）</h4><p>增强，想要增强的功能，例如安全、事务、日志等。</p><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法叫做通知方法。</p><ul><li>前置通知：在被代理的目标方法前执行</li><li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（寿终正寝）</li><li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（死于非命）</li><li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（盖棺定论）</li><li>环绕通知：使用<code>try...catch...finally</code>结构围绕着<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><p><img src="/../images/springPart05/%E9%80%9A%E7%9F%A5%EF%BC%88%E5%A2%9E%E5%BC%BA%EF%BC%89.png"></p><h4 id="3-切面"><a href="#3-切面" class="headerlink" title="3. 切面"></a>3. 切面</h4><p>封装通知方法类</p><p><img src="/../images/springPart05/%E5%88%87%E9%9D%A2.png"></p><h4 id="4-目标"><a href="#4-目标" class="headerlink" title="4. 目标"></a>4. 目标</h4><p>被代理的目标对象</p><h4 id="5-代理"><a href="#5-代理" class="headerlink" title="5. 代理"></a>5. 代理</h4><p>向目标对象应用通知之后创建的代理对象。</p><h4 id="6-连接点"><a href="#6-连接点" class="headerlink" title="6. 连接点"></a>6. 连接点</h4><p>这是一个纯逻辑的概念</p><p>把每个方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行顺序看成y轴，x轴和y轴交叉点就是连接点。<strong>通俗说，就是Spring允许使用通知的地方</strong></p><h4 id="7-切入点"><a href="#7-切入点" class="headerlink" title="7. 切入点"></a>7. 切入点</h4><p>定位连接点的方式。</p><p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说），</p><p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的SQL 语句。</p><p><strong>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法</strong></p><p>切点通过 <code>org.springframework.aop.Pointcut</code> 接口进行描述，它使用类和方法作为连接点的查询条件。</p><h3 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Spring AOP依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Spring aspects依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-创建目标资源"><a href="#2-创建目标资源" class="headerlink" title="2. 创建目标资源"></a>2. 创建目标资源</h4><ol><li>接口</li><li>实现类</li></ol><p>同计算器的例子<code>Calculator.java</code>，<code>CalculatorImpl.java</code>，放入新的包<code>annotationaop</code>当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.annotationaop;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.annotationaop.impl;<br><br><br><span class="hljs-keyword">import</span> org.example.annotationaop.Calculator;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-09 13:12</span><br><span class="hljs-comment"> * Description: 基本的实现类, 实现四则运算</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">// 添加注解注入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a + b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a - b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a * b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a / b;<br>        System.out.println(<span class="hljs-string">&quot;方法内部result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-创建切面类"><a href="#3-创建切面类" class="headerlink" title="3. 创建切面类"></a>3. 创建切面类</h4><ol><li>切入点</li><li>创建类型</li></ol><h5 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h5><p>五种通知类型注解，括号内参数为切入点表达式</p><ul><li>前置 <code>@Before()</code></li><li>返回 <code>@AfterReturning()</code></li><li>异常<code> @AfterThrowing()</code></li><li>后置 <code>@After()</code></li><li>环绕<code> @Around()</code></li></ul><p><img src="/../images/springPart05/%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F.png"></p><p>创建切面类<code>LogAspect.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.annotationaop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-10 23:14</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 切面类</span><br><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">// 切面类注解</span><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">// 在Spring IoC容器中管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-comment">// 设置切入点和通知类型</span><br>    <span class="hljs-comment">// 括号内写 切入点表达式 execution(访问修饰符 增强方法返回类型 增强方法所在类的全类名.方法名称(参数))</span><br>    <span class="hljs-comment">// * 可以省略一些</span><br>    <span class="hljs-comment">// 通知类型:</span><br>    <span class="hljs-comment">//      前置 @Before()</span><br>    <span class="hljs-comment">//      返回 @AfterReturning()</span><br>    <span class="hljs-comment">//      异常 @AfterThrowing()</span><br>    <span class="hljs-comment">//          目标方法出现异常, 这个通知会执行, 也能获取到目标方法异常信息</span><br>    <span class="hljs-comment">//      后置 @After()</span><br>    <span class="hljs-comment">//      环绕 @Around()</span><br><br>    <span class="hljs-comment">// 前置通知 @Before()</span><br>    <span class="hljs-meta">@Before(value = &quot;execution(public int org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(<span class="hljs-string">&quot;Logger --&gt; 前置通知, 方法名称: &quot;</span> + methodName + <span class="hljs-string">&quot;, 参数为: &quot;</span> + Arrays.toString(args));<br>    &#125;<br><br>    <span class="hljs-comment">// 后置通知 @After()</span><br>    <span class="hljs-meta">@After(value = &quot;execution (* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger --&gt; 后置通知, 方法名称: &quot;</span> + methodName);<br>    &#125;<br><br>    <span class="hljs-comment">// 返回通知 @AfterReturning</span><br>    <span class="hljs-comment">// 参数returning = &quot;参数名&quot;, 下方函数参数中Object 命名也必须一致</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;, returning = &quot;results&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturningMethod</span><span class="hljs-params">(JoinPoint joinPoint, Object results)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger --&gt; 返回通知, 方法名称: &quot;</span> + methodName + <span class="hljs-string">&quot;, 返回结果: &quot;</span> + results);<br>    &#125;<br><br>    <span class="hljs-comment">// 异常通知 @AfterThrowing</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowingMethod</span><span class="hljs-params">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger --&gt; 异常通知, 方法名称: &quot;</span> + methodName + <span class="hljs-string">&quot;, 异常结果: &quot;</span> + ex);<br>    &#125;<br><br>    <span class="hljs-comment">// 环绕通知 @Around</span><br>    <span class="hljs-meta">@Around(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundMethod</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;  <span class="hljs-comment">// 使用ProceedingJoinPoint类型, 更强</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">argString</span> <span class="hljs-operator">=</span> Arrays.toString(args);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;环绕通知, 目标方法之前执行&quot;</span>);<br>            result = joinPoint.proceed();<br>            System.out.println(<span class="hljs-string">&quot;环绕通知, 目标方法返回值之后执行&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;环绕通知, 目标方法出现异常时执行&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;环绕通知, 目标方法执行完毕时执行&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>创建配置文件<code>bean.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop </span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        基于注解的AOP实现:</span><br><span class="hljs-comment">        1. 将目标对象和切面交给IoC容器管理(注解+扫描)</span><br><span class="hljs-comment">        2. 开启AspectJ的自动代理, 为目标对象自动生成代理</span><br><span class="hljs-comment">        3. 将切面类通过注解@Aspect标识</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.annotationaop&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAOPAdd</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    org.example.annotationaop.<span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> context.getBean(org.example.annotationaop.Calculator.class);<br>    System.out.println(<span class="hljs-string">&quot;**********add()开始执行**********&quot;</span>);<br>    calculator.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    System.out.println(<span class="hljs-string">&quot;**********add()执行完毕**********&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;**********div()开始执行**********&quot;</span>);<br>    calculator.div(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    System.out.println(<span class="hljs-string">&quot;**********div()执行完毕**********&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>   测试用例中使用<code>2/0</code>来引发错误异常。</p></blockquote><p><img src="/../images/springPart05/%E5%90%84%E7%A7%8D%E9%80%9A%E7%9F%A5%E6%B5%8B%E8%AF%95.png"></p><h4 id="切入点表达式的重用"><a href="#切入点表达式的重用" class="headerlink" title="切入点表达式的重用"></a>切入点表达式的重用</h4><p>定义方法<code>pointCut()</code>，在之前使用注解<code>@Pointcut()</code>，使用时候</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 重用切入点表达式</span><br><span class="hljs-meta">@Pointcut(value = &quot;execution(* org.example.annotationaop.impl.CalculatorImpl.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-meta">@After(value = &quot;pointCut()&quot;)</span>  <span class="hljs-comment">// 注解时的值直接写方法名（同一个包里面的切面），不同包就是全路径</span><br><br><br><span class="hljs-meta">@After(value = &quot;org.example.annotationaop.LogAspect.pointCut()&quot;)</span><br><br></code></pre></td></tr></table></figure><h4 id="切面优先级"><a href="#切面优先级" class="headerlink" title="切面优先级"></a>切面优先级</h4><p>使用<code>Order()</code>可以控制切面的优先级，越小级别越高</p><h3 id="基于XML的AOP"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h3><p> 计算器接口、实现类、切面类同上，切面类去掉方法前的所有注解。</p><p>新建配置文件<code>bean-aop.xml</code>，写入配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.xmlaop&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置AOP五种通知类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置切面类--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logAspect&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置切入点--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* org.example.xmlaop.impl.CalculatorImpl.*(..))&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--配置五种通知类型--&gt;</span><br>            <span class="hljs-comment">&lt;!--1. 前置通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;beforeMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br><br>            <span class="hljs-comment">&lt;!--2. 后置通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br><br>            <span class="hljs-comment">&lt;!--3. 返回通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturningMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">returning</span>=<span class="hljs-string">&quot;results&quot;</span>/&gt;</span><br><br>            <span class="hljs-comment">&lt;!--4. 异常通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowingMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">&quot;ex&quot;</span>/&gt;</span><br><br>            <span class="hljs-comment">&lt;!--5. 环绕通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aroundMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testXMLAOPAdd</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-aop.xml&quot;</span>);<br>    org.example.xmlaop.<span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> context.getBean(org.example.xmlaop.Calculator.class);<br>    System.out.println(<span class="hljs-string">&quot;**********add()开始执行**********&quot;</span>);<br>    calculator.add(<span class="hljs-number">6</span>, <span class="hljs-number">2</span>);<br>    System.out.println(<span class="hljs-string">&quot;**********add()执行完毕**********&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;**********div()开始执行**********&quot;</span>);<br>    calculator.div(<span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br>    System.out.println(<span class="hljs-string">&quot;**********div()执行完毕**********&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果输出</p><p><img src="/../images/springPart05/xml%E5%90%84%E7%A7%8D%E9%80%9A%E7%9F%A5%E6%B5%8B%E8%AF%95.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【study】Spring学习part04</title>
    <link href="/post/768577e2.html"/>
    <url>/post/768577e2.html</url>
    
    <content type="html"><![CDATA[<h1 id="【study】Spring学习part04"><a href="#【study】Spring学习part04" class="headerlink" title="【study】Spring学习part04"></a>【study】Spring学习part04</h1><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>通过Class文件获取到对象相关的内容，并使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.example.reflect.Car;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Date: 2024-02-08 00:02</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCar</span> &#123;<br>    <span class="hljs-comment">// 1. 获取class对象多种方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCarClass1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 类名.class</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz1</span> <span class="hljs-operator">=</span> Car.class;<br><br>        <span class="hljs-comment">// 2. 对象.getClass()</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>().getClass();<br><br>        <span class="hljs-comment">// 3. Class.forName(&quot;类的全路径&quot;)</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.example.reflect.Car&quot;</span>);<br><br>        System.out.println(clazz1);<br>        System.out.println(clazz2);<br>        System.out.println(clazz3);<br><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car1</span> <span class="hljs-operator">=</span> (Car) clazz3.getDeclaredConstructor().newInstance();<br>        System.out.println(car1);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 获取构造方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCarClass2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;Car&gt; clazz = Car.class;<br>        <span class="hljs-comment">// 获取所有public构造方法</span><br>        Constructor&lt;?&gt;[] constructors = clazz.getConstructors();<br>        <span class="hljs-comment">// 获取private构造方法</span><br>        <span class="hljs-comment">// clazz.getDeclaredConstructors();</span><br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; c : constructors) &#123;<br>            System.out.println(<span class="hljs-string">&quot;方法名称: &quot;</span> + c.getName() + <span class="hljs-string">&quot;\t参数个数:&quot;</span> + c.getParameterCount());<br>        &#125;<br><br>        <span class="hljs-comment">// 指定有参构造创建对象</span><br>        <span class="hljs-comment">// 构造public</span><br>        Constructor&lt;Car&gt; constructor1 = clazz.getConstructor(String.class, <span class="hljs-type">int</span>.class, String.class);<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> constructor1.newInstance(<span class="hljs-string">&quot;问界&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;黑色&quot;</span>);<br>        System.out.println(car);<br><br>        <span class="hljs-comment">// 构造private</span><br>        Constructor&lt;Car&gt; declaredConstructor = clazz.getDeclaredConstructor(String.class);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);  <span class="hljs-comment">// 设置允许私有访问</span><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car1</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance(<span class="hljs-string">&quot;智界&quot;</span>);<br>        System.out.println(car1);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 获取属性</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCarClass3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;Car&gt; carClass = Car.class;<br>        <span class="hljs-comment">// 获取所有public属性</span><br>        Field[] fields = carClass.getFields();<br>        System.out.println(<span class="hljs-string">&quot;public属性有&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取所有public + private属性</span><br>        System.out.println(<span class="hljs-string">&quot;private属性有&quot;</span>);<br>        Field[] declaredFields = carClass.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field f : declaredFields) &#123;<br>            System.out.println(f);<br>        &#125;<br><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Car.class;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> (Car) clazz.getDeclaredConstructor().newInstance();<br>        <span class="hljs-keyword">for</span> (Field f : declaredFields) &#123;<br>            <span class="hljs-keyword">if</span> (f.getName().equals(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 设置允许访问</span><br>                f.setAccessible(<span class="hljs-literal">true</span>);<br>                f.set(car, <span class="hljs-string">&quot;问界M9&quot;</span>);<br>            &#125;<br>            System.out.println(f.getName());<br>            System.out.println(car);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 获取方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCarClass4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;问界M7&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;蓝色&quot;</span>);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&gt; clazz = car.getClass();<br><br>        <span class="hljs-comment">// 操作public方法</span><br>        Method[] methods = clazz.getMethods();<br>        <span class="hljs-keyword">for</span> (Method m : methods) &#123;<br>            <span class="hljs-comment">// System.out.println(m.getName());</span><br>            <span class="hljs-comment">// 执行某个方法</span><br>            <span class="hljs-keyword">if</span> (m.getName().equals(<span class="hljs-string">&quot;toString&quot;</span>)) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> (String) m.invoke(car);<br>                System.out.println(<span class="hljs-string">&quot;toString执行: &quot;</span> + invoke);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 操作private方法</span><br>        Method[] methodAll = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method m : methodAll) &#123;<br>            <span class="hljs-keyword">if</span> (m.getName().equals(<span class="hljs-string">&quot;run&quot;</span>)) &#123;<br>                m.setAccessible(<span class="hljs-literal">true</span>);<br>                m.invoke(car);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="手写IoC"><a href="#手写IoC" class="headerlink" title="手写IoC"></a>手写IoC</h2><p>实现Spring的IoC过程</p><h3 id="1-创建新的子模块myspring"><a href="#1-创建新的子模块myspring" class="headerlink" title="1. 创建新的子模块myspring"></a>1. 创建新的子模块<code>myspring</code></h3><h3 id="2-创建测试类service、dao"><a href="#2-创建测试类service、dao" class="headerlink" title="2. 创建测试类service、dao"></a>2. 创建测试类<code>service</code>、<code>dao</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org.example.dao.UserDao.java</span><br><span class="hljs-keyword">package</span> org.example.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org.example.dao.impl.UserDaoImpl.java</span><br><span class="hljs-keyword">package</span> org.example.dao.impl;<br><br><span class="hljs-keyword">import</span> org.example.dao.UserDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org.example.service.UserService.java</span><br><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org.example.service.impl.UserServiceImpl.java</span><br><span class="hljs-keyword">package</span> org.example.service.impl;<br><br><span class="hljs-keyword">import</span> org.example.dao.UserDao;<br><span class="hljs-keyword">import</span> org.example.service.UserService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-创建两个注解"><a href="#3-创建两个注解" class="headerlink" title="3. 创建两个注解"></a>3. 创建两个注解</h3><h4 id="3-1-Bean创建对象"><a href="#3-1-Bean创建对象" class="headerlink" title="3.1 @Bean创建对象"></a>3.1 <code>@Bean</code>创建对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org.example.annotation.bean.java</span><br><span class="hljs-keyword">package</span> org.example.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(ElementType.TYPE)</span>  <span class="hljs-comment">// 注解可以用在类上或接口上</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="hljs-comment">// 运行时生效</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Bean &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-2-Di属性注入"><a href="#3-2-Di属性注入" class="headerlink" title="3.2 @Di属性注入"></a>3.2 <code>@Di</code>属性注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org.example.annotation.di.java</span><br><span class="hljs-keyword">package</span> org.example.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(ElementType.FIELD)</span>  <span class="hljs-comment">// 注解在属性上</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="hljs-comment">// 运行时生效</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Di &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-创建bean容器接口ApplicationContext定义方法"><a href="#4-创建bean容器接口ApplicationContext定义方法" class="headerlink" title="4. 创建bean容器接口ApplicationContext定义方法"></a>4. 创建bean容器接口<code>ApplicationContext</code>定义方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org.example.bean.ApplicationContext.java</span><br><span class="hljs-keyword">package</span> org.example.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApplicationContext</span> &#123;<br>    Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-实现bean容器接口"><a href="#5-实现bean容器接口" class="headerlink" title="5.实现bean容器接口"></a>5.实现bean容器接口</h3><ol><li>返回对象</li><li>根据包规则加载bean</li></ol><blockquote><p>  比如org.example，扫描这个包与子包里面的所有类，是否有@Bean注解，如果有则把这个类通过反射进行实例化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org.example.bean.AnnotationApplicationContext.java</span><br><br><span class="hljs-keyword">package</span> org.example.bean;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContext</span>&#123;<br>    <span class="hljs-comment">// 创建Map, 用于存放Bean的实例对象</span><br>    <span class="hljs-keyword">private</span> Map&lt;Class, Object&gt; beanFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 返回对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> beanFactory.get(clazz);<br>    &#125;<br><br>    <span class="hljs-comment">// 设置包扫描规则</span><br>    <span class="hljs-comment">// 当前包及其子包, 若发现类前@Bean注解, 使用反射进行实例化</span><br>    <span class="hljs-comment">// 创建有参数的构造, 设置扫描规则</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationApplicationContext</span><span class="hljs-params">(String basePackage)</span> &#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../images/springPart04/%E6%B5%81%E7%A8%8B.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【study】Spring学习part03</title>
    <link href="/post/e8e1e241.html"/>
    <url>/post/e8e1e241.html</url>
    
    <content type="html"><![CDATA[<h1 id="【study】Spring学习part03"><a href="#【study】Spring学习part03" class="headerlink" title="【study】Spring学习part03"></a>【study】Spring学习part03</h1><p>新建模块<code>spring6-ioc-annotation</code></p><h2 id="基于注解管理bean（★）"><a href="#基于注解管理bean（★）" class="headerlink" title="基于注解管理bean（★）"></a>基于注解管理bean（★）</h2><p>Spring通过注解实现自动装配的步骤如下：</p><ol><li>引入依赖</li><li>开启组件扫描</li><li>使用注解定义bean</li><li>依赖注入</li></ol><p>最基本的写法：</p><p>新建类User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置bean文件，<code>bean.xml</code>，添加相关约束</p><p><code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans<br>       http://www.springframework.org/schema/beans/spring-beans.xsd<br>       http://www.springframework.org/schema/context<br>       http://www.springframework.org/schema/context/spring-context.xsd&quot;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.spring6&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用注解定义bean"><a href="#使用注解定义bean" class="headerlink" title="使用注解定义bean"></a>使用注解定义bean</h3><p>Spring提供了一下多个注解，这些注解可以直接标注在Java类上，将它们定义成Spring bean</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>该注解用于描述Spring中的bean，他是一个泛化的概念，仅仅表示容器中的一个组件（bean），并且可以作用在应用的任何层次，例如Service层，Dao层等。使用时只需将该注解标注在相应类上即可。</td></tr><tr><td>@Repository</td><td>该注解用于将数据访问层（Dao层）的类标识为Spring中的bean，其功能与@Component相同。</td></tr><tr><td>@Service</td><td>该注解通常作用在业务层（Service层），用于将业务层的类标识为Spring中的bean，其功能与@Component相同</td></tr><tr><td>@Controller</td><td>该注解通常作用在控制层（如Spring MVC的Controller），用于将控制层的类标识为Spring中的bean，其功能与@Component相同</td></tr></tbody></table><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springPart03/Component%E6%B3%A8%E8%A7%A3%E8%BE%93%E5%87%BA1.png" alt="输出结果"></p><h3 id="Autowired注入"><a href="#Autowired注入" class="headerlink" title="@Autowired注入"></a>@Autowired注入</h3><p>单独使用<code>@Autowired</code>注解是根据类型装配，默认是<code>byType</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--bean.xml--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.spring6&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>构建一个小demo，项目结构如下</p><p><code>org/example/autowired/</code>路径下</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">📁 autowired/<br>├─📁 dao/<br>│ ├─📁 impl/<br>│ │ └─📄 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserDaoImpl</span>.</span></span>java<br>│ └─📄 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserDao</span>.</span></span>java<br>├─📁 controller/<br>│ └─📄 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserController</span>.</span></span>java<br>└─📁 service/<br>  ├─📁 impl/<br>  │ └─📄 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserServiceImpl</span>.</span></span>java<br>  └─📄 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserSerivce</span>.</span></span>java<br><br></code></pre></td></tr></table></figure><p>Controller使用<code>@Controller</code>注解</p><p>Dao的接口实现使用<code>@Repository</code>注解</p><p>Service的接口实现使用<code>@Service</code>注解</p><p><code>UserController</code>、<code>UserServiceImpl</code>、<code>UserDaoImpl</code>分别实现<code>add()</code>方法，接口省略不写。</p><h4 id="1-属性注入"><a href="#1-属性注入" class="headerlink" title="1. 属性注入"></a>1. 属性注入</h4><p>在<code>UserController</code>中注入<code>service</code>，这里不再需要<code>setter()</code>进行注入，使用<code>@Autowired注解</code>，下面同理。即注解写到属性上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-comment">// 注入service</span><br>    <span class="hljs-comment">// 第一种方式：属性注入</span><br>    <span class="hljs-meta">@Autowired</span>  <span class="hljs-comment">// 根据类型找到对应对象, 完成注入</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;controller......&quot;</span>);<br>        userService.add();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>UserServiceImpl</code>中注入<code>dao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// 注入dao</span><br>    <span class="hljs-comment">// 第一种方式: 属性注入</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;service......&quot;</span>);<br>        userDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAutowired</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-type">UserController</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> context.getBean(UserController.class);<br>    controller.add();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springPart03/autowired%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA.png"></p><h4 id="2-set注入"><a href="#2-set注入" class="headerlink" title="2. set注入"></a>2. set注入</h4><p>写出其<code>setter()</code>，在前方加入注解<code>@Autowired</code>，之后同理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.autowired.controller;<br><br><span class="hljs-keyword">import</span> org.example.autowired.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-comment">// 第二种方式: set注入</span><br>    <span class="hljs-comment">// 生成setter()</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;controller......&quot;</span>);<br>        userService.add();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-构造方法注入"><a href="#3-构造方法注入" class="headerlink" title="3. 构造方法注入"></a>3. 构造方法注入</h4><p>在构造函数前加入注解<code>@Autowired</code>，其他同理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.autowired.controller;<br><br><span class="hljs-keyword">import</span> org.example.autowired.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-comment">// 第三种方式: 构造方法注入</span><br>    <span class="hljs-comment">// 生成构造函数</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserController</span><span class="hljs-params">(UserService userService)</span> &#123;<br>    <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;controller......&quot;</span>);<br>        userService.add();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="4-形参注入"><a href="#4-形参注入" class="headerlink" title="4. 形参注入"></a>4. 形参注入</h4><p>形参也可以使用<code>@Autowired</code>进行注解</p><h4 id="5-只有一个构造函数，无需使用注解"><a href="#5-只有一个构造函数，无需使用注解" class="headerlink" title="5. 只有一个构造函数，无需使用注解"></a>5. 只有一个构造函数，无需使用注解</h4><p><font color="red">当构造函数只有一个时，Autowired注解可以省略</font></p><h4 id="6-Autowired注解和-Qualifier注解联合"><a href="#6-Autowired注解和-Qualifier注解联合" class="headerlink" title="6. @Autowired注解和@Qualifier注解联合"></a>6. @Autowired注解和@Qualifier注解联合</h4><p>新建一个<code>UserRedisDaoImpl</code>类实现<code>UserDao</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRedisDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;user redis......&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>此时执行测试代码会报错</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean <span class="hljs-keyword">with</span> name <span class="hljs-string">&#x27;userController&#x27;</span>: Unsatisfied dependency expressed through <span class="hljs-keyword">method</span> &#x27;<span class="hljs-title function_">setUserService</span>&#x27; <span class="hljs-title function_">parameter</span> 0: Error creating bean <span class="hljs-keyword">with</span> name <span class="hljs-string">&#x27;userServiceImpl&#x27;</span>: Unsatisfied dependency expressed through field <span class="hljs-string">&#x27;userDao&#x27;</span>: No qualifying bean <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span> <span class="hljs-string">&#x27;org.example.autowired.dao.UserDao&#x27;</span> available: expected single <span class="hljs-keyword">matching</span> bean but found <span class="hljs-number">2</span>: userDaoImpl,userRedisDaoImpl<br><br></code></pre></td></tr></table></figure><p>因为<code>UserDao</code>在注入的时候发现了两个对象，<code>userDaoImpl,userRedisDaoImpl</code>，此时不能根据类型注入，需要进行名称注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// 注入dao</span><br>    <span class="hljs-comment">// 第一种方式: 属性注入</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier</span> (value = <span class="hljs-string">&quot;userRedisDaoImpl&quot;</span>)<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;service.....&quot;</span>);<br>        userDao.add();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../images/springPart03/qualifier%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA.png"></p><h3 id="Resource注入"><a href="#Resource注入" class="headerlink" title="@Resource注入"></a>@Resource注入</h3><p>与<code>@Autowired</code>注解区别</p><table><thead><tr><th>@Resource</th><th>@Autowired</th></tr></thead><tbody><tr><td>是JDK扩展包中，属于JDK的一部分。所以该注解是标准注解，更具有通用性。</td><td>Spring框架中自己的注解</td></tr><tr><td>默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到则会自动启动通过类型byType装配</td><td>默认根据类型装配byType，如果想根据名称装配，需要配合<code>@Qualifier</code>注解一起使用</td></tr><tr><td>用在属性上、setter方法上</td><td>用在属性上、setter方法上、构造方法上、构造方法参数上</td></tr></tbody></table><p>需要使用依赖（JDK高于11或低于8需要引入依赖）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="全注解开发"><a href="#全注解开发" class="headerlink" title="全注解开发"></a>全注解开发</h3><p>不再使用spring配置文件，写一个配置类代替配置文件</p><p>新建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">// 配置类</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example&quot;)</span>  <span class="hljs-comment">// 开启组件扫描</span><br><span class="hljs-comment">// 该注解等价于在bean.xml文件中 &lt;context:component-scan base-package=&quot;org.example&quot;/&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>新建测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserControllerAnno</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 加载配置类</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>    <span class="hljs-type">UserController</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> context.getBean(UserController.class);<br>    controller.add();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【study】Spring学习part02</title>
    <link href="/post/b57237dc.html"/>
    <url>/post/b57237dc.html</url>
    
    <content type="html"><![CDATA[<h1 id="Spring学习part02"><a href="#Spring学习part02" class="headerlink" title="Spring学习part02"></a>Spring学习part02</h1><h2 id="控制反转-IoC"><a href="#控制反转-IoC" class="headerlink" title="控制反转  IoC"></a>控制反转  IoC</h2><p>Spring中通过IoC容器来管理所有Java对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由IoC容器管理的Java对象成为Spring Bean，与Java使用关键字<code>new</code>创建的Java对象没有任何区别。</p><p>IoC容器是Spring框架中最重要的核心组件之一，它贯穿了Spring从诞生到成长的整个过程。</p><p><img src="/../images/springDay02/IoC.png" alt="IoC"></p><ul><li>控制反转是一种思想</li><li>控制反转是为了降低程序耦合度，提高程序扩展能力</li><li>控制反转，反转的是什么？<ul><li>将对象的创建权力交出去，交给第三方容器负责</li><li>将对象和对象之间关系的维护权交出去，交给第三方容器负责</li></ul></li><li>控制反转这种思想如何实现<ul><li>DI（Dependency injection）：依赖注入</li></ul></li></ul><h2 id="依赖注入介绍"><a href="#依赖注入介绍" class="headerlink" title="依赖注入介绍"></a>依赖注入介绍</h2><p><strong>指Spring创建对象过程中，将的对象依赖属性通过配置进行注入</strong></p><p>依赖注入常见的实现方式包括两种：</p><ul><li>set注入</li><li>构造注入</li></ul><p>Bean管理：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）</p><h2 id="基于XML管理bean"><a href="#基于XML管理bean" class="headerlink" title="基于XML管理bean"></a>基于XML管理bean</h2><p>新建子模块<code>spring6-iocxml</code></p><h3 id="获取bean的三种方式"><a href="#获取bean的三种方式" class="headerlink" title="获取bean的三种方式"></a>获取bean的三种方式</h3><h4 id="方式一：根据id获取"><a href="#方式一：根据id获取" class="headerlink" title="方式一：根据id获取"></a>方式一：根据id获取</h4><h4 id="方式二：根据类型获取"><a href="#方式二：根据类型获取" class="headerlink" title="方式二：根据类型获取"></a>方式二：根据类型获取</h4><p><font color="red">当根据类型获取bean时，要求IoC容器中制定类型的bean有且只能有一个</font></p><p>若IoC容器中一共配置了两个，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--beans.xml中--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.User&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.User&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> context.getBean(User.class);<br>System.out.println(<span class="hljs-string">&quot;根据类型获取bean: &quot;</span> + user2);<br></code></pre></td></tr></table></figure><p><font color="red">错误信息如下</font></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">org.springframework.beans.factory.NoUniqueBeanDefinitionException: <span class="hljs-keyword">No</span> qualifying bean <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span> <span class="hljs-string">&#x27;org.example.spring6.iocxml.User&#x27;</span> available: expected single matching bean but <span class="hljs-built_in">found</span> <span class="hljs-number">2</span>: <span class="hljs-keyword">user</span>,user2<br><br></code></pre></td></tr></table></figure><p>如果一个接口有多个实现类，这些实现类都配置了bean，根据接口类型可以获取bean吗</p><blockquote><p>  不可以，因为bean不唯一</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--一个接口实现类的获取过程--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.bean.UserDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;personDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.bean.PersonDaoImpl&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java新建PersonDaoImpl，依赖UserDao接口</span><br><span class="hljs-keyword">package</span> org.example.spring6.iocxml.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-02 17:05</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Person......&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编写测试用例</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserDao</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>    <span class="hljs-comment">// 根据类型获取接口对应的bean</span><br>    <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> context.getBean(UserDao.class);<br>    System.out.println(userDao);<br>    userDao.run();<br>&#125;<br></code></pre></td></tr></table></figure><p>  <font color="red">错误信息</font></p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.beans</span><span class="hljs-selector-class">.factory</span><span class="hljs-selector-class">.NoUniqueBeanDefinitionException</span>: No qualifying bean of type <span class="hljs-string">&#x27;org.example.spring6.iocxml.bean.UserDao&#x27;</span> available: expected single matching bean but found <span class="hljs-number">2</span>: userDao,personDao<br><br></code></pre></td></tr></table></figure></blockquote><h4 id="方式三：根据id和类型获取"><a href="#方式三：根据id和类型获取" class="headerlink" title="方式三：根据id和类型获取"></a>方式三：根据id和类型获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><br>    <span class="hljs-comment">// 1. 根据id获取bean</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;根据id获取bean: &quot;</span> + user1);<br><br>    <span class="hljs-comment">// 2. 根据类型获取bean</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> context.getBean(User.class);<br>    System.out.println(<span class="hljs-string">&quot;根据类型获取bean: &quot;</span> + user2);<br><br>    <span class="hljs-comment">// 3. 根据id和类型获取bean</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    System.out.println(<span class="hljs-string">&quot;根据id和类型获取bean: &quot;</span> + user3);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><h4 id="依赖注入之setter注入"><a href="#依赖注入之setter注入" class="headerlink" title="依赖注入之setter注入"></a>依赖注入之setter注入</h4><ol><li>创建类，定义属性，生成属性的set方法</li><li>在spring配置文件中配置</li></ol><p>新建Book类，并且实现getter，setter，有参和无参构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org/example/spring6/iocxml/di/Book.java</span><br><span class="hljs-keyword">package</span> org.example.spring6.iocxml.di;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-02 17:14</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String bookName;<br>    <span class="hljs-keyword">private</span> String author;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String bookName, String author)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookName = bookName;<br>        <span class="hljs-built_in">this</span>.author = author;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBookName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bookName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookName</span><span class="hljs-params">(String bookName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookName = bookName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAuthor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> author;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthor</span><span class="hljs-params">(String author)</span> &#123;<br>        <span class="hljs-built_in">this</span>.author = author;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;bookName=&#x27;&quot;</span> + bookName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, author=&#x27;&quot;</span> + author + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>新建配置文件（为区分刚刚的配置文件）<code>bean-di.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--bean通过set方法注入--&gt;</span><br>    <span class="hljs-comment">&lt;!--具体过程，通过标签中的name属性，对应到setter中的setBookName()函数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.di.Book&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--属性名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;wangwu&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--属性值--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在测试类进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSetter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-di.xml&quot;</span>);<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springDay02/set%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png" alt="set注入结果"></p><h4 id="依赖注入之构造器注入"><a href="#依赖注入之构造器注入" class="headerlink" title="依赖注入之构造器注入"></a>依赖注入之构造器注入</h4><ol><li>创建类，定义属性，生成有参数的构造方法</li><li>在spring配置文件配置</li></ol><p><strong>Book类同上，但是构造函数做简单修改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;无参构造已经被执行&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String bookName, String author)</span> &#123;<br>    <span class="hljs-built_in">this</span>.bookName = bookName;<br>    <span class="hljs-built_in">this</span>.author = author;<br>    System.out.println(<span class="hljs-string">&quot;有参构造已经被执行&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--bean通过set方法注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.di.Book&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;wangwu&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--bean通过构造器注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.di.Book&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookConstructor&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PHP&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;AAAAA&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConstructor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-di.xml&quot;</span>);<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;bookConstructor&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><p><img src="/../images/springDay02/%E6%9C%89%E5%8F%82%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png"></p><blockquote><p>  - 为什么有一句<font color="red">无参构造已经被执行</font>？</p><p>  - 因为xml文件中“通过set方法注入”里面的内容也被执行，这里运行的是无参构造函数</p></blockquote><h4 id="特殊值处理"><a href="#特殊值处理" class="headerlink" title="特殊值处理"></a>特殊值处理</h4><ul><li><p>字面量赋值</p><p>常规写法</p></li><li><p>null值</p><p>若为空值，需要使用额外的标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>xml实体</p><p>插入的值为xml格式</p><ul><li><p>解决方法1：转义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;lt;</span> <span class="hljs-symbol">&amp;gt;</span>&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>CDATA节（区），可以表示特殊符号</p><ul><li>解决方法2：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul><h4 id="特殊类型属性注入"><a href="#特殊类型属性注入" class="headerlink" title="特殊类型属性注入"></a>特殊类型属性注入</h4><h5 id="外部引入bean"><a href="#外部引入bean" class="headerlink" title="外部引入bean"></a>外部引入bean</h5><p>新建两个类，部门和员工（一对多关系），</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org/example/spring6/iocxml/ditest/Department.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br>    <span class="hljs-keyword">private</span> String dName;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getdName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setdName</span><span class="hljs-params">(String dName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dName = dName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">(String dName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dName = dName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;部门名称: &quot;</span> + dName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org/example/spring6/iocxml/ditest/Employee.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String eName;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-comment">// 员工输入某个部门</span><br>    <span class="hljs-keyword">private</span> Department department;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">geteName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> eName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seteName</span><span class="hljs-params">(String eName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.eName = eName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Department <span class="hljs-title function_">getDepartment</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> department;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDepartment</span><span class="hljs-params">(Department department)</span> &#123;<br>        <span class="hljs-built_in">this</span>.department = department;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String eName, Integer age, Department department)</span> &#123;<br>        <span class="hljs-built_in">this</span>.eName = eName;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.department = department;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(eName + <span class="hljs-string">&quot;员工在工作, 工龄为: &quot;</span> + age);<br>        department.info();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        第一种方式: 引入外部的bean</span><br><span class="hljs-comment">        1. 创建两个类对象: Department, Employee</span><br><span class="hljs-comment">        2. 在Employee的bean标签里面, 使用property引入Department, Employee的bean</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;department&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;安保部&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--普通属性注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;eName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lucy&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;50&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--对象类型注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;department&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--将部门对象引入  使用ref--&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmployee</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-di-test.xml&quot;</span>);<br>    <span class="hljs-comment">// 员工对象</span><br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;employee&quot;</span>, Employee.class);<br>    employee.work();<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><p><img src="/../images/springDay02/%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png"></p><h5 id="内部引入bean"><a href="#内部引入bean" class="headerlink" title="内部引入bean"></a>内部引入bean</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee2&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--内部bean注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;eName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mary&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;财务部&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="级联引入bean"><a href="#级联引入bean" class="headerlink" title="级联引入bean"></a>级联引入bean</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        第二种方式: 级联赋值bean</span><br><span class="hljs-comment">        1. 创建两个类对象: Department, Employee</span><br><span class="hljs-comment">        2. 在Employee的bean标签里面, 使用property引入Department, Employee的bean</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;eName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tom&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--级联赋值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;department3&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--这里不能写value--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department.dName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;测试部&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;department3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术研发部&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="为数组类型属性赋值"><a href="#为数组类型属性赋值" class="headerlink" title="为数组类型属性赋值"></a>为数组类型属性赋值</h4><p>员工类添加爱好，并生成getter(), setter()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String[] hobbies;<br><br><span class="hljs-keyword">public</span> String[] getHobbies() &#123;<br>    <span class="hljs-keyword">return</span> hobbies;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHobbies</span><span class="hljs-params">(String[] hobbies)</span> &#123;<br>    <span class="hljs-built_in">this</span>.hobbies = hobbies;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造bean，新建<code>bean-di-array.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;department&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术部&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入普通的属性值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;eName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Lucy&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--注入对象类型的属性值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;department&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--注入数组类型的属性值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跳<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rap<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>  如果为数组类型，在<code>property</code>标签中还有<code>array</code>标签写入，再使用<code>value</code>标签添加值。</p></blockquote><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testArray</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-di-array.xml&quot;</span>);<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;employee&quot;</span>, Employee.class);<br>    employee.work();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springDay02/%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E5%B1%9E%E6%80%A7.png"></p><h4 id="为集合类型属性注入"><a href="#为集合类型属性注入" class="headerlink" title="为集合类型属性注入"></a>为集合类型属性注入</h4><h5 id="list集合类型"><a href="#list集合类型" class="headerlink" title="list集合类型"></a>list集合类型</h5><p>部门新增属性，员工列表，并生成getter(), setter()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;Employee&gt; employeeList;<br><br><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title function_">getEmployeeList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> employeeList;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmployeeList</span><span class="hljs-params">(List&lt;Employee&gt; employeeList)</span> &#123;<br>    <span class="hljs-built_in">this</span>.employeeList = employeeList;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;部门名称: &quot;</span> + dName);<br>    <span class="hljs-keyword">for</span> (Employee emp : employeeList) &#123;<br>        System.out.println(emp.geteName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置bean，<code>bean-di-list.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;eName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Lucy&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;eName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mary&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.ditest.Department&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;department&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术研发部&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;employeeList&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>  <span class="hljs-comment">&lt;!--list中引入其他的bean--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;employee1&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;employee2&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-di-list.xml&quot;</span>);<br>    <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;department&quot;</span>, Department.class);<br>    department.info();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springDay02/list%E7%B1%BB%E5%9E%8B%E5%B1%9E%E6%80%A7.png"></p><h5 id="map集合类型"><a href="#map集合类型" class="headerlink" title="map集合类型"></a>map集合类型</h5><p>新建学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.dimap;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 00:05</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String studentId;<br>    <span class="hljs-keyword">private</span> String studentName;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, Teacher&gt; teacherMap;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStudentId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> studentId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStudentId</span><span class="hljs-params">(String studentId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.studentId = studentId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStudentName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> studentName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStudentName</span><span class="hljs-params">(String studentName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.studentName = studentName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Map&lt;String, Teacher&gt; <span class="hljs-title function_">getTeacherMap</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> teacherMap;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacherMap</span><span class="hljs-params">(Map&lt;String, Teacher&gt; teacherMap)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacherMap = teacherMap;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学生编号: &quot;</span> + studentId + <span class="hljs-string">&quot;学生名: &quot;</span> + studentName);<br>        System.out.println(teacherMap);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;studentId=&#x27;&quot;</span> + studentId + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, studentName=&#x27;&quot;</span> + studentName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, teacherMap=&quot;</span> + teacherMap +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>新建教师类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.dimap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 00:05</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> String teacherId;<br>    <span class="hljs-keyword">private</span> String teacherName;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTeacherId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> teacherId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacherId</span><span class="hljs-params">(String teacherId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacherId = teacherId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTeacherName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> teacherName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacherName</span><span class="hljs-params">(String teacherName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacherName = teacherName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;teacherId=&#x27;&quot;</span> + teacherId + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, teacherName=&#x27;&quot;</span> + teacherName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置bean，<code>bean-di-map.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        1. 创建两个对象</span><br><span class="hljs-comment">        2. 注入普通类型属性</span><br><span class="hljs-comment">        3. 在学生bean中注入map集合类型属性</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Student&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20000&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;100010&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;teacher1&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;100011&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;teacher2&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;100012&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;teacher3&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--讲师id--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;蔡老师&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;101&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--讲师id--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;徐老师&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;102&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--讲师id--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;kun老师&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-di-map.xml&quot;</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;student&quot;</span>, Student.class);<br>    student.run();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springDay02/map%E7%B1%BB%E5%9E%8B%E5%B1%9E%E6%80%A7.png"></p><h4 id="引用集合类型的bean"><a href="#引用集合类型的bean" class="headerlink" title="引用集合类型的bean"></a>引用集合类型的bean</h4><p>新增课程类Lesson</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.dimap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 00:29</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lesson</span> &#123;<br>    <span class="hljs-keyword">private</span> String lessonName;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLessonName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lessonName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLessonName</span><span class="hljs-params">(String lessonName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.lessonName = lessonName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Lesson&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;lessonName=&#x27;&quot;</span> + lessonName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>新增学生属性：lessonList，表示学生选了哪些课程，并生成getter(), setter()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;Lesson&gt; lessonList;<br><br><span class="hljs-keyword">public</span> List&lt;Lesson&gt; <span class="hljs-title function_">getLessonList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> lessonList;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLessonList</span><span class="hljs-params">(List&lt;Lesson&gt; lessonList)</span> &#123;<br>    <span class="hljs-built_in">this</span>.lessonList = lessonList;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置bean，<code>bean-di-ref.xml</code></p><p>需要引入新的约束</p><p><code>xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</code></p><p><code>xsi:schemaLocation</code>中添加</p><ul><li><code>http://www.springframework.org/schema/util</code></li><li><code>http://www.springframework.org/schema/util/spring-util.xsd</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/util</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--1. 创建三个对象--&gt;</span><br>    <span class="hljs-comment">&lt;!--2. 注入普通类型属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Student&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lessonList&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;lessonList&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherMap&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;蔡老师&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Teacher&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;徐老师&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;101&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lesson1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lessonName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;数据结构&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lesson2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lessonName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;计算机组成原理&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lesson3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lessonName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;操作系统&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Lesson&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lesson4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lessonName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;计算机网络&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--3. 使用util: 类型  定义--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lessonList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;lesson1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;lesson2&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;lesson3&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;lesson4&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:map</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;10010&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;teacher1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;10011&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;teacher2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:map</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--4. 在学生bean引入util: 类型定义bean, 完成list, map类型属性注入--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果</p><p><img src="/../images/springDay02/ref%E7%BB%93%E6%9E%9C1.png"></p><p><img src="/../images/springDay02/ref%E7%BB%93%E6%9E%9C2.png"></p><h4 id="p命名空间注入"><a href="#p命名空间注入" class="headerlink" title="p命名空间注入"></a>p命名空间注入</h4><p><code>bean-di-ref.xml</code>中简单修改，添加如下约束以及标签</p><p><code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.dimap.Student&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentP&quot;</span> <span class="hljs-attr">p:studentId</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">p:studentName</span>=<span class="hljs-string">&quot;Mary&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">p:lessonList-ref</span>=<span class="hljs-string">&quot;lessonList&quot;</span> <span class="hljs-attr">p:teacherMap-ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPLabel</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-di-ref.xml&quot;</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;studentP&quot;</span>, Student.class);<br>    student.run();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springDay02/p%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png"></p><h4 id="引入外部属性文件"><a href="#引入外部属性文件" class="headerlink" title="引入外部属性文件"></a>引入外部属性文件</h4><p>导入连接MySQL相关依赖在<code>pom.xml</code>中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--MySQL驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>连接MySQL操作，写入配置文件<code>jdbc.properties</code>，配置MySQL相关</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">11111111</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p>然后配置配置bean，<code>bean-jdbc.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入外部属性文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--完成数据库信息注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的属性值会读取到<code>jdbc.properties</code>文件中的值</p><p>编写测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbc2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-jdbc.xml&quot;</span>);<br>    <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> context.getBean(DruidDataSource.class);<br>    System.out.println(druidDataSource.getUrl());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springDay02/%E5%A4%96%E9%83%A8%E5%BC%95%E5%85%A5%E7%BB%93%E6%9E%9C.png"></p><h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><p>在Spring中，可以通过配置bean标签的<code>scope</code>属性来执行bean的作用范围，各取值含义如下表：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th></tr></thead><tbody><tr><td>singleton（默认）</td><td>在IoC容器中，这个bean的对象始终为单实例</td><td>IoC容器初始化时</td></tr><tr><td>prototype</td><td>这个bean在IoC容器中有多个实例</td><td>获取bean时</td></tr></tbody></table><p>新建Order类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.scope;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 12:32</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置bean，<code>bean-scope.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--通过scope属性配置单实例  多实例--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.scope.Orders&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>bean</code>标签中的<code>scope</code>属性默认为<code>singleton</code></p><p>新建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOrders</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-scope.xml&quot;</span>);<br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(orders);<br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders1</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(orders1);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里新建两个对象，都取自同一个bean，输出对象的地址，查看是否相同</p><p><img src="/../images/springDay02/%E5%8D%95%E5%AE%9E%E4%BE%8B%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png"></p><p>可以看到两个实例的地址是相同的</p><p>测试多实例，将<code>bean</code>标签中的<code>scope</code>属性改为<code>prototype</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--通过scope属性配置单实例  多实例--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.scope.Orders&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../images/springDay02/%E5%A4%9A%E5%AE%9E%E4%BE%8B%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png"></p><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><ol><li>bean对象的创建（调用无参构造）</li><li>给bean对象设置相关属性</li><li>bean后置处理器（初始化之前）</li><li>bean对象初始化（调用制定初始化方法）</li><li>bean后置处理器（初始化之后）</li><li>bean对象创建完成，可以使用</li><li>bean对象销毁（配置制定销毁方法）</li><li>关闭IoC容器</li></ol><p>新建User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.life;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 12:47</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第一步: 这是无参构造函数, 创建bean对象&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        System.out.println(<span class="hljs-string">&quot;第二步: 给bean对象设置属性值&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第四步: bean对象初始化, 调用指定方法进行初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 销毁的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第七步: bean对象销毁, 调用制定方法进行销毁&quot;</span>);<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>用于实现bean的初始化和销毁方法，<code>initMethod()</code>和<code>destroyMethod()</code></p><p>构造bean，<code>bean-life.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.life.User&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Lucy&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>bean</code>标签中添加两个属性<code>init-method</code>和<code>destroy-method</code>，属性值为两个函数名</p><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLife</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-life.xml&quot;</span>);<br>    org.example.spring6.iocxml.life.<span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, org.example.spring6.iocxml.life.User.class);<br>    System.out.println(user);<br>    System.out.println(<span class="hljs-string">&quot;第六步: bean对象创建完成&quot;</span>);<br>    context.close();  <span class="hljs-comment">// 对象销毁  只有实现类才有这个函数, ApplicationContext并没有这个方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为了区分其他包里面的<code>User</code>类，这里写了包的全路径</p><p>![](&#x2F;Users&#x2F;promise&#x2F;Promise Code&#x2F;blog&#x2F;source&#x2F;images&#x2F;springDay02&#x2F;bean生命周期输出1.png)</p><p>这里并没有给出第三步与第五步，现在写入后置处理器</p><p>新建类<code>MyBeanPost</code>依赖于接口<code>BeanPostProcessor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.life;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 13:00</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPost</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;第三步: 后置处理器, 在初始化之前执行&quot;</span>);<br>        System.out.println(beanName + <span class="hljs-string">&quot;::&quot;</span> + bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;第五步: 后置处理器, 在初始化之后执行&quot;</span>);<br>        System.out.println(beanName + <span class="hljs-string">&quot;::&quot;</span> + bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在<code>bean-life.xml</code>中新增后置处理器的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--bean的后置处理器要放入IoC容器才能生效--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.life.MyBeanPost&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanPost&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试类运行结果</p><p><img src="/../images/springDay02/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BE%93%E5%87%BA3.png"></p><h3 id="FactoryBean工厂bean"><a href="#FactoryBean工厂bean" class="headerlink" title="FactoryBean工厂bean"></a>FactoryBean工厂bean</h3><p>新建User1类，无任何属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.factoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 16:19</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User1</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置bean，<code>bean-factorybean.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.factoryBean.MyFactoryBean&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user1&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实现FactoryBean接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.factoryBean;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 16:18</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;User1&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User1 <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User1</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> User1.class;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>新建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFactoryBean</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-factorybean.xml&quot;</span>);<br>    <span class="hljs-type">User1</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user1&quot;</span>, User1.class);<br>    System.out.println(user1);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springDay02/factoryBean%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png"></p><h3 id="基于XML的自动装配"><a href="#基于XML的自动装配" class="headerlink" title="基于XML的自动装配"></a>基于XML的自动装配</h3><p>根据制定的策略，在IoC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性值复制</p><p><img src="/../images/springDay02/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.png"></p><p>若不使用Spring的写法</p><p><strong>DAO层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.auto.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserDao</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.auto.dao.impl;<br><br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.dao.UserDao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 16:33</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserDao</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了UserDao方法&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.auto.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserService</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.auto.service.impl;<br><br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.dao.UserDao;<br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl;<br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 16:32</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserService</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService()方法执行&quot;</span>);<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>        userDao.addUserDao();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.auto.controller;<br><br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.service.impl.UserServiceImpl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 16:31</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;controller方法执行&quot;</span>);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        userService.addUserService();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>新建简单测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testController</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">UserController</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserController</span>();<br>    controller.addUser();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springDay02/%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95%E8%BE%93%E5%87%BA.png"></p><h4 id="配置bean，完成自动装配"><a href="#配置bean，完成自动装配" class="headerlink" title="配置bean，完成自动装配"></a>配置bean，完成自动装配</h4><p><img src="/../images/springDay02/auto%E6%B3%A8%E5%85%A51.png"></p><p><strong>Controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.auto.controller;<br><br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.service.impl.UserServiceImpl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 16:31</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> UserService <span class="hljs-title function_">getUserService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;controller方法执行&quot;</span>);<br>        <span class="hljs-comment">// 调用service方法</span><br>        userService.addUserService();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring6.iocxml.auto.service.impl;<br><br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.dao.UserDao;<br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl;<br><span class="hljs-keyword">import</span> org.example.spring6.iocxml.auto.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Date: 2024-02-07 16:32</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">getUserDao</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userDao;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserService</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService()方法执行&quot;</span>);<br>        userDao.addUserDao();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置bean，<code>bean-auto.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.auto.controller.UserController&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.auto.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring6.iocxml.auto.dao.impl.UserDaoImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>autowire</code>属性是自动装填属性，属性值<code>byType</code>是根据类型自动装配，根据类型装配会自动匹配相应的类型，而根据名称匹配需要保证待匹配bean的名称与声明时相同。 </p><p>新建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAuto</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean-auto.xml&quot;</span>);<br>    <span class="hljs-type">UserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userController&quot;</span>, UserController.class);<br>    userController.addUser();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/springDay02/%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E7%BB%93%E6%9E%9C.png"></p><blockquote><p>  <code>byType</code>：根据类型匹配IoC容器中的某个兼容类型的bean，为属性自动赋值</p><p>  若在IoC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即默认值为null</p><p>  若在IoC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【study】Spring学习part01</title>
    <link href="/post/2c7b6666.html"/>
    <url>/post/2c7b6666.html</url>
    
    <content type="html"><![CDATA[<h1 id="【study】Spring学习part01"><a href="#【study】Spring学习part01" class="headerlink" title="【study】Spring学习part01"></a>【study】Spring学习part01</h1><ul><li>传统JavaWeb开发的困惑</li><li>IoC、DI和AOP思想提出</li><li>Spring框架诞生</li></ul><h2 id="传统JavaWeb开发的困惑以及解决方案"><a href="#传统JavaWeb开发的困惑以及解决方案" class="headerlink" title="传统JavaWeb开发的困惑以及解决方案"></a>传统JavaWeb开发的困惑以及解决方案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用户账户信息修改业务方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUserInfo</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 开启事务</span><br>        DaoUtils.openTransaction();<br>        <span class="hljs-comment">// 获得UserDao执行插入User数据到数据库操作</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>        userDao.updateUserInfo(user);<br>        <span class="hljs-comment">// 修改成功后, 向用户行为日志表中插入一条数据, 内容: 修改时间等信息</span><br>        <span class="hljs-type">UserLog</span> <span class="hljs-variable">userLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLogImpl</span>();<br>        UserLog.recodeUserUpdate(user);<br>        <span class="hljs-comment">// 提交事务</span><br>        DaoUtils.commit();<br>    &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>        <span class="hljs-comment">// 回滚事务</span><br>        DaoUtils.rollback();<br>        <span class="hljs-comment">// 向异常日志表中插入数据</span><br>        <span class="hljs-type">ExceptionLog</span> <span class="hljs-variable">exceptionLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionLogImpl</span>();<br>        exceptionLog.recodeException(<span class="hljs-built_in">this</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用户注册业务方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regist</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 开启事务</span><br>        DaoUtils.openTransaction();<br>        <span class="hljs-comment">// 获得UserDao执行插入User数据到数据库操作</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>        userDao.addUser(user);<br>        <span class="hljs-comment">// 修改成功后, 向用户行为日志表中插入一条数据, 内容: 时间, 用户, 注册行为</span><br>        <span class="hljs-type">UserLog</span> <span class="hljs-variable">userLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLogImpl</span>();<br>        UserLog.recodeUserRegist(user);<br>        <span class="hljs-comment">// 注册成功后, 向用户邮箱发送一封激活邮件</span><br>        CommonUtils.sendEmail(user);<br>        <span class="hljs-comment">// 提交事务</span><br>        DaoUtils.commit();<br>    &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>        <span class="hljs-comment">// 回滚事务</span><br>        DaoUtils.rollback();<br>        <span class="hljs-comment">// 向异常日志表中插入数据</span><br>        <span class="hljs-type">ExceptionLog</span> <span class="hljs-variable">exceptionLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionLogImpl</span>();<br>        exceptionLog.recodeException(<span class="hljs-built_in">this</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码是两个业务层的代码, 主业务均为第7~8行</p><p>现在存在一些问题: 以<code>updateUserInfo()</code>方法举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br><span class="hljs-type">UserLog</span> <span class="hljs-variable">userLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLogImpl</span>();<br><span class="hljs-type">ExceptionLog</span> <span class="hljs-variable">exceptionLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionLogImpl</span>();<br></code></pre></td></tr></table></figure><p>这里面耦合度很高:</p><ul><li><p>层与层之间紧密耦合在了一起, 接口与具体实现紧密耦合在一起</p><blockquote><p>解决思路: 程序代码中不要动手new对象，第三方根据要求为程序提供需要的Bean对象</p></blockquote></li><li><p>通用的事务功能耦合在业务代码中，通用的日志功能耦合在业务代码中</p><blockquote><p>程序代码中不要动手new对象，第三方根据要求为程序提供需要的Bean对象的代理对象</p></blockquote></li></ul><h3 id="IoC思想"><a href="#IoC思想" class="headerlink" title="IoC思想"></a>IoC思想</h3><p>Inversion of Control，控制反转，强调的是原来在程序中创建Bean的权利反转给第三方</p><h3 id="DI思想"><a href="#DI思想" class="headerlink" title="DI思想"></a>DI思想</h3><p>Dependency Injection，依赖注入，强调的Bean之间关系，这种关系第三方负责去设置</p><h3 id="AOP思想"><a href="#AOP思想" class="headerlink" title="AOP思想"></a>AOP思想</h3><p>Aspect Oriented Programming，面向切面编程，功能的横向抽取，主要的实现方式是Proxy</p><h2 id="基于XML管理Bean"><a href="#基于XML管理Bean" class="headerlink" title="基于XML管理Bean"></a>基于XML管理Bean</h2><p>IDE中新建Java项目，并且新建子模块<code>day01</code>, 父模块中的<code>pom.xml</code>引入一些依赖</p><p>&#x3D;&#x3D;jdk版本: 21.0.2&#x3D;&#x3D;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>建立一些简单的文件</p><p>在<code>day01.src.main.java.org.example</code>文件夹下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// service.UserService.Java</span><br><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// service.impl.UserSerivceImpl</span><br><span class="hljs-keyword">package</span> org.example.service.impl;<br><br><span class="hljs-keyword">import</span> org.example.service.UserService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add......&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>day01/src/main/resources/</code>文件夹内添加xml配置文件, 文件名没有要求，这里叫做<code>beans.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>bean</code>标签中，class指定要创建对象的类，id是唯一标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// test.TestUserService</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUserService</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 加载Spring配置文件, 对象创建</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><br>        <span class="hljs-comment">// 获取创建的对象</span><br>        <span class="hljs-comment">// context.getBean(&quot;userService&quot;)的返回值为Object类型, 需要强制类型转换</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        System.out.println(userService);<br><br>        <span class="hljs-comment">// 使用对象调用方法进行调试</span><br>        userService.add();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建的对象会执行其构造函数。</p><p>创建好的对象会被放入到<code>Map&lt;String, BeanDefinition&gt; beanDefinitionMap</code></p><p>key是唯一标识符，<code>beans.xml</code>中的id</p><p>value是类的定义（描述）信息</p><h2 id="Log4j2日志框架"><a href="#Log4j2日志框架" class="headerlink" title="Log4j2日志框架"></a>Log4j2日志框架</h2><h3 id="日志信息优先级（由低到高）"><a href="#日志信息优先级（由低到高）" class="headerlink" title="日志信息优先级（由低到高）"></a>日志信息优先级（由低到高）</h3><ul><li>TRACE：追踪，是最低的日志级别，相当于追踪程序的执行</li><li>DEBUG：调试一般在开发中，都将其设置为最低的日志级别</li><li>INFO：信息，输出重要的信息，使用较多</li><li>WARN：警告，输出警告的信息</li><li>ERROR：错误，输出错误信息</li><li>FATAL：严重错误</li></ul><h3 id="引入log4j2依赖"><a href="#引入log4j2依赖" class="headerlink" title="引入log4j2依赖"></a>引入log4j2依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.20.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.20.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置log4j2，在<code>day01.src.main.resources</code>下新建<code>log4j2.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--日志信息配置--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;spring6log&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFile&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;log&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输入日志信息到控制台--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;spring6log&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--控制日志输出的格式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--文件会打印输出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试调用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;/Users/promise/Promise Code/Java/FinalWork/SpringStudy/day01/test.log&quot;</span> <span class="hljs-attr">append</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        这个会打印所有的信息</span><br><span class="hljs-comment">        每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面进行压缩，作为存档</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFile&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;/Users/promise/Promise Code/Java/FinalWork/SpringStudy/day01/app.log&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50MB&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--DefaultRolloverStrategy 属性不设置，则默认为最多同一文件夹下7个文件，这里设置了20--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用logger"><a href="#使用logger" class="headerlink" title="使用logger"></a>使用logger</h3><p>在<code>org/example/test/TestUserService.java</code>文件，自定义logger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.test;<br><br><br><span class="hljs-keyword">import</span> org.example.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUserService</span> &#123;<br>    <span class="hljs-comment">// 创建Logger对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(TestUserService.class);<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 加载Spring配置文件, 对象创建</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><br>        <span class="hljs-comment">// 获取创建的对象</span><br>        <span class="hljs-comment">// context.getBean(&quot;userService&quot;)的返回值为Object类型, 需要强制类型转换</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        System.out.println(userService);<br><br>        <span class="hljs-comment">// 使用对象调用方法进行调试</span><br>        userService.add();<br><br>        <span class="hljs-comment">//手动写日志</span><br>        logger.info(<span class="hljs-string">&quot;执行调用成功**************&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../images/springDay01/logger%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%87%BA@2x.png" alt="自定义日志输出"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Study】Go语言动手写Web框架-Gee第一天</title>
    <link href="/post/9ac00b9a.html"/>
    <url>/post/9ac00b9a.html</url>
    
    <content type="html"><![CDATA[<h1 id="【Study】Go语言动手写Web框架-Gee第一天"><a href="#【Study】Go语言动手写Web框架-Gee第一天" class="headerlink" title="【Study】Go语言动手写Web框架-Gee第一天"></a>【Study】Go语言动手写Web框架-Gee第一天</h1><p>项目来源: <a href="https://github.com/geektutu/7days-golang">7天用Go动手写&#x2F;从零实现系列</a></p><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="1-net-http的简易demo"><a href="#1-net-http的简易demo" class="headerlink" title="1. net&#x2F;http的简易demo"></a>1. net&#x2F;http的简易demo</h3><h4 id="代码和一些说明"><a href="#代码和一些说明" class="headerlink" title="代码和一些说明"></a>代码和一些说明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, indexHandler)<br>http.HandleFunc(<span class="hljs-string">&quot;/hello&quot;</span>, helloHandler)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;:9999&quot;</span>, <span class="hljs-literal">nil</span>))<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">indexHandler</span><span class="hljs-params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;URL.Path = %q\n&quot;</span>, req.URL.Path)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">helloHandler</span><span class="hljs-params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> req.Header &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Header[%q] = %q\n&quot;</span>, k, v)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用Go语言内置的<code>net/http</code>库, 简单写个demo</p><blockquote><p>第10、11行：设置两个路由，分别是<code>/</code>和<code>/hello</code>，并且分别绑定了两个函数（第16、20行）<code>indexHandler</code>和<code>helloHandler</code></p><p>处理<code>indexHandler</code>，返回的是URL；处理<code>helloHandler</code>，返回的是请求头内的信息</p><p>第12行：设置端口为9999，表示在9999端口进行监听。第二个参数为处理所有http请求实例，<code>nil</code>代表使用标准库中的实例处理。</p><p><code>http.ListenAndServe</code>底层源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ListenAndServe listens on the TCP network address addr and then calls</span><br><span class="hljs-comment">// Serve with handler to handle requests on incoming connections.</span><br><span class="hljs-comment">// Accepted connections are configured to enable TCP keep-alives.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// The handler is typically nil, in which case the DefaultServeMux is used.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// ListenAndServe always returns a non-nil error.</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ListenAndServe</span><span class="hljs-params">(addr <span class="hljs-type">string</span>, handler Handler)</span></span> <span class="hljs-type">error</span> &#123;<br>server := &amp;Server&#123;Addr: addr, Handler: handler&#125;<br><span class="hljs-keyword">return</span> server.ListenAndServe()<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Handler</code>底层源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// A Handler responds to an HTTP request.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// ServeHTTP should write reply headers and data to the ResponseWriter</span><br><span class="hljs-comment">// and then return. Returning signals that the request is finished; it</span><br><span class="hljs-comment">// is not valid to use the ResponseWriter or read from the</span><br><span class="hljs-comment">// Request.Body after or concurrently with the completion of the</span><br><span class="hljs-comment">// ServeHTTP call.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Depending on the HTTP client software, HTTP protocol version, and</span><br><span class="hljs-comment">// any intermediaries between the client and the Go server, it may not</span><br><span class="hljs-comment">// be possible to read from the Request.Body after writing to the</span><br><span class="hljs-comment">// ResponseWriter. Cautious handlers should read the Request.Body</span><br><span class="hljs-comment">// first, and then reply.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Except for reading the body, handlers should not modify the</span><br><span class="hljs-comment">// provided Request.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// If ServeHTTP panics, the server (the caller of ServeHTTP) assumes</span><br><span class="hljs-comment">// that the effect of the panic was isolated to the active request.</span><br><span class="hljs-comment">// It recovers the panic, logs a stack trace to the server error log,</span><br><span class="hljs-comment">// and either closes the network connection or sends an HTTP/2</span><br><span class="hljs-comment">// RST_STREAM, depending on the HTTP protocol. To abort a handler so</span><br><span class="hljs-comment">// the client sees an interrupted response but the server doesn&#x27;t log</span><br><span class="hljs-comment">// an error, panic with the value ErrAbortHandler.</span><br><span class="hljs-keyword">type</span> Handler <span class="hljs-keyword">interface</span> &#123;<br>    ServeHTTP(ResponseWriter, *Request)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>http.ListenAndServe()</code>的第二个参数类型可以看到是一个接口，需要实现<code>ServeHTTP</code>方法，也就是说所有HTTP请求都交给它来处理（第二节实现）</p><p><code>log.Fatal()</code>: 进入源码我们可以看到这样的注释<code>Fatal is equivalent to Print() followed by a call to os.Exit(1).</code></p><p>可以得知，当程序报错之后打印日志并会立即退出，defer函数也不会执行，而不同于<code>panic()</code></p><p><code>panic()</code>: </p><ol><li>函数立刻停止执行 (注意是函数本身，不是应用程序停止)</li><li>defer函数被执行</li><li>返回给调用者(caller)</li><li>调用者函数假装也收到了一个panic函数，从而<br> 4.1 立即停止执行当前函数<br> 4.2 它defer函数被执行<br> 4.3 返回给它的调用者(caller)</li><li>…(递归重复上述步骤，直到最上层函数)<br> 应用程序停止。</li></ol></blockquote><h4 id="一些运行结果"><a href="#一些运行结果" class="headerlink" title="一些运行结果"></a>一些运行结果</h4><img src="..\images\Gee1\url_path.png" style="zoom:50%;" /><img src="..\images\Gee1\helloHandler.png" style="zoom:50%;" /><p>当然也可以使用curl工具</p><img src="..\images\Gee1\curl.png" style="zoom:50%;" /><h3 id="2-实现http-Handler接口"><a href="#2-实现http-Handler接口" class="headerlink" title="2. 实现http.Handler接口"></a>2. 实现http.Handler接口</h3><p>需要构造一个对象，并且实现<code>ServeHTTP</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Engine <span class="hljs-keyword">struct</span> &#123;&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;<br><span class="hljs-keyword">switch</span> req.URL.Path &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>fmt.Fprintf(w, <span class="hljs-string">&quot;URL.Path = %q\n&quot;</span>, req.URL.Path)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/hello&quot;</span>:<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> req.Header &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;header[%q] = %q\n&quot;</span>, k, v)<br>&#125;<br><span class="hljs-keyword">default</span>:<br>fmt.Fprintf(w, <span class="hljs-string">&quot;404 NOT FOUND: %s\n&quot;</span>, req.URL)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    engine := <span class="hljs-built_in">new</span>(Engine)<br>    log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;:9999&quot;</span>, engine))<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>  定义<code>Engine</code>对象，并且实现其中的函数<code>ServeHTTP(http.ResponseWriter, *http.Request)</code>，对URL处理只有<code>/</code>个<code>/hello</code>，处理的逻辑同上。函数中的两个参数分别为：针对第二个参数请求的响应，请求的信息。</p></blockquote><h3 id="3-重新组织代码结构，实现核心功能，准备被调用"><a href="#3-重新组织代码结构，实现核心功能，准备被调用" class="headerlink" title="3. 重新组织代码结构，实现核心功能，准备被调用"></a>3. 重新组织代码结构，实现核心功能，准备被调用</h3><p>使用<code>New()</code>创建 gee 的实例，使用 <code>GET()</code>方法添加路由，最后使用<code>Run()</code>启动Web服务。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">gee/<br>  |--gee.<span class="hljs-built_in">go</span><br>  |--<span class="hljs-built_in">go</span>.<span class="hljs-built_in">mod</span><br>main.<span class="hljs-built_in">go</span><br><span class="hljs-built_in">go</span>.<span class="hljs-built_in">mod</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// go.mod</span><br>module example<br><br><span class="hljs-keyword">go</span> <span class="hljs-number">1.21</span><br><br>require (<br>gee v0<span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>)<br><br>replace (<br>gee =&gt; ./gee<br>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// gee.go</span><br><span class="hljs-keyword">package</span> gee<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> HandlerFunc <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(http.ResponseWriter, *http.Request)</span></span><br><br><span class="hljs-keyword">type</span> Engine <span class="hljs-keyword">struct</span> &#123;<br>router <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]HandlerFunc<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">()</span></span> *Engine &#123;<br><span class="hljs-keyword">return</span> &amp;Engine&#123;router: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]HandlerFunc)&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> addRoute(method <span class="hljs-type">string</span>, pattern <span class="hljs-type">string</span>, handler HandlerFunc) &#123;<br>key := method + <span class="hljs-string">&quot;-&quot;</span> + pattern<br>engine.router[key] = handler<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> GET(pattern <span class="hljs-type">string</span>, handler HandlerFunc) &#123;<br>engine.addRoute(<span class="hljs-string">&quot;GET&quot;</span>, pattern, handler)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> POST(pattern <span class="hljs-type">string</span>, handler HandlerFunc) &#123;<br>engine.addRoute(<span class="hljs-string">&quot;POST&quot;</span>, pattern, handler)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> Run(addr <span class="hljs-type">string</span>) (err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> http.ListenAndServe(addr, engine)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;<br>key := req.Method + <span class="hljs-string">&quot;-&quot;</span> + req.URL.Path<br><span class="hljs-keyword">if</span> handler, ok := engine.router[key]; ok &#123;<br>handler(w, req)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>_, err := fmt.Fprintf(w, <span class="hljs-string">&quot;404 NOT FOUND: %s\n&quot;</span>, req.URL)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;gee&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gee.New()<br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;<br>_, err := fmt.Fprintf(writer, <span class="hljs-string">&quot;URL.Path = %q\n&quot;</span>, request.URL.Path)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;)<br><br>r.GET(<span class="hljs-string">&quot;/hello&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> request.Header &#123;<br>_, err := fmt.Fprintf(writer, <span class="hljs-string">&quot;Header[%q] = %q\n&quot;</span>, k, v)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;)<br><br>err := r.Run(<span class="hljs-string">&quot;:9999&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="代码和一些说明-1"><a href="#代码和一些说明-1" class="headerlink" title="代码和一些说明"></a>代码和一些说明</h4><ol><li><p>执行<code>main()</code>函数，首先进行实例化了<code>gee</code>，<code>main.go</code>中的12行开始执行，调用<code>GET()</code>方法时，会到<code>gee.go</code>中<code>addRoute()</code>添加路由和映射</p><blockquote><p>  例如：r.GET(“&#x2F;“, handler)，则会在映射表中添加{“GET-&#x2F;“: handler}</p></blockquote></li><li><p><code>main.go</code>中，两个路由<code>/</code>和<code>/hello</code>添加完毕开始执行<code>r.Run()</code>，运行服务。</p></li><li><p><code>Run()</code>中的<code>ListenAndServe(addr, handler)</code>函数，又会去执行<code>handler</code>中的接口，也就是<code>ServeHTTP()</code>，由于我们在<code>gee.go</code>文件中已经实现了该方法，会进行调用。</p></li><li><p><code>gee.go</code>文件中，实现了实例化的过程<code>New()</code>函数</p></li></ol><h4 id="一些运行结果-1"><a href="#一些运行结果-1" class="headerlink" title="一些运行结果"></a>一些运行结果</h4><img src="../images/Gee1/curl2.png" style="zoom:50%;" />]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果</title>
    <link href="/post/af9e53d4.html"/>
    <url>/post/af9e53d4.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第三十三天-1005-K次取反后最大化的数组和、134-加油站、135-分发糖果"><a href="#代码随想录算法训练营第三十三天-1005-K次取反后最大化的数组和、134-加油站、135-分发糖果" class="headerlink" title="代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果"></a>代码随想录算法训练营第三十三天  1005.K次取反后最大化的数组和、134.加油站、135.分发糖果</h1><h2 id="1005-K次取反后最大化的数组和"><a href="#1005-K次取反后最大化的数组和" class="headerlink" title="1005.K次取反后最大化的数组和"></a>1005.K次取反后最大化的数组和</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/1005.K%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV138411G7LY">贪心算法，这不就是常识？还能叫贪心？LeetCode：1005.K次取反后最大化的数组和</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>对数组排序，统计负数个数<code>count</code>，遍历时再记录绝对值最小的数。</li><li>如果<code>count &gt;= k</code>，那么前k个数全都取反</li><li>如果<code>count &lt; k</code>，说明将负数全都取反后，还有额外的操作次数，判断该次数<code>k - count</code>是奇数还是偶数，如果是偶数不用操作，如果是奇数，翻转绝对值最小的数</li></ol><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>贪尽可能多的正数</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">largestSumAfterKNegations</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 负数个数</span><br>        <span class="hljs-type">int</span> minIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &lt; <span class="hljs-number">0</span>) &#123;<br>                count++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(nums[i]) &lt; <span class="hljs-built_in">abs</span>(nums[minIndex])) &#123;<br>                minIndex = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// count &gt;= k 前k个负数全都翻</span><br>        <span class="hljs-keyword">if</span> (count &gt;= k) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>                nums[i] = -nums[i];<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// count &lt; k</span><br>            <span class="hljs-comment">//   1. 所有负数都翻转</span><br>            <span class="hljs-comment">//   2.1 if (k - count) % 2 == 0 输出</span><br>            <span class="hljs-comment">//   2.2 else 翻转绝对值最小的数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i) &#123;<br>                nums[i] = -nums[i];<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((k - count) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>                nums[minIndex] = -nums[minIndex];<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i: nums) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="134-加油站"><a href="#134-加油站" class="headerlink" title="134. 加油站"></a>134. 加油站</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/gas-station/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0134.%E5%8A%A0%E6%B2%B9%E7%AB%99.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1jA411r7WX">贪心算法，得这么加油才能跑完全程！LeetCode ：134.加油站</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>将环路展开成直线的路，即将<code>gas</code>数组向后拼接一个自己，<code>cost</code>向后拼接一个自己，但是去掉一位。</li><li>外层遍历<code>gas</code>，范围从0到<code>gas.size()/2</code>，索引为<code>i</code>。内层遍历<code>cost</code>，范围从<code>i</code>到<code>i+gas.sise()/2</code></li><li>定义当前的油量<code>cur</code>，如果<code>cur + gas[j] &gt;= cost[j]</code>，那么下一次的剩余油量则为<code>cur += gas[j] - cost[j]</code>。否则从<code>i</code>开始的路不能走一圈，继续向下遍历</li></ol><h4 id="贪心算法-1"><a href="#贪心算法-1" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>从一点出发贪最远的路</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">canCompleteCircuit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;gas, vector&lt;<span class="hljs-type">int</span>&gt; &amp;cost)</span> </span>&#123;<br>        gas.<span class="hljs-built_in">insert</span>(gas.<span class="hljs-built_in">end</span>(), gas.<span class="hljs-built_in">begin</span>(), gas.<span class="hljs-built_in">end</span>());<br>        cost.<span class="hljs-built_in">insert</span>(cost.<span class="hljs-built_in">end</span>(), cost.<span class="hljs-built_in">begin</span>(), cost.<span class="hljs-built_in">end</span>() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; gas.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>; ++i) &#123;<br>            <span class="hljs-type">int</span> cur = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; i + gas.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (cur + gas[j] &gt;= cost[j]) &#123;<br>                    cur += gas[j] - cost[j];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    i = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="135-分发糖果"><a href="#135-分发糖果" class="headerlink" title="135. 分发糖果"></a>135. 分发糖果</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/candy/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0135.%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1ev4y1r7wN">贪心算法，两者兼顾很容易顾此失彼！LeetCode：135.分发糖果</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这道题没有想明白，看了题解后懂了。前后两次遍历评分数组。每个人糖果初始化为1。</p><p>前向遍历时如果后一项大于前一项，那么后一项的糖果值为前一项加1。</p><p>反向遍历时，如果前一项大于后一项时，并且前一项糖果也不超过后一项时，那么前一项糖果等于后一项加1。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">candy</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;ratings)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(ratings.size(), <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; ratings.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (ratings[i] &gt; ratings[i - <span class="hljs-number">1</span>]) &#123;<br>                result[i] = result[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = ratings.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i) &#123;<br>            <span class="hljs-keyword">if</span> (ratings[i - <span class="hljs-number">1</span>] &gt; ratings[i] &amp;&amp; result[i - <span class="hljs-number">1</span>] &lt;= result[i]) &#123;<br>                result[i - <span class="hljs-number">1</span>] = result[i] + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i: result) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II</title>
    <link href="/post/4486d5e0.html"/>
    <url>/post/4486d5e0.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第三十二天-122-买卖股票的最佳时机II、55-跳跃游戏、45-跳跃游戏II"><a href="#代码随想录算法训练营第三十二天-122-买卖股票的最佳时机II、55-跳跃游戏、45-跳跃游戏II" class="headerlink" title="代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II"></a>代码随想录算法训练营第三十二天  122. 买卖股票的最佳时机II、55.跳跃游戏、45.跳跃游戏II</h1><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1ev4y1C7na">贪心算法也能解决股票问题！LeetCode：122.买卖股票最佳时机 II</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题已经给出了一定的提示</p><blockquote><p>  输入：prices &#x3D; [7,1,5,3,6,4]<br>输出：7<br>解释：</p></blockquote><p>   在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5 - 1 &#x3D; 4 。</p><p>   随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6 - 3 &#x3D; 3 。  </p><p>   总利润为 4 + 3 &#x3D; 7 。</p><p>利润是可以叠加计算的。</p><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>假设每一天都买股票，第二天都卖股票，计算出第二天的利润，将所有正利润加和即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;prices)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">profit</span><span class="hljs-params">(prices.size(), <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; prices.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (prices[i] - prices[i - <span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>                result += prices[i] - prices[i - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a>55. 跳跃游戏</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/jump-game/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0055.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1VG4y1X7kB">贪心算法，怎么跳跃不重要，关键在覆盖范围 | LeetCode：55.跳跃游戏</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>定义距离<code>dis</code>，每一格都走最远的路，和<code>dis</code>做比较，如果更远更新<code>dis</code>，最后比较<code>dis</code>能否到<code>nums.size()-1</code></p><h4 id="贪心算法-1"><a href="#贪心算法-1" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>每一格都贪最远的路</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canJump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> dis = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= dis; ++i) &#123;<br>            dis = <span class="hljs-built_in">max</span>(nums[i] + i, dis);<br>            <span class="hljs-keyword">if</span> (dis &gt;= nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="45-跳跃游戏II"><a href="#45-跳跃游戏II" class="headerlink" title="45. 跳跃游戏II"></a>45. 跳跃游戏II</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/jump-game-ii/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0045.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1Y24y1r7XZ">贪心算法，最少跳几步还得看覆盖范围 | LeetCode： 45.跳跃游戏 II</a></p><p>  状态：投降</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这道题最终没有做出来。看了题解。</p><p>先尽量远走，如果达不到则向下走一步再向远走。需要两个变量分别记录当前最远距离位置<code>curDis</code>和下一次的最远距离位置<code>nextDis</code>。</p><p>如果<code>curDis</code>为当前的位置，则更新成<code>nextDis</code></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(nums.size(), <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> curDis = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> nextDis = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            nextDis = <span class="hljs-built_in">max</span>(i + nums[i], nextDis);<br>            <span class="hljs-keyword">if</span> (i == curDis) &#123;<br>                curDis = nextDis;<br>                count++;<br>                <span class="hljs-keyword">if</span> (nextDis &gt;= nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><font color="red">这道题值得反复思考，暂时想通了，可能睡一觉起来又忘了</font></p>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和</title>
    <link href="/post/5aa98f1b.html"/>
    <url>/post/5aa98f1b.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第三十一天-455-分发饼干、376-摆动序列、53-最大子数组和"><a href="#代码随想录算法训练营第三十一天-455-分发饼干、376-摆动序列、53-最大子数组和" class="headerlink" title="代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和"></a>代码随想录算法训练营第三十一天  455.分发饼干、376.摆动序列、53.最大子数组和</h1><h2 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a>455. 分发饼干</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/assign-cookies/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0455.%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1MM411b7cq">贪心算法，你想先喂哪个小孩？| LeetCode：455.分发饼干</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先将两个数组进行排序。先遍历胃口<code>g</code>，再遍历<code>s</code>，如果<code>g[i] &lt;= s[j]</code>时，那么可以将<code>s[j]</code>喂给<code>g[i]</code>，记录此时<code>s</code>的位置放到<code>index</code>，下次<code>s</code>从<code>index</code>开始循环。</p><h4 id="贪心思路"><a href="#贪心思路" class="headerlink" title="贪心思路"></a>贪心思路</h4><p>充分利用饼干喂饱当前的孩子。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findContentChildren</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;g, vector&lt;<span class="hljs-type">int</span>&gt; &amp;s)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(g.<span class="hljs-built_in">begin</span>(), g.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; g.<span class="hljs-built_in">size</span>() &amp;&amp; index &lt; s.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = index; j &lt; s.<span class="hljs-built_in">size</span>(); ++j) &#123;<br>                <span class="hljs-keyword">if</span> (s[j] &gt;= g[i]) &#123;<br>                    index = j + <span class="hljs-number">1</span>;<br>                    count++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>看了题解之后发现从后向前遍历写起来更简单一些，而且只需要一层循环即可。</p><h2 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376.摆动序列"></a>376.摆动序列</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/wiggle-subsequence/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV17M411b7NS">贪心算法，寻找摆动有细节！| LeetCode：376.摆动序列</a></p><p>  状态：无</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><font color="red">错误：这道题一直想的只是当前位置和前后数字进行比较，如果高于或低于旁边的两个数字判定为摆动。但是并没有思考到上一次的振幅改变不在旁边的情况，所以不能只和身边的两个数进行比较</font></p><p>定义两个差：当前差<code>cur</code>和上次的差<code>pre</code>。上次差意味着出现了连续递增或递减，比较两次差是否摆动</p><h4 id="贪心思路-1"><a href="#贪心思路-1" class="headerlink" title="贪心思路"></a>贪心思路</h4><p>递增或递减时贪最远的情况</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">wiggleMaxLength</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">size</span>();<br>        &#125;<br>        <span class="hljs-type">int</span> cur = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> pre = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; ++i) &#123;<br>            cur = nums[i + <span class="hljs-number">1</span>] - nums[i];<br>            <span class="hljs-keyword">if</span> ((pre &lt;= <span class="hljs-number">0</span> &amp;&amp; cur &gt; <span class="hljs-number">0</span>) || (pre &gt;= <span class="hljs-number">0</span> &amp;&amp; cur &lt; <span class="hljs-number">0</span>)) &#123;<br>                count++;<br>                pre = cur;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53.最大子数组和"></a>53.最大子数组和</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/maximum-subarray/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0053.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1aY4y1Z7ya">贪心算法的巧妙需要慢慢体会！LeetCode：53. 最大子序和</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>贪心算法没太想懂，使用动态规划还是很简单的。</p><h4 id="动态规划："><a href="#动态规划：" class="headerlink" title="动态规划："></a>动态规划：</h4><p>定义<code>dp</code>数组，<code>dp[i]</code>代表前<code>i</code>个元素最大和，如果前n项和小于0，重新开始，否则累加。<code>dp[i] = max(dp[i-1] + nums[i], nums[i])</code></p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(nums.size(), <span class="hljs-number">0</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> maxSum = dp[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>] + nums[i], nums[i]);<br>            <span class="hljs-keyword">if</span> (dp[i] &gt; maxSum) &#123;<br>                maxSum = dp[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxSum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>看了卡哥的讲解：如果连续和小于0，那么重新开始（因为负数相加会越来越小）。否则继续累加。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> max = INT32_MIN;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            sum += nums[i];<br>            <span class="hljs-keyword">if</span> (sum &gt; max) &#123;<br>                max = sum;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span>) &#123;<br>                sum = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【debug】记一次失败的爬虫经历</title>
    <link href="/post/94786f20.html"/>
    <url>/post/94786f20.html</url>
    
    <content type="html"><![CDATA[<h1 id="【debug】记一次失败的爬虫经历"><a href="#【debug】记一次失败的爬虫经历" class="headerlink" title="【debug】记一次失败的爬虫经历"></a>【debug】记一次失败的爬虫经历</h1><p>今天我的室友需要在一个网站上批量下载一些数据，但是他并不会代码，我尝试帮他处理一下</p><p>URL:<code>http://dc2.cistrome.org/#/</code></p><img src="../images/【debug】记一次失败的爬虫经历/网页截图.png" alt="网页截图" style="zoom:67%;" /><p>网站上需要点击这些选项，<code>Factors</code>需要每个点击，可能有些因素并没有数据。</p><img src="../images/【debug】记一次失败的爬虫经历/网页截图2.png" alt="网页截图2" style="zoom:67%;" /><p>先选中第一行，然后才会出现下方的<code>Inspector</code>部分，再点击<code>Putative Targets</code>进入下载页面</p><img src="../images/【debug】记一次失败的爬虫经历/下载页面.png" alt="下载页面" style="zoom:80%;" /><p>下载页面输入验证码点击下载即可。</p><h2 id="1-分析、抓包"><a href="#1-分析、抓包" class="headerlink" title="1. 分析、抓包"></a>1. 分析、抓包</h2><p>抓包使用了Fiddler这个软件。设置好URL进行筛选</p><img src="../images/【debug】记一次失败的爬虫经历/Fildder1.png" alt="Fildder1" style="zoom:80%;" /><p>先正常的操作一遍，让Fiddler记录这个过程。</p><img src="../images/【debug】记一次失败的爬虫经历/正常操作抓包.png" alt="正常操作抓包" style="zoom:67%;" /><p>依次查看每一行：</p><ul><li>19~21：选择第一张图的一些条件，一共要选三次，出现了三条数据，分析其中参数很简单。需要查找factors的列表</li><li>22：加载第二张图的Inspector部分，需要查找id</li><li>23：在第二张图最下面还有一部分，我没有截出来，这里是获取到一张图片</li><li>24：向URL请求，此处的URL里面都是冒号，返回的是301，重定向将冒号替换为<code>%3A</code>的URL编码</li><li>26：重定向，返回的是验证码的那个页面</li><li>27：请求验证码的图片</li><li>28：提交验证码</li><li>29：下载链接（返回txt文件）</li></ul><h2 id="2-获取每个部分的关键数据"><a href="#2-获取每个部分的关键数据" class="headerlink" title="2. 获取每个部分的关键数据"></a>2. 获取每个部分的关键数据</h2><h3 id="导入相关的包"><a href="#导入相关的包" class="headerlink" title="导入相关的包"></a>导入相关的包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br></code></pre></td></tr></table></figure><h3 id="获取每个factors"><a href="#获取每个factors" class="headerlink" title="获取每个factors"></a>获取每个factors</h3><img src="../images/【debug】记一次失败的爬虫经历/获取factors.png" alt="image-20231025010850092" style="zoom:50%;" /><p>根据上面分析，使用第20行的URL即可得到所有的factors，然后替换其中的<code>factors=all</code>，将<code>all</code>替换为每一个<code>factors</code>即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">url1 = <span class="hljs-string">&quot;http://dc2.cistrome.org/api/main_filter_ng?allqc=false&amp;cellinfos=ti_Breast&amp;completed=false&amp;curated=false&amp;factors=all&amp;keyword=&amp;page=1&amp;peakqc=false&amp;run=false&amp;species=Homo+sapiens&quot;</span>  <span class="hljs-comment"># 21行URL</span><br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;</span>,<br>    <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate&quot;</span>,<br>    <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;http://dc2.cistrome.org&quot;</span>,<br>    <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-Hans-CN,zh-Hans;q=0.8,en-US;q=0.5,en;q=0.3&quot;</span>,<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;dc2.cistrome.org&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Tablet PC 2.0; wbx 1.0.0; wbxapp 1.0.0; Zoom 3.6.0)&quot;</span>,<br>&#125;<br><br>session = requests.session()<br><br>response = session.get(url, headers=headers)<br>json_list = response.json()[<span class="hljs-string">&quot;factors&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="3-获取inspector中的id值"><a href="#3-获取inspector中的id值" class="headerlink" title="3. 获取inspector中的id值"></a>3. 获取inspector中的id值</h2><p>为了方便书写，就以第一个factors作为演示</p><p>继续刚刚请求，将新的<code>factors</code>替换，查看response的结果</p><img src="../images/【debug】记一次失败的爬虫经历/获取id.png" alt="获取id" style="zoom:67%;" /><p>有可能Inspector中会出现多栏，经过查阅后去第1个id就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">url2 = <span class="hljs-string">f&quot;http://dc2.cistrome.org/api/main_filter_ng?allqc=false&amp;cellinfos=ti_Breast&amp;completed=false&amp;curated=false&amp;factors=AHO1&amp;keyword=&amp;page=1&amp;peakqc=false&amp;run=false&amp;species=Homo+sapiens&quot;</span><br>response = session.get(url2, headers=headers)<br><span class="hljs-built_in">id</span> = response.json()[<span class="hljs-string">&quot;datasets&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;id&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="4-跳转至验证码页面"><a href="#4-跳转至验证码页面" class="headerlink" title="4. 跳转至验证码页面"></a>4. 跳转至验证码页面</h2><p>根据Fiddler中的URL显示：<code>http://dc2.cistrome.org/api/downloads/eyJpZCI6IjQ4NjEwIn0%3A1qvKhR%3AxwR7aSlYncCHoao44VSfL3o22igp</code></p><p>需要查看最后面一串字符是什么或从哪里来。我们查看22行的请求</p><img src="../images/【debug】记一次失败的爬虫经历/正常操作抓包.png" alt="正常操作抓包" style="zoom:67%;" /><img src="../images/【debug】记一次失败的爬虫经历/哪个表达基因.png" alt="哪个表达基因" style="zoom:67%;" /><p>进入22行的请求发现就是<code>sign</code>这一项，并且将冒号替换为<code>%3A</code>即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">download_url = <span class="hljs-string">f&quot;http://dc2.cistrome.org/api/inspector?id=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&quot;</span><br>response_url = session.get(download_url, headers=headers)<br>sign = response_url.json()[<span class="hljs-string">&quot;sign&quot;</span>]<br>sign = sign.replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;%3A&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="5-输入验证码"><a href="#5-输入验证码" class="headerlink" title="5. 输入验证码"></a>5. 输入验证码</h2><p>这一步之前，发送了两个请求，一个是获取HTML，一个是获取验证码。分析27行的数据，能发现最后与刚刚的<code>sign</code>值完全不同，查看27行最后一串是什么。</p><p>分析获取到的HTML，能看到如下内容</p><p><img src="/../images/%E3%80%90debug%E3%80%91%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86/%E5%88%86%E6%9E%90HTML.png" alt="分析HTML"></p><p>红色是为27行的URL最后的部分，绿色则是要提交的表单，将验证码下载到本地手动数据数据再提交上去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">soup = BeautifulSoup(response.content, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>img_tag = soup.find(<span class="hljs-string">&quot;img&quot;</span>)[<span class="hljs-string">&quot;src&quot;</span>]<br>img_id = img_tag.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">2</span>]<br>img_url = <span class="hljs-string">&quot;http://dc2.cistrome.org&quot;</span> + img_tag<br>image = session.get(img_url, headers=headers)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(image.content)<br>    captcha = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入test.png的验证码&quot;</span>))<br>    data = &#123;<br>        <span class="hljs-string">&quot;csrfmiddlewaretoken&quot;</span>: session.cookies[<span class="hljs-string">&quot;csrftoken&quot;</span>],<br>        <span class="hljs-string">&quot;captcha_0&quot;</span>: img_id,<br>        <span class="hljs-string">&quot;captcha_1&quot;</span>: captcha<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="6-问题出现"><a href="#6-问题出现" class="headerlink" title="6. 问题出现"></a>6. 问题出现</h2><p>分析28行请求</p><img src="../images/【debug】记一次失败的爬虫经历/正常操作抓包.png" alt="正常操作抓包" style="zoom:67%;" /><p><img src="/../images/%E3%80%90debug%E3%80%91%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86/POST.png" alt="POST"></p><p>看起来只需要POST以下三个数据就好，之后再<code>get</code>29行操作，但是始终拿不到正确的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">response = session.post(url=download_url, headers=headers, data=data)<br>download = session.get(<span class="hljs-string">f&quot;http://dc2.cistrome.org/api/files/<span class="hljs-subst">&#123;sign&#125;</span>/&quot;</span>, headers=headers)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(download.text)<br></code></pre></td></tr></table></figure><p><img src="/../images/%E3%80%90debug%E3%80%91%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86/Wrong.png" alt="Wrong"></p><p>无论如何都是错误的参数，看了好多次都没有找到哪里请求有问题。</p><p>尝试改了<code>session.post(data)</code>参数，改成<code>json</code>也不对。改了<code>data</code>中的<code>captcha_1</code>的类型也不对。传输字符串的形式也不对<code>session.post(data=f&quot;csrfmiddlewaretoken=&#123;session.cookies[&#39;csrftoken&#39;]&#125;&amp;captcha_0=&#123;img_id&#125;&amp;captcha_1=&#123;captcha&#125;&quot;)</code>。</p><p>但是我在网页先进行输入验证码操作，拿到可以下载的“权限”之后，再去fiddler中模拟29行get请求却可以正常下载。想了好久也没找到什么好的办法。</p><h2 id="7-验证码其他的失败的想法"><a href="#7-验证码其他的失败的想法" class="headerlink" title="7. 验证码其他的失败的想法"></a>7. 验证码其他的失败的想法</h2><ol><li>最开始认为验证码如果人为输入会比较慢，应该让AI去识别，识别到字符串之后使用python中的<code>eval()</code>语句获得到结果。后来测试两个发现识别的非常不准。因为运算符不是常规角度，有可能会被识别为字母。最后放弃了这个方法。</li><li><code>captcha_0</code>和<code>captcha_1</code>这两个参数一个是验证码的<code>id</code>，应该为后台数据库存储的名字，一个是计算结果。尝试了始终使用一组正确的不断的请求骗过服务器验证。还是因为卡在了上一步始终为参数错误，再过了一会就显示<code>Time Out!</code>。我觉得如果参数正确可以尝试一下这个方法。</li><li>尝试SQL注入，使用语句<code>&#39; or 1=1 --</code>还是失败。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Debug</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II</title>
    <link href="/post/70a8aaa7.html"/>
    <url>/post/70a8aaa7.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第二十八天-491-递增子序列、46-全排列、47-全排列II"><a href="#代码随想录算法训练营第二十八天-491-递增子序列、46-全排列、47-全排列II" class="headerlink" title="代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II"></a>代码随想录算法训练营第二十八天  491.递增子序列、46.全排列、47.全排列II</h1><h2 id="491-递增子序列"><a href="#491-递增子序列" class="headerlink" title="491.递增子序列"></a>491.递增子序列</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/non-decreasing-subsequences/">力扣题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0491.%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.html">代码随想录(https://programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1EG4y1h78v/">回溯算法精讲，树层去重与树枝去重 | LeetCode：491.递增子序列</a></p><p>状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先查找递增子序列，其次要去重。难点还是在于去重。</p><p>查找递增时候，每次需要判断当前的<code>nums[i]</code>是否大于<code>path[-1]</code>。</p><p>去重和之前的还不大一样，因为这里不可以进行排序。应该判断每层的情况</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201124200229824.png" alt="去重图"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (path.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>        &#125;<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; sets;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> ((!path.<span class="hljs-built_in">empty</span>() &amp;&amp; path.<span class="hljs-built_in">back</span>() &gt; nums[i]) || sets.<span class="hljs-built_in">find</span>(nums[i]) != sets.<span class="hljs-built_in">end</span>()) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            path.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            sets.<span class="hljs-built_in">insert</span>(nums[i]);<br>            <span class="hljs-built_in">backTracking</span>(nums, i + <span class="hljs-number">1</span>);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">findSubsequences</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums) &#123;<br>        <span class="hljs-built_in">backTracking</span>(nums, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a>46. 全排列</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/permutations/">力扣题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0046.%E5%85%A8%E6%8E%92%E5%88%97.html">代码随想录(https://programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV19v4y1S79W/">组合与排列的区别，回溯算法求解的时候，有何不同？| LeetCode：46.全排列</a></p><p>状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><h4 id="递归三部曲"><a href="#递归三部曲" class="headerlink" title="递归三部曲"></a>递归三部曲</h4><p>保存使用过的数，这里保存的实际上是该数的位置。用的二进制来节省空间。例如，使用了第0个数，括号里指的是该数为二进制，<code>used=1(2)</code>。使用了第0、2个数，那么则是<code>used=101(2)</code>，使用了第0、1、3、6个数，<code>used=1001011(2)</code>。即使用了第i个数，<code>used += 1 &lt;&lt; i</code>。判断第i个数是否使用过：<code>1 &gt;&gt; i &amp; used</code></p><ol><li>确立函数和返回值<ul><li><code>nums</code></li><li><code>used</code>，使用二进制保存</li></ul></li><li>递归终止条件：<code>path</code>长度等于 <code>nums</code>长度</li><li>单次递归：如果当前的数没被使用过，加入<code>path</code></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> used)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() == path.<span class="hljs-built_in">size</span>()) &#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (used &gt;&gt; i &amp; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            path.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            used += <span class="hljs-number">1</span> &lt;&lt; i;<br>            <span class="hljs-built_in">backTracking</span>(nums, used);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>            used -= <span class="hljs-number">1</span> &lt;&lt; i;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permute</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums) &#123;<br>        <span class="hljs-type">int</span> used = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">backTracking</span>(nums, used);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="47-全排列II"><a href="#47-全排列II" class="headerlink" title="47. 全排列II"></a>47. 全排列II</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/permutations-ii/">力扣题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0047.%E5%85%A8%E6%8E%92%E5%88%97II.html">代码随想录(https://programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1R84y1i7Tm/">回溯算法求解全排列，如何去重？| LeetCode：47.全排列 II</a></p><p>状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>力扣40题<a href="https://promisewang.github.io/post/36f15375.html#40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII">个人博客跳转</a> + 上一题。used还是使用数组表示。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, vector&lt;<span class="hljs-type">bool</span>&gt; used2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() == path.<span class="hljs-built_in">size</span>()) &#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br><br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i - <span class="hljs-number">1</span>] == nums[i] &amp;&amp; !used2[i - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!used2[i]) &#123;<br>                used2[i] = <span class="hljs-literal">true</span>;<br>                path.<span class="hljs-built_in">push_back</span>(nums[i]);<br>                <span class="hljs-built_in">backTracking</span>(nums, used2);<br>                path.<span class="hljs-built_in">pop_back</span>();<br>                used2[i] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permuteUnique</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums) &#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">used2</span><span class="hljs-params">(nums.size(), <span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-built_in">backTracking</span>(nums, used2);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II</title>
    <link href="/post/ff1e328.html"/>
    <url>/post/ff1e328.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第二十七天-93-复原IP地址、78-子集、90-子集II"><a href="#代码随想录算法训练营第二十七天-93-复原IP地址、78-子集、90-子集II" class="headerlink" title="代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II"></a>代码随想录算法训练营第二十七天  93.复原IP地址、78.子集、90.子集II</h1><h2 id="93-复原IP地址"><a href="#93-复原IP地址" class="headerlink" title="93.复原IP地址"></a>93.复原IP地址</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/restore-ip-addresses/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0093.%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1XP4y1U73i/">回溯算法如何分割字符串并判断是合法IP？| LeetCode：93.复原IP地址</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为IP地址有一定的局限性（在0~255范围内），这道题我采用了两种方法，一种直接暴力算法，三重循环。另一种使用回溯。题目中给定字符串<code>s</code>为潜在的IP地址，其长度在[1, 20]。那么他的合法长度在[4, 12]之间，可以先做一些判定。无论是<strong>暴力算法</strong>还是<strong>回溯算法</strong>，查找的均为字符串的分割处。</p><h4 id="1-暴力算法"><a href="#1-暴力算法" class="headerlink" title="1. 暴力算法"></a>1. 暴力算法</h4><p><font color="red">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font></p><p><font color="red">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font></p><p><font color="red">数学的范围都为<b>闭区间</b>，字符串的范围均为<b>左闭右开</b>！！！</font></p><ul><li>第一层范围[1, 3]，使用指针<code>i</code><ul><li>分割出字符串<code>s1 = s[0: i]</code>，判断是否有前导0，判断转换成数字<code>n1</code>后是否在[0, 255]之间</li></ul></li><li>第二层范围[<code>i</code>+1, 6]，使用指针<code>j</code><ul><li>分割出字符串<code>s2 = s[i: j]</code>，判断是否有前导0，判断长度是否大于3，判断转换成数字<code>n2</code>后是否在[0, 255]之间</li></ul></li><li>第三层范围[<code>j</code>+1, 9]，使用指针<code>k</code><ul><li>分割出字符串<code>s3 = s[j: k]</code>，判断是否有前导0，判断长度是否大于3，判断转换成数字<code>n3</code>后是否在[0, 255]之间</li><li>分割出字符串<code>s4 = s[k:]</code>，判断是否有前导0，判断长度是否大于3，判断转换成数字<code>n4</code>后是否在[0, 255]之间</li></ul></li></ul><p>均合法，则拼接IP地址<code>n1 + &quot;.&quot; + n2 + &quot;.&quot; + n3 + &quot;.&quot; + n4</code></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;string&gt; result;<br>    string path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> count)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getNum</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;0&#x27;</span> == <span class="hljs-number">0</span> &amp;&amp; s.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> || s.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> i : s) &#123;<br>            num *= <span class="hljs-number">10</span>;<br>            num += (i - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">restoreIpAddresses</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-type">int</span> n1, n2, n3, n4;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; ++i) &#123;<br>            n1 = <span class="hljs-built_in">getNum</span>(s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, i));<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt;= n1 &amp;&amp; n1 &lt;= <span class="hljs-number">255</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">6</span> || j &lt; s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; ++j) &#123;<br>                    <span class="hljs-keyword">if</span> (j - i &gt; <span class="hljs-number">3</span>) &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    n2 = <span class="hljs-built_in">getNum</span>(s.<span class="hljs-built_in">substr</span>(i, j - i));<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt;= n2 &amp;&amp; n2 &lt;= <span class="hljs-number">255</span>) &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j + <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">9</span> || k &lt; s.<span class="hljs-built_in">size</span>(); ++k) &#123;<br>                            <span class="hljs-keyword">if</span> (k - j &gt; <span class="hljs-number">3</span>) &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                            <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() - k &gt; <span class="hljs-number">3</span>) &#123;<br>                                <span class="hljs-keyword">continue</span>;<br>                            &#125;<br>                            n3 = <span class="hljs-built_in">getNum</span>(s.<span class="hljs-built_in">substr</span>(j, k - j));<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt;= n3 &amp;&amp; n3 &lt;= <span class="hljs-number">255</span>) &#123;<br>                                n4 = <span class="hljs-built_in">getNum</span>(s.<span class="hljs-built_in">substr</span>(k));<br>                                <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt;= n4 &amp;&amp; n4 &lt;= <span class="hljs-number">255</span>) &#123;<br>                                    result.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">to_string</span>(n1) + <span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-built_in">to_string</span>(n2) + <span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-built_in">to_string</span>(n3) + <span class="hljs-string">&quot;.&quot;</span> +<br>                                                     <span class="hljs-built_in">to_string</span>(n4));<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>这代码真是又臭又长啊。</strong></p><h4 id="2-回溯算法"><a href="#2-回溯算法" class="headerlink" title="2. 回溯算法"></a>2. 回溯算法</h4><h5 id="递归三部曲"><a href="#递归三部曲" class="headerlink" title="递归三部曲"></a>递归三部曲</h5><p><code>vector&lt;string&gt; result</code>存放最终结果</p><p><code>vector&lt;int&gt; path</code>存放待切割的位置</p><ol><li>确立函数和返回值：<ul><li>字符串<code>s</code></li><li>当前位置<code>index</code></li></ul></li><li>递归终止条件：<ul><li>当<code>path</code>长度为3，意味着可以切割四块，开始切割操作，切割后判断合法性，均合法加入<code>result</code>中</li><li>当<code>path</code>长度大于3，<code>return</code></li></ul></li><li>单次递归：<ul><li><code>path</code>添加切割位置</li><li>下一层递归，切割位置加一</li><li>反向操作</li></ul></li></ol><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;string&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (path.<span class="hljs-built_in">size</span>() == <span class="hljs-number">3</span>) &#123;<br>            string s1 = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, path[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">if</span> (s1.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            string s2 = s.<span class="hljs-built_in">substr</span>(path[<span class="hljs-number">0</span>], path[<span class="hljs-number">1</span>] - path[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">if</span> (s2.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            string s3 = s.<span class="hljs-built_in">substr</span>(path[<span class="hljs-number">1</span>], path[<span class="hljs-number">2</span>] - path[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span> (s3.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            string s4 = s.<span class="hljs-built_in">substr</span>(path[<span class="hljs-number">2</span>]);<br>            <span class="hljs-keyword">if</span> (s4.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> n1 = <span class="hljs-built_in">getNum</span>(s1);<br>            <span class="hljs-type">int</span> n2 = <span class="hljs-built_in">getNum</span>(s2);<br>            <span class="hljs-type">int</span> n3 = <span class="hljs-built_in">getNum</span>(s3);<br>            <span class="hljs-type">int</span> n4 = <span class="hljs-built_in">getNum</span>(s4);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt;= n1 &amp;&amp; n1 &lt;= <span class="hljs-number">255</span> &amp;&amp;<br>                <span class="hljs-number">0</span> &lt;= n2 &amp;&amp; n2 &lt;= <span class="hljs-number">255</span> &amp;&amp;<br>                <span class="hljs-number">0</span> &lt;= n3 &amp;&amp; n3 &lt;= <span class="hljs-number">255</span> &amp;&amp;<br>                <span class="hljs-number">0</span> &lt;= n4 &amp;&amp; n4 &lt;= <span class="hljs-number">255</span>) &#123;<br>                result.<span class="hljs-built_in">push_back</span>(s1 + <span class="hljs-string">&quot;.&quot;</span> + s2 + <span class="hljs-string">&quot;.&quot;</span> + s3 + <span class="hljs-string">&quot;.&quot;</span> + s4);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt;= s.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            path.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-built_in">backTracking</span>(s, i + <span class="hljs-number">1</span>);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getNum</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;0&#x27;</span> == <span class="hljs-number">0</span> &amp;&amp; s.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> || s.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> i: s) &#123;<br>            num *= <span class="hljs-number">10</span>;<br>            num += (i - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">restoreIpAddresses</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-built_in">backTracking</span>(s, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>结构清晰了很多，可读性很好。</p><h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78. 子集"></a>78. 子集</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/subsets/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0078.%E5%AD%90%E9%9B%86.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1U84y1q7Ci">回溯算法解决子集问题，树上节点都是目标集和！ | LeetCode：78.子集</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>组合问题，这道题的每个元素不重复，做起来很简单，求出所有情况。</p><h4 id="递归三部曲-1"><a href="#递归三部曲-1" class="headerlink" title="递归三部曲"></a>递归三部曲</h4><p><code>vector&lt;vector&lt;int&gt;&gt; result</code>存放最终结果</p><p><code>vector&lt;int&gt; path</code>存放单次集合</p><ol><li>确定函数和参数：<ul><li>数组<code>nums</code></li><li>当前位置<code>index</code></li></ul></li><li>确定终止条件：第一层的递归结束（或无）</li><li>单次递归：<ul><li>单次集合加入到最终结果中</li><li>单次集合加入新的元素</li><li>下一层递归</li><li>反向操作</li></ul></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>        result.<span class="hljs-built_in">push_back</span>(path);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            path.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            <span class="hljs-built_in">backTracking</span>(nums, i + <span class="hljs-number">1</span>);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums) &#123;<br>        <span class="hljs-built_in">backTracking</span>(nums, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="90-子集II"><a href="#90-子集II" class="headerlink" title="90. 子集II"></a>90. 子集II</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/subsets-ii/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0090.%E5%AD%90%E9%9B%86II.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1vm4y1F71J/">回溯算法解决子集问题，如何去重？| LeetCode：90.子集II</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>基本同上一题，但是增加了可重复元素，需要去重。去重在我的博客<a href="https://promisewang.github.io/post/36f15375.html#40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII">40. 组合总和II</a></p><p>这道题做之前要先排序</p><p><code>vector&lt;vector&lt;int&gt;&gt; result</code>：存放最终结果</p><p><code>vector&lt;int&gt; path</code>：存放单次集合</p><h4 id="递归三部曲-2"><a href="#递归三部曲-2" class="headerlink" title="递归三部曲"></a>递归三部曲</h4><ol><li>确定函数和参数<ul><li>数组<code>nums</code></li><li>当前索引<code>index</code></li><li>判断元素是否使用过的<code>used</code></li></ul></li><li>递归终止条件：无</li><li>单次递归：<ul><li>单次集合加入最终结果</li><li>当<code>i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false</code>说明之前已经遍历过，<code>continue</code></li><li><code>path</code>加入下个元素</li><li><code>used[i] == true</code>下个元素标记被使用过</li><li>下一层递归</li><li>反向操作</li></ul></li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> index, vector&lt;<span class="hljs-type">bool</span>&gt; &amp;used)</span> </span>&#123;<br>        result.<span class="hljs-built_in">push_back</span>(path);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>] &amp;&amp; !used[i - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            path.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            used[i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">backTracking</span>(nums, i + <span class="hljs-number">1</span>, used);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>            used[i] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsetsWithDup</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums) &#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">used</span><span class="hljs-params">(nums.size(), <span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-built_in">backTracking</span>(nums, <span class="hljs-number">0</span>, used);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串</title>
    <link href="/post/36f15375.html"/>
    <url>/post/36f15375.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第二十六天-39-组合总和、40-组合总和II、131-分割回文串"><a href="#代码随想录算法训练营第二十六天-39-组合总和、40-组合总和II、131-分割回文串" class="headerlink" title="代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串"></a>代码随想录算法训练营第二十六天  39.组合总和、40.组合总和II、131.分割回文串</h1><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39.组合总和"></a>39.组合总和</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/combination-sum/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0039.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1KT4y1M7HJ">Leetcode:39. 组合总和讲解</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题还比较简单，先进行排序，然后开始递归。排序是为了确定当前几个数的和大于了<code>target</code>说明后面就不存在结果了。</p><h4 id="递归三部曲"><a href="#递归三部曲" class="headerlink" title="递归三部曲"></a>递归三部曲</h4><ol><li>确定函数参数：<ul><li>数组</li><li>当前递归位置</li><li>总和</li><li>目标和</li></ul></li><li>递归终止条件：如果目标和等于总和，那么把所有元素放入<code>result</code></li><li>单次递归：总和大于<code>target</code>，剪枝，<code>return</code>。否则进行下一次递归</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">combinationSum</span><span class="hljs-params">(candidates []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br>sort.Ints(candidates)<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> path []<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> backTracking <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(candidates []<span class="hljs-type">int</span>, index, sum, target <span class="hljs-type">int</span>)</span></span><br>backTracking = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(candidates []<span class="hljs-type">int</span>, index, sum, target <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> sum == target &#123;<br>temp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(path))<br><span class="hljs-built_in">copy</span>(temp, path)<br>result = <span class="hljs-built_in">append</span>(result, temp)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> sum &gt; target &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> i := index; i &lt; <span class="hljs-built_in">len</span>(candidates); i++ &#123;<br><span class="hljs-keyword">if</span> sum+candidates[i] &gt; target &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>path = <span class="hljs-built_in">append</span>(path, candidates[i])<br>sum += candidates[i]<br>backTracking(candidates, i, sum, target)<br>path = path[:<span class="hljs-built_in">len</span>(path)<span class="hljs-number">-1</span>]<br>sum -= candidates[i]<br>&#125;<br>&#125;<br>backTracking(candidates, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, target)<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="40-组合总和II"><a href="#40-组合总和II" class="headerlink" title="40. 组合总和II"></a>40. 组合总和II</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/combination-sum-ii/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV12V4y1V73A">回溯算法中的去重，树层去重树枝去重，你弄清楚了没？| LeetCode:40.组合总和II</a></p><p>  状态：TLE</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><font color="red">从这道题开始换C++写算法了，Go写算法有点难受。最初用Go写算法只是想多练练Go的语法。但是到刷LeetCode还是不太适合。</font></p><p>这道题去重一直想不出来，试了几种方法，要么超时、要么思路错了：</p><ul><li>将结果放入到一个集合中。由于Go语言没有集合，那么新建一个<code>maps := map[interface&#123;&#125;]bool&#123;&#125;</code>。<code>key</code>则是每一个结果。但是<code>key</code>不能是切片类型。所以不能使用。</li><li>由于不能使用切片，那么使用一个“曲线救题”的方式，把结果转成字符串（加入结果为[1, 2, 3]，那么就变成“123”）这样就可以存入<code>key</code>中。超出了时间限制。该测试用例如下<code>candidates = [1, 1, ..., 1]（100个）</code>，<code>target=30</code>。去重了但没剪枝。</li></ul><p><font color="green">这题投降</font></p><h4 id="卡哥讲解"><a href="#卡哥讲解" class="headerlink" title="卡哥讲解"></a>卡哥讲解</h4><p>对于我来讲想明白了一下两点我的代码就写出来了，假设<code>candidates = [1, 2(1), 2(2), 2(3), 5]</code>，括号为了区分是哪个<code>2</code>：</p><ul><li>假如递归到<code>[1, 2(1), 2(2), 2(3)]</code>，那么再以后递归时候<code>2(1)</code>为第一个元素，那么<code>[2(1), 2(2), 2(3)]</code>的情况再刚刚已经出现了，则不需要再递归了。也是剪枝操作。</li><li>为了防止重复递归，引入一个布尔类型的<code>used</code>数组。<code>used[i]</code>代表<code>candidates[i]</code>在当前递归的树枝上是否使用。那么当<code>candidates[i] != candidates[i - 1] &amp;&amp; used[i] == false</code>时，才不会重复递归。</li></ul><h4 id="递归三部曲-1"><a href="#递归三部曲-1" class="headerlink" title="递归三部曲"></a>递归三部曲</h4><ol><li>确立递归函数参数<ul><li>当前递归的和</li><li>目标和</li><li>当前位置索引</li><li><code>used</code>数组，是否使用</li><li><code>candidates</code></li></ul></li><li>递归终止条件：<code>sum == target</code>时，将<code>path</code>加入到<code>result</code>中</li><li>单次递归：<ul><li>先剪枝：当<code>i &gt; 0 &amp;&amp; candidates[i] == candidates[i - 1] &amp;&amp; !used[i - 1]</code>，说明已经递归过了，应该<font color="red"><code>continue</code></font>而不应该<code>return</code>。</li><li>当前和加上下一个数</li><li>下一个数放入到路径<code>path</code>中</li><li>下一个数标记为<code>true</code>，示意已被使用。</li><li>下层递归</li><li>反向上述操作</li></ul></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(<span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> index, vector&lt;<span class="hljs-type">bool</span>&gt; &amp;used, vector&lt;<span class="hljs-type">int</span>&gt; &amp;candidates)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (sum == target) &#123;<br>            result.<span class="hljs-built_in">push_back</span>(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; candidates.<span class="hljs-built_in">size</span>() &amp;&amp; sum + candidates[i] &lt;= target; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="hljs-number">1</span>] &amp;&amp; !used[i - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            sum += candidates[i];<br>            path.<span class="hljs-built_in">push_back</span>(candidates[i]);<br>            used[i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">backTracking</span>(sum, target, i + <span class="hljs-number">1</span>, used, candidates);<br>            sum -= candidates[i];<br>            path.<span class="hljs-built_in">pop_back</span>();<br>            used[i] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combinationSum2</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;candidates, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-built_in">sort</span>(candidates.<span class="hljs-built_in">begin</span>(), candidates.<span class="hljs-built_in">end</span>());<br>        path.<span class="hljs-built_in">clear</span>();<br>        result.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">used</span><span class="hljs-params">(candidates.size(), <span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-built_in">backTracking</span>(<span class="hljs-number">0</span>, target, <span class="hljs-number">0</span>, used, candidates);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131. 分割回文串"></a>131. 分割回文串</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/palindrome-partitioning/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1c54y1e7k6">131.分割回文串</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>我这个思路明显是有点绕弯的，不是最好的。头已经大了，已经想不下去最优解了，明天再看。</p><p>这道题真的想了一下午。最开始没理解题意，我以为是判断每个子串，如果是回文则输出。写了好久的代码之后发现并不能通过测试用例，重新好好理解下题，然后明白了。是如果一个字符串同时分割出一些子串，如果他们满足则是答案。例如“aaba”，一共有这些种分割方式：</p><table><thead><tr><th align="center">分割情况</th><th align="center">是否满足</th></tr></thead><tbody><tr><td align="center">a|a|b|a</td><td align="center">✅</td></tr><tr><td align="center">aa|b|a</td><td align="center">✅</td></tr><tr><td align="center">a|ab|a</td><td align="center">❌</td></tr><tr><td align="center">a|a|ba</td><td align="center">❌</td></tr><tr><td align="center">aa|b|a</td><td align="center">✅</td></tr><tr><td align="center">a|aba</td><td align="center">✅</td></tr><tr><td align="center">aa|ba</td><td align="center">❌</td></tr><tr><td align="center">aab|a</td><td align="center">❌</td></tr></tbody></table><p>那么只需要知道分割位置即可，变成了从1开始的数组到最后各种组合情况。判断每一种情况是不是回文串</p><h4 id="递归三部曲-2"><a href="#递归三部曲-2" class="headerlink" title="递归三部曲"></a>递归三部曲</h4><p><code>vector&lt;vector&lt;string&gt;&gt; result</code>存放最终结果</p><p><code>vector&lt;int&gt; path</code>存放切割位置</p><p><code>vector&lt;string&gt; pathString</code>存放切割后的字符串，如果均为回文串，则加入到<code>result</code>。</p><ol><li>确立函数和参数：<ul><li>字符串<code>s</code></li><li>当前递归位置<code>index</code></li></ul></li><li>递归终止条件：当<code>index &gt; s.size()</code>时。将<code>s</code>按照<code>path</code>存放的数字位置切割，判断切割后每一个串是否均为回文串。如果是加入到<code>result</code>，否则清空<code>pathString</code></li><li>单次递归：<ul><li>递归范围[index, s.size()]</li><li><code>path</code>添加当前位置</li><li>下一层递归</li><li>反向操作</li></ul></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;string&gt;&gt; result;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br>    vector&lt;string&gt; pathString;<br>    string temp = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (s[i] != s[s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> - i]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(<span class="hljs-type">const</span> string &amp;s, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &gt; s.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> right = <span class="hljs-number">0</span>; right &lt; path.<span class="hljs-built_in">size</span>(); right++) &#123;<br>                string temp = s.<span class="hljs-built_in">substr</span>(left, path[right] - left);<br>                pathString.<span class="hljs-built_in">push_back</span>(temp);<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">judge</span>(temp)) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    pathString.<span class="hljs-built_in">clear</span>();<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                left = path[right];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                result.<span class="hljs-built_in">push_back</span>(pathString);<br>                pathString.<span class="hljs-built_in">clear</span>();<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt;= s.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            path.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-built_in">backTracking</span>(s, i + <span class="hljs-number">1</span>);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">partition</span>(string s) &#123;<br>        <span class="hljs-built_in">backTracking</span>(s, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i: path) &#123;<br>            cout &lt;&lt; i &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合</title>
    <link href="/post/5d63641c.html"/>
    <url>/post/5d63641c.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第二十五天-216-组合总和III、17-电话号码的字母组合"><a href="#代码随想录算法训练营第二十五天-216-组合总和III、17-电话号码的字母组合" class="headerlink" title="代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合"></a>代码随想录算法训练营第二十五天  216.组合总和III、17.电话号码的字母组合</h1><h2 id="216-组合总和III"><a href="#216-组合总和III" class="headerlink" title="216.组合总和III"></a>216.组合总和III</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/combination-sum-iii/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1wg411873x">和组合问题有啥区别？回溯算法如何剪枝？| LeetCode：216.组合总和III</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>定义<code>result</code>存放总结果，<code>path</code>存放单次结果。递归层数由<code>k</code>决定</p><ol><li><p>递归函数构造：</p><ul><li>无返回值类型</li><li>需要传参<code>k</code>确定递归次数</li><li>传参<code>n</code>用于比较和</li><li>传参<code>index</code>确定当前递归索引</li><li>传参<code>sum</code>为当前和</li></ul></li><li><p>递归结束条件：当<code>path</code>长度等于<code>k</code>说明打到了需求长度，并且<code>sum == n</code>的时候，说明为想要的答案，将<code>path</code>添加到<code>result</code>当中。并且<code>return</code></p></li><li><p>单次递归和剪枝：从<code>index</code>开始，到9结束。如果<code>sum + i &gt; n</code>则<code>return</code>。每层先添加到<code>path</code>，再向下<code>index+1</code></p></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">combinationSum3</span><span class="hljs-params">(k <span class="hljs-type">int</span>, n <span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> path []<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> backTracking <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(k, n, index, sum <span class="hljs-type">int</span>)</span></span><br>backTracking = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(k, n, index, sum <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(path) == k &#123;<br><span class="hljs-keyword">if</span> sum == n &#123;<br>temp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, k)<br><span class="hljs-built_in">copy</span>(temp, path)<br>result = <span class="hljs-built_in">append</span>(result, temp)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> i := index; i &lt;= <span class="hljs-number">9</span>; i++ &#123;<br><span class="hljs-keyword">if</span> sum+i &gt; n &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>path = <span class="hljs-built_in">append</span>(path, i)<br>sum += i<br>backTracking(k, n, i+<span class="hljs-number">1</span>, sum)<br>sum -= path[<span class="hljs-built_in">len</span>(path)<span class="hljs-number">-1</span>]<br>path = path[:<span class="hljs-built_in">len</span>(path)<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br>backTracking(k, n, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a>17. 电话号码的字母组合</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0017.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1yV4y1V7Ug">还得用回溯算法！| LeetCode：17.电话号码的字母组合</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>首先先保存各个数字对应了哪些字母，这里使用了字符类型，例如2对应了<code>&#39;a&#39;, &#39;b&#39;, &#39;c&#39;</code>，使用二维数组保存。假设输入字符串是<code>&quot;234&quot;</code></p><img src="../images/day25/说明.png" alt="说明" style="zoom:50%;" /><ol><li>递归函数的构造：无返回值类型；每次要传参应该遍历哪一个<code>index</code>（<code>words</code>哪一行）。判断第几行使用<code>words[int(digits[i] - &#39;0&#39;)]</code></li><li>递归终止条件：<code>path</code>的长度和字符串<code>digits</code>长度相等，并且不等于0</li><li>单层递归逻辑：两重循环内，每次<code>index+1</code></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">letterCombinations</span><span class="hljs-params">(digits <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> path <span class="hljs-type">string</span><br>words := [][]<span class="hljs-type">string</span>&#123;<br>&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;l&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;s&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;v&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>&#125;,<br>&#125;<br><span class="hljs-keyword">var</span> backTracking <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(index <span class="hljs-type">int</span>)</span></span><br>backTracking = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(index <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(path) == <span class="hljs-built_in">len</span>(digits) &amp;&amp; <span class="hljs-built_in">len</span>(path) != <span class="hljs-number">0</span> &#123;<br>result = <span class="hljs-built_in">append</span>(result, path)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> i1 := index; i1 &lt; <span class="hljs-built_in">len</span>(digits); i1++ &#123;<br><span class="hljs-keyword">for</span> i2 := <span class="hljs-number">0</span>; i2 &lt; <span class="hljs-built_in">len</span>(words[<span class="hljs-type">int</span>(digits[i1]<span class="hljs-number">-50</span>)]); i2++ &#123;<br>path += words[<span class="hljs-type">int</span>(digits[i1]<span class="hljs-number">-50</span>)][i2]<br>backTracking(i1 + <span class="hljs-number">1</span>)<br>path = path[:<span class="hljs-built_in">len</span>(path)<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br>&#125;<br>backTracking(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第二十四天  77.组合</title>
    <link href="/post/9a97e05d.html"/>
    <url>/post/9a97e05d.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第二十四天-77-组合"><a href="#代码随想录算法训练营第二十四天-77-组合" class="headerlink" title="代码随想录算法训练营第二十四天  77.组合"></a>代码随想录算法训练营第二十四天  77.组合</h1><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/combinations/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html#">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：</p><ul><li><a href="https://www.bilibili.com/video/BV1ti4y1L7cv">带你学透回溯算法-组合问题（对应力扣题目：77.组合）</a></li><li><a href="https://www.bilibili.com/video/BV1wi4y157er">组合问题的剪枝操作</a></li></ul><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这是一道经典的回溯算法的题目，开始做的时候没有考虑到剪枝的情况。直接请出回溯三步：</p><ol><li>确立函数和参数：需要参数<code>n, k, index</code>分别表示范围、k个数、当前位置</li><li>确定终止条件：路径<code>path</code>长度为<code>k</code>时，将<code>path</code>追加到<code>append</code></li><li>单次逻辑：从<code>index</code>开始逐渐向<code>path</code>追加之后的元素；递归调用；删除刚追加的元素</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">combine</span><span class="hljs-params">(n <span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br>path := []<span class="hljs-type">int</span>&#123;&#125;<br>result := [][]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">var</span> backTracking <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n, k, index <span class="hljs-type">int</span>)</span></span><br>backTracking = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n, k, index <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(path) == k &#123;<br>temp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(path))<br><span class="hljs-built_in">copy</span>(temp, path)<br>result = <span class="hljs-built_in">append</span>(result, temp)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> i := index; i &lt;= n; i++ &#123;<br>path = <span class="hljs-built_in">append</span>(path, i)<br>backTracking(n, k, i+<span class="hljs-number">1</span>)<br>path = path[:<span class="hljs-built_in">len</span>(path)<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br>backTracking(n, k, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h3><p>来举一个例子，<code>n = 4, k = 4</code>，那么第一层for循环的时候，从元素2开始的遍历都没有意义了。 在第二层for循环，从元素3开始的遍历都没有意义了。那么在第一层遍历时候，对<code>i</code>的判断应该更改：<code>i &lt;= n - (k - len(path) + 1)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">combine</span><span class="hljs-params">(n <span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br>path := []<span class="hljs-type">int</span>&#123;&#125;<br>result := [][]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">var</span> backTracking <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n, k, index <span class="hljs-type">int</span>)</span></span><br>backTracking = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n, k, index <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(path) == k &#123;<br>temp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(path))<br><span class="hljs-built_in">copy</span>(temp, path)<br>result = <span class="hljs-built_in">append</span>(result, temp)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> i := index; i &lt;= n-(k-<span class="hljs-built_in">len</span>(path))+<span class="hljs-number">1</span>; i++ &#123;<br>path = <span class="hljs-built_in">append</span>(path, i)<br>backTracking(n, k, i+<span class="hljs-number">1</span>)<br>path = path[:<span class="hljs-built_in">len</span>(path)<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br>backTracking(n, k, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树</title>
    <link href="/post/b6e45431.html"/>
    <url>/post/b6e45431.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第二十二天-669-修建二叉搜索树、108-将有序数组转化为二叉搜索树、538-把二叉搜索树转化为累加树"><a href="#代码随想录算法训练营第二十二天-669-修建二叉搜索树、108-将有序数组转化为二叉搜索树、538-把二叉搜索树转化为累加树" class="headerlink" title="代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树"></a>代码随想录算法训练营第二十二天  669.修建二叉搜索树、108.将有序数组转化为二叉搜索树、538.把二叉搜索树转化为累加树</h1><h2 id="669-修建二叉搜索树"><a href="#669-修建二叉搜索树" class="headerlink" title="669.修建二叉搜索树"></a>669.修建二叉搜索树</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/trim-a-binary-search-tree/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0669.%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV17P41177ud?share_source=copy_web">你修剪的方式不对，我来给你纠正一下！| LeetCode：669. 修剪二叉搜索树</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>与昨天最后一道题类似，昨天最后一道题要求删除一个节点，这道题则为批量删除节点，多加一个判断条件即可</p><p><a href="https://promisewang.github.io/post/1b36a0ee.html#450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9">链接跳转</a></p><p>先使用前序遍历得到树的所有节点，再以此判断改节点是否应该删除</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">trimBST</span><span class="hljs-params">(root *TreeNode, low <span class="hljs-type">int</span>, high <span class="hljs-type">int</span>)</span></span> *TreeNode &#123;<br>path := []<span class="hljs-type">int</span>&#123;&#125;<br>pre(root, &amp;path)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> path &#123;<br><span class="hljs-keyword">if</span> !(low &lt;= v &amp;&amp; v &lt;= high) &#123;<br>root = deleteNode(root, v)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> root<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pre</span><span class="hljs-params">(root *TreeNode, path *[]<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>pre(root.Left, path)<br>pre(root.Right, path)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="108-将有序数组转化为二叉搜索树"><a href="#108-将有序数组转化为二叉搜索树" class="headerlink" title="108.将有序数组转化为二叉搜索树"></a>108.将有序数组转化为二叉搜索树</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1uR4y1X7qL?share_source=copy_web">构造平衡二叉搜索树！| LeetCode：108.将有序数组转换为二叉搜索树</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>根据二叉搜索树的定义，比根节点小的值在根节点左侧，比根节点大的值在根节点右侧。而且还要建立平衡搜索树，那么根节点应该为数组最中间的那个值。切割数组，然后递归</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sortedArrayToBST</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> *TreeNode &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>root := backTracking(nums, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">return</span> root<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, left, right <span class="hljs-type">int</span>)</span></span> *TreeNode &#123;<br><span class="hljs-keyword">if</span> left &gt; right &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>mid := (left + right) / <span class="hljs-number">2</span><br>root := &amp;TreeNode&#123;<br>Val:   nums[mid],<br>Left:  backTracking(nums, left, mid<span class="hljs-number">-1</span>),<br>Right: backTracking(nums, mid+<span class="hljs-number">1</span>, right),<br>&#125;<br><span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="538-把二叉搜索树转化为累加树"><a href="#538-把二叉搜索树转化为累加树" class="headerlink" title="538.把二叉搜索树转化为累加树"></a>538.把二叉搜索树转化为累加树</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0538.%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1d44y1f7wP?share_source=copy_web">普大喜奔！二叉树章节已全部更完啦！| LeetCode：538.把二叉搜索树转换为累加树</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>看到树的构建过程，实际上是对树进行“右根左”的遍历。使用双指针，一个指向当前节点，另一个指向过去的节点。当前结点的新的值要加上过去节点的值。总体思路与530题思路一样。<a href="https://promisewang.github.io/post/80a9e5fb.html#530-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE">跳转链接</a></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">convertBST</span><span class="hljs-params">(root *TreeNode)</span></span> *TreeNode &#123;<br><span class="hljs-keyword">var</span> pre *TreeNode<br><span class="hljs-keyword">var</span> function <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cur *TreeNode)</span></span><br>function = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cur *TreeNode)</span></span> &#123;<br><span class="hljs-keyword">if</span> cur == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>function(cur.Right)<br><span class="hljs-keyword">if</span> pre != <span class="hljs-literal">nil</span> &#123;<br>cur.Val += pre.Val<br>&#125;<br>pre = cur<br>function(cur.Left)<br>&#125;<br>function(root)<br><span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点</title>
    <link href="/post/1b36a0ee.html"/>
    <url>/post/1b36a0ee.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第二十一天-235-二叉搜索树的最近公共祖先、701-二叉搜索树中的插入操作、450-删除二叉搜索树中的节点"><a href="#代码随想录算法训练营第二十一天-235-二叉搜索树的最近公共祖先、701-二叉搜索树中的插入操作、450-删除二叉搜索树中的节点" class="headerlink" title="代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点"></a>代码随想录算法训练营第二十一天  235.二叉搜索树的最近公共祖先、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点</h1><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235.二叉搜索树的最近公共祖先"></a>235.二叉搜索树的最近公共祖先</h2><blockquote></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>同上一天的最后一道题：“236.二叉树的最近公共祖先”</p><p><a href="https://promisewang.github.io/post/80a9e5fb.html#236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88">链接跳转</a></p><h2 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701.二叉搜索树中的插入操作"></a>701.二叉搜索树中的插入操作</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0701.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1Et4y1c78Y?share_source=copy_web">原来这么简单？ | LeetCode：701.二叉搜索树中的插入操作</a></p><p>  状态：AC</p></blockquote><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ol><li>寻找应该插入的位置，和当前的根节点比较</li><li>找到插入</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">insertIntoBST</span><span class="hljs-params">(root *TreeNode, val <span class="hljs-type">int</span>)</span></span> *TreeNode &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> &amp;TreeNode&#123;<br>Val:   val,<br>Left:  <span class="hljs-literal">nil</span>,<br>Right: <span class="hljs-literal">nil</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> root.Val &lt; val &#123;<br>root.Right = insertIntoBST(root.Right, val)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>root.Left = insertIntoBST(root.Left, val)<br>&#125;<br><span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450. 删除二叉搜索树中的节点"></a>450. 删除二叉搜索树中的节点</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/delete-node-in-a-bst/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1tP41177us?share_source=copy_web">调整二叉树的结构最难！| LeetCode：450.删除二叉搜索树中的节点</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>思路大体上还算好想，其中一种情况困扰了好久，还是看了看题解。在树中查找应该删除的节点</p><ul><li><ol><li>当前递归到空节点，说明没找到</li></ol></li><li><p>如果找到</p></li></ul><ol start="2"><li><p>如果是叶子节点，直接删<code>return nil</code></p></li><li><p>如果左空右不空，右节点直接上位</p></li><li><p>如果左不空有空，左节点直接上位</p></li><li><p>如果左右都不空，需要将左子树找到新家</p></li></ol><p>第五点删除过程在下方视频中展示</p><div style="position: relative; width: 100%; height: 0;padding-bottom: 100%;"><iframe src="../images/day21/二叉排序树删除元素.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(root *TreeNode, key <span class="hljs-type">int</span>)</span></span> *TreeNode &#123;<br><span class="hljs-comment">// 1. 没找到删除节点</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> root<br>&#125;<br><span class="hljs-keyword">if</span> root.Val == key &#123;<br><span class="hljs-comment">// 2. 该节点是叶子节点: 直接删除</span><br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 3. 左空右不空: 右节点补位</span><br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right != <span class="hljs-literal">nil</span> &#123;<br>node := root.Right<br><span class="hljs-keyword">return</span> node<br>&#125;<br><span class="hljs-comment">// 4. 左不空右空: 左节点补位</span><br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br>node := root.Left<br><span class="hljs-keyword">return</span> node<br>&#125;<br><span class="hljs-comment">// 5. 都不空: 则将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为新的根节点。</span><br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &amp;&amp; root.Right != <span class="hljs-literal">nil</span> &#123;<br>node := root.Right<br><span class="hljs-keyword">for</span> node.Left != <span class="hljs-literal">nil</span> &#123;<br>node = node.Left<br>&#125;<br>node.Left = root.Left<br>root = root.Right<br><span class="hljs-keyword">return</span> root<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> root.Val &lt; key &#123;<br>root.Right = deleteNode(root.Right, key)<br>&#125;<br><span class="hljs-keyword">if</span> root.Val &gt; key &#123;<br>root.Left = deleteNode(root.Left, key)<br>&#125;<br><span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先</title>
    <link href="/post/80a9e5fb.html"/>
    <url>/post/80a9e5fb.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第二十天-530-二叉搜索树的最小绝对差、501-二叉搜索树中的众数、236-二叉树的最近公共祖先"><a href="#代码随想录算法训练营第二十天-530-二叉搜索树的最小绝对差、501-二叉搜索树中的众数、236-二叉树的最近公共祖先" class="headerlink" title="代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先"></a>代码随想录算法训练营第二十天  530.二叉搜索树的最小绝对差、501.二叉搜索树中的众数、236.二叉树的最近公共祖先</h1><h2 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530.二叉搜索树的最小绝对差"></a>530.二叉搜索树的最小绝对差</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0530.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1DD4y11779">二叉搜索树中，需要掌握如何双指针遍历！| LeetCode：530.二叉搜索树的最小绝对差</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>思路一：二叉搜索树中序遍历是递增的，中序遍历后得到结果数组，再遍历结果数组，计算相邻元素的差，找最小值。</li><li>思路二：使用双指针，看了卡哥的解法豁然开朗。定义当前指针<code>cur</code>和上个节点的指针<code>pre=nil</code><ol><li><code>cur</code>开始中序遍历时，不断找最左节点的值</li><li>和<code>pre</code>指针判断，如果<code>pre</code>为空，说明当前是第一个节点，此后将<code>pre=cur</code></li><li><code>cur</code>继续递归，<code>pre</code>始终会慢<code>cur</code>一层</li><li>比较<code>cur.Val - pre.Val&lt;minNum</code></li></ol></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 思路一</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getMinimumDifference</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> path []<span class="hljs-type">int</span><br>inorder(root, &amp;path)<br>minNum := math.MaxInt32<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(path); i++ &#123;<br><span class="hljs-keyword">if</span> path[i]-path[i<span class="hljs-number">-1</span>] &lt; minNum &#123;<br>minNum = path[i] - path[i<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> minNum<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inorder</span><span class="hljs-params">(root *TreeNode, path *[]<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>inorder(root.Left, path)<br>&#125;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>inorder(root.Right, path)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 思路二</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getMinimumDifference</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br>minNum := <span class="hljs-number">999999999</span><br><span class="hljs-keyword">var</span> pre *TreeNode<br><span class="hljs-keyword">var</span> inorder2 <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cur *TreeNode)</span></span><br>inorder2 = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cur *TreeNode)</span></span> &#123;<br><span class="hljs-keyword">if</span> cur == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>inorder2(cur.Left)<br><span class="hljs-keyword">if</span> pre != <span class="hljs-literal">nil</span> &amp;&amp; cur.Val-pre.Val &lt; minNum &#123;<br>minNum = cur.Val - pre.Val<br>&#125;<br>pre = cur<br>inorder2(cur.Right)<br>&#125;<br>inorder2(root)<br><span class="hljs-keyword">return</span> minNum<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501.二叉搜索树中的众数"></a>501.二叉搜索树中的众数</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0501.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1fD4y117gp">不仅双指针，还有代码技巧可以惊艳到你！ | LeetCode：501.二叉搜索树中的众数</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>整体思路和上题基本类似，依旧使用双指针。只不过要多定义些变量，用来存放历史最大值<code>maxCount</code>，当前最大值<code>count</code>，众数结果<code>maxNum</code></p><ul><li>如果<code>cur.Val == pre.Val</code>，<code>count++</code>；</li><li>否则判断<code>count</code>与<code>maxCount</code><ul><li><code>count &gt; maxCount</code>：清空<code>maxNum</code>，放入新的值</li><li><code>count == maxCount</code>：追加新的值</li><li><code>count &lt; maxCount</code>：不管</li><li>更新<code>count = 1</code></li></ul></li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findMode</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br>maxCount := <span class="hljs-number">0</span><br>maxNum := []<span class="hljs-type">int</span>&#123;&#125;<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> pre *TreeNode<br><span class="hljs-keyword">var</span> mid <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cur *TreeNode)</span></span><br>mid = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cur *TreeNode)</span></span> &#123;<br><span class="hljs-keyword">if</span> cur == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>mid(cur.Left)<br><span class="hljs-keyword">if</span> pre == <span class="hljs-literal">nil</span> &#123;<br>count = <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> pre.Val == cur.Val &#123;<br>count++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>count = <span class="hljs-number">1</span><br>&#125;<br>pre = cur<br><span class="hljs-keyword">if</span> count == maxCount &#123;<br>maxNum = <span class="hljs-built_in">append</span>(maxNum, cur.Val)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> count &gt; maxCount &#123;<br>maxCount = count<br>maxNum = []<span class="hljs-type">int</span>&#123;cur.Val&#125;<br>&#125;<br>mid(cur.Right)<br>&#125;<br>mid(root)<br><span class="hljs-keyword">return</span> maxNum<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236.二叉树的最近公共祖先"></a>236.二叉树的最近公共祖先</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1jd4y1B7E2">自底向上查找，有点难度！ | LeetCode：236. 二叉树的最近公共祖先</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这道题和卡哥的思路不同。我依旧使用了中序遍历。</p><ol><li>中序遍历得到结果<code>path</code></li><li>查找中序遍历中<code>p</code>与<code>q</code>的位置，与<code>root</code>进行判断<ul><li>如果<code>root</code>在<code>p</code>和<code>q</code>的左（右）侧，<code>root</code>则需要向右（左）节点移动</li><li>如果<code>root</code>在<code>p</code>和<code>q</code>之间（或<code>root</code>是<code>p</code>或<code>q</code>），返回即可，具体可以看下方视频</li></ul></li></ol><div style="position: relative; width: 100%; height: 0;padding-bottom: 100%;"><iframe src="../images/day20/二叉树公共祖先.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(root, p, q *TreeNode)</span></span> *TreeNode &#123;<br><span class="hljs-keyword">var</span> path []<span class="hljs-type">int</span><br>getInorderPath(root, &amp;path)<br><span class="hljs-keyword">for</span> &#123;<br>index := <span class="hljs-number">0</span><br>indexP := <span class="hljs-number">0</span><br>indexQ := <span class="hljs-number">0</span><br><span class="hljs-comment">// 找到当前根结点</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(path); i++ &#123;<br><span class="hljs-keyword">if</span> root.Val == path[i] &#123;<br>index = i<br>&#125;<br><span class="hljs-keyword">if</span> p.Val == path[i] &#123;<br>indexP = i<br>&#125;<br><span class="hljs-keyword">if</span> q.Val == path[i] &#123;<br>indexQ = i<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> indexP == index &#123;<br><span class="hljs-keyword">return</span> p<br>&#125;<br><span class="hljs-keyword">if</span> indexQ == index &#123;<br><span class="hljs-keyword">return</span> q<br>&#125;<br><span class="hljs-comment">// p,q 分散在中序遍历的根结点两侧</span><br><span class="hljs-keyword">if</span> indexP &lt; index &amp;&amp; index &lt; indexQ || indexQ &lt; index &amp;&amp; index &lt; indexP &#123;<br><span class="hljs-keyword">return</span> root<br>&#125;<br><span class="hljs-comment">// p,q 在根节点左侧</span><br><span class="hljs-keyword">if</span> indexP &lt; index &amp;&amp; indexQ &lt; index &#123;<br>root = root.Left<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// p,q 在根节点右侧</span><br><span class="hljs-keyword">if</span> index &lt; indexP &amp;&amp; index &lt; indexQ &#123;<br>root = root.Right<br><span class="hljs-keyword">continue</span><br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getInorderPath</span><span class="hljs-params">(root *TreeNode, path *[]<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>getInorderPath(root.Left, path)<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>getInorderPath(root.Right, path)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第十九天  654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树</title>
    <link href="/post/38d5093a.html"/>
    <url>/post/38d5093a.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第十九天-654-最大二叉树、617-合并二叉树、700-二叉搜索树中的搜索、98-验证二叉搜索树"><a href="#代码随想录算法训练营第十九天-654-最大二叉树、617-合并二叉树、700-二叉搜索树中的搜索、98-验证二叉搜索树" class="headerlink" title="代码随想录算法训练营第十九天 654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树"></a>代码随想录算法训练营第十九天 654.最大二叉树、617.合并二叉树、700.二叉搜索树中的搜索、98.验证二叉搜索树</h1><h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654.最大二叉树"></a>654.最大二叉树</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/maximum-binary-tree/">力扣题目地址</a></p><p>  文章讲解：<a href="https://programmercarl.com/0654.%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1MG411G7ox">又是构造二叉树，又有很多坑！| LeetCode：654.最大二叉树</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>找到当前数组最大值<code>max</code>以及所在位置<code>maxIndex</code></li><li>新建一个节点，将<code>max</code>设为节点的值，判断此时的数组长度是否为0</li><li>切割左数组和右数组、并向左子树和右子树递归</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">constructMaximumBinaryTree</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> *TreeNode &#123;<br>max := <span class="hljs-number">0</span><br>maxIndex := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> nums &#123;<br><span class="hljs-keyword">if</span> v &gt; max &#123;<br>max = v<br>maxIndex = i<br>&#125;<br>&#125;<br>root := &amp;TreeNode&#123;<br>Val:   max,<br>Left:  <span class="hljs-literal">nil</span>,<br>Right: <span class="hljs-literal">nil</span>,<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> root<br>&#125;<br>leftNums := nums[:maxIndex]<br>rightNums := nums[maxIndex+<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(leftNums) != <span class="hljs-number">0</span> &#123;<br>root.Left = constructMaximumBinaryTree(leftNums)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rightNums) != <span class="hljs-number">0</span> &#123;<br>root.Right = constructMaximumBinaryTree(rightNums)<br>&#125;<br><span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a>617. 合并二叉树</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/merge-two-binary-trees/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0617.%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1m14y1Y7JK">一起操作两个二叉树？有点懵！| LeetCode：617.合并二叉树</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>合并二叉树首先以其中一棵树为基准，将另一棵树“移植”过来。这里以<code>root1</code>为准</p><ol><li>如果<code>root1</code>是空节点，说明应该把<code>root2</code>的东西“移植过来”（如果没有也没事）</li><li>反之同理，如果<code>root2</code>是空节点，则<code>root1</code>继续向下遍历</li><li><code>root1.Val += root2.Val</code></li><li><code>root1.Left</code>是两棵树向左节点遍历返回的结果。<code>root1.Right</code>是两棵树向左节点遍历返回的结果</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeTrees</span><span class="hljs-params">(root1 *TreeNode, root2 *TreeNode)</span></span> *TreeNode &#123;<br><span class="hljs-keyword">if</span> root1 == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> root2<br>&#125;<br><span class="hljs-keyword">if</span> root2 == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> root1<br>&#125;<br>root1.Val += root2.Val<br>root1.Left = mergeTrees(root1.Left, root2.Left)<br>root1.Right = mergeTrees(root1.Right, root2.Right)<br><span class="hljs-keyword">return</span> root1<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700.二叉搜索树中的搜索"></a>700.二叉搜索树中的搜索</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/">力扣题目地址</a></p><p>  文章讲解：<a href="https://programmercarl.com/0700.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1wG411g7sF">不愧是搜索树，这次搜索有方向了！| LeetCode：700.二叉搜索树中的搜索</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这里的搜索并不是返回是否找到，而是要返回子树，总的思路是一样的</p><ol><li><code>val &lt; root.Val</code>，向左找；<code>val &gt; root.Val</code>，向右找；相等则返回当前结点（包含了子树）</li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">searchBST</span><span class="hljs-params">(root *TreeNode, val <span class="hljs-type">int</span>)</span></span> *TreeNode &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">var</span> node *TreeNode<br><span class="hljs-keyword">if</span> root.Val == val &#123;<br>node = root<br><span class="hljs-keyword">return</span> node<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> val &lt; root.Val &#123;<br>node = searchBST(root.Left, val)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>node = searchBST(root.Right, val)<br>&#125;<br><span class="hljs-keyword">return</span> node<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a>98. 验证二叉搜索树</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/validate-binary-search-tree/">力扣题目链接</a></p><p>  文章讲解：<a href="https://leetcode.cn/problems/validate-binary-search-tree/">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV18P411n7Q4">你对二叉搜索树了解的还不够！ | LeetCode：98.验证二叉搜索树</a></p><p>  状态：AC</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ul><li><p><font color="red">错误思路</font>：顺序遍历每个节点，比较是否“左&lt;根&lt;右”，如果均满足返回true，否则是false</p><blockquote><p>  错误原因：如果树如下</p><p>  ​            2</p><p>  ​         &#x2F;     \</p><p>  ​       1        3</p><p>  ​         \</p><p>  ​           4</p><p>  4比2大，但是出现在了2的左边</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 错误的代码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> root.Val &lt; root.Right.Val &#123;<br><span class="hljs-keyword">return</span> isValidBST(root.Right)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> root.Left.Val &lt; root.Val &#123;<br><span class="hljs-keyword">return</span> isValidBST(root.Left)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &amp;&amp; root.Right != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">if</span> root.Left.Val &lt; root.Val &amp;&amp; root.Val &lt; root.Right.Val &#123;<br><span class="hljs-keyword">return</span> isValidBST(root.Left) &amp;&amp; isValidBST(root.Right)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>简单看了下卡哥的文档，知道了用中序遍历，中序遍历得到的结果如果是递增序列则为搜索树</p><blockquote><p>  如果树为如下，力扣的测试用例返回的是false，所以不能出现相等的情况</p><p>  ​            2</p><p>  ​         &#x2F;     \</p><p>  ​       2        2</p></blockquote></li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">var</span> path []<span class="hljs-type">int</span><br>inorder(root, &amp;path)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(path); i++ &#123;<br><span class="hljs-keyword">if</span> path[i<span class="hljs-number">-1</span>] &gt;= path[i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inorder</span><span class="hljs-params">(root *TreeNode, path *[]<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>inorder(root.Left, path)<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>inorder(root.Right, path)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第十八天 513.找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树</title>
    <link href="/post/de527742.html"/>
    <url>/post/de527742.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第十八天-513找树左下角的值、112-路径总和、113-路径总和II、106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树"><a href="#代码随想录算法训练营第十八天-513找树左下角的值、112-路径总和、113-路径总和II、106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树" class="headerlink" title="代码随想录算法训练营第十八天  513找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树"></a>代码随想录算法训练营第十八天  513找树左下角的值、112.路径总和、113.路径总和II、106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树</h1><h2 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513. 找树左下角的值"></a>513. 找树左下角的值</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1424y1Z7pn">怎么找二叉树的左下角？ 递归中又带回溯了，怎么办？| LeetCode：513.找二叉树左下角的值</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题对左下角的定义是：最后一行，最左面的元素，只需要层序遍历，输出最后一行的第一个元素即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br>queue := arrayqueue.New()<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br>temp := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br>temp = <span class="hljs-built_in">append</span>(temp, node.(*TreeNode).Val)<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, temp)<br>&#125;<br>fmt.Println(result)<br><span class="hljs-keyword">return</span> result[<span class="hljs-built_in">len</span>(result)<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="112-路径总和、113-路径总和II"><a href="#112-路径总和、113-路径总和II" class="headerlink" title="112. 路径总和、113. 路径总和II"></a>112. 路径总和、113. 路径总和II</h2><blockquote><p>  题目链接：</p><ul><li><a href="https://leetcode.cn/problems/path-sum/">112.路径总和</a></li><li><a href="https://leetcode.cn/problems/path-sum-ii/">113.路径总和ii</a></li></ul><p>  文章讲解：<a href="https://programmercarl.com/0112.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV19t4y1L7CR">拿不准的遍历顺序，搞不清的回溯过程，我太难了！ | LeetCode：112. 路径总和</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>找到根节点到叶子节点的路径：这里使用先序遍历（深度搜索）</li><li>将该路径所有节点求和，判断是否等于<code>targetSum</code>，有则保存至<code>result</code>中</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 112题</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasPathSum</span><span class="hljs-params">(root *TreeNode, targetSum <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> path []<span class="hljs-type">int</span><br>getResult(root, &amp;result, &amp;path)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(result); i++ &#123;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> result[i] &#123;<br>sum += v<br>&#125;<br><span class="hljs-keyword">if</span> sum == targetSum &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getResult</span><span class="hljs-params">(root *TreeNode, result *[][]<span class="hljs-type">int</span>, path *[]<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>temp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(*path))<br><span class="hljs-built_in">copy</span>(temp, *path)<br>*result = <span class="hljs-built_in">append</span>(*result, temp)<br>*path = (*path)[:<span class="hljs-built_in">len</span>(*path)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>getResult(root.Left, result, path)<br>*path = (*path)[:<span class="hljs-built_in">len</span>(*path)<span class="hljs-number">-1</span>]<br>&#125;<br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>getResult(root.Right, result, path)<br>*path = (*path)[:<span class="hljs-built_in">len</span>(*path)<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 113题</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pathSum</span><span class="hljs-params">(root *TreeNode, targetSum <span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> path []<span class="hljs-type">int</span><br>getResult1(root, &amp;result, &amp;path, targetSum)<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getResult1</span><span class="hljs-params">(root *TreeNode, result *[][]<span class="hljs-type">int</span>, path *[]<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> *path &#123;<br>sum += v<br>&#125;<br><span class="hljs-keyword">if</span> sum == target &#123;<br>temp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(*path))<br><span class="hljs-built_in">copy</span>(temp, *path)<br>*result = <span class="hljs-built_in">append</span>(*result, temp)<br>&#125;<br>*path = (*path)[:<span class="hljs-built_in">len</span>(*path)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>getResult1(root.Left, result, path, target)<br>*path = (*path)[:<span class="hljs-built_in">len</span>(*path)<span class="hljs-number">-1</span>]<br>&#125;<br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>getResult1(root.Right, result, path, target)<br>*path = (*path)[:<span class="hljs-built_in">len</span>(*path)<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树、105-从前序与中序遍历序列构造二叉树" class="headerlink" title="106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树"></a>106.从中序与后序遍历序列构造二叉树、105.从前序与中序遍历序列构造二叉树</h2><blockquote><p>  题目链接：</p><ul><li><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106.从中序与后序遍历序列构造二叉树</a></li><li><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105.从前序与中序遍历序列构造二叉树</a></li></ul><p>  文章讲解：<a href="https://programmercarl.com/0106.%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1vW4y1i7dn">坑很多！来看看你掉过几次坑 | LeetCode：106.从中序与后序遍历序列构造二叉树</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这道题自己最开始想的不是很明白，而且自己在考试时做这类题也没有固定的套路，看了下卡哥的讲解</p><ul><li>后序数组长度为0, 空节点</li><li>后序数组最后一个元素为父节点元素</li><li>寻找中序数组位置  作切割点</li><li>切中序数组</li><li>切后序数组</li><li>递归处理左区间 右区间</li></ul><div style="position: relative; width: 100%; height: 0;padding-bottom: 100%;"><iframe src="../images/day18/力扣106.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 中序后序建立二叉树</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">buildTree</span><span class="hljs-params">(inorder []<span class="hljs-type">int</span>, postorder []<span class="hljs-type">int</span>)</span></span> *TreeNode &#123;<br><span class="hljs-comment">// 1.后序数组长度为0, 空节点</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(postorder) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 2.后序数组最后一个元素为父节点元素</span><br>rootValue := postorder[<span class="hljs-built_in">len</span>(postorder)<span class="hljs-number">-1</span>]<br>root := &amp;TreeNode&#123;<br>Val:   rootValue,<br>Left:  <span class="hljs-literal">nil</span>,<br>Right: <span class="hljs-literal">nil</span>,<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(postorder) == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> root<br>&#125;<br><span class="hljs-comment">// 3.寻找中序数组位置  作切割点</span><br>index := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> ; index &lt; <span class="hljs-built_in">len</span>(inorder); index++ &#123;<br><span class="hljs-keyword">if</span> inorder[index] == rootValue &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 4.切中序数组</span><br>leftInorder := inorder[:index]<br>rightInorder := inorder[index+<span class="hljs-number">1</span>:]<br><span class="hljs-comment">// 5.切后序数组</span><br>leftPostorder := postorder[:<span class="hljs-built_in">len</span>(leftInorder)]<br>rightPostorder := postorder[<span class="hljs-built_in">len</span>(leftPostorder) : <span class="hljs-built_in">len</span>(leftPostorder)+<span class="hljs-built_in">len</span>(rightInorder)]<br><span class="hljs-comment">// 6.递归处理左区间 右区间</span><br>root.Left = buildTree(leftInorder, leftPostorder)<br>root.Right = buildTree(rightInorder, rightPostorder)<br><span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 前序中序建立二叉树</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">buildTree2</span><span class="hljs-params">(preorder []<span class="hljs-type">int</span>, inorder []<span class="hljs-type">int</span>)</span></span> *TreeNode &#123;<br><span class="hljs-comment">// 1.前序数组为0, 空节点</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(preorder) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 2.前序数组第一个元素为节点元素</span><br>rootValue := preorder[<span class="hljs-number">0</span>]<br>root := &amp;TreeNode&#123;<br>Val:   rootValue,<br>Left:  <span class="hljs-literal">nil</span>,<br>Right: <span class="hljs-literal">nil</span>,<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(preorder) == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> root<br>&#125;<br><span class="hljs-comment">// 3.寻找中序数组位置  作切割点</span><br>index := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> ; index &lt; <span class="hljs-built_in">len</span>(inorder); index++ &#123;<br><span class="hljs-keyword">if</span> inorder[index] == rootValue &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 4.切中序数组</span><br>leftInorder := inorder[:index]<br>rightInorder := inorder[index+<span class="hljs-number">1</span>:]<br><span class="hljs-comment">// 5.切前序数组</span><br>leftPreorder := preorder[<span class="hljs-number">1</span> : <span class="hljs-built_in">len</span>(leftInorder)+<span class="hljs-number">1</span>]<br>rightPreorder := preorder[<span class="hljs-built_in">len</span>(leftPreorder)+<span class="hljs-number">1</span>:]<br><span class="hljs-comment">// 6.递归处理左区间 右区间</span><br>root.Left = buildTree2(leftPreorder, leftInorder)<br>root.Right = buildTree2(rightPreorder, rightInorder)<br><span class="hljs-keyword">return</span> root<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和</title>
    <link href="/post/467977b0.html"/>
    <url>/post/467977b0.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第十七天-110-平衡二叉树、257-二叉树的所有路径、404-左叶子之和"><a href="#代码随想录算法训练营第十七天-110-平衡二叉树、257-二叉树的所有路径、404-左叶子之和" class="headerlink" title="代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和"></a>代码随想录算法训练营第十七天 110.平衡二叉树、257. 二叉树的所有路径、404.左叶子之和</h1><h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a>110. 平衡二叉树</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/balanced-binary-tree/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1Ug411S7my">后序遍历求高度，高度判断是否平衡 | LeetCode：110.平衡二叉树</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由之前的104题：求二叉树最大深度一讲，卡哥提到过深度和高度的区别，结合这道题的视频看懂了。举个例子，我们现在站在地上，看见一幢楼会说：“这楼有多高？”；看见一个坑，会说：“这坑有多深？”。也就是说高度要从下往上看、深度要从上往下看。从下向上自然就需要后序遍历。</p><ol><li>每个叶子节点的高度为1，叶子节点的子节点（也就是两个空节点）高度为0；</li><li>定义左子树高度为<code>leftHeight</code>，左子树递归返回左子树的高度，如果高度为<code>-1</code>则执行<code>return -1</code>；</li><li>定义右子树高度为<code>rightHeight</code>，右子树递归返回右子树的高度，如果高度为<code>-1</code>则执行<code>return -1</code>；</li><li>比较左右子树高度差，差的绝对值小于等于1，说明是平衡二叉树，将最高的子树高度加一，回到2、3步继续。否则不为平衡二叉树，<code>return -1</code>。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 平衡二叉树</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> backTracking(root) != <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-comment">// 返回最大值</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxNum</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> a &gt; b &#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-comment">// 空节点</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-comment">// left child</span><br>leftHeight := backTracking(root.Left)<br><span class="hljs-keyword">if</span> leftHeight == <span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-comment">// right child</span><br>rightHeight := backTracking(root.Right)<br><span class="hljs-keyword">if</span> rightHeight == <span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-comment">// 不是平衡二叉树</span><br><span class="hljs-keyword">if</span> rightHeight-leftHeight &gt; <span class="hljs-number">1</span> || rightHeight-leftHeight &lt; <span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> maxNum(rightHeight, leftHeight) + <span class="hljs-number">1</span>  <span class="hljs-comment">//高度加一继续返回</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a>257. 二叉树的所有路径</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/binary-tree-paths/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1ZG411G7Dh">递归中带着回溯，你感受到了没？| LeetCode：257. 二叉树的所有路径</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>回溯算法的比较典型的应用，要输出所有的路径，应该使用先序遍历。走到叶子结点后将路径添加至最后的结果。</p><p>卡哥回溯三部曲：</p><ol><li>确立函数参数和返回值：由于是Go语言，全局变量在LeetCode中会出现一些问题，具体可以查看这篇我的这篇博客<a href="https://promisewang.github.io/post/bc862a56.html#%E9%81%87%E5%88%B0%E6%9C%80%E5%A4%B4%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81">Go语言刷LeetCode使用全局变量的问题</a>。函数变量包括：<ul><li>根节点<code>root</code></li><li>这道题的结果<code>result</code></li><li>一条路径<code>path</code></li></ul></li><li>确定终止条件：当前节点为子节点时，保存<code>path</code>到<code>result</code>，<code>return</code></li><li>单次递归：左节点不为空，向左递归；右节点不为空；向右递归</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">binaryTreePaths</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">string</span> &#123;<br>result := []<span class="hljs-type">string</span>&#123;&#125;<br>path := []<span class="hljs-type">int</span>&#123;&#125;<br>getResult(root, &amp;result, &amp;path)<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getResult</span><span class="hljs-params">(root *TreeNode, result *[]<span class="hljs-type">string</span>, path *[]<span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-comment">// 终止条件，并且将切片类型的path按要求写成字符串，添加到result中。</span><br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val) <span class="hljs-comment">//添加新的节点</span><br><span class="hljs-keyword">var</span> temp <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(*path) == <span class="hljs-number">1</span> &#123;<br>temp = <span class="hljs-string">&quot;1&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>temp = strconv.Itoa((*path)[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(*path); i++ &#123;<br>temp += <span class="hljs-string">&quot;-&gt;&quot;</span> + strconv.Itoa((*path)[i])<br>&#125;<br>&#125;<br>*path = (*path)[:<span class="hljs-built_in">len</span>(*path)<span class="hljs-number">-1</span>]<br>*result = <span class="hljs-built_in">append</span>(*result, temp)<br><span class="hljs-keyword">return</span><br>&#125;<br>    <span class="hljs-comment">// 左节点不为空，向左递归</span><br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>getResult(root.Left, result, path)<br>*path = (*path)[:<span class="hljs-built_in">len</span>(*path)<span class="hljs-number">-1</span>]<br>&#125;<br>    <br>    <span class="hljs-comment">// 右节点不为空，向右递归</span><br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>*path = <span class="hljs-built_in">append</span>(*path, root.Val)<br>getResult(root.Right, result, path)<br>*path = (*path)[:<span class="hljs-built_in">len</span>(*path)<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/sum-of-left-leaves/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C.html">代码随想录(https://programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1GY4y1K7z8">二叉树的题目中，总有一些规则让你找不到北 | LeetCode：404.左叶子之和</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>要判断的是所有左叶子的和，选择先序遍历。递归三部曲请出来：</p><ol><li>确立函数参数和返回值：此处没有用全局变量，需要使用一个指针存放和。如何判断是左节点，我这里引入一个变量<code>flag</code>为<code>bool</code>类型。如果向左节点递归，则为<code>true</code>，否则为<code>false</code>。这样当到达叶子节点时候判断<code>flag</code>值就能知道是不是左叶子<ul><li>根节点<code>root</code></li><li>和指针<code>sum</code></li><li>是否为左节点<code>flag</code></li></ul></li><li>确定终止条件：如果是叶子节点，并且<code>flag == true</code>，<code>*sum += root.Val</code>，返回。</li><li>单次递归：如果左节点不为空，向左递归，<code>flag = true</code>；如果右结点不为空，向右递归，<code>flag = false</code></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sumOfLeftLeaves</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>sum := <span class="hljs-number">0</span><br>getSum(root, &amp;sum, <span class="hljs-literal">false</span>)<br><span class="hljs-keyword">return</span> sum<br>&#125;<br><br><span class="hljs-comment">// flag为true, 代表左节点; 否则是右结点</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getSum</span><span class="hljs-params">(root *TreeNode, sum *<span class="hljs-type">int</span>, flag <span class="hljs-type">bool</span>)</span></span> &#123; <br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &amp;&amp; flag &#123;<br>*sum += root.Val<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>getSum(root.Left, sum, <span class="hljs-literal">true</span>)<br>&#125;<br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>getSum(root.Right, sum, <span class="hljs-literal">false</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度</title>
    <link href="/post/e2c426b8.html"/>
    <url>/post/e2c426b8.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第十五天-104-二叉树的最大深度、559-n叉树的最大深度"><a href="#代码随想录算法训练营第十五天-104-二叉树的最大深度、559-n叉树的最大深度" class="headerlink" title="代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度"></a>代码随想录算法训练营第十五天 104.二叉树的最大深度、559.n叉树的最大深度</h1><h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">力扣题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html">代码随想录(https://programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1Gd4y1V75u">二叉树的高度和深度有啥区别？究竟用什么遍历顺序？很多录友搞不懂 | 104.二叉树的最大深度</a></p><p>状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>使用递归法，如果递归到叶子节点则返回0，否则使用左右叶子结点继续向下递归，深度加一。取左右结点的最大值</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>层序遍历，看<code>result</code>二维数组的行数</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 递归</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxNum</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> a &gt; b &#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">return</span> maxNum(maxDepth(root.Left), maxDepth(root.Right)) + <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 层序</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth1</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br>temp := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br>temp = <span class="hljs-built_in">append</span>(temp, node.(*TreeNode).Val)<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, temp)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="559-N-叉树的最大深度"><a href="#559-N-叉树的最大深度" class="headerlink" title="559. N 叉树的最大深度"></a>559. N 叉树的最大深度</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/">559. N 叉树的最大深度</a></p><p>状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><p>递归遍历每个子树，叶子节点时候<code>return 0</code>，否则下一层深度加一</p><h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><p>每一层遍历时候入队的不是<code>Left</code>和<code>Right</code>，而是每一个<code>Children[i]</code>节点，最后输出<code>result</code>的大小</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 递归法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxNum</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>     <span class="hljs-keyword">if</span> a &gt; b &#123;<br>         <span class="hljs-keyword">return</span> a<br>     &#125;<br>     <span class="hljs-keyword">return</span> b<br> &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(root *Node)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>depth := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> root.Children &#123;<br>depth = maxNum(depth, maxDepth(v)+<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">return</span> depth<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//层先法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(root *Node)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br><span class="hljs-keyword">var</span> temp []<span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br>temp = <span class="hljs-built_in">append</span>(temp, node.(*Node).Val)<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">len</span>(node.(*Node).Children); j++ &#123;<br><span class="hljs-keyword">if</span> node.(*Node).Children[j] != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*Node).Children[j])<br>&#125;<br>&#125;<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, temp)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">力扣题目链接</a></p><p>状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><h4 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h4><p>使用递归法，递归终止条件如下：到达了叶子节点<code>return 1</code>。到达空节点<code>return 0</code>。分别向左和右结点继续递归，计算更小的层数，当前层递归完成后<code>return 层数加一</code></p><h4 id="方法二-2"><a href="#方法二-2" class="headerlink" title="方法二"></a>方法二</h4><p>使用层序遍历。遍历时如果遇到叶子节点说明到达了最低点，直接<code>return 当前层数</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//递归</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">minNum</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> a &lt; b &#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">minDepth</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br>minN := math.MaxInt32<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>minN = minNum(minDepth(root.Left), minN)<br>&#125;<br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>minN = minNum(minDepth(root.Right), minN)<br>&#125;<br><span class="hljs-keyword">return</span> minN + <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//层序</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">minDepth</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>count++<br>size := queue.Size()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left == <span class="hljs-literal">nil</span> &amp;&amp; node.(*TreeNode).Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> count<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222. 完全二叉树的节点个数"></a>222. 完全二叉树的节点个数</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/count-complete-tree-nodes/">力扣题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0222.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.html#%E6%80%9D%E8%B7%AF">代码随想录(https://programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1eW4y1B7pD">要理解普通二叉树和完全二叉树的区别！ | LeetCode：222.完全二叉树节点的数量</a></p><p>状态：AC</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h4 id="方法一-3"><a href="#方法一-3" class="headerlink" title="方法一"></a>方法一</h4><p>使用前序、中序、后序、前序遍历都可，输出节点个数</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 前序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countNodes</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br>count++<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度、226.翻转二叉树、101.对称二叉树</title>
    <link href="/post/e1408dd4.html"/>
    <url>/post/e1408dd4.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第十四天-102-二叉树的层序遍历、107-二叉树的层次遍历II、199-二叉树的右视图、637-二叉树的层平均值、429-N叉树的层序遍历、515-在每个树行中找最大值、116-填充每个节点的下一个右侧节点指、117-填充每个节点的下一个右侧节点指针II、104-二叉树的最大深度、111-二叉树的最小深度"><a href="#代码随想录算法训练营第十四天-102-二叉树的层序遍历、107-二叉树的层次遍历II、199-二叉树的右视图、637-二叉树的层平均值、429-N叉树的层序遍历、515-在每个树行中找最大值、116-填充每个节点的下一个右侧节点指、117-填充每个节点的下一个右侧节点指针II、104-二叉树的最大深度、111-二叉树的最小深度" class="headerlink" title="代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度"></a>代码随想录算法训练营第十四天 102.二叉树的层序遍历、107.二叉树的层次遍历II、199.二叉树的右视图、637.二叉树的层平均值、429.N叉树的层序遍历、515.在每个树行中找最大值、116.填充每个节点的下一个右侧节点指、117.填充每个节点的下一个右侧节点指针II、104.二叉树的最大深度、111.二叉树的最小深度</h1><blockquote><p>文章讲解：<a href="https://programmercarl.com/0102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html">代码随想录(programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1GY4y1u7b2">讲透二叉树的层序遍历 | 广度优先搜索 | LeetCode：102.二叉树的层序遍历</a></p></blockquote><h2 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">力扣题目链接</a></p><p>状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>层序遍历顾名思义就是要一层一层的输出树的结点，父节点输出后还要将子节点保存一下，到下一层继续使用，这种依次使用，队列的数据结构是最合适的。父节点先入队，将两个子节点依次入队。这一层的父节点入队过后要统计有多少个，为了输出每层分别是谁</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(root *TreeNode)</span></span> [][]<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br>temp := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br>temp = <span class="hljs-built_in">append</span>(temp, node.(*TreeNode).Val)<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, temp)<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="107-二叉树的层序遍历II"><a href="#107-二叉树的层序遍历II" class="headerlink" title="107. 二叉树的层序遍历II"></a>107. 二叉树的层序遍历II</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/">107.二叉树的层次遍历II</a></p><p>状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>基本同上，这次不过要从下向上输出，翻转最后上一题的<code>result</code>即可</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrderBottom</span><span class="hljs-params">(root *TreeNode)</span></span> [][]<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br>temp := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br>temp = <span class="hljs-built_in">append</span>(temp, node.(*TreeNode).Val)<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, temp)<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(result)/<span class="hljs-number">2</span>; i++ &#123;<br>result[i], result[<span class="hljs-built_in">len</span>(result)<span class="hljs-number">-1</span>-i] = result[<span class="hljs-built_in">len</span>(result)<span class="hljs-number">-1</span>-i], result[i]<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199.二叉树的右视图"></a>199.二叉树的右视图</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/binary-tree-right-side-view/">力扣题目链接</a></p><p>状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>将第一次层序遍历的结果使用二维数组逐行写出来，不难发现右视图就是二维数组每一行的最后一个元素</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rightSideView</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> results [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br>temp := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br>temp = <span class="hljs-built_in">append</span>(temp, node.(*TreeNode).Val)<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br>&#125;<br>results = <span class="hljs-built_in">append</span>(results, temp)<br>&#125;<br>result := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> results &#123;<br>result = <span class="hljs-built_in">append</span>(result, v[<span class="hljs-built_in">len</span>(v)<span class="hljs-number">-1</span>])<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a>637.二叉树的层平均值</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/">力扣题目链接</a></p><p>状态：AC</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>层序每一层之后求平均值</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">averageOfLevels</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">float64</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br>sum += node.(*TreeNode).Val<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, <span class="hljs-type">float64</span>(sum)/<span class="hljs-type">float64</span>(size))<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="429-N叉树的层序遍历"><a href="#429-N叉树的层序遍历" class="headerlink" title="429.N叉树的层序遍历"></a>429.N叉树的层序遍历</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/">力扣题目链接</a></p><p>状态：AC</p></blockquote><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>层序添加子节点改为循环遍历<code>Children</code>数组即可</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;<br>Val      <span class="hljs-type">int</span><br>Children []*Node<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(root *Node)</span></span> [][]<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br>temp := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br>temp = <span class="hljs-built_in">append</span>(temp, node.(*Node).Val)<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">len</span>(node.(*Node).Children); j++ &#123;<br><span class="hljs-keyword">if</span> node.(*Node).Children[j] != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*Node).Children[j])<br>&#125;<br>&#125;<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, temp)<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="515-在每个树行中找最大值"><a href="#515-在每个树行中找最大值" class="headerlink" title="515.在每个树行中找最大值"></a>515.在每个树行中找最大值</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/">力扣题目链接</a></p><p>状态：AC</p></blockquote><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>每一层找最大，模版依旧</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">largestValues</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br>maxNum := math.MinInt32<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br><span class="hljs-keyword">if</span> node.(*TreeNode).Val &gt; maxNum &#123;<br>maxNum = node.(*TreeNode).Val<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, maxNum)<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="116-填充每个节点的下一个右侧节点指针、-117-填充每个节点的下一个右侧节点指针II"><a href="#116-填充每个节点的下一个右侧节点指针、-117-填充每个节点的下一个右侧节点指针II" class="headerlink" title="116.填充每个节点的下一个右侧节点指针、 117.填充每个节点的下一个右侧节点指针II"></a>116.填充每个节点的下一个右侧节点指针、 117.填充每个节点的下一个右侧节点指针II</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/">力扣题目链接</a></p><p>状态：AC</p></blockquote><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>每行遍历出来看做一个链表，两道题代码思路一样</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-comment">// 与117题代码相同</span><br><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;<br>Val   <span class="hljs-type">int</span><br>Left  *Node<br>Right *Node<br>Next  *Node<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Connect</span><span class="hljs-params">(root *Node)</span></span> *Node &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>queue := arrayqueue.New()<br>root.Next = <span class="hljs-literal">nil</span><br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br><span class="hljs-keyword">var</span> p *Node = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br><br><span class="hljs-keyword">if</span> node.(*Node).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*Node).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*Node).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*Node).Right)<br>&#125;<br><span class="hljs-keyword">if</span> p == <span class="hljs-literal">nil</span> &#123;<br>p = node.(*Node)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>p.Next = node.(*Node)<br>p = p.Next<br>&#125;<br>&#125;<br>p.Next = <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> root<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">力扣题目链接</a></p><p>状态：AC</p></blockquote><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>使用递归法，如果递归到叶子节点则返回0，否则使用左右叶子结点继续向下递归，深度加一。取左右结点的最大值</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>层序遍历，看<code>result</code>二维数组的行数</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 递归</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxNum</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> a &gt; b &#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">return</span> maxNum(maxDepth(root.Left), maxDepth(root.Right)) + <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 层序</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth1</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>size := queue.Size()<br>temp := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br>temp = <span class="hljs-built_in">append</span>(temp, node.(*TreeNode).Val)<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, temp)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">力扣题目链接</a></p><p>状态：AC</p></blockquote><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><p>使用递归法，递归终止条件如下：到达了叶子节点<code>return 1</code>。到达空节点<code>return 0</code>。分别向左和右结点继续递归，计算更小的层数，当前层递归完成后<code>return 层数加一</code></p><h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><p>使用层序遍历。遍历时如果遇到叶子节点说明到达了最低点，直接<code>return 当前层数</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//递归</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">minNum</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> a &lt; b &#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">minDepth</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br>minN := math.MaxInt32<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>minN = minNum(minDepth(root.Left), minN)<br>&#125;<br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>minN = minNum(minDepth(root.Right), minN)<br>&#125;<br><span class="hljs-keyword">return</span> minN + <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//层序</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">minDepth</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>queue := arrayqueue.New()<br>queue.Enqueue(root)<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> !queue.Empty() &#123;<br>count++<br>size := queue.Size()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>node, _ := queue.Dequeue()<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>queue.Enqueue(node.(*TreeNode).Right)<br>&#125;<br><span class="hljs-keyword">if</span> node.(*TreeNode).Left == <span class="hljs-literal">nil</span> &amp;&amp; node.(*TreeNode).Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> count<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/invert-binary-tree/">力扣题目链接</a></p><p>状态：AC</p></blockquote><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><p>交换当前结点左右子节点，向下递归</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">invertTree</span><span class="hljs-params">(root *TreeNode)</span></span> *TreeNode &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> root<br>&#125;<br>root.Left, root.Right = root.Right, root.Left<br>invertTree(root.Left)<br>invertTree(root.Right)<br><span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/symmetric-tree/">力扣题目链接</a></p><p>文章链接：<a href="https://programmercarl.com/0101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.html">代码随想录(programmercarl.com)</a></p><p>视频链接：<a href="https://www.bilibili.com/video/BV1ue4y1Y7Mf">同时操作两个二叉树 | LeetCode：101. 对称二叉树</a></p><p>状态：AC</p></blockquote><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><p><font color="red">错误思路如下</font></p><p>最开始想的是输出中序遍历的结果，根节点一定是最中间的数，比较两端是否对称即可。但是这种情况没考虑到</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//      1</span><br><span class="hljs-comment">//     / \</span><br><span class="hljs-comment">//    2   2</span><br><span class="hljs-comment">//   /   /</span><br><span class="hljs-comment">//  2   2</span><br></code></pre></td></tr></table></figure><p>所以这个思路是错的</p><hr><p><font color="green">正确思路如下</font></p><p>用后序遍历和“伪后序遍历”依次比较子树。后序遍历是左右根，伪后序比那里是右左根，这样可以比较相同的结点。</p><p>使用递归需要做如下判断</p><ul><li>递归函数的构造<ul><li>比较左右结点，传参是两个节点<code>func compare(left, right *TreeNode) bool</code></li></ul></li><li>递归终止条件<ul><li>两个节点均为空节点，对称<code>return true</code></li><li>左空右不空，或，左不空右空，不对称<code>return false</code></li><li>左右均不空，但是值不同，不对称<code>return false</code></li></ul></li><li>单次递归逻辑<ul><li>左节点的左 和 右结点的右  向下递归</li><li>且 左节点的右 和 右结点的左  向下递归</li><li>且二者值均为<code>true</code></li></ul></li></ul><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compare</span><span class="hljs-params">(left, right *TreeNode)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> left == <span class="hljs-literal">nil</span> &amp;&amp; right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> left != <span class="hljs-literal">nil</span> &amp;&amp; right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> left == <span class="hljs-literal">nil</span> &amp;&amp; right != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> left.Val != right.Val &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> compare(left.Left, right.Right) &amp;&amp; compare(left.Right, right.Left)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> compare(root.Left, root.Right)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历</title>
    <link href="/post/5d0ef500.html"/>
    <url>/post/5d0ef500.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第十三天-144-二叉树的前序遍历、145-二叉树的后序遍历、94-二叉树的中序遍历"><a href="#代码随想录算法训练营第十三天-144-二叉树的前序遍历、145-二叉树的后序遍历、94-二叉树的中序遍历" class="headerlink" title="代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历"></a>代码随想录算法训练营第十三天 144.二叉树的前序遍历、145.二叉树的后序遍历、94.二叉树的中序遍历</h1><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><blockquote><p>  题目链接：</p><ul><li><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">144.二叉树的前序遍历</a></li><li><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">145.二叉树的后序遍历</a></li><li><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94.二叉树的中序遍历</a></li></ul><p>  文章讲解：<a href="https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1Wh411S7xt">每次写递归都要靠直觉？ 这次带你学透二叉树的递归遍历！</a></p><p>  状态：AC</p></blockquote><h3 id="递归思路"><a href="#递归思路" class="headerlink" title="递归思路"></a>递归思路</h3><p>递归还是比较简单的，直接按照遍历规则写递归代码即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 递归前序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">int</span><br>getResultPreorder(root, &amp;result)<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getResultPreorder</span><span class="hljs-params">(root *TreeNode, result *[]<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>*result = <span class="hljs-built_in">append</span>(*result, root.Val)<br>getResultPreorder(root.Left, result)<br>getResultPreorder(root.Right, result)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 递归后序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">int</span><br>getResultPostorder(root, &amp;result)<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getResultPostorder</span><span class="hljs-params">(root *TreeNode, result *[]<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>getResultPostorder(root.Left, result)<br>getResultPostorder(root.Right, result)<br>*result = <span class="hljs-built_in">append</span>(*result, root.Val)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 递归中序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">int</span><br>getResultInorder(root, &amp;result)<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getResultInorder</span><span class="hljs-params">(root *TreeNode, result *[]<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>getResultInorder(root.Left, result)<br>*result = <span class="hljs-built_in">append</span>(*result, root.Val)<br>getResultInorder(root.Right, result)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="非递归思路"><a href="#非递归思路" class="headerlink" title="非递归思路"></a>非递归思路</h3><p>非递归需要借助栈来实现，每次存放树的左右节点（若存在），并判断根节点应该在什么时候存入结果数组。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 非递归前序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br>stack := arraystack.New()<br>result := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br>stack.Push(root)<br><span class="hljs-keyword">for</span> !stack.Empty() &#123;<br>value, _ := stack.Pop()<br>result = <span class="hljs-built_in">append</span>(result, value.(*TreeNode).Val)<br><span class="hljs-keyword">if</span> value.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>stack.Push(value.(*TreeNode).Right)<br>&#125;<br><span class="hljs-keyword">if</span> value.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>stack.Push(value.(*TreeNode).Left)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 非递归后序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br>stack := arraystack.New()<br>result := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br>stack.Push(root)<br><span class="hljs-keyword">for</span> !stack.Empty() &#123;<br>value, _ := stack.Pop()<br>result = <span class="hljs-built_in">append</span>(result, value.(*TreeNode).Val)<br><span class="hljs-keyword">if</span> value.(*TreeNode).Left != <span class="hljs-literal">nil</span> &#123;<br>stack.Push(value.(*TreeNode).Left)<br>&#125;<br><span class="hljs-keyword">if</span> value.(*TreeNode).Right != <span class="hljs-literal">nil</span> &#123;<br>stack.Push(value.(*TreeNode).Right)<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(result)/<span class="hljs-number">2</span>; i++ &#123;<br>result[i], result[<span class="hljs-built_in">len</span>(result)<span class="hljs-number">-1</span>-i] = result[<span class="hljs-built_in">len</span>(result)<span class="hljs-number">-1</span>-i], result[i]<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 非递归中序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InorderTraversal1</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br>stack := arraystack.New()<br>result := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br>p := root<br><span class="hljs-keyword">for</span> !stack.Empty() || p != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> p != <span class="hljs-literal">nil</span> &#123;<br>stack.Push(p)<br>p = p.Left<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>node, _ := stack.Pop()<br>p = node.(*TreeNode)<br>result = <span class="hljs-built_in">append</span>(result, p.Val)<br>p = p.Right<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。</title>
    <link href="/post/9ab3b9d2.html"/>
    <url>/post/9ab3b9d2.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第十二天-239-滑动窗口最大值、347-前K个高频元素。"><a href="#代码随想录算法训练营第十二天-239-滑动窗口最大值、347-前K个高频元素。" class="headerlink" title="代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。"></a>代码随想录算法训练营第十二天 239.滑动窗口最大值、347.前K个高频元素。</h1><h2 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239.滑动窗口最大值"></a>239.滑动窗口最大值</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/sliding-window-maximum/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1XS4y1p7qj">单调队列正式登场！| LeetCode：239. 滑动窗口最大值</a></p><p>  状态：TLE</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>遍历每个滑动窗口（看作一个队列），升序排序后取最大（复制一段新的数组，在新的里面排序）。时间复杂度为O(n^2log n)。超时</p><h4 id="方法二（卡哥讲解）"><a href="#方法二（卡哥讲解）" class="headerlink" title="方法二（卡哥讲解）"></a>方法二（卡哥讲解）</h4><ol><li>准备一个自定义的双向队列数据结构，让其中的<code>front</code>端保持最大值，并且重构<code>Pop()</code>和<code>Push()</code>操作。</li><li>先将前K的元素<code>Push()</code>入队，但是要进行判断。如果后入队的元素大于之前入队的元素，那么之前的元素<code>PopBack()</code>。可以保持<code>front</code>端一直为最大。</li><li><code>Pop()</code>除了最大值的所有元素</li><li><code>Push()</code>一个新的元素</li><li><code>GetMaxValue()</code>，并且加入到结果切片中</li><li>重复3~5直至<code>nums</code>结尾</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="重构两个函数，新增功能GetMaxValue"><a href="#重构两个函数，新增功能GetMaxValue" class="headerlink" title="重构两个函数，新增功能GetMaxValue()"></a>重构两个函数，新增功能GetMaxValue()</h4><ul><li><code>GetMaxValue()</code>：会保持在队列<code>front</code>的位置，可以使用<code>Front()</code>操作取代。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Deque)</span></span> Front() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> this.queue[<span class="hljs-number">0</span>]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>Pop()</code>：出队时，只有一种情况，旧的最大值不在新的滑动窗口内，旧的最大值出队（切片舍去第一个元素）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Deque)</span></span> Pop(value <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">if</span> !this.Empty() &amp;&amp; value == this.Front() &#123;<br>this.queue = this.queue[<span class="hljs-number">1</span>:]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>Push()</code>：入队时，如果入队的值<code>value</code>大于队列<code>back</code>位置的元素，让该元素<code>PopBack()</code>（切片舍去最后一个元素）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Deque)</span></span> Push(value <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">for</span> !this.Empty() &amp;&amp; value &gt; this.Back() &#123;<br>this.queue = this.queue[:<span class="hljs-built_in">len</span>(this.queue)<span class="hljs-number">-1</span>]<br>&#125;<br>this.queue = <span class="hljs-built_in">append</span>(this.queue, value)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Deque <span class="hljs-keyword">struct</span> &#123;<br>queue []<span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span></span> *Deque &#123;<br><span class="hljs-keyword">return</span> &amp;Deque&#123;queue: <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>)&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Deque)</span></span> Front() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> this.queue[<span class="hljs-number">0</span>]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Deque)</span></span> Back() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> this.queue[<span class="hljs-built_in">len</span>(this.queue)<span class="hljs-number">-1</span>]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Deque)</span></span> Empty() <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(this.queue) == <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Deque)</span></span> Push(value <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">for</span> !this.Empty() &amp;&amp; value &gt; this.Back() &#123;<br>this.queue = this.queue[:<span class="hljs-built_in">len</span>(this.queue)<span class="hljs-number">-1</span>]<br>&#125;<br>this.queue = <span class="hljs-built_in">append</span>(this.queue, value)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Deque)</span></span> Pop(value <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">if</span> !this.Empty() &amp;&amp; value == this.Front() &#123;<br>this.queue = this.queue[<span class="hljs-number">1</span>:]<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>deque := Constructor()<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; k; i++ &#123;<br>deque.Push(nums[i])<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, deque.Front())<br><span class="hljs-keyword">for</span> i := k; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;<br>deque.Pop(nums[i-k])<br>deque.Push(nums[i])<br>result = <span class="hljs-built_in">append</span>(result, deque.Front())<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="347-前K个高频元素"><a href="#347-前K个高频元素" class="headerlink" title="347. 前K个高频元素"></a>347. 前K个高频元素</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/top-k-frequent-elements/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1Xg41167Lz">优先级队列正式登场！大顶堆、小顶堆该怎么用？| LeetCode：347.前 K 个高频元素</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>构建键值对&lt;key, value&gt;，<code>key</code>为数字，<code>value</code>为该数字出现的次数。</li><li>生成优先队列，优先级为<code>value</code></li><li>取优先队列的前K个元素</li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 优先队列中的条目</span><br><span class="hljs-keyword">type</span> Element <span class="hljs-keyword">struct</span> &#123;<br>Num     <span class="hljs-type">int</span><br>Count   <span class="hljs-type">int</span><br>&#125;<br><span class="hljs-comment">// 比较器函数，根据Count降序</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">byPriority</span><span class="hljs-params">(a, b <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">int</span> &#123;<br>priorityA := a.(Element).Count<br>priorityB := b.(Element).Count<br><span class="hljs-keyword">return</span> -utils.IntComparator(priorityA, priorityB) <span class="hljs-comment">// &quot;-&quot; 代表降序</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">topKFrequent</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-comment">// 构建键值对</span><br>    maps := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums &#123;<br>maps[v]++<br>&#125;<br>    <span class="hljs-comment">// 初始化优先队列</span><br>pq := priorityqueue.NewWith(byPriority)<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> maps &#123;<br>pq.Enqueue(Element&#123;<br>Num:     k,<br>Count: v,<br>&#125;)<br>&#125;<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">int</span><br>    <span class="hljs-comment">// 取前k个元素保存到result中</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; k; i++ &#123;<br>value, _ := pq.Dequeue()<br>result = <span class="hljs-built_in">append</span>(result, value.(Element).Num)<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【study】Leetcode中Go语言第三方包</title>
    <link href="/post/2360e101.html"/>
    <url>/post/2360e101.html</url>
    
    <content type="html"><![CDATA[<h1 id="【study】Leetcode中Go语言第三方包"><a href="#【study】Leetcode中Go语言第三方包" class="headerlink" title="【study】Leetcode中Go语言第三方包"></a>【study】Leetcode中Go语言第三方包</h1><p>在刷Leetcode时，发现Go并不像其他语言有原生的栈、队列等等结构。虽然很多操作都可以用<strong>切片</strong>或<strong>数组</strong>代替，但还是想知道如果自己想使用这些数据结构应该怎么办。</p><p><img src="/../images/%E3%80%90study%E3%80%91Leetcode%E4%B8%ADGo%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/Leetcode%E4%B8%AD%E7%9A%84Go.png" alt="Leetcode中的Go"></p><p><img src="/../images/%E3%80%90study%E3%80%91Leetcode%E4%B8%ADGo%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/Leetcode%E6%94%AF%E6%8C%81Go%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93.png" alt="Leetcode支持Go的第三方库"></p><p><a href="https://github.com/emirpasic/gods/tree/v1.18.1">支持的库的连接</a></p><p>包含的数据结构如下</p><ul><li>Containers<ul><li>Lists<ul><li>ArrayList</li><li>SinglyLinkedList</li><li>DoublyLinkedList</li></ul></li><li>Sets<ul><li>HashSet</li><li>TreeSet</li><li>LinkedHashSet</li></ul></li><li>Stacks<ul><li>LinkedListStack</li><li>ArrayStack</li></ul></li><li>Maps<ul><li>HashMap</li><li>TreeMap</li><li>LinkedHashMap</li><li>HashBidiMap</li><li>TreeBidiMap</li></ul></li><li>Trees<ul><li>RedBlackTree</li><li>AVLTree</li><li>BTree</li><li>BinaryHeap</li></ul></li><li>Queues<ul><li>LinkedListQueue</li><li>ArrayQueue</li><li>CircularBuffer</li><li>PriorityQueue</li></ul></li></ul></li><li>Functions<ul><li>Comparator</li><li>Iterator<ul><li>IteratorWithIndex</li><li>IteratorWithKey</li><li>ReverseIteratorWithIndex</li><li>ReverseIteratorWithKey</li></ul></li><li>Enumerable<ul><li>EnumerableWithIndex</li><li>EnumerableWithKey</li></ul></li><li>Serialization<ul><li>JSONSerializer</li><li>JSONDeserializer</li></ul></li><li>Sort</li><li>Container</li></ul></li><li>Appendix</li></ul><p>所有数据结构都依赖<code>Container</code>接口，调用起来也很方便</p><h3 id="以栈举例"><a href="#以栈举例" class="headerlink" title="以栈举例"></a>以栈举例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/emirpasic/gods/stacks/arraystack&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    stack = arraystack.New()  <span class="hljs-comment">// 初始化一个栈</span><br>    stack.Push(<span class="hljs-number">1</span>)  <span class="hljs-comment">// 入栈</span><br>    value, _ := stack.Peek()  <span class="hljs-comment">// 查看站定元素</span><br>    value, _ := stack.Pop()  <span class="hljs-comment">// 出栈</span><br>    size := stack.Size()  <span class="hljs-comment">// 栈的大小</span><br>    isEmpty := stack.Empty()  <span class="hljs-comment">// 是否为空栈</span><br>    stack.Clear()  <span class="hljs-comment">// 清空栈</span><br>&#125;<br></code></pre></td></tr></table></figure><p>更多操作可以看github中的<code>README.md</code>文件或者看源码</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Study</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。</title>
    <link href="/post/bdbe1e6e.html"/>
    <url>/post/bdbe1e6e.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第十一天-20-有效的括号、1047-删除字符串中的所有相邻重复项、150-逆波兰表达式求值。"><a href="#代码随想录算法训练营第十一天-20-有效的括号、1047-删除字符串中的所有相邻重复项、150-逆波兰表达式求值。" class="headerlink" title="代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。"></a>代码随想录算法训练营第十一天 20. 有效的括号、1047. 删除字符串中的所有相邻重复项、150. 逆波兰表达式求值。</h1><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/valid-parentheses/">力扣题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html">代码随想录(programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1AF411w78g">栈的拿手好戏！| LeetCode：20. 有效的括号</a></p><p>状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目保证了输入的字符串只有括号。遇到左括号入栈，遇到右括号出栈，但是要比较出栈的元素和当前的右括号是否匹配，不匹配直接<code>return false</code>。最终判断栈是否为空即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>stack := arraystack.New()<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br><span class="hljs-keyword">switch</span> v &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>stack.Push(v)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>temp, _ := stack.Pop()<br><span class="hljs-keyword">if</span> temp == <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:<br>temp, _ := stack.Pop()<br><span class="hljs-keyword">if</span> temp == <span class="hljs-string">&#x27;[&#x27;</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>temp, _ := stack.Pop()<br><span class="hljs-keyword">if</span> temp == <span class="hljs-string">&#x27;&#123;&#x27;</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> stack.Empty()<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047.删除字符串中的所有相邻重复项"></a>1047.删除字符串中的所有相邻重复项</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">力扣题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.html">代码随想录(programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV12a411P7mw">栈的好戏还要继续！| LeetCode：1047. 删除字符串中的所有相邻重复项</a></p><p>状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>将每个元素与栈顶元素进行比较（前提是栈非空、如果空直接入栈即可），比较相等元素出栈。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> s<br>&#125;<br>byteString := []<span class="hljs-type">rune</span>(s)<br>stack := arraystack.New()<br>stack.Push(byteString[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(byteString); i++ &#123;<br>temp, _ := stack.Peek()<br><span class="hljs-keyword">if</span> temp == byteString[i] &#123;<br>stack.Pop()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>stack.Push(byteString[i])<br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> newByte []<span class="hljs-type">rune</span><br>length := stack.Size()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; length; i++ &#123;<br>temp, _ := stack.Pop()<br>temp1 := temp.(<span class="hljs-type">rune</span>)<br>newByte = <span class="hljs-built_in">append</span>(newByte, temp1)<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(newByte)/<span class="hljs-number">2</span>; i++ &#123;<br>newByte[i], newByte[<span class="hljs-built_in">len</span>(newByte)<span class="hljs-number">-1</span>-i] = newByte[<span class="hljs-built_in">len</span>(newByte)<span class="hljs-number">-1</span>-i], newByte[i]<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(newByte)<br>&#125;<br></code></pre></td></tr></table></figure><p>此处用的是一个真正意义上的数据结构的栈，存储的是单个字符，写起来还是很长，看了题解之后发现只用字符数组即可，改正后代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> stack []<span class="hljs-type">rune</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &amp;&amp; stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] == v &#123;<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, v)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(stack)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="150-逆波兰表达式"><a href="#150-逆波兰表达式" class="headerlink" title="150.逆波兰表达式"></a>150.逆波兰表达式</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">力扣题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.html">代码随想录(programmercarl.com)</a></p><p>视频讲解：栈的最后表演！ | LeetCode：150. 逆波兰表达式求值](<a href="https://www.bilibili.com/video/BV1kd4y1o7on">https://www.bilibili.com/video/BV1kd4y1o7on</a>)</p><p>状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>明白题意之后，发现每次到运算符时候需要将前面两个数进行计算，如：<code>[&quot;a&quot;, &quot;b&quot;, &quot;+&quot;]</code>运算结果是<code>a+b</code>。不难想到要使用栈。</p><p>先将字符串数组转换为数字，可以成功转换则入栈，否则出栈两个元素，并且将两个元素相加之后再重新入栈。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">EvalRPN</span><span class="hljs-params">(tokens []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>stack := arraystack.New()<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> tokens &#123;<br>num, err := strconv.Atoi(v)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;  <span class="hljs-comment">// 如果成功转换数字</span><br>stack.Push(num)<br>&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 否则计算后重新入栈</span><br>b, _ := stack.Pop()<br>a, _ := stack.Pop()<br><span class="hljs-keyword">if</span> v == <span class="hljs-string">&quot;+&quot;</span> &#123;<br>stack.Push(a.(<span class="hljs-type">int</span>) + b.(<span class="hljs-type">int</span>))<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> v == <span class="hljs-string">&quot;-&quot;</span> &#123;<br>stack.Push(a.(<span class="hljs-type">int</span>) - b.(<span class="hljs-type">int</span>))<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> v == <span class="hljs-string">&quot;*&quot;</span> &#123;<br>stack.Push(a.(<span class="hljs-type">int</span>) * b.(<span class="hljs-type">int</span>))<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> v == <span class="hljs-string">&quot;/&quot;</span> &#123;<br>stack.Push(a.(<span class="hljs-type">int</span>) / b.(<span class="hljs-type">int</span>))<br>&#125;<br>&#125;<br>&#125;<br>result, _ := stack.Peek()  <span class="hljs-comment">// 此刻的栈顶为结果</span><br><span class="hljs-keyword">return</span> result.(<span class="hljs-type">int</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。</title>
    <link href="/post/a8d0ca77.html"/>
    <url>/post/a8d0ca77.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第十天-232-用栈实现队列、225-用队列实现栈。"><a href="#代码随想录算法训练营第十天-232-用栈实现队列、225-用队列实现栈。" class="headerlink" title="代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。"></a>代码随想录算法训练营第十天 232.用栈实现队列、225. 用队列实现栈。</h1><h2 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232.用栈实现队列"></a>232.用栈实现队列</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/implement-queue-using-stacks/">力扣题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html">代码随想录(programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1nY4y1w7VC">栈的基本操作！ | LeetCode：232.用栈实现队列</a></p><p>状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>初始化两个栈，一个作为主栈<code>Stack1</code>、一个作为副栈<code>Stack2</code></li><li>主栈存放数据、副栈临时放数据</li><li><code>Push</code>操作：将数据放入<code>Stack1</code>中</li><li><code>Pop</code>操作：<ul><li>将<code>Stack1</code>中所有元素退栈，并入栈<code>Stack2</code>。</li><li>将<code>Stack2</code>的栈顶元素出栈</li><li>将<code>Stack2</code>中所有元素退栈，并入栈<code>Stack1</code>。</li></ul></li><li><code>Peek</code>操作：<ul><li>将<code>Stack1</code>中所有元素退栈，并入栈<code>Stack2</code>。</li><li>取<code>Stack2</code>的栈顶元素</li><li>将<code>Stack2</code>中所有元素退栈，并入栈<code>Stack1</code>。</li></ul></li><li><code>Empty</code>操作：<ul><li>查看<code>Stack1</code>是否为空即可</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyQueue <span class="hljs-keyword">struct</span> &#123;<br>Stack1 arraystack.Stack<br>Stack2 arraystack.Stack<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span></span> MyQueue &#123;<br><span class="hljs-keyword">return</span> MyQueue&#123;<br>Stack1: *arraystack.New(),<br>Stack2: *arraystack.New(),<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span></span> Push(x <span class="hljs-type">int</span>) &#123;<br>this.Stack1.Push(x)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span></span> Pop() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">for</span> !this.Stack1.Empty() &#123;<br><span class="hljs-keyword">if</span> v, ok := this.Stack1.Pop(); ok &#123;<br>this.Stack2.Push(v)<br>&#125;<br>&#125;<br>value, _ := this.Stack2.Pop()<br><span class="hljs-keyword">for</span> !this.Stack2.Empty() &#123;<br><span class="hljs-keyword">if</span> v, ok := this.Stack2.Pop(); ok &#123;<br>this.Stack1.Push(v)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> value.(<span class="hljs-type">int</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span></span> Peek() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">for</span> !this.Stack1.Empty() &#123;<br><span class="hljs-keyword">if</span> v, ok := this.Stack1.Pop(); ok &#123;<br>this.Stack2.Push(v)<br>&#125;<br>&#125;<br>value, _ := this.Stack2.Peek()<br><span class="hljs-keyword">for</span> !this.Stack2.Empty() &#123;<br><span class="hljs-keyword">if</span> v, ok := this.Stack2.Pop(); ok &#123;<br>this.Stack1.Push(v)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> value.(<span class="hljs-type">int</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span></span> Empty() <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> this.Stack1.Empty()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/implement-stack-using-queues/">力扣题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html">代码随想录(programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1Fd4y1K7sm">队列的基本操作！ | LeetCode：225. 用队列实现栈</a></p><p>状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>初始化一个队列<code>Queue1</code></li><li>主栈存放数据、副栈临时放数据</li><li><code>Push</code>操作：将数据入队<code>Queue1</code></li><li><code>Pop</code>操作：<ul><li>将<code>Queue1</code>前<code>n-1</code>个元素出队，随后入队在队尾</li><li>最后一个元素出队，返回</li></ul></li><li><code>Top</code>操作：<ul><li>将<code>Queue</code>每个出队，随后入队在队尾</li><li>如果是最后一个元素出队，保存该值，并入队</li><li>返回那个值</li></ul></li><li><code>Empty</code>操作：<ul><li>查看<code>Queue1</code>是否为空即可</li></ul></li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyStack <span class="hljs-keyword">struct</span> &#123;<br>Queue1 arrayqueue.Queue<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span></span> MyStack &#123;<br><span class="hljs-keyword">return</span> MyStack&#123;<br>Queue1: *arrayqueue.New(),<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyStack)</span></span> Push(x <span class="hljs-type">int</span>) &#123;<br>this.Queue1.Enqueue(x)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyStack)</span></span> Pop() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; this.Queue1.Size()<span class="hljs-number">-1</span>; i++ &#123;<br>v, _ := this.Queue1.Dequeue()<br>value := v.(<span class="hljs-type">int</span>)<br>this.Queue1.Enqueue(value)<br>&#125;<br>v, _ := this.Queue1.Dequeue()<br>value := v.(<span class="hljs-type">int</span>)<br><span class="hljs-keyword">return</span> value<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyStack)</span></span> Top() <span class="hljs-type">int</span> &#123;<br>top := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; this.Queue1.Size(); i++ &#123;<br>v, _ := this.Queue1.Dequeue()<br>value := v.(<span class="hljs-type">int</span>)<br>this.Queue1.Enqueue(value)<br><span class="hljs-keyword">if</span> i == this.Queue1.Size()<span class="hljs-number">-1</span> &#123;<br>top = value<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> top<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyStack)</span></span> Empty() <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> this.Queue1.Empty()<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MyStack object will be instantiated and called as such:</span><br><span class="hljs-comment"> * obj := Constructor();</span><br><span class="hljs-comment"> * obj.Push(x);</span><br><span class="hljs-comment"> * param_2 := obj.Pop();</span><br><span class="hljs-comment"> * param_3 := obj.Top();</span><br><span class="hljs-comment"> * param_4 := obj.Empty();</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串</title>
    <link href="/post/369230e4.html"/>
    <url>/post/369230e4.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第九天-28-实现-strStr-。459-重复的子字符串"><a href="#代码随想录算法训练营第九天-28-实现-strStr-。459-重复的子字符串" class="headerlink" title="代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串"></a>代码随想录算法训练营第九天 28. 实现 strStr()。459.重复的子字符串</h1><h2 id="28-实现strStr"><a href="#28-实现strStr" class="headerlink" title="28.实现strStr()"></a>28.实现strStr()</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：</p><ul><li><a href="https://www.bilibili.com/video/BV1PD4y1o7nd/">帮你把KMP算法学个通透！B站（理论篇）</a></li><li><a href="https://www.bilibili.com/video/BV1M5411j7Xx">帮你把KMP算法学个通透！（求next数组代码篇）</a></li></ul><p>  状态：看过视频之后AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>具体KMP算法原理看卡哥的视频，讲的很好。</p><h4 id="KMP中匹配的过程"><a href="#KMP中匹配的过程" class="headerlink" title="KMP中匹配的过程"></a>KMP中匹配的过程</h4><p>KMP算法，匹配过程放入到一个小视频当中，每个画面持续3秒。好多视频讲解都是“移动模式串”来讲，自己写代码时候有点蒙，所以自己做了个小动图，不使用“移动”来呈现。</p><div style="position: relative; width: 100%; height: 100%;padding-bottom: 100%;"><iframe src="../images/day09/匹配.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h4 id="Next数组构建过程"><a href="#Next数组构建过程" class="headerlink" title="Next数组构建过程"></a>Next数组构建过程</h4><div style="position: relative; width: 100%; height: 0;padding-bottom: 100%;"><iframe src="../images/day09/next数组构建.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h4 id="Next数组说明"><a href="#Next数组说明" class="headerlink" title="Next数组说明"></a>Next数组说明</h4><p>Next数组中，每个元素表示：</p><ul><li>截止到目前为止，最长相等前后缀的长度；</li><li>截止到目前为止，最长前缀的后一位。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getNext</span><span class="hljs-params">(next []<span class="hljs-type">int</span>, s <span class="hljs-type">string</span>)</span></span> &#123;<br>j := <span class="hljs-number">0</span><br>next[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br><span class="hljs-keyword">for</span> s[i] != s[j] &amp;&amp; j &gt; <span class="hljs-number">0</span> &#123;<br>j = next[j<span class="hljs-number">-1</span>]<br>&#125;<br><span class="hljs-keyword">if</span> s[i] == s[j] &#123;<br>j++<br>&#125;<br>next[i] = j<br><span class="hljs-comment">//fmt.Printf(&quot;第%v次循环后的next数组结果为:%v\n&quot;, i, next)</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strStr</span><span class="hljs-params">(haystack <span class="hljs-type">string</span>, needle <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(needle) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>next := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(needle))<br>getNext(next, needle)<br>j := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> haystack &#123;<br><span class="hljs-keyword">for</span> j &gt; <span class="hljs-number">0</span> &amp;&amp; haystack[i] != needle[j] &#123;<br>j = next[j<span class="hljs-number">-1</span>]<br>&#125;<br><span class="hljs-keyword">if</span> haystack[i] == needle[j] &#123;<br>j++<br>&#125;<br><span class="hljs-keyword">if</span> j == <span class="hljs-built_in">len</span>(needle) &#123;<br><span class="hljs-keyword">return</span> i - <span class="hljs-built_in">len</span>(needle) + <span class="hljs-number">1</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="459-重复的字符串"><a href="#459-重复的字符串" class="headerlink" title="459. 重复的字符串"></a>459. 重复的字符串</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/repeated-substring-pattern/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1cg41127fw">字符串这么玩，可有点难度！ | LeetCode：459.重复的子字符串</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>如果不使用KMP算法还是比较简单的，有很多东西语言已经帮我们实现好了。看了卡哥的讲解感叹这个思路。</p><p>构建一个新字符串<code>newString</code>为两个旧串<code>s</code>的拼接，但是要掐头去尾一个元素。如果<code>newString</code>仍然包含<code>s</code>，说明存在子串构成原字符串。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">repeatedSubstringPattern</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>newString := s + s<br>newString = newString[<span class="hljs-number">1</span> : <span class="hljs-built_in">len</span>(newString)<span class="hljs-number">-2</span>]<br><span class="hljs-keyword">return</span> strings.Contains(newString, s)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第八天 344. 反转字符串、541. 反转字符串II、剑指Offer 05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。</title>
    <link href="/post/6416b651.html"/>
    <url>/post/6416b651.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第八天-344-反转字符串、541-反转字符串II、剑指Offer-05-替换空格、151-翻转字符串里的单词、剑指Offer58-II-左旋转字符串。"><a href="#代码随想录算法训练营第八天-344-反转字符串、541-反转字符串II、剑指Offer-05-替换空格、151-翻转字符串里的单词、剑指Offer58-II-左旋转字符串。" class="headerlink" title="代码随想录算法训练营第八天| 344. 反转字符串、541. 反转字符串II、剑指Offer 05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。"></a>代码随想录算法训练营第八天| 344. 反转字符串、541. 反转字符串II、剑指Offer 05.替换空格、151.翻转字符串里的单词、剑指Offer58-II.左旋转字符串。</h1><h2 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a>344. 反转字符串</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/reverse-string/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1fV4y17748">字符串基础操作！ | LeetCode：344.反转字符串</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="/../images/day08/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt="截屏2023-09-28 14.28.20"></p><p>相同颜色的互换位置即可，即<code>i</code>与<code>len(s) - 1 - i</code>交换。<code>i</code>的范围到<code>len(s)/2</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(s []<span class="hljs-type">byte</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s)/<span class="hljs-number">2</span>; i++ &#123;<br>temp := s[i]<br>s[i] = s[<span class="hljs-built_in">len</span>(s)-i<span class="hljs-number">-1</span>]<br>s[<span class="hljs-built_in">len</span>(s)-i<span class="hljs-number">-1</span>] = temp<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541. 反转字符串II"></a>541. 反转字符串II</h2><blockquote><p>  题目链接：<a href="%5B%E5%8A%9B%E6%89%A3%E9%A2%98%E7%9B%AE%E9%93%BE%E6%8E%A5%5D(https://leetcode.cn/problems/reverse-string-ii/)">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1dT411j7NN">字符串操作进阶！ | LeetCode：541. 反转字符串II</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><img src="/../images/day08/%E5%8F%8D%E8%BD%AC2(1).png" alt="反转2(1)"></p><ol><li>如图，图中相同颜色的部分代表一个<code>2k</code>段，循环条件：<code>for i := 0; i &lt; len(s); i += 2 * k</code>。</li><li>相同颜色下，分为两段，前<code>k</code>段和后<code>k</code>段。前<code>k</code>段进行反转，后<code>k</code>段直接拼接。如果某一段到达了字符串<code>s</code>尾部，需要停止。</li><li>由于Go语言的字符串不可变，所以新建一个变量，一点点“组装”成最终结果。前<code>k</code>段翻转直接进行反向遍历。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">min</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &lt; b &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> b<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseStr</span><span class="hljs-params">(s <span class="hljs-type">string</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>newString := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i += <span class="hljs-number">2</span> * k &#123;<br><span class="hljs-keyword">for</span> j := min(<span class="hljs-built_in">len</span>(s), i+k) - <span class="hljs-number">1</span>; j &gt;= i; j-- &#123; <span class="hljs-comment">// 前k段</span><br>newString += <span class="hljs-type">string</span>(s[j])<br>&#125;<br><span class="hljs-keyword">for</span> j := i + k; j &lt; min(<span class="hljs-built_in">len</span>(s), i+<span class="hljs-number">2</span>*k); j++ &#123;  <span class="hljs-comment">// 后k段</span><br>newString += <span class="hljs-type">string</span>(s[j])<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> newString<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指Offer-05-替换空格、LCR22-路径加密"><a href="#剑指Offer-05-替换空格、LCR22-路径加密" class="headerlink" title="剑指Offer 05.替换空格、LCR22.路径加密"></a>剑指Offer 05.替换空格、LCR22.路径加密</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/%E5%89%91%E6%8C%87Offer05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.html">代码随想录(programmercarl.com)</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>直接投机取巧，新建一个字符串<code>newString</code>，遍历字符串<code>s</code>，如果<code>s[i] == &#39;.&#39;</code>，在<code>newString += &#39; &#39;</code>，否则<code>newString += s[i]</code></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pathEncryption</span><span class="hljs-params">(path <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>newString := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> _, v:= <span class="hljs-keyword">range</span> path&#123;<br><span class="hljs-keyword">if</span> v == <span class="hljs-string">&#x27;.&#x27;</span> &#123;<br>newString += <span class="hljs-string">&quot; &quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>newString += <span class="hljs-type">string</span>(v)<br>&#125;<br>&#125;<br>    <span class="hljs-keyword">return</span> newString<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/reverse-words-in-a-string/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html">代码随想录(programmercarl.com)</a></p><p>  视频链接：<a href="https://www.bilibili.com/video/BV1uT41177fX">字符串复杂操作拿捏了！ | LeetCode:151.翻转字符串里的单词</a></p><p>  状态：AC</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>使用双指针，<code>left</code>指针指向的是单词的起始位置，遍历字符串用的<code>i</code>找到单词末尾。</li><li>新建一个字符串数组<code>words</code>，将每个单词加入到其中</li><li>定义新字符串<code>newString</code>，将<code>words</code>中每个单词拼接到<code>newString</code>中（反向遍历<code>words</code>），并且如果不是最后一个单词则再加一个空格。</li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseWords</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>words := []<span class="hljs-type">string</span>&#123;&#125;<br>left := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br><span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27; &#x27;</span> &#123;<br><span class="hljs-keyword">if</span> s[left:i] != <span class="hljs-string">&quot;&quot;</span> &#123;<br>words = <span class="hljs-built_in">append</span>(words, s[left:i])<br>&#125;<br>left = i + <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(s)<span class="hljs-number">-1</span> &#123;<br>words = <span class="hljs-built_in">append</span>(words, s[left:])<br>&#125;<br>&#125;<br>newString := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(words) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br>newString += words[i]<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &#123;<br>newString += <span class="hljs-string">&quot; &quot;</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> newString<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Offer58-II-左旋转字符串"><a href="#Offer58-II-左旋转字符串" class="headerlink" title="Offer58-II.左旋转字符串"></a>Offer58-II.左旋转字符串</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html">代码随想录(programmercarl.com)</a></p><p>  状态：AC</p></blockquote><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>直接拼接</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><img src="/../images/day08/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A7%BB%E4%BD%8D.png" alt="字符串移位"></p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 方法一</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dynamicPassword</span><span class="hljs-params">(password <span class="hljs-type">string</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> password[target:] + password[:target]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 方法二</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(chars []<span class="hljs-type">byte</span>, left, right <span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> left &lt; right &#123;<br>        temp := chars[left]<br>        chars[left] = chars[right]<br>        chars[right] = temp<br>        left++<br>        right--<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dynamicPassword</span><span class="hljs-params">(password <span class="hljs-type">string</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    chars := []<span class="hljs-type">byte</span>(s)<br>    reverse(chars, <span class="hljs-number">0</span>, target - <span class="hljs-number">1</span>)<br>    reverse(chars, target, <span class="hljs-built_in">len</span>(chars) - <span class="hljs-number">1</span>)<br>    reverse(chars, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(chars) - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(chars)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。</title>
    <link href="/post/bc862a56.html"/>
    <url>/post/bc862a56.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第七天-454-四数相加II、383-赎金信、15-三数之和、18-四数之和。"><a href="#代码随想录算法训练营第七天-454-四数相加II、383-赎金信、15-三数之和、18-四数之和。" class="headerlink" title="代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。"></a>代码随想录算法训练营第七天| 454.四数相加II、383. 赎金信、15. 三数之和、18. 四数之和。</h1><h2 id="454-两数相加"><a href="#454-两数相加" class="headerlink" title="454. 两数相加"></a>454. 两数相加</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/4sum-ii/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1Md4y1Q7Yh">学透哈希表，map使用有技巧！LeetCode：454.四数相加II</a></p><p>  状态：TLE</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="思路一：暴力算法"><a href="#思路一：暴力算法" class="headerlink" title="思路一：暴力算法"></a>思路一：暴力算法</h4><p>暴力算法就不用解释了，每个元素都遍历下。定义<code>count</code>记录满足条件情况的个数。满足条件<code>count++</code>就好。不出意外的也肯定会超时。</p><h4 id="思路二：使用map"><a href="#思路二：使用map" class="headerlink" title="思路二：使用map"></a>思路二：使用map</h4><p>将<code>num4</code>的值存入到<code>map4</code>中的<code>key</code>，值出现的次数存为<code>value</code>。三层循环后接一个判断，判断第四个数是否在<code>map4</code>中，如果存在则总数加<code>value</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fourSumCount</span><span class="hljs-params">(nums1 []<span class="hljs-type">int</span>, nums2 []<span class="hljs-type">int</span>, nums3 []<span class="hljs-type">int</span>, nums4 []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>count := <span class="hljs-number">0</span><br>map4 := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums4 &#123;<br>map4[v]++<br>&#125;<br><span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> nums1 &#123;<br><span class="hljs-keyword">for</span> _, j := <span class="hljs-keyword">range</span> nums2 &#123;<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> nums3 &#123;<br><span class="hljs-keyword">if</span> v, ok := map4[<span class="hljs-number">0</span>-i-j-k]; ok &#123;<br>count += v<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure><p>结果你猜超时没有，肯定还是超时了。</p><h4 id="思路三：使用四个map"><a href="#思路三：使用四个map" class="headerlink" title="思路三：使用四个map"></a>思路三：使用四个map</h4><p>每个map中都存放<code>nums</code>中出现的数以及出现的次数。第一个map定义为<code>map1</code>，键是<code>k1</code>，值是<code>v1</code>，以此类推。</p><p>三层循环后判断<code>map4[0-k1-k2-k3]</code>是否存在，如果存在那么<code>count += v1 * v2 * v3 * v4</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go">count := <span class="hljs-number">0</span><br>map1 := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br>map2 := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br>map3 := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br>map4 := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(nums1); i++ &#123;<br>    map1[nums1[i]]++<br>    map2[nums2[i]]++<br>    map3[nums3[i]]++<br>    map4[nums4[i]]++<br>&#125;<br><span class="hljs-keyword">for</span> k1, v1 := <span class="hljs-keyword">range</span> map1 &#123;<br>    <span class="hljs-keyword">for</span> k2, v2 := <span class="hljs-keyword">range</span> map2 &#123;<br>        <span class="hljs-keyword">for</span> k3, v3 := <span class="hljs-keyword">range</span> map3 &#123;<br>            <span class="hljs-keyword">if</span> v4, ok := map4[<span class="hljs-number">0</span>-k1-k2-k3]; ok &#123;<br>                count += v1 * v2 * v3 * v4<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br></code></pre></td></tr></table></figure><p>结果你猜超时没有，肯定还是超时了。</p><p>原因如下：如果数组中重复的数不多，或者没有，就会退化成思路二。</p><p>想了许久，想不出优化的方法了，看了卡哥的题解，我就用我的理解描述一下。</p><h4 id="卡哥题解"><a href="#卡哥题解" class="headerlink" title="卡哥题解"></a>卡哥题解</h4><p>先计算<code>nums1</code>与<code>nums2</code>和，将两数组所有和的情况保存到<code>mapAB</code>中。key保存的是和，value保存的是和的个数。</p><p>再计算<code>nums3</code>与<code>nums4</code>和，判断<code>mapAB[0-k3-k4]</code>是否存在，若存在<code>count+=mapAB[0-k3-k4]</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fourSumCount</span><span class="hljs-params">(nums1 []<span class="hljs-type">int</span>, nums2 []<span class="hljs-type">int</span>, nums3 []<span class="hljs-type">int</span>, nums4 []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>count := <span class="hljs-number">0</span><br>mapAB := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> _, v1 := <span class="hljs-keyword">range</span> nums1 &#123;<br><span class="hljs-keyword">for</span> _, v2 := <span class="hljs-keyword">range</span> nums2 &#123;<br>mapAB[v1+v2]++<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> _, v3 := <span class="hljs-keyword">range</span> nums3 &#123;<br><span class="hljs-keyword">for</span> _, v4 := <span class="hljs-keyword">range</span> nums4 &#123;<br><span class="hljs-keyword">if</span> v, ok := mapAB[<span class="hljs-number">0</span>-v3-v4]; ok &#123;<br>count += v<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>要判断<code>ransomNote</code>是否含于<code>magazine</code>，先构建一个数组，存放<code>magazine</code>的情况，索引代表字母：0代表<code>&#39;a&#39;</code>，1代表<code>&#39;b&#39;</code>等等；值代表字母出现的次数。构建好后再遍历<code>ransomNote</code>串，将对应的字母数量减少一，如果不存在直接<code>return false</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">canConstruct</span><span class="hljs-params">(ransomNote <span class="hljs-type">string</span>, magazine <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ransomNote) &gt; <span class="hljs-built_in">len</span>(magazine) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>arr := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">26</span>)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> magazine &#123;<br>arr[v-<span class="hljs-string">&#x27;a&#x27;</span>]++<br>&#125;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ransomNote &#123;<br>arr[v-<span class="hljs-string">&#x27;a&#x27;</span>]--<br><span class="hljs-keyword">if</span> arr[v-<span class="hljs-string">&#x27;a&#x27;</span>] &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/3sum/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1GW4y127qo">梦破碎的地方！| LeetCode：15.三数之和</a></p><p>  状态：TLE</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>我投降了这道题，Go的底层现在有一个新的理解！</p><h4 id="方法一：回溯算法"><a href="#方法一：回溯算法" class="headerlink" title="方法一：回溯算法"></a>方法一：回溯算法</h4><p>首先先将<code>nums</code>排序，利用回溯算法得到所有的组合，选择排序的原因是因为这样得到的组合，即使是重复的也可以保证顺序一致，方便判断这个组合是否出现过。最终结果保存到变量<code>result</code>，得到的可能得组合保存到变量<code>path</code></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, index <span class="hljs-type">int</span>, result *[][]<span class="hljs-type">int</span>, path *[]<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(*path) == <span class="hljs-number">3</span> &#123;<br><span class="hljs-keyword">if</span> (*path)[<span class="hljs-number">0</span>]+(*path)[<span class="hljs-number">1</span>]+(*path)[<span class="hljs-number">2</span>] == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 后面的append()操作是深拷贝，所以这里使用temp保存path的值</span><br>            temp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(*path))  <br><span class="hljs-built_in">copy</span>(temp, *path)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> *result &#123;<br><span class="hljs-keyword">if</span> reflect.DeepEqual(temp, v) &#123;  <span class="hljs-comment">// 使用反射判断temp是否在result中</span><br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>*result = <span class="hljs-built_in">append</span>(*result, temp)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> i := index; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;<br>*path = <span class="hljs-built_in">append</span>(*path, nums[i])<br>backTracking(nums, i+<span class="hljs-number">1</span>, result, path)<br>*path = (*path)[:<span class="hljs-built_in">len</span>(*path)<span class="hljs-number">-1</span>]<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">threeSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> path []<span class="hljs-type">int</span><br>sort.Ints(nums)<br>backTracking(nums, <span class="hljs-number">0</span>, &amp;result, &amp;path)<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>结果你猜超时没有，肯定还是超时了。</p><p>这里我遇到了好多问题，首先是发现了<code>result = append(result, temp)</code>，这里<code>append</code>方法实际上是浅拷贝！也就是说以后<code>temp</code>的值，<code>result</code>也会变化。这也是我为什么用一个临时变量<code>temp</code>来保存<code>path</code>，而且使用的是<code>copy()</code>。</p><p>要判断<code>temp</code>是否存在于<code>result</code>中，那么则需要使用反射，进行深度判断<code>reflect.DeepEqual(temp, v)</code>。</p><h5 id="遇到最头大的问题！！！！！！"><a href="#遇到最头大的问题！！！！！！" class="headerlink" title="遇到最头大的问题！！！！！！"></a>遇到最头大的问题！！！！！！</h5><p>以前用别的语言写回溯，很自然的使用了全局变量，结果在Go语言中发生了奇妙的事情。请看截图</p><img src="../images/day07/使用全局变量leetcode.png" alt="使用全局变量leetcode" style="zoom:80%;" /><p>明明输入的只有0和1，怎么会输出了2。而且这个测试用例这么眼熟呢，没错这就是给出的测试用例Case1的答案。放到Goland里面明明是正确答案！到这里就变了，说明全局变量出现了问题。解决这个问题有两个想法：</p><ul><li>查找有没有类似C++中的<code>delete</code>，使用完变量之后释放掉。发现并没有。而且使用完变量应该在<code>threeSum()</code>之外了，函数内释放就没有结果了。</li><li><code>threeSum()</code>定义变量，使用指针传值。</li></ul><p>当然，第二种才是正解。改完之后就是上面放出来的代码了，超时。</p><h4 id="方法二：使用哈希"><a href="#方法二：使用哈希" class="headerlink" title="方法二：使用哈希"></a>方法二：使用哈希</h4><p>将<code>nums</code>进行排序，并哈希处理，定义变量<code>map1</code>用作哈希表，<code>nums</code>中的每个元素做key，value则是每个元素出现的次数。</p><p>使用两层for循环之后，判断<code>0-nums[i]-nums[j]</code>是否存在。若存在还需要判断每个数字出现的次数是否合法（例如<code>nums = [-1,0,1,2,-1,-4]</code>，如果找到一个组合是<code>[2, -4, 2]</code>则需要舍弃。之所以会出现这样，是因为两层for会找到<code>2</code>和<code>-4</code>，而<code>0-nums[i]-nums[j]</code>会找到重复的2）</p><p>找到组合之后，对组合再排序，判断<code>path</code>是否在<code>result</code>中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">threeSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br>sort.Ints(nums)<br>map1 := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums &#123;<br>map1[v]++<br>&#125;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;<br><span class="hljs-keyword">for</span> j := i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(nums); j++ &#123;<br><span class="hljs-keyword">if</span> v, ok := map1[-nums[i]-nums[j]]; ok &#123;<br>temp := []<span class="hljs-type">int</span>&#123;nums[i], nums[j], -nums[i] - nums[j]&#125;<br>sort.Ints(temp)<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> nums[i] == nums[j] || nums[j] == -nums[i]-nums[j] || nums[i] == -nums[i]-nums[j] &#123;<br>count = <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">if</span> nums[i] == nums[j] &amp;&amp; nums[j] == -nums[i]-nums[j] &#123;<br>count = <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">if</span> v &gt;= count &#123;<br>flag := <span class="hljs-literal">true</span><br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> result &#123;<br><span class="hljs-keyword">if</span> reflect.DeepEqual(value, temp) &#123;<br>flag = <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> flag &#123;<br>result = <span class="hljs-built_in">append</span>(result, temp)<br>&#125;<br><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>结果你猜超时没有，肯定还是超时了。</p><p>好了，我投降了，想不到好方法了。去看卡哥视频了。</p><h3 id="卡哥解法"><a href="#卡哥解法" class="headerlink" title="卡哥解法"></a>卡哥解法</h3><p><font color="red">这道题不适合用哈希表做</font>。双指针我想了一下也没有太想明白，主要还是去重操作。看了视频讲解很清楚了</p><ol><li><p>数组排序，方便后序操作</p></li><li><p>先找第一个数，使用一层<code>for</code>，指针为<code>i</code></p></li><li><p>找第二个、第三个数。分别用指针<code>left = i + 1</code>，<code>right = len(nums) - 1</code></p></li><li><p>剪枝：如果<code>i&gt;0</code>，那么直接<code>return</code>，说明后续不可能再有等于0的三元组了</p></li><li><p>判断<code>nums[i] + nums[left] + nums[right]</code>和0的情况</p><ul><li><code>nums[i] + nums[left] + nums[right] &gt; 0    right--</code></li><li><code>nums[i] + nums[left] + nums[right] &lt; 0    left++</code></li><li><code>nums[i] + nums[left] + nums[right] == 0</code> <ul><li>这个三元组放入到结果中，但是仍然要相向前进。对于<code>left</code>，如果如果一致前进得到的<code>nums[left]==nums[left+1]</code>，说明该三元组已经存在过了（<code>0, -1, -1, 1 ,1</code>）。<code>right</code>同理，<code>nums[right] == nums[right - 1]</code></li><li>找到各自不同的数<code>nums[left+1]</code>和<code>nums[right-1]</code>，再前进一个（<code>0, -1, -1, -2, 2, 1, 1</code>）</li></ul></li></ul></li><li><p><code>return result</code></p></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">threeSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br>sort.Ints(nums)<br>result := [][]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;<br><span class="hljs-keyword">if</span> nums[i] &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>] &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>left := i + <span class="hljs-number">1</span><br>right := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> left &lt; right &#123;<br><span class="hljs-keyword">if</span> nums[i]+nums[left]+nums[right] &gt; <span class="hljs-number">0</span> &#123;<br>right--<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[i]+nums[left]+nums[right] &lt; <span class="hljs-number">0</span> &#123;<br>left++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>result = <span class="hljs-built_in">append</span>(result, []<span class="hljs-type">int</span>&#123;nums[i], nums[left], nums[right]&#125;)<br><span class="hljs-keyword">for</span> left &lt; right &amp;&amp; nums[left] == nums[left+<span class="hljs-number">1</span>] &#123;<br>left++<br>&#125;<br><span class="hljs-keyword">for</span> left &lt; right &amp;&amp; nums[right] == nums[right<span class="hljs-number">-1</span>] &#123;<br>right--<br>&#125;<br>left++<br>right--<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然这个代码AC了，但是毫无成就感。现在是9月27日凌晨2:53，还有一道题。继续</p><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/4sum/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0018.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1DS4y147US">难在去重和剪枝！| LeetCode：18. 四数之和</a></p><p>  状态：AC</p></blockquote><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>算法同上题，只不过这次要先确定两个数，然后用<code>left</code>和<code>right</code>指针找第三个第四个数。有几点不同：</p><ul><li>这里不是与0作比较，而是<code>target</code>，不可以<code>nums[i] &gt; target</code>之后就<code>break</code>，因为如果有一堆负数相加一定出现越加越小，使得等于<code>target</code></li><li>数组长度可能小于4，需要额外判断</li><li>剪枝<code>i&gt;0</code>开始，<code>j&gt;i+1</code>开始，<code>j</code>永远在<code>i</code>后一位</li></ul><p>领悟了上一道题，这一题不难了</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fourSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> result [][]<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) &lt; <span class="hljs-number">4</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br>sort.Ints(nums)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-3</span>; i++ &#123;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>] &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> j := i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-2</span>; j++ &#123;<br><span class="hljs-keyword">if</span> j &gt; i+<span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j<span class="hljs-number">-1</span>] &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>left := j + <span class="hljs-number">1</span><br>right := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> left &lt; right &#123;<br><span class="hljs-keyword">if</span> nums[i]+nums[j]+nums[left]+nums[right] &lt; target &#123;<br>left++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[i]+nums[j]+nums[left]+nums[right] &gt; target &#123;<br>right--<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>result = <span class="hljs-built_in">append</span>(result, []<span class="hljs-type">int</span>&#123;nums[i], nums[j], nums[left], nums[right]&#125;)<br><span class="hljs-keyword">for</span> left &lt; right &amp;&amp; nums[left] == nums[left+<span class="hljs-number">1</span>] &#123;<br>left++<br>&#125;<br><span class="hljs-keyword">for</span> left &lt; right &amp;&amp; nums[right] == nums[right<span class="hljs-number">-1</span>] &#123;<br>right--<br>&#125;<br>left++<br>right--<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>Go的底层有了很多认识，是以前做题或者写项目时候意识不到的。尤其是浅拷贝与深拷贝，大概找到规律了，几乎都是浅拷贝，如果想要深拷贝一定要用<code>copy()</code></li><li>由于Go的特性，Go的全局变量不可以在leetcode使用，需要指针传值</li><li>晚安，准备睡觉了，3:20了，一觉起来是新的题，字符串要学KMP算法什么的了。</li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【debug】Java中的map比较</title>
    <link href="/post/ad5be9d7.html"/>
    <url>/post/ad5be9d7.html</url>
    
    <content type="html"><![CDATA[<h1 id="【debug】Java中的map比较"><a href="#【debug】Java中的map比较" class="headerlink" title="【debug】Java中的map比较"></a>【debug】Java中的map比较</h1><p>题目链接：<a href="https://leetcode.cn/problems/valid-anagram/">242. 有效的字母异位词</a></p><p>事情起因：（由于自己对Java了解不深、有表达错误的请指出，感谢！）</p><img src="../images/【debug】Java中的map比较/java_map_debug.jpg" alt="报错截图" style="zoom:100%;" /><p>群友发了一张代码截图，觉得自己写的代码并没有错，但是不能通过测试用例。</p><p>他的算法我简单说一下，有点麻烦，但算法不是这篇博客的重点。</p><ol><li>两个Map：<code>hashS</code>、<code>hashT</code>分别用于存放字符串<code>s</code>和<code>t</code>中字母出现的频率(19行之前)；</li><li>遍历长的字符串对应的Map，假设是<code>hashS</code>，判断<code>hashS</code>与<code>hashT</code>相同的字母频率是否一样，如果不一样则<code>return false</code></li></ol><p>当时我是在外面，看到了这段代码，理解了他的想法之后好像真的没什么问题。</p><h3 id="复现Bug与初步解决"><a href="#复现Bug与初步解决" class="headerlink" title="复现Bug与初步解决"></a>复现Bug与初步解决</h3><p>回来之后代码放到idea里面跑了一下，发现这个测试用例长度为50000位，而且每个字母出现的频率是一样的</p><img src="../images/【debug】Java中的map比较/hashST.png" alt="两个Map的内容" style="zoom:67%;" /><p>打上断点继续向下走，看看是哪一步出现了问题。</p><img src="../images/【debug】Java中的map比较/断点调试.png" alt="断点调试" style="zoom:67%;" /><p>没想到第一次循环就出错了，<code>hashT.get(c)</code>与<code>hashS.get(c)</code>的值都是1913，但是地址不一样，一个是<code>&#123;Integer@531&#125;</code>，一个是<code>&#123;Integer@587&#125;</code>。看来这里的<code>!=</code>判断的是地址而不是值，使用<code>equal()</code>方法即可，如下：</p><img src="../images/【debug】Java中的map比较/初步解决.png" alt="初步解决" style="zoom:67%;" /><h3 id="深层探索"><a href="#深层探索" class="headerlink" title="深层探索"></a>深层探索</h3><p>事情并没有真正的解决，既然群友能通过一些测试用例，说明了一些情况使用<code>!=</code>是可以用的，那几个测试用例都是用了很短的字符串，我也看下是什么情况，<code>s=&quot;anagram&quot;</code>，<code>t=&quot;nagaram&quot;</code>，这是个正确的用例，debug的结果是这样</p><img src="../images/【debug】Java中的map比较/短测试用例.png" alt="短测试用例" style="zoom:80%;" /><p>这可就是玄学了呀，短的数据不会出现问题，而长的会出现。</p><h4 id="猜想一：与Map的大小有关"><a href="#猜想一：与Map的大小有关" class="headerlink" title="猜想一：与Map的大小有关"></a>猜想一：与Map的大小有关</h4><p>因为长的测试用例有26个键值对（每个字母均出现），而短的只出现了5个字母。我设置测试用例<code>s = t = &quot;abcdefghijklmnopqrstuvwxyz&quot;</code>（以下简称字母表），让每个字母都出现一次。</p><img src="../images/【debug】Java中的map比较/26字母.png" alt="26字母" style="zoom:80%;" /><p>还是正常的，<font color="#ff0000">猜想错误</font></p><h4 id="猜想二：与测试用例的长度有关"><a href="#猜想二：与测试用例的长度有关" class="headerlink" title="猜想二：与测试用例的长度有关"></a>猜想二：与测试用例的长度有关</h4><p>接着我就多复制些字母表，出错误的是在50000的长度，我把字母表长度先放到3000多，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 扩增字符串代码代码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>    s += s;<br>    t += t;<br>&#125;<br></code></pre></td></tr></table></figure><img src="../images/【debug】Java中的map比较/3000多长度.png" alt="长度为3328" style="zoom:80%;" /><p>还是有错误，继续缩短长度，将扩增代码循环6次，减少一次再看看</p><img src="../images/【debug】Java中的map比较/6次扩增.png" alt="6次扩增" style="zoom:80%;" /><p>这次竟然又不出错了，玄学！妥妥的玄学！</p><p>我换了种思路，这次不用字母表了，只是用一个变量看看会不会触发这个BUG，如果依然触发，每次长度增加1，那么很快就会得到到底在多长的时候会出现。25行打上断点，被执行前一定会卡住。</p><img src="../images/【debug】Java中的map比较/展示代码.png" alt="展示代码" style="zoom:80%;" /><img src="../images/【debug】Java中的map比较/128卡住.png" alt="字母a出现了128次时候开始报错" style="zoom:80%;" /><p>最后做一次验证，是不是Map中，只要有val超过128就会发生地址改变的情况。这次的测试用例使用随机字母</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">26</span>) + <span class="hljs-number">97</span>;<br>    s += (<span class="hljs-type">char</span>)temp;<br>    t += (<span class="hljs-type">char</span>)temp;<br>    System.out.println(isAnagram(s, t));<br>&#125;<br></code></pre></td></tr></table></figure><img src="../images/【debug】Java中的map比较/26随机字母报错.png" alt="字母a出现了128次的时候开始报错" style="zoom:80%"/><p>很好！当字母w出现了超过128次时候地址发生了变化。128这个数字相信大家一定很敏感，那么这个范围很可能是[-128, 127]。那么则需要看看底层源码是怎么说的，去看看<code>Map.java</code>，搜索<code>127</code>，并没有发现相关说明。</p><img src="../images/【debug】Java中的map比较/map源码.png" alt="map源码" style="zoom:80%;" /><p><code>&#123;Integer@***&#125;</code>这里面经常变得数字就是星号部分，那么去<code>Ieteger.java</code>里面看看有什么发现。</p><img src="../images/【debug】Java中的map比较/第一个127.png" alt="搜索结果1" style="zoom:80%;" /><img src="../images/【debug】Java中的map比较/最后一个127.png" alt="搜索结果2" style="zoom:80%;" /><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>结合这两段我悟了，果然有这么个范围，在初始化值的时候，[-128, 127]这个范围的数是在缓存里面，所以当<code>Map</code>中的<code>value</code>小于128时候读取的是缓存中的数，所以他们地址是一样的，也就是<code>hashS.get(c)==hashT.get(c)</code>的原因。当超过这个范围，则会在新的地方存放一个值，尽管<code>hashS.get(c)</code>和<code>hashT.get(c)</code>均为128，但是使用<code>==</code>或<code>!=</code>判断的时候，判断的是<strong>地址</strong>，得到<code>hashS.get(c)!=hashT.get(c)</code>。</p><h4 id="所以一定要写equal-方法进行判断"><a href="#所以一定要写equal-方法进行判断" class="headerlink" title="所以一定要写equal()方法进行判断"></a>所以一定要写equal()方法进行判断</h4><h4 id="所以一定要写equal-方法进行判断-1"><a href="#所以一定要写equal-方法进行判断-1" class="headerlink" title="所以一定要写equal()方法进行判断"></a>所以一定要写equal()方法进行判断</h4><h4 id="所以一定要写equal-方法进行判断-2"><a href="#所以一定要写equal-方法进行判断-2" class="headerlink" title="所以一定要写equal()方法进行判断"></a>所以一定要写equal()方法进行判断</h4><p><code>hashS.get(c).equal(hashT.get(c))</code>，这样判断的才是值而不是地址</p>]]></content>
    
    
    <categories>
      
      <category>Debug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Debug</tag>
      
      <tag>LeetCode</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。</title>
    <link href="/post/20198d61.html"/>
    <url>/post/20198d61.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第六天-242-有效的字母异位词、349-两个数组的交集、202-快乐数、1-两数之和-。"><a href="#代码随想录算法训练营第六天-242-有效的字母异位词、349-两个数组的交集、202-快乐数、1-两数之和-。" class="headerlink" title="代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。"></a>代码随想录算法训练营第六天| 242.有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和 。</h1><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/valid-anagram/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1YG411p7BA">学透哈希表，数组使用有技巧！Leetcode：242.有效的字母异位词</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li><p>方法一：使用<code>map</code>即可。键是字母的<code>ASCII</code>码、值为频率。分别用两个串构建两个<code>map</code>，再比较两个<code>map</code>是否相同。</p></li><li><p>方法二：看了卡哥给的代码发现优化空间还是很大的，使用一个<code>map</code>即可，存放<code>s</code>的情况。异位词满足两个条件：</p><ul><li>两个串等长。</li><li>两个串中字母出现的频率相同。这一点可以用<code>s</code>串的<code>map</code>的<code>value</code>自减。</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//麻烦的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(s <span class="hljs-type">string</span>, t <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>words1 := <span class="hljs-keyword">map</span>[<span class="hljs-type">byte</span>]<span class="hljs-type">int</span>&#123;&#125;<br>words2 := <span class="hljs-keyword">map</span>[<span class="hljs-type">byte</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br>_, ok := words1[s[i]]<br><span class="hljs-keyword">if</span> ok &#123;<br>words1[s[i]] += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>words1[s[i]] = <span class="hljs-number">1</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(t); i++ &#123;<br>_, ok := words2[t[i]]<br><span class="hljs-keyword">if</span> ok &#123;<br>words2[t[i]] += <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>words2[t[i]] = <span class="hljs-number">1</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> reflect.DeepEqual(words1, words2)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 简单的代码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(s, t <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) != <span class="hljs-built_in">len</span>(t) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>cnt := <span class="hljs-keyword">map</span>[<span class="hljs-type">rune</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> _, ch := <span class="hljs-keyword">range</span> s &#123;<br>cnt[ch]++<br>&#125;<br><span class="hljs-keyword">for</span> _, ch := <span class="hljs-keyword">range</span> t &#123;<br>cnt[ch]--<br><span class="hljs-keyword">if</span> cnt[ch] &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/intersection-of-two-arrays/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1ba411S7wu">学透哈希表，set使用有技巧！Leetcode：349. 两个数组的交集</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>从求交集可以看出是要使用集合的结构，但是在Go语言中<font color="#ff0000">并没有</font>集合，所以我使用了<code>map</code>（并不是用map模拟set）。map中，键为<code>nums1</code>的每个元素，值只有三种状态：第一次出现是<code>0</code>，多次出现是<code>1</code>，在<code>nums2</code>也出现过是<code>2</code>，最后遍历map，找到值为2的key。</p><p>利用const和iota模拟枚举类型。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>NEW = <span class="hljs-literal">iota</span><br>EXIST1<br>EXIST2<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">intersection</span><span class="hljs-params">(nums1 []<span class="hljs-type">int</span>, nums2 []<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>set := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;  <span class="hljs-comment">//类集合操作</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums1 &#123;<br><span class="hljs-keyword">if</span> _, ok := set[v]; !ok &#123;<br>set[v] = NEW  <span class="hljs-comment">// 第一个出现</span><br>&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 多次出现</span><br>set[v] = EXIST1<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums2 &#123;<br><span class="hljs-keyword">if</span> _, ok := set[v]; ok &#123;  <span class="hljs-comment">// nums2也出现</span><br>set[v] = EXIST2<br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> set &#123;<br><span class="hljs-keyword">if</span> v == EXIST2 &#123;<br>result = <span class="hljs-built_in">append</span>(result, k)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/happy-number/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html#%E6%80%9D%E8%B7%AF">代码随想录(programmercarl.com)</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>构造一个集合，用于存放每一次拆数求平方和的结果</li><li>拆数</li><li>判断结果是否是1，如果是<code>return true</code></li><li>如果不是1，判断结果是否在集合中，如果存在则说明出现了循环，<code>return false</code></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isHappy</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>set := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>&#123;&#125;  <span class="hljs-comment">// 模拟集合</span><br><span class="hljs-keyword">for</span> &#123;<br>sum := <span class="hljs-number">0</span><br>        <span class="hljs-comment">//拆数求平方和</span><br><span class="hljs-keyword">for</span> n &gt; <span class="hljs-number">0</span> &#123;<br>sum += (n % <span class="hljs-number">10</span>) * (n % <span class="hljs-number">10</span>)<br>n /= <span class="hljs-number">10</span><br>&#125;<br>        <span class="hljs-comment">//得到正确答案</span><br><span class="hljs-keyword">if</span> sum == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>        <br>        <span class="hljs-comment">//结果不在集合中则放入集合</span><br><span class="hljs-keyword">if</span> _, ok := set[sum]; !ok &#123;<br>set[sum] = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 否则退出循环 return false</span><br><span class="hljs-keyword">break</span><br>&#125;<br>n = sum <span class="hljs-comment">// 新一轮的数</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/two-sum/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1aT41177mK">梦开始的地方，Leetcode：1.两数之和</a></p><p>  状态：AC</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>遍历<code>nums</code>将元素存为<code>map</code>的<code>key</code>，将元素的索引存放为<code>map</code>的<code>value</code>；</li><li>再遍历<code>nums</code>，查看<code>target - v</code>是否在<code>key</code>中，并返回两个值：<code>nums</code>元素的索引和<code>map[target-v]</code></li></ol><p>遍历两次还是思路上走弯路了，一次即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//遍历两次</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    mapNums := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> nums &#123;<br>       mapNums[v] = i<br>    &#125;<br>    <span class="hljs-keyword">var</span> result []<span class="hljs-type">int</span><br>    <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> nums &#123;<br>       <span class="hljs-keyword">if</span> _, ok := mapNums[target-v]; ok &amp;&amp; mapNums[target-v] != i &#123;<br>          result = <span class="hljs-built_in">append</span>(result, i)<br>          result = <span class="hljs-built_in">append</span>(result, mapNums[target-v])<br>          <span class="hljs-keyword">break</span><br>       &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>mapNums := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> nums &#123;<br><span class="hljs-keyword">if</span> value, ok := mapNums[target-v]; ok &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;i, value&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>mapNums[v] = i<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>这次的题目不算很难，做起来就很快，算上写博客的时间不到两个小时</p></li><li><p>对Go语言的map有了新的理解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">test = <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">if</span> value, ok := test[key]; ok &#123;<br><span class="hljs-comment">// key存在的情况</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// key不存在的情况</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 使用反射来判断两个map是否相等</span><br><span class="hljs-keyword">import</span> reflect<br>reflect.DeepEqual(map1, map2)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">test = <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br>test[<span class="hljs-number">1</span>]--  <span class="hljs-comment">// 即使不存在1，默认新增键值对&#123;1:0&#125;，然后再自减</span><br></code></pre></td></tr></table></figure></li><li><p>第一次使用Go模拟枚举</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>A <span class="hljs-literal">iota</span><br>    B<br>    C<br>)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。</title>
    <link href="/post/b4e3c0b1.html"/>
    <url>/post/b4e3c0b1.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第四天-24-两两交换链表中的节点、19-删除链表的倒数第N个节点、面试题02-07-链表相交、142-环形链表II。"><a href="#代码随想录算法训练营第四天-24-两两交换链表中的节点、19-删除链表的倒数第N个节点、面试题02-07-链表相交、142-环形链表II。" class="headerlink" title="代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。"></a>代码随想录算法训练营第四天| 24.两两交换链表中的节点、19.删除链表的倒数第N个节点、面试题02.07.链表相交、142.环形链表II。</h1><h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24.两两交换链表中的节点"></a>24.两两交换链表中的节点</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0024.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1YT411g7br">帮你把链表细节学清楚！ | LeetCode：24. 两两交换链表中的节点</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>定义新的头结点，定义指针<code>p = newHead</code>，定义两个新的结点<code>tempNode1.Val = 2</code>，<code>tempNode2.Val = 1</code>（这里的值<code>1</code>和<code>2</code>是为了简化描述）</li></ol><img src="../images/day04/IMG_1372.PNG" alt="链表相关指针（变量说明）" style="zoom:80%;" /><ol start="2"><li>使用新的结点重新进行连接，并且<code>p</code>前进到下一个位置（注意连接顺序，防止断链）<ul><li><code>tempNode2.Next = p.Next.Next.Next</code></li><li><code>tempNode1.Next = tempNode2</code></li><li><code>p.Next = tempNode1</code></li><li><code>p = p.Next.Next</code></li></ul></li></ol><img src="../images/day04/IMG_1373.PNG" alt="IMG_1373" style="zoom:80%;" /><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapPairs</span><span class="hljs-params">(head *ListNode)</span></span> *ListNode &#123;<br>newHead := &amp;ListNode&#123;<br>Val:  <span class="hljs-number">0</span>,<br>Next: head,<br>&#125;<br>p := newHead<br><span class="hljs-keyword">for</span> p.Next != <span class="hljs-literal">nil</span> &amp;&amp; p.Next.Next != <span class="hljs-literal">nil</span> &#123;<br>tempNode1 := &amp;ListNode&#123;<br>Val:  p.Next.Next.Val,<br>Next: <span class="hljs-literal">nil</span>,<br>&#125;<br>tempNode2 := &amp;ListNode&#123;<br>Val:  p.Next.Val,<br>Next: p.Next.Next.Next,<br>&#125;<br>tempNode1.Next = tempNode2<br>p.Next = tempNode1<br>p = p.Next.Next<br>&#125;<br><span class="hljs-keyword">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E6%80%9D%E8%B7%AF">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1vW4y1U7Gf">链表遍历学清楚！ | LeetCode：19.删除链表倒数第N个节点</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>定义两个指针<code>p</code>和<code>q</code>，指针<code>p</code>先出发，指针<code>q</code>保持与<code>p</code>距离为<code>n</code>之后再出发，这样<code>q.Next</code>则是待删除的元素。</p><blockquote><p>  会不会出现<code>n</code>大于链表长度的情况（例如链表长度为5，删除倒数第8个元素）：不会，leetcode题解中给出。</p>  <img src="../images/day04/QQ20230923-221152.png" alt="题目说明" style="zoom:80%;" /></blockquote><img src="../images/day04/IMG_2D422EDB0DFC-1.jpeg" alt="图解" style="zoom:80%;" /><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(head *ListNode, n <span class="hljs-type">int</span>)</span></span> *ListNode &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br>newHead := &amp;ListNode&#123;<br>Val:  <span class="hljs-number">0</span>,<br>Next: head,<br>&#125;<br>p := newHead<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= n; i++ &#123;<br>p = p.Next<br>&#125;<br>q := newHead<br><span class="hljs-keyword">for</span> p != <span class="hljs-literal">nil</span> &#123;<br>p = p.Next<br>q = q.Next<br>&#125;<br><span class="hljs-keyword">if</span> q.Next.Next != <span class="hljs-literal">nil</span> &#123;<br>q.Next = q.Next.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>q.Next = <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面试题02-07-链表相交"><a href="#面试题02-07-链表相交" class="headerlink" title="面试题02.07.链表相交"></a>面试题02.07.链表相交</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html">代码随想录(programmercarl.com)</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>假设是两个一维数组（只是为了方便逻辑上描述），查看是否相交，那么需要“尾部对齐”。假设长的链表开始的索引为0，我们需要从短的数组的开始。大意如下图</p><img src="../images/day04/160_1.png" alt="判断第一组结点" style="zoom:80%;" /><img src="../images/day04/160_2.png" alt="判断第二组结点" style="zoom:80%;" /><img src="../images/day04/160_3.png" alt="判断第三组结点" style="zoom:80%;" /><p>走到末尾都没发现有相同地址的节点则不存在相交的情况。</p><ul><li>尾部对齐操作：遍历两个链表（一组指针<code>p = newHeadA.Next</code>和<code>q = newHeadB.Next</code>），求各自的长度。</li><li>重新定义一组指针（<code>p1 = newHeadA.Next</code>和<code>q1 = newHeadB.Next</code>），让其中更长的链表的指针移动到和短的同步位置<font color="#bdbdbd">（这里可能是Go语言的特性？C语言不需要此操作，不重新定义指针p和q回不到起始位置）</font></li><li>同时向前移动，判断是否地址相同</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(headA, headB *ListNode)</span></span> *ListNode &#123;<br>    <span class="hljs-comment">// 定义两个新的头，指向传参的头</span><br>    newHeadA := &amp;ListNode &#123;<br>        Val: <span class="hljs-number">0</span>,<br>        Next: headA,<br>    &#125;<br>    newHeadB := &amp;ListNode &#123;<br>        Val: <span class="hljs-number">0</span>,<br>        Next: headB,<br>    &#125;<br>    <span class="hljs-comment">// 求两个链表各自的长度</span><br>    p := newHeadA.Next<br>    lenA := <span class="hljs-number">0</span><br>    q := newHeadB.Next<br>    lenB := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> p != <span class="hljs-literal">nil</span> &#123;<br>        p = p.Next<br>        lenA++<br>    &#125;<br>    <span class="hljs-keyword">for</span> q != <span class="hljs-literal">nil</span> &#123;<br>        q = q.Next<br>        lenB++<br>    &#125;<br>    <br>    <span class="hljs-comment">// 定义两个新的指针，进行“对齐”操作</span><br>    p1 := newHeadA.Next<br>    q1 := newHeadB.Next<br>    <span class="hljs-keyword">if</span> lenA &lt; lenB &#123;<br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; lenB - lenA; i++ &#123;<br>            q1 = q1.Next<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; lenA - lenB; i++ &#123;<br>            p1 = p1.Next<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 对齐后向前查找，找到了返回结点，否则为nil</span><br>    <span class="hljs-keyword">for</span> p1 != <span class="hljs-literal">nil</span> &amp;&amp; q1 != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">if</span> p1 == q1 &#123;<br>            <span class="hljs-keyword">return</span> p1<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            p1 = p1.Next<br>            q1 = q1.Next<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142. 环形链表II"></a>142. 环形链表II</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/linked-list-cycle-ii/">力扣题目链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1if4y1d7ob">把环形链表讲清楚！| LeetCode:142.环形链表II</a></p><p>  状态：想不出思路后看了卡哥的讲解恍然大悟，AC！</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p><s><font color="#FF0000">最开始没有审题，当成了这道题是在问是否存在环，后来发现这只是第一问</font></s></p><p>这道题需要返回的是：如果链表有环，那么返回最后一个结点链接到了哪个结点上。</p><ol><li><p>首先要找到，链表是否有环，这里使用的是快慢指针的算法，快指针速度为2，慢指针速度为1。若快指针走到了终点说明没有环；如果两个指针相遇说明有环。</p><blockquote><p>  因为相对速度差1，所以二者必相遇</p></blockquote></li><li><p>找到入口：（卡哥视频讲的很好，如果有疑问一定<strong>看完视频</strong>再提问）</p></li></ol><img src="../images/day04/142_1.jpeg" alt="142_1" style="zoom:80%;" /><p>为什么一圈必定会追上：假设他们同时进入入口（整个链表就是个环），慢指针走一圈后，快指针走两圈。如果快指针先进入，那么追上慢指针必定走不到一圈。</p><p>最后推出来x&#x3D;z，意味着此时的快指针降速（速度变为1），同时新定义的指针从头开始运动，两者必定在入口处相遇</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">detectCycle</span><span class="hljs-params">(head *ListNode)</span></span> *ListNode &#123;<br>    fast := head<br>    slow := head<br>    p := head<br>    <span class="hljs-comment">// 这层for寻找环</span><br>    <span class="hljs-keyword">for</span> fast != <span class="hljs-literal">nil</span> &#123;<br>        slow = slow.Next<br>        fast = fast.Next<br>        <span class="hljs-keyword">if</span> fast != <span class="hljs-literal">nil</span> &#123;<br>            fast = fast.Next<br>            <span class="hljs-keyword">if</span> slow == fast &#123;  <span class="hljs-comment">// 两指针相遇说明有环</span><br>            <span class="hljs-keyword">for</span> p != fast &#123;  <span class="hljs-comment">// 这层for执行的是公式中x=z的一步</span><br>                p = p.Next<br>                fast = fast.Next<br>            &#125;<br>            <span class="hljs-keyword">return</span> p<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;        <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>今天重新写了下链表的实现（主要是vscode没有装调试leetcode插件），部分题都是自己在GoLand中自己写函数构造的链表，最后单独写了个文件保存这部分代码（主要就是新建链表和打印链表），新建链表是通过一个数组传要初始化的值。当然了，今天的也只有两道题可以用，后两道直接在leetcode的网页上写了，看起来挺复杂的还担心不好debug，理清思路之后写起来很快，也不会出错。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> InitLinkList<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br>Val  <span class="hljs-type">int</span><br>Next *ListNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InsertElem</span><span class="hljs-params">(head *ListNode, nums []<span class="hljs-type">int</span>)</span></span> *ListNode &#123;<br>newHead := &amp;ListNode&#123;<br>Val:  <span class="hljs-number">0</span>,<br>Next: head,<br>&#125;<br>p := newHead<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums &#123;<br>p.Next = &amp;ListNode&#123;<br>Val:  v,<br>Next: <span class="hljs-literal">nil</span>,<br>&#125;<br>p = p.Next<br>&#125;<br><span class="hljs-keyword">return</span> newHead.Next<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(head *ListNode)</span></span> &#123;<br>p := head<br><span class="hljs-keyword">for</span> p != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\t&quot;</span>, p.Val)<br>p = p.Next<br>&#125;<br>fmt.Println()<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>Go有些语法还不是很了解，今天发现了跨文件调用需要将<code>变量名</code>和<code>函数名</code>首字母大写，也叫作导出。从一些语法来看Go现在给我的感觉他就不想Java那种强面向对象编程。这点还挺好的（对我个人而言），很灵活，调用的时候也不需要实例化（也没这一种说法）。</p></li><li><p>后三道题（最后一道题指的求是否存在环的过程）考研复习408的时候已经见过，只不过这次的身份发生了变化，面对这道题状态也不同。考研复习时候遇到手撕代码的题首先想到的是如何拿分，没思路就暴力算法。有额外时间再考虑优化。如果再试卷上我可能会使用空间复杂度更大的算法，空间换时间。但是现在在求职中，要好好的理解每一道题，每一种优化的思路，题干加以限制：<code>空间复杂度为O(1)</code>。真的需要认真思考，链表相交没有想出来，看了卡哥的讲解理解了。</p></li><li><p>现在的刷题状态是这样的：多给自己思考的时间争取想到最优的解法。无论是否解出来再去看看卡哥的讲解和代码，看看别人写的和自己写的差距在哪。我的代码现在经常出现这种逻辑，对于个别情况需要单独判断，而别人的则不需要，因为自己在边界情况考虑的欠妥。明天周日休息一天。但是事情还是挺多的。</p></li></ul><p><font color="#3914a5">第一周打卡结束！4天结束！</font></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。</title>
    <link href="/post/bd069431.html"/>
    <url>/post/bd069431.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。"><a href="#代码随想录算法训练营第三天-203-移除链表元素、707-设计链表、206-反转链表。" class="headerlink" title="代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。"></a>代码随想录算法训练营第三天| 203.移除链表元素、707.设计链表、206.反转链表。</h1><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a>203. 移除链表元素</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/remove-linked-list-elements/">leetcode题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html">代码随想录(programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV18B4y1s7R9">链表基础操作| LeetCode：203.移除链表元素</a></p><p>状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>删除元素还是比较简单的，假设<code>q = p.Next</code>，如果删除<code>q</code>则是<code>p.Next = p.Next.Next</code>，考虑下<code>p.Next.Next</code>是否存在即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeElements</span><span class="hljs-params">(head *ListNode, val <span class="hljs-type">int</span>)</span></span> *ListNode &#123;<br>newHead := <span class="hljs-built_in">new</span>(ListNode)<br>newHead.Next = head<br>p := newHead<br><span class="hljs-keyword">for</span> p.Next != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> p.Next.Val == val &#123;<br>p.Next = p.Next.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>p = p.Next<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> newHead.Next<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707. 设计链表"></a>707. 设计链表</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/design-linked-list/">leetcode题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html">代码随想录(programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1FU4y1X7WD">帮你把链表操作学个通透！LeetCode：707.设计链表</a></p><p>状态：半AC（AC了但是也没完全AC）</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li><code>(this *MyLinkedList)get(index int) int</code>: 先判断index是否合法，所以需要引入一个新的成员对象<code>size</code>在<code>MyLinkedList</code>中</li><li><code>(this *MyLinkedList)AddAtHead(val int)</code>: 头插法只需要在新的头之后接入一个新的节点，然后<code>size++</code></li><li><code>(this *MyLinkedList)AddAtTail(val int)</code>: 尾插法只需要在整个链表之后接入一个新的节点，然后<code>size++</code></li><li><code>(this *MyLinkedList)DeleteAtIndex(index int)</code>: 删除一个元素类似上一题，只不过要判断index是否合法</li><li><code>(this *MyLinkedList)AddAtIndex(index int, val)</code>: 先判断index是否合法，找到正确位置进行插入</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">type</span> LinkList <span class="hljs-keyword">struct</span> &#123;<br>Val  <span class="hljs-type">int</span><br>Next *LinkList<br>&#125;<br><br><span class="hljs-keyword">type</span> MyLinkedList <span class="hljs-keyword">struct</span> &#123;<br>size    <span class="hljs-type">int</span><br>newHead *LinkList<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span></span> MyLinkedList &#123;<br><span class="hljs-comment">//return MyLinkedList&#123;&#125;</span><br>node := &amp;LinkList&#123;<br>Val:  <span class="hljs-number">0</span>,<br>Next: <span class="hljs-literal">nil</span>,<br>&#125;<br><span class="hljs-keyword">return</span> MyLinkedList&#123;<br>newHead: node,<br>size:    <span class="hljs-number">0</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyLinkedList)</span></span> Get(index <span class="hljs-type">int</span>) <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> index &lt; <span class="hljs-number">0</span> || index &gt;= this.size || this == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br>p := this.newHead.Next<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; index; i++ &#123;<br>p = p.Next<br>&#125;<br><span class="hljs-keyword">return</span> p.Val<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyLinkedList)</span></span> AddAtHead(val <span class="hljs-type">int</span>) &#123;<br>newNode := &amp;LinkList&#123;<br>Val:  val,<br>Next: this.newHead.Next,<br>&#125;<br>this.newHead.Next = newNode<br>this.size++<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyLinkedList)</span></span> AddAtTail(val <span class="hljs-type">int</span>) &#123;<br>newNode := &amp;LinkList&#123;<br>Val:  val,<br>Next: <span class="hljs-literal">nil</span>,<br>&#125;<br>p := this.newHead<br><span class="hljs-keyword">for</span> p.Next != <span class="hljs-literal">nil</span> &#123;<br>p = p.Next<br>&#125;<br>p.Next = newNode<br>this.size++<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyLinkedList)</span></span> AddAtIndex(index <span class="hljs-type">int</span>, val <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">if</span> index &lt; <span class="hljs-number">0</span> &#123;<br>index = <span class="hljs-number">0</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> index &gt; this.size &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>newNode := &amp;LinkList&#123;<br>Val:  val,<br>Next: <span class="hljs-literal">nil</span>,<br>&#125;<br>p := this.newHead<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; index; i++ &#123;<br>p = p.Next<br>&#125;<br>newNode.Next = p.Next<br>p.Next = newNode<br>this.size++<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyLinkedList)</span></span> DeleteAtIndex(index <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">if</span> index &lt; <span class="hljs-number">0</span> || index &gt;= this.size &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>p := this.newHead<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; index; i++ &#123;<br>p = p.Next<br>&#125;<br><span class="hljs-keyword">if</span> p.Next != <span class="hljs-literal">nil</span> &#123;<br>p.Next = p.Next.Next<br>&#125;<br>this.size--<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/reverse-linked-list/">leetcode题目链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html">代码随想录(programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1nB4y1i7eL">帮你拿下反转链表 | LeetCode：206.反转链表</a></p><p>状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>建立新的头结点<code>newHead</code> ，使其<code>newHead.Next = head</code>。</li><li>定义指针<code>p = head.Next</code>(先判断head是否为单节点)，然后手动断链，<code>head.Next = nil</code></li><li>指针<code>p</code>不断向后，每遍历到一个元素，将这个元素保存到新的节点<code>newNode</code>，并且不断头插到<code>newHead</code></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addAtHead</span><span class="hljs-params">(head *ListNode, val <span class="hljs-type">int</span>)</span></span> *ListNode &#123;<br>newHead := &amp;ListNode&#123;<br>Val:  <span class="hljs-number">0</span>,<br>Next: head,<br>&#125;<br>newNode := &amp;ListNode&#123;<br>Val:  val,<br>Next: newHead.Next,<br>&#125;<br>newHead.Next = newNode<br><span class="hljs-keyword">return</span> newHead.Next<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(head *ListNode)</span></span> *ListNode &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br>p := head.Next<br>head.Next = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">for</span> p != <span class="hljs-literal">nil</span> &#123;<br>head = addAtHead(head, p.Val)<br>p = p.Next<br>&#125;<br><span class="hljs-keyword">return</span> head<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>leetcode上的链表的题都是无头链表，所谓的 <code>head</code> 被叫做 <code>虚拟头</code>。我感觉还是叫做无头链表好一些，新建一个头先链接无头链表</p></li><li><p>以前写过的都是有头链表，换到了无头链表刚开始有点不知所措、插入时候感觉怪怪的，其实都一样</p></li><li><p><code>Go</code>的<code>new</code>相关或者初始化成员变量有了新的理解</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SSS <span class="hljs-keyword">struct</span> &#123;<br>    Val <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-comment">//初始化的方式1</span><br>a := <span class="hljs-built_in">new</span> SSS(<span class="hljs-number">1</span>)<br>a.Val = <span class="hljs-number">1</span><br><br><span class="hljs-comment">//初始化的方式2</span><br>a := &amp;SSS&#123;<br>    Val: <span class="hljs-number">1</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>Go</code>的构造函数看起来还有点懵</p></li><li><p>最近事情太多了，周六上午招聘会、下午学校组织的求职训练营、晚上继续leetcode；周日上午训练营结课、下午再重写下链表、搞搞课题；周一还有个小活动。加油！</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。</title>
    <link href="/post/b79a1ea.html"/>
    <url>/post/b79a1ea.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。"><a href="#代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。" class="headerlink" title="代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。"></a>代码随想录算法训练营第二天| 977.有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。</h1><h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">leetcode链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1QB4y1D7ep">双指针法经典题目 | LeetCode：977.有序数组的平方</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先想到的是暴力算法，将每个元素计算平方，之后再将数组进行排序，此时的时间复杂度为<code>O(nlog n)</code>。但是并不满足题目中要求的<code>O(n)</code>，因为有一个条件我们还没有用上：<strong>非递减顺序数组</strong>。看了题解之后才清楚更好的方法：<strong>双指针算法</strong>。</p><p>由于是非递减的数组，而且会有负数，那么在平方之后，得到的新数组的最后一位一定会在原数组的起始或者末尾位置。那么使用双指针算法相向遍历即可，得到最大的值放入到新数组的末尾。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sortedSquares</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>n := <span class="hljs-built_in">len</span>(nums)<br>result := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n)<br>left := <span class="hljs-number">0</span><br>right := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i := right; i &gt;= <span class="hljs-number">0</span>; i-- &#123;  <span class="hljs-comment">// i为result的索引</span><br><span class="hljs-keyword">if</span> nums[left]*nums[left] &lt; nums[right]*nums[right] &#123;  <span class="hljs-comment">// right侧更大</span><br>result[i] = nums[right] * nums[right]<br>right--<br>&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// left侧更大</span><br>result[i] = nums[left] * nums[left]<br>left++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">leetcode链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1tZ4y1q7XE">拿下滑动窗口！ | LeetCode 209 长度最小的子数组</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>此题需要找最短连续的一子数组，能想到的是 <strong>滑动窗口</strong> 算法。</p><ol><li>设最短子数组长度<code>minLength</code>为无穷大，题目规定长度最大为100000，<code>minLength=100001</code>即可。</li><li>右侧不断向前，直至这一子数组的和大于 <code>target</code></li><li>子序列和大于target之后，左侧也不断向前，直至子数组和小于 <code>target</code>，记录下此刻的序列长度，并与 <code>minLength</code> 进行比较。</li><li>循环条件：当右侧到头，并且此时的子数组的和小于<code>target</code></li><li>退出循环后，如果<code>minLength</code>依旧等于100001，说明不存在满足要求的子数组，则返回<code>0</code></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(target <span class="hljs-type">int</span>, nums []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>left := <span class="hljs-number">0</span><br>right := <span class="hljs-number">0</span><br>sum := <span class="hljs-number">0</span><br>minLength := <span class="hljs-number">100001</span><br>length := <span class="hljs-built_in">len</span>(nums)<br><span class="hljs-keyword">for</span> left &lt;= right &amp;&amp; right &lt;= length &#123;<br><span class="hljs-keyword">if</span> sum &lt; target &#123;<br><span class="hljs-keyword">if</span> right &lt; length &#123;<br>sum += nums[right]<br>right++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> minLength &gt; right-left &#123;<br>minLength = right - left<br>&#125;<br>sum -= nums[left]<br>left++<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> minLength == <span class="hljs-number">100001</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">return</span> minLength<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59.螺旋矩阵II"></a>59.螺旋矩阵II</h2><blockquote><p>题目链接：<a href="https://leetcode.cn/problems/spiral-matrix-ii/">leetcode链接</a></p><p>文章讲解：<a href="https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html">代码随想录(programmercarl.com)</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1SL4y1N7mV/">一入循环深似海 | LeetCode：59.螺旋矩阵II</a></p><p>状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><img src="/../images/day02/image-20230921130326208.png" alt="image-20230921130326208"></p><ol><li><p>循环次数是<code>n/2</code></p></li><li><p>每次循环时候按照<font color="#4664b9">蓝色</font>、<font color="#4f7633">绿色</font>、<font color="#b0871e">黄色</font>、<font color="#622a93">紫色</font>的顺序填数字， 数字保持自增，保存结果的数组为<code>results</code></p></li><li><p>各个颜色的范围，注意是从大到小还是从小到大：</p><p><font color="#4664b9">蓝色的范围：results[top][left ~ right - 1]</font><br><font color="#4f7633">绿色的范围：results[top ~ bottom - 1][right]</font></p><p><font color="#b0871e">黄色的范围：results[bottom][right ~ left + 1]</font></p><p><font color="#622a93">紫色的范围：results[bottom ~ top + 1][left]</font></p></li><li><p>每一轮过后，<code>top++</code>、<code>bottom--</code>、<code>left++</code>、<code>right--</code></p></li><li><p>额外的，如果n为基数，最中心的数字是在循环条件之外的，需要额外加上。</p></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">generateMatrix</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br>top := <span class="hljs-number">0</span><br>bottom := n - <span class="hljs-number">1</span><br>left := <span class="hljs-number">0</span><br>right := n - <span class="hljs-number">1</span><br>result := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int</span>, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>result[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n)<br>&#125;<br>num := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n/<span class="hljs-number">2</span>; i++ &#123;<br><span class="hljs-keyword">for</span> j := left; j &lt; right; j++ &#123;<br>result[top][j] = num<br>num++<br>&#125;<br><br><span class="hljs-keyword">for</span> j := top; j &lt; bottom; j++ &#123;<br>result[j][right] = num<br>num++<br>&#125;<br><br><span class="hljs-keyword">for</span> j := right; j &gt; left; j-- &#123;<br>result[bottom][j] = num<br>num++<br>&#125;<br><span class="hljs-keyword">for</span> j := bottom; j &gt; top; j-- &#123;<br>result[j][left] = num<br>num++<br>&#125;<br>top++<br>left++<br>right--<br>bottom--<br>&#125;<br><span class="hljs-keyword">if</span> n%<span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123;<br>result[n/<span class="hljs-number">2</span>][n/<span class="hljs-number">2</span>] = num<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>帮助了群里一些录友解决了些问题，能看出来他们也比较萌新，想起了自己最开始大一学的时候，但是自己并没有坚持下去，很可惜。</p></li><li><p>Go语言在初始化数组时候还不是很熟练，写的时候一直在思考int类型二维数组怎么初始化，但是用切片写起来还是简单一些吧</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">result := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int</span>, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>    result[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>今天还有点别的事情，先写这么多，扩展题先不写了</p></li><li><p>打卡第二天！</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。</title>
    <link href="/post/7b6fd36a.html"/>
    <url>/post/7b6fd36a.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第一天-704-二分查找、27-移除元素。"><a href="#代码随想录算法训练营第一天-704-二分查找、27-移除元素。" class="headerlink" title="代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。"></a>代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。</h1><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/binary-search/">leetcode链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV1fA4y1o715">手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找</a></p><p>  状态：AC</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>看了卡哥的文档，才注意到二分查找也有两种写法。”要<strong>熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法</strong>“。回头看自己的代码是左闭右闭的写法，再改写成左闭右开也不难，只需要更改边界条件即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">search</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-comment">// 左闭右闭写法</span><br>left := <span class="hljs-number">0</span><br>right := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> mid <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> left &lt;= right &#123;<br>mid = (left + right) / <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> nums[mid] &lt; target &#123;<br>left = mid + <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[mid] &gt; target &#123;<br>right = mid - <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> mid<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">search1</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-comment">// 左闭右开写法</span><br>left := <span class="hljs-number">0</span><br>right := <span class="hljs-built_in">len</span>(nums)<br><span class="hljs-keyword">var</span> mid <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> left &lt; right &#123;<br>mid = (left + right) / <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> nums[mid] &lt; target &#123;<br>left = mid + <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[mid] &gt; target &#123;<br>right = mid<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> mid<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/remove-element/">leetcode链接</a></p><p>  文章讲解：<a href="https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html">代码随想录(programmercarl.com)</a></p><p>  视频讲解：<a href="https://www.bilibili.com/video/BV12A4y1Z7LP">数组中移除元素并不容易！ | LeetCode：27. 移除元素</a></p><p>  状态：AC</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>第一眼看到时，题目要求”不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地修改输入数组</strong>“。能想到的就是将待删除的后面的元素向前移动达到删除效果，但是时间复杂度为<code>O(n^2)</code>。再向下看到了示例：</p><p><strong>示例 1：</strong></p><blockquote><p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p>看到这里大概理解了，想到的解法是双指针，方法也有两种。</p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><ol><li>左右指针均从头开始，右指针每次向前一步</li><li>若右指针的值为<code>val</code>，那么跳过；否则将右指针的值给左指针，左指针++</li><li>返回左指针所在的索引</li></ol><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><ol><li>左指针从前开始，右指针从后开始，左指针找<code>val</code>，右指针找非<code>val</code></li><li>右指针的值给左指针</li><li>返回左指针所在的索引</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 方法一</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, val <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>n := <span class="hljs-built_in">len</span>(nums)<br>left := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> right := <span class="hljs-number">0</span>; right &lt; n; right++ &#123;<br><span class="hljs-keyword">if</span> nums[right] != val &#123;<br>nums[left] = nums[right]<br>left++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 方法二</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, val <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>left := <span class="hljs-number">0</span><br>right := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> left &lt;= right &#123;<br><span class="hljs-keyword">for</span> left &lt;= right &#123;<br><span class="hljs-keyword">if</span> nums[left] == val &#123;<br><span class="hljs-keyword">break</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>left++<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> left &lt;= right &#123;<br><span class="hljs-keyword">if</span> nums[right] != val &#123;<br><span class="hljs-keyword">break</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>right--<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> left &lt; right &#123;<br>nums[left] = nums[right]<br>left++<br>right--<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二还是的边界条件有点绕的，自己把自己绕进去了</p><p><img src="/../images/day01/image-20230920140818304.png" alt="绕晕了的边界"></p><h2 id="附加题-35-搜索插入位置"><a href="#附加题-35-搜索插入位置" class="headerlink" title="附加题 35. 搜索插入位置"></a>附加题 35. 搜索插入位置</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></p><p>  状态：AC</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>查找，而且是有序，不难想到二分查找。这不过这里不是匹配的情况，而是有可能不匹配。无论是否匹配，只需返回左边界即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>left := <span class="hljs-number">0</span><br>right := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> mid <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> left &lt;= right &#123;<br>mid = (left + right) / <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> nums[mid] == target &#123;<br><span class="hljs-keyword">return</span> mid<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[mid] &lt; target &#123;<br>left = mid + <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>right = mid - <span class="hljs-number">1</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> left<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="附加题34-在排序数组中查找元素的第一个和最后一个位置"><a href="#附加题34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="附加题34.在排序数组中查找元素的第一个和最后一个位置"></a>附加题34.在排序数组中查找元素的第一个和最后一个位置</h2><blockquote><p>  题目链接：<a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/">34.在排序数组中查找元素的第一个和最后一个位置</a></p><p>  状态：AC</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>通过两次二分查找找到<code>target</code>在数组中的起始和结束位置，实现了函数<code>binary</code>可以两次调用。但是判断起始位置和结束位置需要额外的判断条件：</p><ul><li>起始：需要判断<code>num[mid-1]&lt;target</code>，或者<code>mid==0</code>（第0个元素就是起始位置），为了保证不越界，需要先判断<code>mid==0</code>的情况</li><li>结束：需要判断<code>mid == len(nums)-1</code>（最后一个元素是结束位置），或者<code>nums[mid+1] &gt; target</code></li></ul><p>如果没有找到该元素，则返回<code>-1</code>。由于起始和介绍条件判断有些不同，<code>binary</code>函数中使用了<code>flag</code>来区分是进行起始元素查找还是结束元素查找的条件。若是<code>true</code>则为查找起始元素</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">searchRange</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>result := []<span class="hljs-type">int</span>&#123;&#125;<br>    <span class="hljs-keyword">var</span> temp <span class="hljs-type">int</span><br>    temp = binary(nums, target, <span class="hljs-literal">true</span>)<br>    <span class="hljs-keyword">if</span> temp == <span class="hljs-number">-1</span> &#123;  <span class="hljs-comment">// 如果查找开始元素为-1，说明该数不存在，第二次二分不需要进行</span><br>        <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>result = <span class="hljs-built_in">append</span>(result, temp)<br>        result = <span class="hljs-built_in">append</span>(result, binary(nums, target, <span class="hljs-literal">false</span>))<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">binary</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>, flag <span class="hljs-type">bool</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>left := <span class="hljs-number">0</span><br>right := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> left &lt;= right &#123;<br>mid := left + (right-left)/<span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> flag &#123;<br><span class="hljs-keyword">if</span> nums[mid] == target &amp;&amp; (mid == <span class="hljs-number">0</span> || nums[mid<span class="hljs-number">-1</span>] &lt; target) &#123;<br><span class="hljs-keyword">return</span> mid<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[mid] &lt; target &#123;<br>left = mid + <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>right = mid - <span class="hljs-number">1</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> nums[mid] == target &amp;&amp; (mid == <span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span> || nums[mid+<span class="hljs-number">1</span>] &gt; target) &#123;<br><span class="hljs-keyword">return</span> mid<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[mid] &lt;= target &#123;<br>left = mid + <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>right = mid - <span class="hljs-number">1</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/day01/image-20230920152650727.png" alt="AC！"></p><h3 id="官方解法"><a href="#官方解法" class="headerlink" title="官方解法"></a>官方解法</h3><h4 id="Go语言版本"><a href="#Go语言版本" class="headerlink" title="Go语言版本"></a>Go语言版本</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">searchRange</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    leftmost := sort.SearchInts(nums, target)<br>    <span class="hljs-keyword">if</span> leftmost == <span class="hljs-built_in">len</span>(nums) || nums[leftmost] != target &#123;<br>        <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;<br>    &#125;<br>    rightmost := sort.SearchInts(nums, target + <span class="hljs-number">1</span>) - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;leftmost, rightmost&#125;<br>&#125;<br><br>作者：力扣官方题解<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure><p><code>sort.SearchInts()</code>函数没有接触过，看看源码</p><img src="../images/day01/image-20230920152855240.png" alt="sort.SearchInts()源码" style="zoom:67%;" /><blockquote><p>  SearchInts在整型数组的有序切片中搜索x，并返回由Search指定的索引。如果x不存在，返回值是插入x的索引(可以是len(a))。<br>  切片必须按升序排序。</p></blockquote><h4 id="C-版本"><a href="#C-版本" class="headerlink" title="C++版本"></a>C++版本</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123; <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target, <span class="hljs-type">bool</span> lower)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = (<span class="hljs-type">int</span>)nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, ans = (<span class="hljs-type">int</span>)nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>                ans = mid;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> leftIdx = <span class="hljs-built_in">binarySearch</span>(nums, target, <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">int</span> rightIdx = <span class="hljs-built_in">binarySearch</span>(nums, target, <span class="hljs-literal">false</span>) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (leftIdx &lt;= rightIdx &amp;&amp; rightIdx &lt; nums.<span class="hljs-built_in">size</span>() &amp;&amp; nums[leftIdx] == target &amp;&amp; nums[rightIdx] == target) &#123;<br>            <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;leftIdx, rightIdx&#125;;<br>        &#125; <br>        <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>    &#125;<br>&#125;;<br><br>作者：力扣官方题解<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure><p>官方题解在找结束元素是找到了下一位，可以通过减一操作得到正确答案。但是他们实现的二分函数的<code>true</code>和<code>false</code>对条件控制的很巧妙。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>在二分查找时又学到了一种思路，”左闭右开“</p></li><li><p>群里面有位同学说到了这个事情，之前从未注意过：</p><img src="../images/day01/image-20230920153829216.png" alt="群友聊天" style="zoom:80%;" /><p>看别人的二分确实发现了第一种写法，但是并不是很理解，也没有很在意。</p></li></ul><p>今天总用时三个小时多一些，做了四道题，感觉良好。第一天结束！！</p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>代码随想录</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客</title>
    <link href="/post/5c83b0d3.html"/>
    <url>/post/5c83b0d3.html</url>
    
    <content type="html"><![CDATA[<h1 id="搭建Hexo博客"><a href="#搭建Hexo博客" class="headerlink" title="搭建Hexo博客"></a>搭建Hexo博客</h1><p>根据程序羊的视频搭建而成，整理下步骤和与当时不同之处</p><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty/">https://www.bilibili.com/video/BV1Yb411a7ty/</a></p><h2 id="1-安装node-js与npm"><a href="#1-安装node-js与npm" class="headerlink" title="1. 安装node.js与npm"></a>1. 安装node.js与npm</h2><p>略。</p><p>有“魔法”的不需要下载<code>cnpm</code>包，此后以<code>npm</code>为例</p><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h2><p><code>npm install -g hexo-cli</code></p><p><code>hexo -v </code>查看是否安装成功</p><h2 id="3-选址"><a href="#3-选址" class="headerlink" title="3. 选址"></a>3. 选址</h2><p>在合适的地方新建一个专门用于存放博客的文件夹（假设文件夹名为 <code>blog</code> ，并且看做根目录），在该路径下开始操作。</p><ul><li><p>执行 <code>hexo init</code> 初始化，<code>Linux\MacOS</code> 需要 <code>sudo</code>权限</p></li><li><p>生成一些文件与文件夹，一些配置在文件 <code>blog/_config.yml</code> 中</p></li></ul><h2 id="4-部署至GitHub的准备工作"><a href="#4-部署至GitHub的准备工作" class="headerlink" title="4. 部署至GitHub的准备工作"></a>4. 部署至GitHub的准备工作</h2><ol><li><p>在该路径下执行命令: <code>npm install --save-deployer-git</code> 安装相关工具</p></li><li><p>在GitHub新建仓库，仓库名必须为: <code>GitHub的用户名.github.io</code></p></li><li><p>更改<code>_config.yml</code>文件中的内容(在最后)：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure></li><li><p>GitHub更新了认证方式，具体操作可以参考这一篇<a href="https://blog.csdn.net/weixin_63031041/article/details/128731242">博客</a></p></li></ol><h2 id="5-相关命令"><a href="#5-相关命令" class="headerlink" title="5. 相关命令"></a>5. 相关命令</h2><ol><li><p>运行(本地预览): <code>hexo s</code></p></li><li><p>写新的博客: <code>hexo n &quot;文件名&quot;</code></p></li><li><p>写好之后生成静态网站: <code>hexo g</code></p></li><li><p>清空第三步生成的文件: <code>hexo clean</code></p></li><li><p>推送至GitHub(会有一定的延迟): <code>hexo d</code></p><p> 使用“魔法”后，GitHub需要设置代理</p><p> <code>git config --global http.proxy http://127.0.0.1:port</code></p><p> <code>git config --global https.proxy https://127.0.0.1:port</code></p></li></ol><h2 id="6-更换主题"><a href="#6-更换主题" class="headerlink" title="6. 更换主题"></a>6. 更换主题</h2><p>可以直接在搜索引擎搜索相关关键字，例如<code>hexo 主题</code>，以我现在使用的<code>Fluid</code>为例</p><p>GitHub地址: <a href="https://github.com/fluid-dev/hexo-theme-fluid/tree/master">https://github.com/fluid-dev/hexo-theme-fluid/tree/master</a></p><ol><li>在博客目录下克隆, 至<code>blog/themes</code>文件夹下: <code>git clone https://github.com/fluid-dev/hexo-theme-fluid/tree/master themes/fluid</code></li><li>更改<code>blog/_config.yml</code> 第100行，将<code>theme: </code>后改为<code>fluid</code></li><li>更多具体配置参考官方文档: <a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></li><li>大段文字需要换行需要使用<code>HTML</code>语法</li></ol><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h2><p>这里面还有很多有意思的功能没探索、没开发。留给接下来的时间。也慢慢优化这个小网站。</p><p>参加“代码随想录”的训练营，虽然有点晚，但是还来得及。搭建了一个博客，主要还是写给自己，记录这一路的成长，当然也不单单的只这一路。</p><p>很喜欢郭帆导演的一句话，让我放在了首页开屏</p><p>&#x3D;&#x3D;如果你想再次拥有你从未有过的东西，那么你必须再次去做你从未做过的事情。这还不是结束，这是再次的开始！&#x3D;&#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>搭建环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
